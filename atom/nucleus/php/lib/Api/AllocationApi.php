<?php
/**
 * AllocationApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\nucleus\ApiException;
use com\hydrogen\nucleus\Configuration;
use com\hydrogen\nucleus\HeaderSelector;
use com\hydrogen\nucleus\ObjectSerializer;

/**
 * AllocationApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllocationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAllocationCompositionUsingPost
     *
     * Create an allocation composition
     *
     * @param  \com\hydrogen\nucleus\Model\AllocationComposition $alloc_request allocRequest (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AllocationComposition
     */
    public function createAllocationCompositionUsingPost($alloc_request)
    {
        list($response) = $this->createAllocationCompositionUsingPostWithHttpInfo($alloc_request);
        return $response;
    }

    /**
     * Operation createAllocationCompositionUsingPostWithHttpInfo
     *
     * Create an allocation composition
     *
     * @param  \com\hydrogen\nucleus\Model\AllocationComposition $alloc_request allocRequest (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AllocationComposition, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAllocationCompositionUsingPostWithHttpInfo($alloc_request)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationComposition';
        $request = $this->createAllocationCompositionUsingPostRequest($alloc_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AllocationComposition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAllocationCompositionUsingPostAsync
     *
     * Create an allocation composition
     *
     * @param  \com\hydrogen\nucleus\Model\AllocationComposition $alloc_request allocRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAllocationCompositionUsingPostAsync($alloc_request)
    {
        return $this->createAllocationCompositionUsingPostAsyncWithHttpInfo($alloc_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAllocationCompositionUsingPostAsyncWithHttpInfo
     *
     * Create an allocation composition
     *
     * @param  \com\hydrogen\nucleus\Model\AllocationComposition $alloc_request allocRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAllocationCompositionUsingPostAsyncWithHttpInfo($alloc_request)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationComposition';
        $request = $this->createAllocationCompositionUsingPostRequest($alloc_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAllocationCompositionUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AllocationComposition $alloc_request allocRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAllocationCompositionUsingPostRequest($alloc_request)
    {
        // verify the required parameter 'alloc_request' is set
        if ($alloc_request === null || (is_array($alloc_request) && count($alloc_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alloc_request when calling createAllocationCompositionUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/allocation_composition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($alloc_request)) {
            $_tempBody = $alloc_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAllocationUsingPost
     *
     * Create an allocation
     *
     * @param  \com\hydrogen\nucleus\Model\Allocation $allocation_request allocationRequest (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Allocation
     */
    public function createAllocationUsingPost($allocation_request)
    {
        list($response) = $this->createAllocationUsingPostWithHttpInfo($allocation_request);
        return $response;
    }

    /**
     * Operation createAllocationUsingPostWithHttpInfo
     *
     * Create an allocation
     *
     * @param  \com\hydrogen\nucleus\Model\Allocation $allocation_request allocationRequest (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Allocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAllocationUsingPostWithHttpInfo($allocation_request)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Allocation';
        $request = $this->createAllocationUsingPostRequest($allocation_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Allocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAllocationUsingPostAsync
     *
     * Create an allocation
     *
     * @param  \com\hydrogen\nucleus\Model\Allocation $allocation_request allocationRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAllocationUsingPostAsync($allocation_request)
    {
        return $this->createAllocationUsingPostAsyncWithHttpInfo($allocation_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAllocationUsingPostAsyncWithHttpInfo
     *
     * Create an allocation
     *
     * @param  \com\hydrogen\nucleus\Model\Allocation $allocation_request allocationRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAllocationUsingPostAsyncWithHttpInfo($allocation_request)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Allocation';
        $request = $this->createAllocationUsingPostRequest($allocation_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAllocationUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\Allocation $allocation_request allocationRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAllocationUsingPostRequest($allocation_request)
    {
        // verify the required parameter 'allocation_request' is set
        if ($allocation_request === null || (is_array($allocation_request) && count($allocation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_request when calling createAllocationUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/allocation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($allocation_request)) {
            $_tempBody = $allocation_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllocationCompositionUsingDelete
     *
     * Delete an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllocationCompositionUsingDelete($allocation_composition_id)
    {
        $this->deleteAllocationCompositionUsingDeleteWithHttpInfo($allocation_composition_id);
    }

    /**
     * Operation deleteAllocationCompositionUsingDeleteWithHttpInfo
     *
     * Delete an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllocationCompositionUsingDeleteWithHttpInfo($allocation_composition_id)
    {
        $returnType = '';
        $request = $this->deleteAllocationCompositionUsingDeleteRequest($allocation_composition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllocationCompositionUsingDeleteAsync
     *
     * Delete an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllocationCompositionUsingDeleteAsync($allocation_composition_id)
    {
        return $this->deleteAllocationCompositionUsingDeleteAsyncWithHttpInfo($allocation_composition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllocationCompositionUsingDeleteAsyncWithHttpInfo
     *
     * Delete an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllocationCompositionUsingDeleteAsyncWithHttpInfo($allocation_composition_id)
    {
        $returnType = '';
        $request = $this->deleteAllocationCompositionUsingDeleteRequest($allocation_composition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllocationCompositionUsingDelete'
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAllocationCompositionUsingDeleteRequest($allocation_composition_id)
    {
        // verify the required parameter 'allocation_composition_id' is set
        if ($allocation_composition_id === null || (is_array($allocation_composition_id) && count($allocation_composition_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_composition_id when calling deleteAllocationCompositionUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/allocation_composition/{allocation_composition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($allocation_composition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_composition_id' . '}',
                ObjectSerializer::toPathValue($allocation_composition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAllocationUsingDelete
     *
     * Delete an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAllocationUsingDelete($allocation_id)
    {
        $this->deleteAllocationUsingDeleteWithHttpInfo($allocation_id);
    }

    /**
     * Operation deleteAllocationUsingDeleteWithHttpInfo
     *
     * Delete an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAllocationUsingDeleteWithHttpInfo($allocation_id)
    {
        $returnType = '';
        $request = $this->deleteAllocationUsingDeleteRequest($allocation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAllocationUsingDeleteAsync
     *
     * Delete an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllocationUsingDeleteAsync($allocation_id)
    {
        return $this->deleteAllocationUsingDeleteAsyncWithHttpInfo($allocation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAllocationUsingDeleteAsyncWithHttpInfo
     *
     * Delete an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAllocationUsingDeleteAsyncWithHttpInfo($allocation_id)
    {
        $returnType = '';
        $request = $this->deleteAllocationUsingDeleteRequest($allocation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAllocationUsingDelete'
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAllocationUsingDeleteRequest($allocation_id)
    {
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling deleteAllocationUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/allocation/{allocation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationAllAggregateDataUsingGet
     *
     * List all Allocation aggregated data overview
     *
     * @param  string $allocation_id Allocation Id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AllocationAggregatedVO
     */
    public function getAllocationAllAggregateDataUsingGet($allocation_id)
    {
        list($response) = $this->getAllocationAllAggregateDataUsingGetWithHttpInfo($allocation_id);
        return $response;
    }

    /**
     * Operation getAllocationAllAggregateDataUsingGetWithHttpInfo
     *
     * List all Allocation aggregated data overview
     *
     * @param  string $allocation_id Allocation Id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AllocationAggregatedVO, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationAllAggregateDataUsingGetWithHttpInfo($allocation_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationAggregatedVO';
        $request = $this->getAllocationAllAggregateDataUsingGetRequest($allocation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AllocationAggregatedVO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationAllAggregateDataUsingGetAsync
     *
     * List all Allocation aggregated data overview
     *
     * @param  string $allocation_id Allocation Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllAggregateDataUsingGetAsync($allocation_id)
    {
        return $this->getAllocationAllAggregateDataUsingGetAsyncWithHttpInfo($allocation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationAllAggregateDataUsingGetAsyncWithHttpInfo
     *
     * List all Allocation aggregated data overview
     *
     * @param  string $allocation_id Allocation Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllAggregateDataUsingGetAsyncWithHttpInfo($allocation_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationAggregatedVO';
        $request = $this->getAllocationAllAggregateDataUsingGetRequest($allocation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationAllAggregateDataUsingGet'
     *
     * @param  string $allocation_id Allocation Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationAllAggregateDataUsingGetRequest($allocation_id)
    {
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling getAllocationAllAggregateDataUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/allocation/{allocation_id}/aggregate_data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationAllAssetSizeAllUsingGet
     *
     * List all allocation asset sizes
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  string $sort_type D (Daily), Q (quarterly), M (Monthly), Y (Annually) (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\DateDoubleVO[]
     */
    public function getAllocationAllAssetSizeAllUsingGet($allocation_id, $end_date = null, $get_latest = null, $is_current_weight = 'true', $sort_type = null, $start_date = null)
    {
        list($response) = $this->getAllocationAllAssetSizeAllUsingGetWithHttpInfo($allocation_id, $end_date, $get_latest, $is_current_weight, $sort_type, $start_date);
        return $response;
    }

    /**
     * Operation getAllocationAllAssetSizeAllUsingGetWithHttpInfo
     *
     * List all allocation asset sizes
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  string $sort_type D (Daily), Q (quarterly), M (Monthly), Y (Annually) (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\DateDoubleVO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationAllAssetSizeAllUsingGetWithHttpInfo($allocation_id, $end_date = null, $get_latest = null, $is_current_weight = 'true', $sort_type = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\DateDoubleVO[]';
        $request = $this->getAllocationAllAssetSizeAllUsingGetRequest($allocation_id, $end_date, $get_latest, $is_current_weight, $sort_type, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\DateDoubleVO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationAllAssetSizeAllUsingGetAsync
     *
     * List all allocation asset sizes
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  string $sort_type D (Daily), Q (quarterly), M (Monthly), Y (Annually) (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllAssetSizeAllUsingGetAsync($allocation_id, $end_date = null, $get_latest = null, $is_current_weight = 'true', $sort_type = null, $start_date = null)
    {
        return $this->getAllocationAllAssetSizeAllUsingGetAsyncWithHttpInfo($allocation_id, $end_date, $get_latest, $is_current_weight, $sort_type, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationAllAssetSizeAllUsingGetAsyncWithHttpInfo
     *
     * List all allocation asset sizes
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  string $sort_type D (Daily), Q (quarterly), M (Monthly), Y (Annually) (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllAssetSizeAllUsingGetAsyncWithHttpInfo($allocation_id, $end_date = null, $get_latest = null, $is_current_weight = 'true', $sort_type = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\DateDoubleVO[]';
        $request = $this->getAllocationAllAssetSizeAllUsingGetRequest($allocation_id, $end_date, $get_latest, $is_current_weight, $sort_type, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationAllAssetSizeAllUsingGet'
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional)
     * @param  bool $is_current_weight is_current_weight (optional, default to true)
     * @param  string $sort_type D (Daily), Q (quarterly), M (Monthly), Y (Annually) (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationAllAssetSizeAllUsingGetRequest($allocation_id, $end_date = null, $get_latest = null, $is_current_weight = 'true', $sort_type = null, $start_date = null)
    {
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling getAllocationAllAssetSizeAllUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/allocation/{allocation_id}/asset_size';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($get_latest !== null) {
            $queryParams['get_latest'] = ObjectSerializer::toQueryValue($get_latest);
        }
        // query params
        if ($is_current_weight !== null) {
            $queryParams['is_current_weight'] = ObjectSerializer::toQueryValue($is_current_weight);
        }
        // query params
        if ($sort_type !== null) {
            $queryParams['sort_type'] = ObjectSerializer::toQueryValue($sort_type);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationAllHoldingAllUsingGet
     *
     * List all allocation holdings
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\ModelHoldingVO[]
     */
    public function getAllocationAllHoldingAllUsingGet($allocation_id, $end_date = null, $start_date = null)
    {
        list($response) = $this->getAllocationAllHoldingAllUsingGetWithHttpInfo($allocation_id, $end_date, $start_date);
        return $response;
    }

    /**
     * Operation getAllocationAllHoldingAllUsingGetWithHttpInfo
     *
     * List all allocation holdings
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\ModelHoldingVO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationAllHoldingAllUsingGetWithHttpInfo($allocation_id, $end_date = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\ModelHoldingVO[]';
        $request = $this->getAllocationAllHoldingAllUsingGetRequest($allocation_id, $end_date, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\ModelHoldingVO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationAllHoldingAllUsingGetAsync
     *
     * List all allocation holdings
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllHoldingAllUsingGetAsync($allocation_id, $end_date = null, $start_date = null)
    {
        return $this->getAllocationAllHoldingAllUsingGetAsyncWithHttpInfo($allocation_id, $end_date, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationAllHoldingAllUsingGetAsyncWithHttpInfo
     *
     * List all allocation holdings
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllHoldingAllUsingGetAsyncWithHttpInfo($allocation_id, $end_date = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\ModelHoldingVO[]';
        $request = $this->getAllocationAllHoldingAllUsingGetRequest($allocation_id, $end_date, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationAllHoldingAllUsingGet'
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  \DateTime $end_date end date (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationAllHoldingAllUsingGetRequest($allocation_id, $end_date = null, $start_date = null)
    {
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling getAllocationAllHoldingAllUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/allocation/{allocation_id}/holding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationAllTransactionAllUsingGet
     *
     * List all allocation transactions
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageModelTransaction_
     */
    public function getAllocationAllTransactionAllUsingGet($allocation_id, $ascending = 'false', $end_date = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        list($response) = $this->getAllocationAllTransactionAllUsingGetWithHttpInfo($allocation_id, $ascending, $end_date, $order_by, $page, $size, $start_date);
        return $response;
    }

    /**
     * Operation getAllocationAllTransactionAllUsingGetWithHttpInfo
     *
     * List all allocation transactions
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageModelTransaction_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationAllTransactionAllUsingGetWithHttpInfo($allocation_id, $ascending = 'false', $end_date = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageModelTransaction_';
        $request = $this->getAllocationAllTransactionAllUsingGetRequest($allocation_id, $ascending, $end_date, $order_by, $page, $size, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageModelTransaction_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationAllTransactionAllUsingGetAsync
     *
     * List all allocation transactions
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllTransactionAllUsingGetAsync($allocation_id, $ascending = 'false', $end_date = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        return $this->getAllocationAllTransactionAllUsingGetAsyncWithHttpInfo($allocation_id, $ascending, $end_date, $order_by, $page, $size, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationAllTransactionAllUsingGetAsyncWithHttpInfo
     *
     * List all allocation transactions
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllTransactionAllUsingGetAsyncWithHttpInfo($allocation_id, $ascending = 'false', $end_date = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageModelTransaction_';
        $request = $this->getAllocationAllTransactionAllUsingGetRequest($allocation_id, $ascending, $end_date, $order_by, $page, $size, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationAllTransactionAllUsingGet'
     *
     * @param  string $allocation_id UUID allocation_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationAllTransactionAllUsingGetRequest($allocation_id, $ascending = 'false', $end_date = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling getAllocationAllTransactionAllUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/allocation/{allocation_id}/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationAllUsingGet
     *
     * List all allocations
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageAllocation_
     */
    public function getAllocationAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getAllocationAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getAllocationAllUsingGetWithHttpInfo
     *
     * List all allocations
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageAllocation_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAllocation_';
        $request = $this->getAllocationAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageAllocation_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationAllUsingGetAsync
     *
     * List all allocations
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getAllocationAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationAllUsingGetAsyncWithHttpInfo
     *
     * List all allocations
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAllocation_';
        $request = $this->getAllocationAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/allocation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationCompositionAllUsingGet
     *
     * List all allocations compositions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageAllocationComposition_
     */
    public function getAllocationCompositionAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getAllocationCompositionAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getAllocationCompositionAllUsingGetWithHttpInfo
     *
     * List all allocations compositions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageAllocationComposition_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationCompositionAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAllocationComposition_';
        $request = $this->getAllocationCompositionAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageAllocationComposition_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationCompositionAllUsingGetAsync
     *
     * List all allocations compositions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationCompositionAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getAllocationCompositionAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationCompositionAllUsingGetAsyncWithHttpInfo
     *
     * List all allocations compositions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationCompositionAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAllocationComposition_';
        $request = $this->getAllocationCompositionAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationCompositionAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationCompositionAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/allocation_composition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationCompositionUsingGet
     *
     * Retrieve an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AllocationComposition
     */
    public function getAllocationCompositionUsingGet($allocation_composition_id)
    {
        list($response) = $this->getAllocationCompositionUsingGetWithHttpInfo($allocation_composition_id);
        return $response;
    }

    /**
     * Operation getAllocationCompositionUsingGetWithHttpInfo
     *
     * Retrieve an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AllocationComposition, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationCompositionUsingGetWithHttpInfo($allocation_composition_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationComposition';
        $request = $this->getAllocationCompositionUsingGetRequest($allocation_composition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AllocationComposition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationCompositionUsingGetAsync
     *
     * Retrieve an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationCompositionUsingGetAsync($allocation_composition_id)
    {
        return $this->getAllocationCompositionUsingGetAsyncWithHttpInfo($allocation_composition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationCompositionUsingGetAsyncWithHttpInfo
     *
     * Retrieve an allocation composition
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationCompositionUsingGetAsyncWithHttpInfo($allocation_composition_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationComposition';
        $request = $this->getAllocationCompositionUsingGetRequest($allocation_composition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationCompositionUsingGet'
     *
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationCompositionUsingGetRequest($allocation_composition_id)
    {
        // verify the required parameter 'allocation_composition_id' is set
        if ($allocation_composition_id === null || (is_array($allocation_composition_id) && count($allocation_composition_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_composition_id when calling getAllocationCompositionUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/allocation_composition/{allocation_composition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($allocation_composition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_composition_id' . '}',
                ObjectSerializer::toPathValue($allocation_composition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllocationUsingGet
     *
     * Retrieve an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Allocation
     */
    public function getAllocationUsingGet($allocation_id)
    {
        list($response) = $this->getAllocationUsingGetWithHttpInfo($allocation_id);
        return $response;
    }

    /**
     * Operation getAllocationUsingGetWithHttpInfo
     *
     * Retrieve an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Allocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllocationUsingGetWithHttpInfo($allocation_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Allocation';
        $request = $this->getAllocationUsingGetRequest($allocation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Allocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllocationUsingGetAsync
     *
     * Retrieve an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationUsingGetAsync($allocation_id)
    {
        return $this->getAllocationUsingGetAsyncWithHttpInfo($allocation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllocationUsingGetAsyncWithHttpInfo
     *
     * Retrieve an allocation
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllocationUsingGetAsyncWithHttpInfo($allocation_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Allocation';
        $request = $this->getAllocationUsingGetRequest($allocation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllocationUsingGet'
     *
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllocationUsingGetRequest($allocation_id)
    {
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling getAllocationUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/allocation/{allocation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAllocationCompositionUsingPut
     *
     * Update an allocation composition
     *
     * @param  object $allocation_composition allocation_composition (required)
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AllocationComposition
     */
    public function updateAllocationCompositionUsingPut($allocation_composition, $allocation_composition_id)
    {
        list($response) = $this->updateAllocationCompositionUsingPutWithHttpInfo($allocation_composition, $allocation_composition_id);
        return $response;
    }

    /**
     * Operation updateAllocationCompositionUsingPutWithHttpInfo
     *
     * Update an allocation composition
     *
     * @param  object $allocation_composition allocation_composition (required)
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AllocationComposition, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAllocationCompositionUsingPutWithHttpInfo($allocation_composition, $allocation_composition_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationComposition';
        $request = $this->updateAllocationCompositionUsingPutRequest($allocation_composition, $allocation_composition_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AllocationComposition',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAllocationCompositionUsingPutAsync
     *
     * Update an allocation composition
     *
     * @param  object $allocation_composition allocation_composition (required)
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAllocationCompositionUsingPutAsync($allocation_composition, $allocation_composition_id)
    {
        return $this->updateAllocationCompositionUsingPutAsyncWithHttpInfo($allocation_composition, $allocation_composition_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAllocationCompositionUsingPutAsyncWithHttpInfo
     *
     * Update an allocation composition
     *
     * @param  object $allocation_composition allocation_composition (required)
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAllocationCompositionUsingPutAsyncWithHttpInfo($allocation_composition, $allocation_composition_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AllocationComposition';
        $request = $this->updateAllocationCompositionUsingPutRequest($allocation_composition, $allocation_composition_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAllocationCompositionUsingPut'
     *
     * @param  object $allocation_composition allocation_composition (required)
     * @param  string $allocation_composition_id UUID allocation_composition_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAllocationCompositionUsingPutRequest($allocation_composition, $allocation_composition_id)
    {
        // verify the required parameter 'allocation_composition' is set
        if ($allocation_composition === null || (is_array($allocation_composition) && count($allocation_composition) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_composition when calling updateAllocationCompositionUsingPut'
            );
        }
        // verify the required parameter 'allocation_composition_id' is set
        if ($allocation_composition_id === null || (is_array($allocation_composition_id) && count($allocation_composition_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_composition_id when calling updateAllocationCompositionUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/allocation_composition/{allocation_composition_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($allocation_composition_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_composition_id' . '}',
                ObjectSerializer::toPathValue($allocation_composition_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($allocation_composition)) {
            $_tempBody = $allocation_composition;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAllocationUsingPut
     *
     * Update an allocation
     *
     * @param  object $allocation allocation (required)
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Allocation
     */
    public function updateAllocationUsingPut($allocation, $allocation_id)
    {
        list($response) = $this->updateAllocationUsingPutWithHttpInfo($allocation, $allocation_id);
        return $response;
    }

    /**
     * Operation updateAllocationUsingPutWithHttpInfo
     *
     * Update an allocation
     *
     * @param  object $allocation allocation (required)
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Allocation, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAllocationUsingPutWithHttpInfo($allocation, $allocation_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Allocation';
        $request = $this->updateAllocationUsingPutRequest($allocation, $allocation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Allocation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAllocationUsingPutAsync
     *
     * Update an allocation
     *
     * @param  object $allocation allocation (required)
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAllocationUsingPutAsync($allocation, $allocation_id)
    {
        return $this->updateAllocationUsingPutAsyncWithHttpInfo($allocation, $allocation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAllocationUsingPutAsyncWithHttpInfo
     *
     * Update an allocation
     *
     * @param  object $allocation allocation (required)
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAllocationUsingPutAsyncWithHttpInfo($allocation, $allocation_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Allocation';
        $request = $this->updateAllocationUsingPutRequest($allocation, $allocation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAllocationUsingPut'
     *
     * @param  object $allocation allocation (required)
     * @param  string $allocation_id UUID allocation_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAllocationUsingPutRequest($allocation, $allocation_id)
    {
        // verify the required parameter 'allocation' is set
        if ($allocation === null || (is_array($allocation) && count($allocation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation when calling updateAllocationUsingPut'
            );
        }
        // verify the required parameter 'allocation_id' is set
        if ($allocation_id === null || (is_array($allocation_id) && count($allocation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $allocation_id when calling updateAllocationUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/allocation/{allocation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($allocation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'allocation_id' . '}',
                ObjectSerializer::toPathValue($allocation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($allocation)) {
            $_tempBody = $allocation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
