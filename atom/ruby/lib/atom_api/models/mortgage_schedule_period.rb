=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8-SNAPSHOT

=end

require 'date'

module AtomApi
  class MortgageSchedulePeriod
    # The total payment made for this period, consisting of interest and principal.
    attr_accessor :payment

    # The principal payment made for this period.
    attr_accessor :principal

    # The interest payment made for this period.
    attr_accessor :interest

    # The cumulative total payment made up to and including this period.
    attr_accessor :cumulative_payment

    # The cumulative principal payment made up to and including this period.
    attr_accessor :cumulative_principal

    # The cumulative interest payment made up to and including this period.
    attr_accessor :cumulative_interest

    # The remaining mortgage balance at the end of the period.
    attr_accessor :balance

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payment' => :'Payment',
        :'principal' => :'Principal',
        :'interest' => :'Interest',
        :'cumulative_payment' => :'Cumulative_Payment',
        :'cumulative_principal' => :'Cumulative_Principal',
        :'cumulative_interest' => :'Cumulative_Interest',
        :'balance' => :'Balance'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'payment' => :'Float',
        :'principal' => :'Float',
        :'interest' => :'Float',
        :'cumulative_payment' => :'Float',
        :'cumulative_principal' => :'Float',
        :'cumulative_interest' => :'Float',
        :'balance' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Payment')
        self.payment = attributes[:'Payment']
      end

      if attributes.has_key?(:'Principal')
        self.principal = attributes[:'Principal']
      end

      if attributes.has_key?(:'Interest')
        self.interest = attributes[:'Interest']
      end

      if attributes.has_key?(:'Cumulative_Payment')
        self.cumulative_payment = attributes[:'Cumulative_Payment']
      end

      if attributes.has_key?(:'Cumulative_Principal')
        self.cumulative_principal = attributes[:'Cumulative_Principal']
      end

      if attributes.has_key?(:'Cumulative_Interest')
        self.cumulative_interest = attributes[:'Cumulative_Interest']
      end

      if attributes.has_key?(:'Balance')
        self.balance = attributes[:'Balance']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payment.nil?
        invalid_properties.push('invalid value for "payment", payment cannot be nil.')
      end

      if @payment < 0
        invalid_properties.push('invalid value for "payment", must be greater than or equal to 0.')
      end

      if @principal.nil?
        invalid_properties.push('invalid value for "principal", principal cannot be nil.')
      end

      if @principal < 0
        invalid_properties.push('invalid value for "principal", must be greater than or equal to 0.')
      end

      if @interest.nil?
        invalid_properties.push('invalid value for "interest", interest cannot be nil.')
      end

      if @interest < 0
        invalid_properties.push('invalid value for "interest", must be greater than or equal to 0.')
      end

      if @cumulative_payment.nil?
        invalid_properties.push('invalid value for "cumulative_payment", cumulative_payment cannot be nil.')
      end

      if @cumulative_payment < 0
        invalid_properties.push('invalid value for "cumulative_payment", must be greater than or equal to 0.')
      end

      if @cumulative_principal.nil?
        invalid_properties.push('invalid value for "cumulative_principal", cumulative_principal cannot be nil.')
      end

      if @cumulative_principal < 0
        invalid_properties.push('invalid value for "cumulative_principal", must be greater than or equal to 0.')
      end

      if @cumulative_interest.nil?
        invalid_properties.push('invalid value for "cumulative_interest", cumulative_interest cannot be nil.')
      end

      if @cumulative_interest < 0
        invalid_properties.push('invalid value for "cumulative_interest", must be greater than or equal to 0.')
      end

      if @balance.nil?
        invalid_properties.push('invalid value for "balance", balance cannot be nil.')
      end

      if @balance < 0
        invalid_properties.push('invalid value for "balance", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payment.nil?
      return false if @payment < 0
      return false if @principal.nil?
      return false if @principal < 0
      return false if @interest.nil?
      return false if @interest < 0
      return false if @cumulative_payment.nil?
      return false if @cumulative_payment < 0
      return false if @cumulative_principal.nil?
      return false if @cumulative_principal < 0
      return false if @cumulative_interest.nil?
      return false if @cumulative_interest < 0
      return false if @balance.nil?
      return false if @balance < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] payment Value to be assigned
    def payment=(payment)
      if payment.nil?
        fail ArgumentError, 'payment cannot be nil'
      end

      if payment < 0
        fail ArgumentError, 'invalid value for "payment", must be greater than or equal to 0.'
      end

      @payment = payment
    end

    # Custom attribute writer method with validation
    # @param [Object] principal Value to be assigned
    def principal=(principal)
      if principal.nil?
        fail ArgumentError, 'principal cannot be nil'
      end

      if principal < 0
        fail ArgumentError, 'invalid value for "principal", must be greater than or equal to 0.'
      end

      @principal = principal
    end

    # Custom attribute writer method with validation
    # @param [Object] interest Value to be assigned
    def interest=(interest)
      if interest.nil?
        fail ArgumentError, 'interest cannot be nil'
      end

      if interest < 0
        fail ArgumentError, 'invalid value for "interest", must be greater than or equal to 0.'
      end

      @interest = interest
    end

    # Custom attribute writer method with validation
    # @param [Object] cumulative_payment Value to be assigned
    def cumulative_payment=(cumulative_payment)
      if cumulative_payment.nil?
        fail ArgumentError, 'cumulative_payment cannot be nil'
      end

      if cumulative_payment < 0
        fail ArgumentError, 'invalid value for "cumulative_payment", must be greater than or equal to 0.'
      end

      @cumulative_payment = cumulative_payment
    end

    # Custom attribute writer method with validation
    # @param [Object] cumulative_principal Value to be assigned
    def cumulative_principal=(cumulative_principal)
      if cumulative_principal.nil?
        fail ArgumentError, 'cumulative_principal cannot be nil'
      end

      if cumulative_principal < 0
        fail ArgumentError, 'invalid value for "cumulative_principal", must be greater than or equal to 0.'
      end

      @cumulative_principal = cumulative_principal
    end

    # Custom attribute writer method with validation
    # @param [Object] cumulative_interest Value to be assigned
    def cumulative_interest=(cumulative_interest)
      if cumulative_interest.nil?
        fail ArgumentError, 'cumulative_interest cannot be nil'
      end

      if cumulative_interest < 0
        fail ArgumentError, 'invalid value for "cumulative_interest", must be greater than or equal to 0.'
      end

      @cumulative_interest = cumulative_interest
    end

    # Custom attribute writer method with validation
    # @param [Object] balance Value to be assigned
    def balance=(balance)
      if balance.nil?
        fail ArgumentError, 'balance cannot be nil'
      end

      if balance < 0
        fail ArgumentError, 'invalid value for "balance", must be greater than or equal to 0.'
      end

      @balance = balance
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payment == o.payment &&
          principal == o.principal &&
          interest == o.interest &&
          cumulative_payment == o.cumulative_payment &&
          cumulative_principal == o.cumulative_principal &&
          cumulative_interest == o.cumulative_interest &&
          balance == o.balance
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [payment, principal, interest, cumulative_payment, cumulative_principal, cumulative_interest, balance].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
