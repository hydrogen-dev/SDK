/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import atom_api.ApiException;
import io.swagger.client.model.CampaignDataPayload;
import io.swagger.client.model.CampaignManagementPayload;
import io.swagger.client.model.CampaignPlanPayload;
import io.swagger.client.model.ChatPayload;
import io.swagger.client.model.ClientCampaignPayload;
import io.swagger.client.model.ConsultationPayload;
import io.swagger.client.model.CreateCampaignDataResponse;
import io.swagger.client.model.CreateCampaignPlanResponse;
import io.swagger.client.model.CreateCampaignResponse;
import io.swagger.client.model.CreateChatResponse;
import io.swagger.client.model.CreateClientCampaignResponse;
import io.swagger.client.model.CreateConsultationResponse;
import io.swagger.client.model.CreateDocumentResponse;
import io.swagger.client.model.CreateFaqResponse;
import io.swagger.client.model.CreateSalesResponse;
import io.swagger.client.model.CreateSupportTicketCommentResponse;
import io.swagger.client.model.CreateSupportTicketResponse;
import io.swagger.client.model.DocumentPayload;
import io.swagger.client.model.FaqPayload;
import io.swagger.client.model.GetCampaignDataResponse;
import io.swagger.client.model.GetCampaignPlanResponse;
import io.swagger.client.model.GetCampaignResponse;
import io.swagger.client.model.GetChatResponse;
import io.swagger.client.model.GetClientCampaignResponse;
import io.swagger.client.model.GetConsultationResponse;
import io.swagger.client.model.GetDocumentResponse;
import io.swagger.client.model.GetFaqResponse;
import io.swagger.client.model.GetSalesResponse;
import io.swagger.client.model.GetSupportTicketCommentResponse;
import io.swagger.client.model.GetSupportTicketResponse;
import io.swagger.client.model.SalesPayload;
import io.swagger.client.model.SpecificCampaignDataResponse;
import io.swagger.client.model.SpecificCampaignPlanResponse;
import io.swagger.client.model.SpecificCampaignResponse;
import io.swagger.client.model.SpecificChatResponse;
import io.swagger.client.model.SpecificClientCampaignResponse;
import io.swagger.client.model.SpecificConsultationResponse;
import io.swagger.client.model.SpecificDocumentResponse;
import io.swagger.client.model.SpecificFaqResponse;
import io.swagger.client.model.SpecificSalesResponse;
import io.swagger.client.model.SpecificSupportTicketCommentResponse;
import io.swagger.client.model.SpecificSupportTicketResponse;
import io.swagger.client.model.SupportTicketCommentPayload;
import io.swagger.client.model.SupportTicketPayload;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ElectronApi
 */
@Ignore
public class ElectronApiTest {

    private final ElectronApi api = new ElectronApi();

    
    /**
     * Delete a marketing campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignTest() throws ApiException {
        UUID campaignId = null;
        api.deleteCampaign(campaignId);

        // TODO: test validations
    }
    
    /**
     * Delete a marketing campaign data record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignDataRecordTest() throws ApiException {
        UUID campaignDataId = null;
        api.deleteCampaignDataRecord(campaignDataId);

        // TODO: test validations
    }
    
    /**
     * Delete a marketing campaign plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCampaignPlanTest() throws ApiException {
        UUID campaignPlanId = null;
        api.deleteCampaignPlan(campaignPlanId);

        // TODO: test validations
    }
    
    /**
     * Delete a chat log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteChatLogTest() throws ApiException {
        UUID chatId = null;
        api.deleteChatLog(chatId);

        // TODO: test validations
    }
    
    /**
     * Remove a client from a campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteClientCampaignTest() throws ApiException {
        UUID clientCampaignId = null;
        api.deleteClientCampaign(clientCampaignId);

        // TODO: test validations
    }
    
    /**
     * Delete a consultation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsultationTest() throws ApiException {
        UUID consultationId = null;
        api.deleteConsultation(consultationId);

        // TODO: test validations
    }
    
    /**
     * Delete a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        UUID documentId = null;
        api.deleteDocument(documentId);

        // TODO: test validations
    }
    
    /**
     * Delete a FAQ
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFaqTest() throws ApiException {
        UUID faqId = null;
        api.deleteFaq(faqId);

        // TODO: test validations
    }
    
    /**
     * Delete a sales inquiry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSalesInquiryTest() throws ApiException {
        UUID salesId = null;
        api.deleteSalesInquiry(salesId);

        // TODO: test validations
    }
    
    /**
     * Delete a support ticket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSupportTicketTest() throws ApiException {
        UUID supportTicketId = null;
        api.deleteSupportTicket(supportTicketId);

        // TODO: test validations
    }
    
    /**
     * Delete a support ticket comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSupportTicketCommentTest() throws ApiException {
        UUID supportTicketCommentId = null;
        api.deleteSupportTicketComment(supportTicketCommentId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a marketing campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignTest() throws ApiException {
        UUID campaignId = null;
        SpecificCampaignResponse response = api.getCampaign(campaignId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a marketing campaign data record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignDataRecordTest() throws ApiException {
        UUID campaignDataId = null;
        SpecificCampaignDataResponse response = api.getCampaignDataRecord(campaignDataId);

        // TODO: test validations
    }
    
    /**
     * List all marketing campaign data records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignDataRecordsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetCampaignDataResponse response = api.getCampaignDataRecords(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a marketing campaign plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignPlanTest() throws ApiException {
        UUID campaignPlanId = null;
        SpecificCampaignPlanResponse response = api.getCampaignPlan(campaignPlanId);

        // TODO: test validations
    }
    
    /**
     * List all marketing campaign plans
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignPlansTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetCampaignPlanResponse response = api.getCampaignPlans(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all marketing campaigns
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCampaignsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetCampaignResponse response = api.getCampaigns(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a chat log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatLogTest() throws ApiException {
        UUID chatId = null;
        SpecificChatResponse response = api.getChatLog(chatId);

        // TODO: test validations
    }
    
    /**
     * List all chat logs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChatLogsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetChatResponse response = api.getChatLogs(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a client assigned to a campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientCampaignTest() throws ApiException {
        UUID clientCampaignId = null;
        SpecificClientCampaignResponse response = api.getClientCampaign(clientCampaignId);

        // TODO: test validations
    }
    
    /**
     * List information for all clients that are assigned to a marketing campaign defined for your firm
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getClientCampaignsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetClientCampaignResponse response = api.getClientCampaigns(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a consultation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsultationTest() throws ApiException {
        UUID consultationId = null;
        SpecificConsultationResponse response = api.getConsultation(consultationId);

        // TODO: test validations
    }
    
    /**
     * List all consultations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsultationsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetConsultationResponse response = api.getConsultations(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        UUID documentId = null;
        SpecificDocumentResponse response = api.getDocument(documentId);

        // TODO: test validations
    }
    
    /**
     * List all documents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetDocumentResponse response = api.getDocuments(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a FAQ
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFaqTest() throws ApiException {
        UUID faqId = null;
        SpecificFaqResponse response = api.getFaq(faqId);

        // TODO: test validations
    }
    
    /**
     * List all FAQs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFaqsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetFaqResponse response = api.getFaqs(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all sales inquiries
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalesInquiriesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetSalesResponse response = api.getSalesInquiries(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Retrieve a sales inquiry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalesInquiryTest() throws ApiException {
        UUID salesId = null;
        SpecificSalesResponse response = api.getSalesInquiry(salesId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a support ticket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupportTicketTest() throws ApiException {
        UUID supportTicketId = null;
        SpecificSupportTicketResponse response = api.getSupportTicket(supportTicketId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a support ticket comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupportTicketCommentTest() throws ApiException {
        UUID supportTicketCommentId = null;
        SpecificSupportTicketCommentResponse response = api.getSupportTicketComment(supportTicketCommentId);

        // TODO: test validations
    }
    
    /**
     * List all support ticket comments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupportTicketCommentsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetSupportTicketCommentResponse response = api.getSupportTicketComments(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * List all support tickets
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSupportTicketsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String orderBy = null;
        Boolean ascending = null;
        String filter = null;
        GetSupportTicketResponse response = api.getSupportTickets(page, size, orderBy, ascending, filter);

        // TODO: test validations
    }
    
    /**
     * Create a marketing campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCampaignTest() throws ApiException {
        CampaignManagementPayload payload = null;
        CreateCampaignResponse response = api.postCampaign(payload);

        // TODO: test validations
    }
    
    /**
     * Create a marketing campaign data record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCampaignDataRecordTest() throws ApiException {
        CampaignDataPayload payload = null;
        CreateCampaignDataResponse response = api.postCampaignDataRecord(payload);

        // TODO: test validations
    }
    
    /**
     * Create a marketing campaign plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postCampaignPlanTest() throws ApiException {
        CampaignPlanPayload payload = null;
        CreateCampaignPlanResponse response = api.postCampaignPlan(payload);

        // TODO: test validations
    }
    
    /**
     * Create a chat log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postChatLogTest() throws ApiException {
        ChatPayload payload = null;
        CreateChatResponse response = api.postChatLog(payload);

        // TODO: test validations
    }
    
    /**
     * Assign a client to a campaign to indicate the client has registered through the campaign specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postClientCampaignTest() throws ApiException {
        ClientCampaignPayload payload = null;
        CreateClientCampaignResponse response = api.postClientCampaign(payload);

        // TODO: test validations
    }
    
    /**
     * Create a consultation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConsultationTest() throws ApiException {
        ConsultationPayload payload = null;
        CreateConsultationResponse response = api.postConsultation(payload);

        // TODO: test validations
    }
    
    /**
     * Create a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postDocumentTest() throws ApiException {
        DocumentPayload payload = null;
        CreateDocumentResponse response = api.postDocument(payload);

        // TODO: test validations
    }
    
    /**
     * Create a faq
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFaqTest() throws ApiException {
        FaqPayload payload = null;
        CreateFaqResponse response = api.postFaq(payload);

        // TODO: test validations
    }
    
    /**
     * Create a sales inquiry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSalesInquiryTest() throws ApiException {
        SalesPayload payload = null;
        CreateSalesResponse response = api.postSalesInquiry(payload);

        // TODO: test validations
    }
    
    /**
     * Create a support ticket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSupportTicketTest() throws ApiException {
        SupportTicketPayload payload = null;
        CreateSupportTicketResponse response = api.postSupportTicket(payload);

        // TODO: test validations
    }
    
    /**
     * Create a support ticket comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postSupportTicketCommentTest() throws ApiException {
        SupportTicketCommentPayload payload = null;
        CreateSupportTicketCommentResponse response = api.postSupportTicketComment(payload);

        // TODO: test validations
    }
    
    /**
     * Update a marketing campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignTest() throws ApiException {
        UUID campaignId = null;
        ClientCampaignPayload payload = null;
        SpecificCampaignResponse response = api.updateCampaign(campaignId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a marketing campaign data record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignDataRecordTest() throws ApiException {
        UUID campaignDataId = null;
        CampaignDataPayload payload = null;
        SpecificCampaignDataResponse response = api.updateCampaignDataRecord(campaignDataId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a marketing campaign plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCampaignPlanTest() throws ApiException {
        UUID campaignPlanId = null;
        CampaignPlanPayload payload = null;
        SpecificCampaignPlanResponse response = api.updateCampaignPlan(campaignPlanId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a chat log
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateChatLogTest() throws ApiException {
        UUID chatId = null;
        ChatPayload payload = null;
        SpecificChatResponse response = api.updateChatLog(chatId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a client assigned to a campaign
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateClientCampaignTest() throws ApiException {
        UUID clientCampaignId = null;
        ClientCampaignPayload payload = null;
        SpecificClientCampaignResponse response = api.updateClientCampaign(clientCampaignId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a consultation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConsultationTest() throws ApiException {
        UUID consultationId = null;
        ConsultationPayload payload = null;
        SpecificConsultationResponse response = api.updateConsultation(consultationId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDocumentTest() throws ApiException {
        UUID documentId = null;
        DocumentPayload payload = null;
        SpecificDocumentResponse response = api.updateDocument(documentId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a FAQ
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFaqTest() throws ApiException {
        UUID faqId = null;
        FaqPayload payload = null;
        SpecificFaqResponse response = api.updateFaq(faqId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a sales inquiry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSalesInquiryTest() throws ApiException {
        UUID salesId = null;
        SalesPayload payload = null;
        SpecificSalesResponse response = api.updateSalesInquiry(salesId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a support ticket
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSupportTicketTest() throws ApiException {
        UUID supportTicketId = null;
        SupportTicketPayload payload = null;
        SpecificSupportTicketResponse response = api.updateSupportTicket(supportTicketId, payload);

        // TODO: test validations
    }
    
    /**
     * Update a support ticket comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSupportTicketCommentTest() throws ApiException {
        UUID supportTicketCommentId = null;
        SupportTicketCommentPayload payload = null;
        SpecificSupportTicketCommentResponse response = api.updateSupportTicketComment(supportTicketCommentId, payload);

        // TODO: test validations
    }
    
}
