/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// CashFlowAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class CashFlowAnalysisRequest :  IEquatable<CashFlowAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            
            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 2,
            
            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 3
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashFlowAnalysisRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="showHistory">showHistory (default to false).</param>
        /// <param name="benchmarkStartDate">benchmarkStartDate.</param>
        /// <param name="scope">scope (default to ScopeEnum.All).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="benchmarkEndDate">benchmarkEndDate.</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="transactionStatusScope">transactionStatusScope.</param>
        /// <param name="showIncomeDetails">showIncomeDetails (default to false).</param>
        /// <param name="onlyCleansed">onlyCleansed (default to false).</param>
        /// <param name="householdId">householdId.</param>
        /// <param name="showSpendingDetails">showSpendingDetails (default to false).</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        public CashFlowAnalysisRequest(string currencyCode = default(string), Guid? clientId = default(Guid?), bool? showHistory = false, DateTime? benchmarkStartDate = default(DateTime?), ScopeEnum? scope = ScopeEnum.All, DateTime? endDate = default(DateTime?), List<Guid?> accountIds = default(List<Guid?>), DateTime? benchmarkEndDate = default(DateTime?), string currencyConversion = default(string), DateTime? startDate = default(DateTime?), List<string> transactionStatusScope = default(List<string>), bool? showIncomeDetails = false, bool? onlyCleansed = false, Guid? householdId = default(Guid?), bool? showSpendingDetails = false, List<Guid?> aggregationAccountIds = default(List<Guid?>))
        {
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "showHistory" provided
            if (showHistory == null)
            {
                this.ShowHistory = false;
            }
            else
            {
                this.ShowHistory = showHistory;
            }
            this.BenchmarkStartDate = benchmarkStartDate;
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = ScopeEnum.All;
            }
            else
            {
                this.Scope = scope;
            }
            this.EndDate = endDate;
            this.AccountIds = accountIds;
            this.BenchmarkEndDate = benchmarkEndDate;
            this.CurrencyConversion = currencyConversion;
            this.StartDate = startDate;
            this.TransactionStatusScope = transactionStatusScope;
            // use default value if no "showIncomeDetails" provided
            if (showIncomeDetails == null)
            {
                this.ShowIncomeDetails = false;
            }
            else
            {
                this.ShowIncomeDetails = showIncomeDetails;
            }
            // use default value if no "onlyCleansed" provided
            if (onlyCleansed == null)
            {
                this.OnlyCleansed = false;
            }
            else
            {
                this.OnlyCleansed = onlyCleansed;
            }
            this.HouseholdId = householdId;
            // use default value if no "showSpendingDetails" provided
            if (showSpendingDetails == null)
            {
                this.ShowSpendingDetails = false;
            }
            else
            {
                this.ShowSpendingDetails = showSpendingDetails;
            }
            this.AggregationAccountIds = aggregationAccountIds;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ShowHistory
        /// </summary>
        [DataMember(Name="show_history", EmitDefaultValue=false)]
        public bool? ShowHistory { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkStartDate
        /// </summary>
        [DataMember(Name="benchmark_start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BenchmarkStartDate { get; set; }


        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkEndDate
        /// </summary>
        [DataMember(Name="benchmark_end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BenchmarkEndDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusScope
        /// </summary>
        [DataMember(Name="transaction_status_scope", EmitDefaultValue=false)]
        public List<string> TransactionStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets ShowIncomeDetails
        /// </summary>
        [DataMember(Name="show_income_details", EmitDefaultValue=false)]
        public bool? ShowIncomeDetails { get; set; }

        /// <summary>
        /// Gets or Sets OnlyCleansed
        /// </summary>
        [DataMember(Name="only_cleansed", EmitDefaultValue=false)]
        public bool? OnlyCleansed { get; set; }

        /// <summary>
        /// Gets or Sets HouseholdId
        /// </summary>
        [DataMember(Name="household_id", EmitDefaultValue=false)]
        public Guid? HouseholdId { get; set; }

        /// <summary>
        /// Gets or Sets ShowSpendingDetails
        /// </summary>
        [DataMember(Name="show_spending_details", EmitDefaultValue=false)]
        public bool? ShowSpendingDetails { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashFlowAnalysisRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ShowHistory: ").Append(ShowHistory).Append("\n");
            sb.Append("  BenchmarkStartDate: ").Append(BenchmarkStartDate).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  BenchmarkEndDate: ").Append(BenchmarkEndDate).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  TransactionStatusScope: ").Append(TransactionStatusScope).Append("\n");
            sb.Append("  ShowIncomeDetails: ").Append(ShowIncomeDetails).Append("\n");
            sb.Append("  OnlyCleansed: ").Append(OnlyCleansed).Append("\n");
            sb.Append("  HouseholdId: ").Append(HouseholdId).Append("\n");
            sb.Append("  ShowSpendingDetails: ").Append(ShowSpendingDetails).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashFlowAnalysisRequest);
        }

        /// <summary>
        /// Returns true if CashFlowAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CashFlowAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashFlowAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ShowHistory == input.ShowHistory ||
                    (this.ShowHistory != null &&
                    this.ShowHistory.Equals(input.ShowHistory))
                ) && 
                (
                    this.BenchmarkStartDate == input.BenchmarkStartDate ||
                    (this.BenchmarkStartDate != null &&
                    this.BenchmarkStartDate.Equals(input.BenchmarkStartDate))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.BenchmarkEndDate == input.BenchmarkEndDate ||
                    (this.BenchmarkEndDate != null &&
                    this.BenchmarkEndDate.Equals(input.BenchmarkEndDate))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.TransactionStatusScope == input.TransactionStatusScope ||
                    this.TransactionStatusScope != null &&
                    this.TransactionStatusScope.SequenceEqual(input.TransactionStatusScope)
                ) && 
                (
                    this.ShowIncomeDetails == input.ShowIncomeDetails ||
                    (this.ShowIncomeDetails != null &&
                    this.ShowIncomeDetails.Equals(input.ShowIncomeDetails))
                ) && 
                (
                    this.OnlyCleansed == input.OnlyCleansed ||
                    (this.OnlyCleansed != null &&
                    this.OnlyCleansed.Equals(input.OnlyCleansed))
                ) && 
                (
                    this.HouseholdId == input.HouseholdId ||
                    (this.HouseholdId != null &&
                    this.HouseholdId.Equals(input.HouseholdId))
                ) && 
                (
                    this.ShowSpendingDetails == input.ShowSpendingDetails ||
                    (this.ShowSpendingDetails != null &&
                    this.ShowSpendingDetails.Equals(input.ShowSpendingDetails))
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ShowHistory != null)
                    hashCode = hashCode * 59 + this.ShowHistory.GetHashCode();
                if (this.BenchmarkStartDate != null)
                    hashCode = hashCode * 59 + this.BenchmarkStartDate.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.BenchmarkEndDate != null)
                    hashCode = hashCode * 59 + this.BenchmarkEndDate.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.TransactionStatusScope != null)
                    hashCode = hashCode * 59 + this.TransactionStatusScope.GetHashCode();
                if (this.ShowIncomeDetails != null)
                    hashCode = hashCode * 59 + this.ShowIncomeDetails.GetHashCode();
                if (this.OnlyCleansed != null)
                    hashCode = hashCode * 59 + this.OnlyCleansed.GetHashCode();
                if (this.HouseholdId != null)
                    hashCode = hashCode * 59 + this.HouseholdId.GetHashCode();
                if (this.ShowSpendingDetails != null)
                    hashCode = hashCode * 59 + this.ShowSpendingDetails.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
