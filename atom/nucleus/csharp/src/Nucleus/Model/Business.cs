/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Business Object
    /// </summary>
    [DataContract]
    public partial class Business :  IEquatable<Business>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Business" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Business() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Business" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="category">category.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="dbaName">dbaName.</param>
        /// <param name="email">email.</param>
        /// <param name="id">id.</param>
        /// <param name="identificationNumber">identificationNumber.</param>
        /// <param name="identificationNumberType">identificationNumberType.</param>
        /// <param name="incorporationCountry">incorporationCountry.</param>
        /// <param name="incorporationDate">incorporationDate.</param>
        /// <param name="incorporationState">incorporationState.</param>
        /// <param name="isActive">is_active.</param>
        /// <param name="isPublic">is_public.</param>
        /// <param name="isVerified">is_verified.</param>
        /// <param name="legalName">legalName (required).</param>
        /// <param name="legalStructure">legalStructure.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="ownership">ownership.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="status">status.</param>
        /// <param name="subcategory">subcategory.</param>
        /// <param name="ticker">ticker.</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="website">website.</param>
        public Business(List<BusinessAddress> address = default(List<BusinessAddress>), string category = default(string), DateTime? createDate = default(DateTime?), string dbaName = default(string), string email = default(string), Guid? id = default(Guid?), string identificationNumber = default(string), string identificationNumberType = default(string), string incorporationCountry = default(string), DateTime? incorporationDate = default(DateTime?), string incorporationState = default(string), bool? isActive = default(bool?), bool? isPublic = default(bool?), bool? isVerified = default(bool?), string legalName = default(string), string legalStructure = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), List<Ownership> ownership = default(List<Ownership>), string phoneNumber = default(string), string secondaryId = default(string), string status = default(string), string subcategory = default(string), string ticker = default(string), DateTime? updateDate = default(DateTime?), string website = default(string))
        {
            // to ensure "legalName" is required (not null)
            if (legalName == null)
            {
                throw new InvalidDataException("legalName is a required property for Business and cannot be null");
            }
            else
            {
                this.LegalName = legalName;
            }
            this.Address = address;
            this.Category = category;
            this.CreateDate = createDate;
            this.DbaName = dbaName;
            this.Email = email;
            this.Id = id;
            this.IdentificationNumber = identificationNumber;
            this.IdentificationNumberType = identificationNumberType;
            this.IncorporationCountry = incorporationCountry;
            this.IncorporationDate = incorporationDate;
            this.IncorporationState = incorporationState;
            this.IsActive = isActive;
            this.IsPublic = isPublic;
            this.IsVerified = isVerified;
            this.LegalStructure = legalStructure;
            this.Metadata = metadata;
            this.Ownership = ownership;
            this.PhoneNumber = phoneNumber;
            this.SecondaryId = secondaryId;
            this.Status = status;
            this.Subcategory = subcategory;
            this.Ticker = ticker;
            this.UpdateDate = updateDate;
            this.Website = website;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public List<BusinessAddress> Address { get; set; }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// dbaName
        /// </summary>
        /// <value>dbaName</value>
        [DataMember(Name="dba_name", EmitDefaultValue=false)]
        public string DbaName { get; set; }

        /// <summary>
        /// email
        /// </summary>
        /// <value>email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// identificationNumber
        /// </summary>
        /// <value>identificationNumber</value>
        [DataMember(Name="identification_number", EmitDefaultValue=false)]
        public string IdentificationNumber { get; set; }

        /// <summary>
        /// identificationNumberType
        /// </summary>
        /// <value>identificationNumberType</value>
        [DataMember(Name="identification_number_type", EmitDefaultValue=false)]
        public string IdentificationNumberType { get; set; }

        /// <summary>
        /// incorporationCountry
        /// </summary>
        /// <value>incorporationCountry</value>
        [DataMember(Name="incorporation_country", EmitDefaultValue=false)]
        public string IncorporationCountry { get; set; }

        /// <summary>
        /// incorporationDate
        /// </summary>
        /// <value>incorporationDate</value>
        [DataMember(Name="incorporation_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IncorporationDate { get; set; }

        /// <summary>
        /// incorporationState
        /// </summary>
        /// <value>incorporationState</value>
        [DataMember(Name="incorporation_state", EmitDefaultValue=false)]
        public string IncorporationState { get; set; }

        /// <summary>
        /// is_active
        /// </summary>
        /// <value>is_active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// is_public
        /// </summary>
        /// <value>is_public</value>
        [DataMember(Name="is_public", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }

        /// <summary>
        /// is_verified
        /// </summary>
        /// <value>is_verified</value>
        [DataMember(Name="is_verified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// legalName
        /// </summary>
        /// <value>legalName</value>
        [DataMember(Name="legal_name", EmitDefaultValue=false)]
        public string LegalName { get; set; }

        /// <summary>
        /// legalStructure
        /// </summary>
        /// <value>legalStructure</value>
        [DataMember(Name="legal_structure", EmitDefaultValue=false)]
        public string LegalStructure { get; set; }

        /// <summary>
        /// metadata
        /// </summary>
        /// <value>metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// ownership
        /// </summary>
        /// <value>ownership</value>
        [DataMember(Name="ownership", EmitDefaultValue=false)]
        public List<Ownership> Ownership { get; set; }

        /// <summary>
        /// phoneNumber
        /// </summary>
        /// <value>phoneNumber</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// subcategory
        /// </summary>
        /// <value>subcategory</value>
        [DataMember(Name="subcategory", EmitDefaultValue=false)]
        public string Subcategory { get; set; }

        /// <summary>
        /// ticker
        /// </summary>
        /// <value>ticker</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// website
        /// </summary>
        /// <value>website</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Business {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  DbaName: ").Append(DbaName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdentificationNumber: ").Append(IdentificationNumber).Append("\n");
            sb.Append("  IdentificationNumberType: ").Append(IdentificationNumberType).Append("\n");
            sb.Append("  IncorporationCountry: ").Append(IncorporationCountry).Append("\n");
            sb.Append("  IncorporationDate: ").Append(IncorporationDate).Append("\n");
            sb.Append("  IncorporationState: ").Append(IncorporationState).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  LegalStructure: ").Append(LegalStructure).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Ownership: ").Append(Ownership).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Business);
        }

        /// <summary>
        /// Returns true if Business instances are equal
        /// </summary>
        /// <param name="input">Instance of Business to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Business input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.DbaName == input.DbaName ||
                    (this.DbaName != null &&
                    this.DbaName.Equals(input.DbaName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdentificationNumber == input.IdentificationNumber ||
                    (this.IdentificationNumber != null &&
                    this.IdentificationNumber.Equals(input.IdentificationNumber))
                ) && 
                (
                    this.IdentificationNumberType == input.IdentificationNumberType ||
                    (this.IdentificationNumberType != null &&
                    this.IdentificationNumberType.Equals(input.IdentificationNumberType))
                ) && 
                (
                    this.IncorporationCountry == input.IncorporationCountry ||
                    (this.IncorporationCountry != null &&
                    this.IncorporationCountry.Equals(input.IncorporationCountry))
                ) && 
                (
                    this.IncorporationDate == input.IncorporationDate ||
                    (this.IncorporationDate != null &&
                    this.IncorporationDate.Equals(input.IncorporationDate))
                ) && 
                (
                    this.IncorporationState == input.IncorporationState ||
                    (this.IncorporationState != null &&
                    this.IncorporationState.Equals(input.IncorporationState))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsPublic == input.IsPublic ||
                    (this.IsPublic != null &&
                    this.IsPublic.Equals(input.IsPublic))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.LegalStructure == input.LegalStructure ||
                    (this.LegalStructure != null &&
                    this.LegalStructure.Equals(input.LegalStructure))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Ownership == input.Ownership ||
                    this.Ownership != null &&
                    this.Ownership.SequenceEqual(input.Ownership)
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Subcategory == input.Subcategory ||
                    (this.Subcategory != null &&
                    this.Subcategory.Equals(input.Subcategory))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.DbaName != null)
                    hashCode = hashCode * 59 + this.DbaName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IdentificationNumber != null)
                    hashCode = hashCode * 59 + this.IdentificationNumber.GetHashCode();
                if (this.IdentificationNumberType != null)
                    hashCode = hashCode * 59 + this.IdentificationNumberType.GetHashCode();
                if (this.IncorporationCountry != null)
                    hashCode = hashCode * 59 + this.IncorporationCountry.GetHashCode();
                if (this.IncorporationDate != null)
                    hashCode = hashCode * 59 + this.IncorporationDate.GetHashCode();
                if (this.IncorporationState != null)
                    hashCode = hashCode * 59 + this.IncorporationState.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsPublic != null)
                    hashCode = hashCode * 59 + this.IsPublic.GetHashCode();
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.LegalStructure != null)
                    hashCode = hashCode * 59 + this.LegalStructure.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Ownership != null)
                    hashCode = hashCode * 59 + this.Ownership.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Subcategory != null)
                    hashCode = hashCode * 59 + this.Subcategory.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
