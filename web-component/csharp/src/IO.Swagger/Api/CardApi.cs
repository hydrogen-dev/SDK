/* 
 * Hydrogen Admin API
 *
 * The Hydrogen Admin API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Card</returns>
        Card CreateCardUsingPost (Card cardRequest);

        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> CreateCardUsingPostWithHttpInfo (Card cardRequest);
        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageCard</returns>
        PageCard GetCardAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageCard</returns>
        ApiResponse<PageCard> GetCardAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        Card GetCardUsingGet (Guid? cardId);

        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> GetCardUsingGetWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        Card UpdateCardUsingPut (Object card, Guid? cardId);

        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> UpdateCardUsingPutWithHttpInfo (Object card, Guid? cardId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> CreateCardUsingPostAsync (Card cardRequest);

        /// <summary>
        /// Create a card request
        /// </summary>
        /// <remarks>
        /// Create a new card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> CreateCardUsingPostAsyncWithHttpInfo (Card cardRequest);
        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageCard</returns>
        System.Threading.Tasks.Task<PageCard> GetCardAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all card requests
        /// </summary>
        /// <remarks>
        /// Get the information for all card requests.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageCard)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageCard>> GetCardAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> GetCardUsingGetAsync (Guid? cardId);

        /// <summary>
        /// Retrieve a card request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> GetCardUsingGetAsyncWithHttpInfo (Guid? cardId);
        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> UpdateCardUsingPutAsync (Object card, Guid? cardId);

        /// <summary>
        /// Update a card request
        /// </summary>
        /// <remarks>
        /// Update the information for a card request.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> UpdateCardUsingPutAsyncWithHttpInfo (Object card, Guid? cardId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardApi : ICardApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        private AppTokenConfig appTokenConfig;
        /// <summary>
        /// Initializes a new instance of the <see cref="CardApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardApi(AppTokenConfig appTokenConfig)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = appTokenConfig.basePath };
            this.appTokenConfig = appTokenConfig;
            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Card</returns>
        public Card CreateCardUsingPost (Card cardRequest)
        {
             Card localVarResponse = CreateCardUsingPostWithHttpInfos(cardRequest);
             return localVarResponse.Data;
        }

        public Card CreateCardUsingPostWithHttpInfos (Card cardRequest) {
             AuthApiClient authApiClient = new AuthApiClient(this.Configuration);
             if (appTokenConfig.authType != null && appTokenConfig.authType.ToLower()=="client_credentials") {
                String clientCredentialToken = authApiClient.createClientCredential(appTokenConfig.clientId, appTokenConfig.clientSecret);
                this.Configuration.AccessToken = clientCredentialToken;
             } else if (app.authType != null && app.authType.ToLower() == "password_credentials") {
                String passwordCredentialToken = authApiClient.createPasswordCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.username, appTokenConfig.password);
                this.Configuration.AccessToken = passwordCredentialToken;
             }  else if (app.authType != null && app.authType.ToLower() == "client_token_credentials") {
                String clientTokenCredentials = authApiClient.createClientTokenCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.clientToken);
                this.Configuration.AccessToken = clientTokenCredentials;
             }
             ApiResponse<Card> localVarResponse =  CreateCardUsingPostWithHttpInfo(cardRequest);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > CreateCardUsingPostWithHttpInfo (Card cardRequest)
        {
            // verify the required parameter 'cardRequest' is set
            if (cardRequest == null)
                throw new ApiException(400, "Missing required parameter 'cardRequest' when calling CardApi->CreateCardUsingPost");

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardRequest != null && cardRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> CreateCardUsingPostAsync (Card cardRequest)
        {
             ApiResponse<Card> localVarResponse = await CreateCardUsingPostAsyncWithHttpInfo(cardRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a card request Create a new card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardRequest">cardRequest</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> CreateCardUsingPostAsyncWithHttpInfo (Card cardRequest)
        {
            // verify the required parameter 'cardRequest' is set
            if (cardRequest == null)
                throw new ApiException(400, "Missing required parameter 'cardRequest' when calling CardApi->CreateCardUsingPost");

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardRequest != null && cardRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cardRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cardRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCardUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageCard</returns>
        public PageCard GetCardAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             PageCard localVarResponse = GetCardAllUsingGetWithHttpInfos(ascending, filter, orderBy, page, size);
             return localVarResponse;
        }

        public PageCard GetCardAllUsingGetWithHttpInfos(bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null) {
            AuthApiClient authApiClient = new AuthApiClient(this.Configuration);
            if (appTokenConfig.authType != null && appTokenConfig.authType.ToLower()=="client_credentials") {
                String clientCredentialToken = authApiClient.createClientCredential(appTokenConfig.clientId, appTokenConfig.clientSecret);
                this.Configuration.AccessToken = clientCredentialToken;
            } else if (app.authType != null && app.authType.ToLower() == "password_credentials") {
                String passwordCredentialToken = authApiClient.createPasswordCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.username, appTokenConfig.password);
                this.Configuration.AccessToken = passwordCredentialToken;
            }  else if (app.authType != null && app.authType.ToLower() == "client_token_credentials") {
                String clientTokenCredentials = authApiClient.createClientTokenCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.clientToken);
                this.Configuration.AccessToken = clientTokenCredentials;
            }
            ApiResponse<PageCard> localVarResponse = GetCardAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageCard</returns>
        public ApiResponse< PageCard > GetCardAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageCard)));
        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageCard</returns>
        public async System.Threading.Tasks.Task<PageCard> GetCardAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageCard> localVarResponse = await GetCardAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all card requests Get the information for all card requests.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageCard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageCard>> GetCardAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageCard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageCard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageCard)));
        }

        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        public Card GetCardUsingGet (Guid? cardId)
        {
             Card localVarResponse = GetCardUsingGetWithHttpInfos(cardId);
             return localVarResponse;
        }

        public Card GetCardUsingGetWithHttpInfos(Guid? cardId) {
            AuthApiClient authApiClient = new AuthApiClient(this.Configuration);
            if (appTokenConfig.authType != null && appTokenConfig.authType.ToLower()=="client_credentials") {
                String clientCredentialToken = authApiClient.createClientCredential(appTokenConfig.clientId, appTokenConfig.clientSecret);
                this.Configuration.AccessToken = clientCredentialToken;
            } else if (app.authType != null && app.authType.ToLower() == "password_credentials") {
                String passwordCredentialToken = authApiClient.createPasswordCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.username, appTokenConfig.password);
                this.Configuration.AccessToken = passwordCredentialToken;
            }  else if (app.authType != null && app.authType.ToLower() == "client_token_credentials") {
                String clientTokenCredentials = authApiClient.createClientTokenCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.clientToken);
                this.Configuration.AccessToken = clientTokenCredentials;
            }
            ApiResponse<Card> localVarResponse = GetCardUsingGetWithHttpInfo(cardId);
             return localVarResponse.Data;
        }
        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > GetCardUsingGetWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> GetCardUsingGetAsync (Guid? cardId)
        {
             ApiResponse<Card> localVarResponse = await GetCardUsingGetAsyncWithHttpInfo(cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a card request Retrieve the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> GetCardUsingGetAsyncWithHttpInfo (Guid? cardId)
        {
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->GetCardUsingGet");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCardUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Card</returns>
        public Card UpdateCardUsingPut (Object card, Guid? cardId)
        {
             Card localVarResponse = UpdateCardUsingPutWithHttpInfos(card, cardId);
             return localVarResponse;
        }

        public Card UpdateCardUsingPutWithHttpInfos(Object card, Guid? cardId) {
            AuthApiClient authApiClient = new AuthApiClient(this.Configuration);
            if (appTokenConfig.authType != null && appTokenConfig.authType.ToLower()=="client_credentials") {
                String clientCredentialToken = authApiClient.createClientCredential(appTokenConfig.clientId, appTokenConfig.clientSecret);
                this.Configuration.AccessToken = clientCredentialToken;
            } else if (app.authType != null && app.authType.ToLower() == "password_credentials") {
                String passwordCredentialToken = authApiClient.createPasswordCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.username, appTokenConfig.password);
                this.Configuration.AccessToken = passwordCredentialToken;
            }  else if (app.authType != null && app.authType.ToLower() == "client_token_credentials") {
                String clientTokenCredentials = authApiClient.createClientTokenCredential(appTokenConfig.clientId, appTokenConfig.clientSecret, appTokenConfig.clientToken);
                this.Configuration.AccessToken = clientTokenCredentials;
            }
            ApiResponse<Card> localVarResponse = UpdateCardUsingPutWithHttpInfo(card, cardId);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > UpdateCardUsingPutWithHttpInfo (Object card, Guid? cardId)
        {
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling CardApi->UpdateCardUsingPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->UpdateCardUsingPut");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> UpdateCardUsingPutAsync (Object card, Guid? cardId)
        {
             ApiResponse<Card> localVarResponse = await UpdateCardUsingPutAsyncWithHttpInfo(card, cardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a card request Update the information for a card request.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="card">card</param>
        /// <param name="cardId">UUID card_id</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> UpdateCardUsingPutAsyncWithHttpInfo (Object card, Guid? cardId)
        {
            // verify the required parameter 'card' is set
            if (card == null)
                throw new ApiException(400, "Missing required parameter 'card' when calling CardApi->UpdateCardUsingPut");
            // verify the required parameter 'cardId' is set
            if (cardId == null)
                throw new ApiException(400, "Missing required parameter 'cardId' when calling CardApi->UpdateCardUsingPut");

            var localVarPath = "/nucleus/v1/card/{card_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cardId != null) localVarPathParams.Add("card_id", this.Configuration.ApiClient.ParameterToString(cardId)); // path parameter
            if (card != null && card.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(card); // http body (model) parameter
            }
            else
            {
                localVarPostBody = card; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCardUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

    }
}
