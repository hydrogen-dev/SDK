/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Currency Object
    /// </summary>
    [DataContract]
    public partial class Currency :  IEquatable<Currency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currency" /> class.
        /// </summary>
        /// <param name="alphabeticCode">alphabetic_code.</param>
        /// <param name="currency">currency.</param>
        /// <param name="id">id.</param>
        /// <param name="numericCode">numeric_code.</param>
        public Currency(string alphabeticCode = default(string), string currency = default(string), Guid? id = default(Guid?), string numericCode = default(string))
        {
            this.AlphabeticCode = alphabeticCode;
            this._Currency = currency;
            this.Id = id;
            this.NumericCode = numericCode;
        }
        
        /// <summary>
        /// alphabetic_code
        /// </summary>
        /// <value>alphabetic_code</value>
        [DataMember(Name="alphabetic_code", EmitDefaultValue=false)]
        public string AlphabeticCode { get; set; }

        /// <summary>
        /// currency
        /// </summary>
        /// <value>currency</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string _Currency { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// numeric_code
        /// </summary>
        /// <value>numeric_code</value>
        [DataMember(Name="numeric_code", EmitDefaultValue=false)]
        public string NumericCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currency {\n");
            sb.Append("  AlphabeticCode: ").Append(AlphabeticCode).Append("\n");
            sb.Append("  _Currency: ").Append(_Currency).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NumericCode: ").Append(NumericCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currency);
        }

        /// <summary>
        /// Returns true if Currency instances are equal
        /// </summary>
        /// <param name="input">Instance of Currency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AlphabeticCode == input.AlphabeticCode ||
                    (this.AlphabeticCode != null &&
                    this.AlphabeticCode.Equals(input.AlphabeticCode))
                ) && 
                (
                    this._Currency == input._Currency ||
                    (this._Currency != null &&
                    this._Currency.Equals(input._Currency))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NumericCode == input.NumericCode ||
                    (this.NumericCode != null &&
                    this.NumericCode.Equals(input.NumericCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AlphabeticCode != null)
                    hashCode = hashCode * 59 + this.AlphabeticCode.GetHashCode();
                if (this._Currency != null)
                    hashCode = hashCode * 59 + this._Currency.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NumericCode != null)
                    hashCode = hashCode * 59 + this.NumericCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
