/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenAdminApi);
  }
}(this, function(expect, HydrogenAdminApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Client', function() {
      beforeEach(function() {
        instance = new HydrogenAdminApi.Client();
      });

      it('should create an instance of Client', function() {
        // TODO: update the code to test Client
        expect(instance).to.be.a(HydrogenAdminApi.Client);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property authorities (base name: "authorities")', function() {
        // TODO: update the code to test the property authorities
        expect(instance).to.have.property('authorities');
        // expect(instance.authorities).to.be(expectedValueLiteral);
      });

      it('should have the property businessId (base name: "business_id")', function() {
        // TODO: update the code to test the property businessId
        expect(instance).to.have.property('businessId');
        // expect(instance.businessId).to.be(expectedValueLiteral);
      });

      it('should have the property citizenshipStatus (base name: "citizenship_status")', function() {
        // TODO: update the code to test the property citizenshipStatus
        expect(instance).to.have.property('citizenshipStatus');
        // expect(instance.citizenshipStatus).to.be(expectedValueLiteral);
      });

      it('should have the property clientType (base name: "client_type")', function() {
        // TODO: update the code to test the property clientType
        expect(instance).to.have.property('clientType');
        // expect(instance.clientType).to.be(expectedValueLiteral);
      });

      it('should have the property countryOfCitizenship (base name: "country_of_citizenship")', function() {
        // TODO: update the code to test the property countryOfCitizenship
        expect(instance).to.have.property('countryOfCitizenship');
        // expect(instance.countryOfCitizenship).to.be(expectedValueLiteral);
      });

      it('should have the property countryOfResidence (base name: "country_of_residence")', function() {
        // TODO: update the code to test the property countryOfResidence
        expect(instance).to.have.property('countryOfResidence');
        // expect(instance.countryOfResidence).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "create_date")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfBirth (base name: "date_of_birth")', function() {
        // TODO: update the code to test the property dateOfBirth
        expect(instance).to.have.property('dateOfBirth');
        // expect(instance.dateOfBirth).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property employment (base name: "employment")', function() {
        // TODO: update the code to test the property employment
        expect(instance).to.have.property('employment');
        // expect(instance.employment).to.be(expectedValueLiteral);
      });

      it('should have the property firmName (base name: "firm_name")', function() {
        // TODO: update the code to test the property firmName
        expect(instance).to.have.property('firmName');
        // expect(instance.firmName).to.be(expectedValueLiteral);
      });

      it('should have the property firmType (base name: "firm_type")', function() {
        // TODO: update the code to test the property firmType
        expect(instance).to.have.property('firmType');
        // expect(instance.firmType).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "first_name")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property group (base name: "group")', function() {
        // TODO: update the code to test the property group
        expect(instance).to.have.property('group');
        // expect(instance.group).to.be(expectedValueLiteral);
      });

      it('should have the property hydroId (base name: "hydro_id")', function() {
        // TODO: update the code to test the property hydroId
        expect(instance).to.have.property('hydroId');
        // expect(instance.hydroId).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property identificationNumber (base name: "identification_number")', function() {
        // TODO: update the code to test the property identificationNumber
        expect(instance).to.have.property('identificationNumber');
        // expect(instance.identificationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property identificationNumberType (base name: "identification_number_type")', function() {
        // TODO: update the code to test the property identificationNumberType
        expect(instance).to.have.property('identificationNumberType');
        // expect(instance.identificationNumberType).to.be(expectedValueLiteral);
      });

      it('should have the property image (base name: "image")', function() {
        // TODO: update the code to test the property image
        expect(instance).to.have.property('image');
        // expect(instance.image).to.be(expectedValueLiteral);
      });

      it('should have the property income (base name: "income")', function() {
        // TODO: update the code to test the property income
        expect(instance).to.have.property('income');
        // expect(instance.income).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "is_active")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property isVerified (base name: "is_verified")', function() {
        // TODO: update the code to test the property isVerified
        expect(instance).to.have.property('isVerified');
        // expect(instance.isVerified).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "last_name")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property liquidNetWorth (base name: "liquid_net_worth")', function() {
        // TODO: update the code to test the property liquidNetWorth
        expect(instance).to.have.property('liquidNetWorth');
        // expect(instance.liquidNetWorth).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property middleName (base name: "middle_name")', function() {
        // TODO: update the code to test the property middleName
        expect(instance).to.have.property('middleName');
        // expect(instance.middleName).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property phoneNumber (base name: "phone_number")', function() {
        // TODO: update the code to test the property phoneNumber
        expect(instance).to.have.property('phoneNumber');
        // expect(instance.phoneNumber).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryId (base name: "secondary_id")', function() {
        // TODO: update the code to test the property secondaryId
        expect(instance).to.have.property('secondaryId');
        // expect(instance.secondaryId).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property suffix (base name: "suffix")', function() {
        // TODO: update the code to test the property suffix
        expect(instance).to.have.property('suffix');
        // expect(instance.suffix).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property totalNetWorth (base name: "total_net_worth")', function() {
        // TODO: update the code to test the property totalNetWorth
        expect(instance).to.have.property('totalNetWorth');
        // expect(instance.totalNetWorth).to.be(expectedValueLiteral);
      });

      it('should have the property updateDate (base name: "update_date")', function() {
        // TODO: update the code to test the property updateDate
        expect(instance).to.have.property('updateDate');
        // expect(instance.updateDate).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

    });
  });

}));
