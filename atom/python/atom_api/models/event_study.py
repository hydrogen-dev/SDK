# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EventStudy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_tickers': 'list[str]',
        'portfolio_weights': 'list[float]',
        'events': 'list[str]'
    }

    attribute_map = {
        'portfolio_tickers': 'portfolio_tickers',
        'portfolio_weights': 'portfolio_weights',
        'events': 'events'
    }

    def __init__(self, portfolio_tickers=None, portfolio_weights=None, events=None):  # noqa: E501
        """EventStudy - a model defined in Swagger"""  # noqa: E501

        self._portfolio_tickers = None
        self._portfolio_weights = None
        self._events = None
        self.discriminator = None

        self.portfolio_tickers = portfolio_tickers
        self.portfolio_weights = portfolio_weights
        if events is not None:
            self.events = events

    @property
    def portfolio_tickers(self):
        """Gets the portfolio_tickers of this EventStudy.  # noqa: E501

        Tickers of portfolio holdings  # noqa: E501

        :return: The portfolio_tickers of this EventStudy.  # noqa: E501
        :rtype: list[str]
        """
        return self._portfolio_tickers

    @portfolio_tickers.setter
    def portfolio_tickers(self, portfolio_tickers):
        """Sets the portfolio_tickers of this EventStudy.

        Tickers of portfolio holdings  # noqa: E501

        :param portfolio_tickers: The portfolio_tickers of this EventStudy.  # noqa: E501
        :type: list[str]
        """
        if portfolio_tickers is None:
            raise ValueError("Invalid value for `portfolio_tickers`, must not be `None`")  # noqa: E501

        self._portfolio_tickers = portfolio_tickers

    @property
    def portfolio_weights(self):
        """Gets the portfolio_weights of this EventStudy.  # noqa: E501

        Weights of portfolio holdings  # noqa: E501

        :return: The portfolio_weights of this EventStudy.  # noqa: E501
        :rtype: list[float]
        """
        return self._portfolio_weights

    @portfolio_weights.setter
    def portfolio_weights(self, portfolio_weights):
        """Sets the portfolio_weights of this EventStudy.

        Weights of portfolio holdings  # noqa: E501

        :param portfolio_weights: The portfolio_weights of this EventStudy.  # noqa: E501
        :type: list[float]
        """
        if portfolio_weights is None:
            raise ValueError("Invalid value for `portfolio_weights`, must not be `None`")  # noqa: E501

        self._portfolio_weights = portfolio_weights

    @property
    def events(self):
        """Gets the events of this EventStudy.  # noqa: E501

        Historical events to analyze  # noqa: E501

        :return: The events of this EventStudy.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this EventStudy.

        Historical events to analyze  # noqa: E501

        :param events: The events of this EventStudy.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["dot_com_bubble", "2008_financial_crisis", "brexit", "2011_black_monday", "september_eleventh", "1987_black_monday", "1992_black_wednesday", "1997_asian_financial_crisis"]  # noqa: E501
        if not set(events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventStudy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventStudy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
