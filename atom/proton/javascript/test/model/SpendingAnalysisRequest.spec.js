/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SpendingAnalysisRequest', function() {
      beforeEach(function() {
        instance = new HydrogenProtonApi.SpendingAnalysisRequest();
      });

      it('should create an instance of SpendingAnalysisRequest', function() {
        // TODO: update the code to test SpendingAnalysisRequest
        expect(instance).to.be.a(HydrogenProtonApi.SpendingAnalysisRequest);
      });

      it('should have the property merchantScope (base name: "merchant_scope")', function() {
        // TODO: update the code to test the property merchantScope
        expect(instance).to.have.property('merchantScope');
        // expect(instance.merchantScope).to.be(expectedValueLiteral);
      });

      it('should have the property accountIds (base name: "account_ids")', function() {
        // TODO: update the code to test the property accountIds
        expect(instance).to.have.property('accountIds');
        // expect(instance.accountIds).to.be(expectedValueLiteral);
      });

      it('should have the property businessIds (base name: "business_ids")', function() {
        // TODO: update the code to test the property businessIds
        expect(instance).to.have.property('businessIds');
        // expect(instance.businessIds).to.be(expectedValueLiteral);
      });

      it('should have the property cardIds (base name: "card_ids")', function() {
        // TODO: update the code to test the property cardIds
        expect(instance).to.have.property('cardIds');
        // expect(instance.cardIds).to.be(expectedValueLiteral);
      });

      it('should have the property showByMerchant (base name: "show_by_merchant")', function() {
        // TODO: update the code to test the property showByMerchant
        expect(instance).to.have.property('showByMerchant');
        // expect(instance.showByMerchant).to.be(expectedValueLiteral);
      });

      it('should have the property showByPeriod (base name: "show_by_period")', function() {
        // TODO: update the code to test the property showByPeriod
        expect(instance).to.have.property('showByPeriod');
        // expect(instance.showByPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property onlyCleansed (base name: "only_cleansed")', function() {
        // TODO: update the code to test the property onlyCleansed
        expect(instance).to.have.property('onlyCleansed');
        // expect(instance.onlyCleansed).to.be(expectedValueLiteral);
      });

      it('should have the property frequency (base name: "frequency")', function() {
        // TODO: update the code to test the property frequency
        expect(instance).to.have.property('frequency');
        // expect(instance.frequency).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "end_date")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property asOfDate (base name: "as_of_date")', function() {
        // TODO: update the code to test the property asOfDate
        expect(instance).to.have.property('asOfDate');
        // expect(instance.asOfDate).to.be(expectedValueLiteral);
      });

      it('should have the property transactionCategoryScope (base name: "transaction_category_scope")', function() {
        // TODO: update the code to test the property transactionCategoryScope
        expect(instance).to.have.property('transactionCategoryScope');
        // expect(instance.transactionCategoryScope).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "start_date")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property cardStatusScope (base name: "card_status_scope")', function() {
        // TODO: update the code to test the property cardStatusScope
        expect(instance).to.have.property('cardStatusScope');
        // expect(instance.cardStatusScope).to.be(expectedValueLiteral);
      });

      it('should have the property onlyActiveClients (base name: "only_active_clients")', function() {
        // TODO: update the code to test the property onlyActiveClients
        expect(instance).to.have.property('onlyActiveClients');
        // expect(instance.onlyActiveClients).to.be(expectedValueLiteral);
      });

      it('should have the property lookbackPeriods (base name: "lookback_periods")', function() {
        // TODO: update the code to test the property lookbackPeriods
        expect(instance).to.have.property('lookbackPeriods');
        // expect(instance.lookbackPeriods).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyUnit (base name: "frequency_unit")', function() {
        // TODO: update the code to test the property frequencyUnit
        expect(instance).to.have.property('frequencyUnit');
        // expect(instance.frequencyUnit).to.be(expectedValueLiteral);
      });

      it('should have the property householdIds (base name: "household_ids")', function() {
        // TODO: update the code to test the property householdIds
        expect(instance).to.have.property('householdIds');
        // expect(instance.householdIds).to.be(expectedValueLiteral);
      });

      it('should have the property aggregationAccountIds (base name: "aggregation_account_ids")', function() {
        // TODO: update the code to test the property aggregationAccountIds
        expect(instance).to.have.property('aggregationAccountIds');
        // expect(instance.aggregationAccountIds).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "currency_code")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property clientIds (base name: "client_ids")', function() {
        // TODO: update the code to test the property clientIds
        expect(instance).to.have.property('clientIds');
        // expect(instance.clientIds).to.be(expectedValueLiteral);
      });

      it('should have the property scope (base name: "scope")', function() {
        // TODO: update the code to test the property scope
        expect(instance).to.have.property('scope');
        // expect(instance.scope).to.be(expectedValueLiteral);
      });

      it('should have the property currencyConversion (base name: "currency_conversion")', function() {
        // TODO: update the code to test the property currencyConversion
        expect(instance).to.have.property('currencyConversion');
        // expect(instance.currencyConversion).to.be(expectedValueLiteral);
      });

      it('should have the property transactionStatusScope (base name: "transaction_status_scope")', function() {
        // TODO: update the code to test the property transactionStatusScope
        expect(instance).to.have.property('transactionStatusScope');
        // expect(instance.transactionStatusScope).to.be(expectedValueLiteral);
      });

      it('should have the property showByCategory (base name: "show_by_category")', function() {
        // TODO: update the code to test the property showByCategory
        expect(instance).to.have.property('showByCategory');
        // expect(instance.showByCategory).to.be(expectedValueLiteral);
      });

    });
  });

}));
