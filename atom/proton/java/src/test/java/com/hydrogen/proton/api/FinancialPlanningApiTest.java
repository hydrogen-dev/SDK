/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.model.EducationCalculatorAnnualCostRequest;
import com.hydrogen.proton.model.EducationCalculatorDepositAmountRequest;
import com.hydrogen.proton.model.EducationCalculatorPercentCoveredRequest;
import com.hydrogen.proton.model.MortgageCalculatorDownPaymentRequest;
import com.hydrogen.proton.model.MortgageCalculatorHomePriceRequest;
import com.hydrogen.proton.model.MortgageCalculatorPeriodicPaymentRequest;
import com.hydrogen.proton.model.PurchaseCalculatorAmountRequest;
import com.hydrogen.proton.model.PurchaseCalculatorDepositAmountRequest;
import com.hydrogen.proton.model.PurchaseCalculatorHorizonRequest;
import com.hydrogen.proton.model.RetirementCalculatorDepositAmountRequest;
import com.hydrogen.proton.model.RetirementCalculatorExpensesRequest;
import com.hydrogen.proton.model.RetirementCalculatorPercentCoveredRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.Map;

/**
 * API tests for FinancialPlanningApi
 */
@Ignore
public class FinancialPlanningApiTest {

    private final FinancialPlanningApi api = new FinancialPlanningApi();

    
    /**
     * Education Calculator - Annual Cost
     *
     * Calculate the achievable education costs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void educationCalculatorAnnualCostTest() throws ApiException {
        EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest = null;
        Map<String, Object> response = api.educationCalculatorAnnualCost(educationCalculatorAnnualCostRequest);

        // TODO: test validations
    }
    
    /**
     * Education Calculator - Deposit Amount
     *
     * Calculate the necessary periodic deposit amount to achieve education costs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void educationCalculatorDepositAmountTest() throws ApiException {
        EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest = null;
        Map<String, Object> response = api.educationCalculatorDepositAmount(educationCalculatorDepositAmountRequest);

        // TODO: test validations
    }
    
    /**
     * Education Calculator - Percent Covered
     *
     * Calculate the achievable percentage of education costs that can be covered
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void educationCalculatorPercentCoveredTest() throws ApiException {
        EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest = null;
        Map<String, Object> response = api.educationCalculatorPercentCovered(educationCalculatorPercentCoveredRequest);

        // TODO: test validations
    }
    
    /**
     * Mortgage Calculator - Down Payment
     *
     * Calculate the necessary down payment for the mortgage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mortgageCalculatorDownPaymentTest() throws ApiException {
        MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest = null;
        Map<String, Object> response = api.mortgageCalculatorDownPayment(mortgageCalculatorDownPaymentRequest);

        // TODO: test validations
    }
    
    /**
     * Mortgage Calculator - Home Price
     *
     * Calculate the achievable home price for the mortgage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mortgageCalculatorHomePriceTest() throws ApiException {
        MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest = null;
        Map<String, Object> response = api.mortgageCalculatorHomePrice(mortgageCalculatorHomePriceRequest);

        // TODO: test validations
    }
    
    /**
     * Mortgage Calculator - Periodic Payment
     *
     * Calculate the periodic payment for the mortgage
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mortgageCalculatorPeriodicPaymentTest() throws ApiException {
        MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest = null;
        Map<String, Object> response = api.mortgageCalculatorPeriodicPayment(mortgageCalculatorPeriodicPaymentRequest);

        // TODO: test validations
    }
    
    /**
     * Purchase Calculator - Amount
     *
     * Calculate the achievable purchase amount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseCalculatorAmountTest() throws ApiException {
        PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest = null;
        Map<String, Object> response = api.purchaseCalculatorAmount(purchaseCalculatorAmountRequest);

        // TODO: test validations
    }
    
    /**
     * Purchase Calculator - Deposit Amount
     *
     * Calculate the necessary periodic deposit amount to achieve the purchase amount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseCalculatorDepositAmountTest() throws ApiException {
        PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest = null;
        Map<String, Object> response = api.purchaseCalculatorDepositAmount(purchaseCalculatorDepositAmountRequest);

        // TODO: test validations
    }
    
    /**
     * Purchase Calculator - Horizon
     *
     * Calculate the necessary time horizon to achieve the purchase amount
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseCalculatorHorizonTest() throws ApiException {
        PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest = null;
        Map<String, Object> response = api.purchaseCalculatorHorizon(purchaseCalculatorHorizonRequest);

        // TODO: test validations
    }
    
    /**
     * Retirement Calculator - Deposit Amount
     *
     * Calculate the necessary period deposit amount to achieve the retirement expenses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retirementCalculatorDepositAmountTest() throws ApiException {
        RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest = null;
        Map<String, Object> response = api.retirementCalculatorDepositAmount(retirementCalculatorDepositAmountRequest);

        // TODO: test validations
    }
    
    /**
     * Retirement Calculator - Expenses
     *
     * Calculate the achievable retirement expenses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retirementCalculatorExpensesTest() throws ApiException {
        RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest = null;
        Map<String, Object> response = api.retirementCalculatorExpenses(retirementCalculatorExpensesRequest);

        // TODO: test validations
    }
    
    /**
     * Retirement Calculator - Percent Covered
     *
     * Calculate the achievable percentage of retirement expenses that can be covered
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retirementCalculatorPercentCoveredTest() throws ApiException {
        RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest = null;
        Map<String, Object> response = api.retirementCalculatorPercentCovered(retirementCalculatorPercentCoveredRequest);

        // TODO: test validations
    }
    
}
