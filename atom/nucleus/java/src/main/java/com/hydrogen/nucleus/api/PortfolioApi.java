/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.PagePortfolio;
import com.hydrogen.nucleus.model.PagePortfolioAssetSizeLog;
import com.hydrogen.nucleus.model.PagePortfolioComment;
import com.hydrogen.nucleus.model.PagePortfolioGoal;
import com.hydrogen.nucleus.model.PagePortfolioHoldingLog;
import com.hydrogen.nucleus.model.PagePortfolioTransaction;
import com.hydrogen.nucleus.model.Portfolio;
import com.hydrogen.nucleus.model.PortfolioAssetSizeLog;
import com.hydrogen.nucleus.model.PortfolioComment;
import com.hydrogen.nucleus.model.PortfolioGoal;
import com.hydrogen.nucleus.model.PortfolioHoldingLog;
import com.hydrogen.nucleus.model.PortfolioTransaction;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortfolioApi {
    private ApiClient apiClient;

    public PortfolioApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPortfolioAssetSizeUsingPost
     * @param portfolioAssetSizeLogRequest portfolioAssetSizeLogRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioAssetSizeUsingPostCall(PortfolioAssetSizeLog portfolioAssetSizeLogRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioAssetSizeLogRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioAssetSizeUsingPostValidateBeforeCall(PortfolioAssetSizeLog portfolioAssetSizeLogRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioAssetSizeLogRequest' is set
        if (portfolioAssetSizeLogRequest == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSizeLogRequest' when calling createPortfolioAssetSizeUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioAssetSizeUsingPostCall(portfolioAssetSizeLogRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio asset size
     * Create a new asset size record for a portfolio.
     * @param portfolioAssetSizeLogRequest portfolioAssetSizeLogRequest (required)
     * @return PortfolioAssetSizeLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioAssetSizeLog createPortfolioAssetSizeUsingPost(PortfolioAssetSizeLog portfolioAssetSizeLogRequest) throws ApiException {
        ApiResponse<PortfolioAssetSizeLog> resp = createPortfolioAssetSizeUsingPostWithHttpInfo(portfolioAssetSizeLogRequest);
        return resp.getData();
    }

    /**
     * Create a portfolio asset size
     * Create a new asset size record for a portfolio.
     * @param portfolioAssetSizeLogRequest portfolioAssetSizeLogRequest (required)
     * @return ApiResponse&lt;PortfolioAssetSizeLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioAssetSizeLog> createPortfolioAssetSizeUsingPostWithHttpInfo(PortfolioAssetSizeLog portfolioAssetSizeLogRequest) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioAssetSizeUsingPostValidateBeforeCall(portfolioAssetSizeLogRequest, null, null);
        Type localVarReturnType = new TypeToken<PortfolioAssetSizeLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio asset size (asynchronously)
     * Create a new asset size record for a portfolio.
     * @param portfolioAssetSizeLogRequest portfolioAssetSizeLogRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioAssetSizeUsingPostAsync(PortfolioAssetSizeLog portfolioAssetSizeLogRequest, final ApiCallback<PortfolioAssetSizeLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioAssetSizeUsingPostValidateBeforeCall(portfolioAssetSizeLogRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioAssetSizeLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortfolioCommentUsingPost
     * @param portfolioComment portfolioComment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioCommentUsingPostCall(PortfolioComment portfolioComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioComment;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioCommentUsingPostValidateBeforeCall(PortfolioComment portfolioComment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioComment' is set
        if (portfolioComment == null) {
            throw new ApiException("Missing the required parameter 'portfolioComment' when calling createPortfolioCommentUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioCommentUsingPostCall(portfolioComment, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio commentary
     * Create a new comment for a portfolio defined for your firm.
     * @param portfolioComment portfolioComment (required)
     * @return PortfolioComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioComment createPortfolioCommentUsingPost(PortfolioComment portfolioComment) throws ApiException {
        ApiResponse<PortfolioComment> resp = createPortfolioCommentUsingPostWithHttpInfo(portfolioComment);
        return resp.getData();
    }

    /**
     * Create a portfolio commentary
     * Create a new comment for a portfolio defined for your firm.
     * @param portfolioComment portfolioComment (required)
     * @return ApiResponse&lt;PortfolioComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioComment> createPortfolioCommentUsingPostWithHttpInfo(PortfolioComment portfolioComment) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioCommentUsingPostValidateBeforeCall(portfolioComment, null, null);
        Type localVarReturnType = new TypeToken<PortfolioComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio commentary (asynchronously)
     * Create a new comment for a portfolio defined for your firm.
     * @param portfolioComment portfolioComment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioCommentUsingPostAsync(PortfolioComment portfolioComment, final ApiCallback<PortfolioComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioCommentUsingPostValidateBeforeCall(portfolioComment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortfolioGoalUsingPost
     * @param portfolioGoal portfolioGoal (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioGoalUsingPostCall(PortfolioGoal portfolioGoal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioGoal;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioGoalUsingPostValidateBeforeCall(PortfolioGoal portfolioGoal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioGoal' is set
        if (portfolioGoal == null) {
            throw new ApiException("Missing the required parameter 'portfolioGoal' when calling createPortfolioGoalUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioGoalUsingPostCall(portfolioGoal, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an portfolio goal
     * Create an portfolio goal.
     * @param portfolioGoal portfolioGoal (required)
     * @return PortfolioGoal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioGoal createPortfolioGoalUsingPost(PortfolioGoal portfolioGoal) throws ApiException {
        ApiResponse<PortfolioGoal> resp = createPortfolioGoalUsingPostWithHttpInfo(portfolioGoal);
        return resp.getData();
    }

    /**
     * Create an portfolio goal
     * Create an portfolio goal.
     * @param portfolioGoal portfolioGoal (required)
     * @return ApiResponse&lt;PortfolioGoal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioGoal> createPortfolioGoalUsingPostWithHttpInfo(PortfolioGoal portfolioGoal) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioGoalUsingPostValidateBeforeCall(portfolioGoal, null, null);
        Type localVarReturnType = new TypeToken<PortfolioGoal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an portfolio goal (asynchronously)
     * Create an portfolio goal.
     * @param portfolioGoal portfolioGoal (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioGoalUsingPostAsync(PortfolioGoal portfolioGoal, final ApiCallback<PortfolioGoal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioGoalUsingPostValidateBeforeCall(portfolioGoal, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioGoal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortfolioHoldingUsingPost
     * @param portfolioHoldinLogRequest portfolioHoldinLogRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioHoldingUsingPostCall(PortfolioHoldingLog portfolioHoldinLogRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioHoldinLogRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioHoldingUsingPostValidateBeforeCall(PortfolioHoldingLog portfolioHoldinLogRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioHoldinLogRequest' is set
        if (portfolioHoldinLogRequest == null) {
            throw new ApiException("Missing the required parameter 'portfolioHoldinLogRequest' when calling createPortfolioHoldingUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioHoldingUsingPostCall(portfolioHoldinLogRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio holding
     * Create a new holding record for a portfolio.
     * @param portfolioHoldinLogRequest portfolioHoldinLogRequest (required)
     * @return PortfolioHoldingLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioHoldingLog createPortfolioHoldingUsingPost(PortfolioHoldingLog portfolioHoldinLogRequest) throws ApiException {
        ApiResponse<PortfolioHoldingLog> resp = createPortfolioHoldingUsingPostWithHttpInfo(portfolioHoldinLogRequest);
        return resp.getData();
    }

    /**
     * Create a portfolio holding
     * Create a new holding record for a portfolio.
     * @param portfolioHoldinLogRequest portfolioHoldinLogRequest (required)
     * @return ApiResponse&lt;PortfolioHoldingLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioHoldingLog> createPortfolioHoldingUsingPostWithHttpInfo(PortfolioHoldingLog portfolioHoldinLogRequest) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioHoldingUsingPostValidateBeforeCall(portfolioHoldinLogRequest, null, null);
        Type localVarReturnType = new TypeToken<PortfolioHoldingLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio holding (asynchronously)
     * Create a new holding record for a portfolio.
     * @param portfolioHoldinLogRequest portfolioHoldinLogRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioHoldingUsingPostAsync(PortfolioHoldingLog portfolioHoldinLogRequest, final ApiCallback<PortfolioHoldingLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioHoldingUsingPostValidateBeforeCall(portfolioHoldinLogRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioHoldingLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortfolioTransactionUsingPost
     * @param portfolioTransactionRequest portfolioTransactionRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioTransactionUsingPostCall(PortfolioTransaction portfolioTransactionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioTransactionRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioTransactionUsingPostValidateBeforeCall(PortfolioTransaction portfolioTransactionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioTransactionRequest' is set
        if (portfolioTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionRequest' when calling createPortfolioTransactionUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioTransactionUsingPostCall(portfolioTransactionRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio transaction
     * Create a new transaction record for a portfolio.
     * @param portfolioTransactionRequest portfolioTransactionRequest (required)
     * @return PortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioTransaction createPortfolioTransactionUsingPost(PortfolioTransaction portfolioTransactionRequest) throws ApiException {
        ApiResponse<PortfolioTransaction> resp = createPortfolioTransactionUsingPostWithHttpInfo(portfolioTransactionRequest);
        return resp.getData();
    }

    /**
     * Create a portfolio transaction
     * Create a new transaction record for a portfolio.
     * @param portfolioTransactionRequest portfolioTransactionRequest (required)
     * @return ApiResponse&lt;PortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioTransaction> createPortfolioTransactionUsingPostWithHttpInfo(PortfolioTransaction portfolioTransactionRequest) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioTransactionUsingPostValidateBeforeCall(portfolioTransactionRequest, null, null);
        Type localVarReturnType = new TypeToken<PortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio transaction (asynchronously)
     * Create a new transaction record for a portfolio.
     * @param portfolioTransactionRequest portfolioTransactionRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioTransactionUsingPostAsync(PortfolioTransaction portfolioTransactionRequest, final ApiCallback<PortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioTransactionUsingPostValidateBeforeCall(portfolioTransactionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortfolioUsingPost
     * @param portfolioRequest portfolioRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioUsingPostCall(Portfolio portfolioRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioUsingPostValidateBeforeCall(Portfolio portfolioRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioRequest' is set
        if (portfolioRequest == null) {
            throw new ApiException("Missing the required parameter 'portfolioRequest' when calling createPortfolioUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioUsingPostCall(portfolioRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio
     * Create a new portfolio for an account.
     * @param portfolioRequest portfolioRequest (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio createPortfolioUsingPost(Portfolio portfolioRequest) throws ApiException {
        ApiResponse<Portfolio> resp = createPortfolioUsingPostWithHttpInfo(portfolioRequest);
        return resp.getData();
    }

    /**
     * Create a portfolio
     * Create a new portfolio for an account.
     * @param portfolioRequest portfolioRequest (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> createPortfolioUsingPostWithHttpInfo(Portfolio portfolioRequest) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioUsingPostValidateBeforeCall(portfolioRequest, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio (asynchronously)
     * Create a new portfolio for an account.
     * @param portfolioRequest portfolioRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioUsingPostAsync(Portfolio portfolioRequest, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioUsingPostValidateBeforeCall(portfolioRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioAssetSizeUsingDelete
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioAssetSizeUsingDeleteCall(UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}"
            .replaceAll("\\{" + "portfolio_asset_size_id" + "\\}", apiClient.escapeString(portfolioAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioAssetSizeUsingDeleteValidateBeforeCall(UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioAssetSizeId' is set
        if (portfolioAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSizeId' when calling deletePortfolioAssetSizeUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioAssetSizeUsingDeleteCall(portfolioAssetSizeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio asset size
     * Permanently delete a portfolio asset size record for a portfolio.
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePortfolioAssetSizeUsingDelete(UUID portfolioAssetSizeId) throws ApiException {
        deletePortfolioAssetSizeUsingDeleteWithHttpInfo(portfolioAssetSizeId);
    }

    /**
     * Delete a portfolio asset size
     * Permanently delete a portfolio asset size record for a portfolio.
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePortfolioAssetSizeUsingDeleteWithHttpInfo(UUID portfolioAssetSizeId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioAssetSizeUsingDeleteValidateBeforeCall(portfolioAssetSizeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio asset size (asynchronously)
     * Permanently delete a portfolio asset size record for a portfolio.
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioAssetSizeUsingDeleteAsync(UUID portfolioAssetSizeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioAssetSizeUsingDeleteValidateBeforeCall(portfolioAssetSizeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioCommentUsingDelete
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioCommentUsingDeleteCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}"
            .replaceAll("\\{" + "portfolio_comment_id" + "\\}", apiClient.escapeString(portfolioCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioCommentUsingDeleteValidateBeforeCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioCommentId' is set
        if (portfolioCommentId == null) {
            throw new ApiException("Missing the required parameter 'portfolioCommentId' when calling deletePortfolioCommentUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioCommentUsingDeleteCall(portfolioCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio commentary
     * Permanently delete a portfolio comment for a portfolio.
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePortfolioCommentUsingDelete(UUID portfolioCommentId) throws ApiException {
        deletePortfolioCommentUsingDeleteWithHttpInfo(portfolioCommentId);
    }

    /**
     * Delete a portfolio commentary
     * Permanently delete a portfolio comment for a portfolio.
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePortfolioCommentUsingDeleteWithHttpInfo(UUID portfolioCommentId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioCommentUsingDeleteValidateBeforeCall(portfolioCommentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio commentary (asynchronously)
     * Permanently delete a portfolio comment for a portfolio.
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioCommentUsingDeleteAsync(UUID portfolioCommentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioCommentUsingDeleteValidateBeforeCall(portfolioCommentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioGoalUsingDelete
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioGoalUsingDeleteCall(UUID portfolioGoalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}"
            .replaceAll("\\{" + "portfolio_goal_id" + "\\}", apiClient.escapeString(portfolioGoalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioGoalUsingDeleteValidateBeforeCall(UUID portfolioGoalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioGoalId' is set
        if (portfolioGoalId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGoalId' when calling deletePortfolioGoalUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioGoalUsingDeleteCall(portfolioGoalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an portfolio goal
     * Permanently delete an portfolio-goal mapping.
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePortfolioGoalUsingDelete(UUID portfolioGoalId) throws ApiException {
        deletePortfolioGoalUsingDeleteWithHttpInfo(portfolioGoalId);
    }

    /**
     * Delete an portfolio goal
     * Permanently delete an portfolio-goal mapping.
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePortfolioGoalUsingDeleteWithHttpInfo(UUID portfolioGoalId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioGoalUsingDeleteValidateBeforeCall(portfolioGoalId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an portfolio goal (asynchronously)
     * Permanently delete an portfolio-goal mapping.
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioGoalUsingDeleteAsync(UUID portfolioGoalId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioGoalUsingDeleteValidateBeforeCall(portfolioGoalId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioHoldingUsingDelete
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioHoldingUsingDeleteCall(UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}"
            .replaceAll("\\{" + "portfolio_holding_id" + "\\}", apiClient.escapeString(portfolioHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioHoldingUsingDeleteValidateBeforeCall(UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioHoldingId' is set
        if (portfolioHoldingId == null) {
            throw new ApiException("Missing the required parameter 'portfolioHoldingId' when calling deletePortfolioHoldingUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioHoldingUsingDeleteCall(portfolioHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio holding
     * Permanently delete a portfolio holding record for a portfolio.
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePortfolioHoldingUsingDelete(UUID portfolioHoldingId) throws ApiException {
        deletePortfolioHoldingUsingDeleteWithHttpInfo(portfolioHoldingId);
    }

    /**
     * Delete a portfolio holding
     * Permanently delete a portfolio holding record for a portfolio.
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePortfolioHoldingUsingDeleteWithHttpInfo(UUID portfolioHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioHoldingUsingDeleteValidateBeforeCall(portfolioHoldingId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio holding (asynchronously)
     * Permanently delete a portfolio holding record for a portfolio.
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioHoldingUsingDeleteAsync(UUID portfolioHoldingId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioHoldingUsingDeleteValidateBeforeCall(portfolioHoldingId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioTransactionUsingDelete
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioTransactionUsingDeleteCall(UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}"
            .replaceAll("\\{" + "portfolio_transaction_id" + "\\}", apiClient.escapeString(portfolioTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioTransactionUsingDeleteValidateBeforeCall(UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioTransactionId' is set
        if (portfolioTransactionId == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionId' when calling deletePortfolioTransactionUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioTransactionUsingDeleteCall(portfolioTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio transaction
     * Permanently delete a portfolio transaction record for a portfolio.
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePortfolioTransactionUsingDelete(UUID portfolioTransactionId) throws ApiException {
        deletePortfolioTransactionUsingDeleteWithHttpInfo(portfolioTransactionId);
    }

    /**
     * Delete a portfolio transaction
     * Permanently delete a portfolio transaction record for a portfolio.
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePortfolioTransactionUsingDeleteWithHttpInfo(UUID portfolioTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioTransactionUsingDeleteValidateBeforeCall(portfolioTransactionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio transaction (asynchronously)
     * Permanently delete a portfolio transaction record for a portfolio.
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioTransactionUsingDeleteAsync(UUID portfolioTransactionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioTransactionUsingDeleteValidateBeforeCall(portfolioTransactionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioUsingDelete
     * @param portfolioId UUID portfolio_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioUsingDeleteCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioUsingDeleteValidateBeforeCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling deletePortfolioUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioUsingDeleteCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a portfolio
     * Permanently delete a portfolio for an account.
     * @param portfolioId UUID portfolio_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePortfolioUsingDelete(UUID portfolioId) throws ApiException {
        deletePortfolioUsingDeleteWithHttpInfo(portfolioId);
    }

    /**
     * Delete a portfolio
     * Permanently delete a portfolio for an account.
     * @param portfolioId UUID portfolio_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePortfolioUsingDeleteWithHttpInfo(UUID portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioUsingDeleteValidateBeforeCall(portfolioId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a portfolio (asynchronously)
     * Permanently delete a portfolio for an account.
     * @param portfolioId UUID portfolio_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioUsingDeleteAsync(UUID portfolioId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioUsingDeleteValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllPortfolioTransactionByPostUsingPOST
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllPortfolioTransactionByPostUsingPOSTCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction_by_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllPortfolioTransactionByPostUsingPOSTValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllPortfolioTransactionByPostUsingPOSTCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getAllPortfolioTransactionByPost
     * 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PagePortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioTransaction getAllPortfolioTransactionByPostUsingPOST(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PagePortfolioTransaction> resp = getAllPortfolioTransactionByPostUsingPOSTWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * getAllPortfolioTransactionByPost
     * 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PagePortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioTransaction> getAllPortfolioTransactionByPostUsingPOSTWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAllPortfolioTransactionByPostUsingPOSTValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAllPortfolioTransactionByPost (asynchronously)
     * 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllPortfolioTransactionByPostUsingPOSTAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PagePortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllPortfolioTransactionByPostUsingPOSTValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioAggregatedDataUsingGet
     * @param portfolioId Portfolio Id (required)
     * @param showAssetClass true or false (optional, default to true)
     * @param showCategory true or false (optional, default to true)
     * @param showIndustry true or false (optional, default to true)
     * @param showSector true or false (optional, default to true)
     * @param showSecurityClass true or false (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAggregatedDataUsingGetCall(UUID portfolioId, Boolean showAssetClass, Boolean showCategory, Boolean showIndustry, Boolean showSector, Boolean showSecurityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/aggregate_data"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (showAssetClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_asset_class", showAssetClass));
        if (showCategory != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_category", showCategory));
        if (showIndustry != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_industry", showIndustry));
        if (showSector != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_sector", showSector));
        if (showSecurityClass != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_security_class", showSecurityClass));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioAggregatedDataUsingGetValidateBeforeCall(UUID portfolioId, Boolean showAssetClass, Boolean showCategory, Boolean showIndustry, Boolean showSector, Boolean showSecurityClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getPortfolioAggregatedDataUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioAggregatedDataUsingGetCall(portfolioId, showAssetClass, showCategory, showIndustry, showSector, showSecurityClass, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an portfolio aggregate data
     * Retrieve the information for a securities associated with a portfolio.
     * @param portfolioId Portfolio Id (required)
     * @param showAssetClass true or false (optional, default to true)
     * @param showCategory true or false (optional, default to true)
     * @param showIndustry true or false (optional, default to true)
     * @param showSector true or false (optional, default to true)
     * @param showSecurityClass true or false (optional, default to true)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getPortfolioAggregatedDataUsingGet(UUID portfolioId, Boolean showAssetClass, Boolean showCategory, Boolean showIndustry, Boolean showSector, Boolean showSecurityClass) throws ApiException {
        ApiResponse<Object> resp = getPortfolioAggregatedDataUsingGetWithHttpInfo(portfolioId, showAssetClass, showCategory, showIndustry, showSector, showSecurityClass);
        return resp.getData();
    }

    /**
     * Retrieve an portfolio aggregate data
     * Retrieve the information for a securities associated with a portfolio.
     * @param portfolioId Portfolio Id (required)
     * @param showAssetClass true or false (optional, default to true)
     * @param showCategory true or false (optional, default to true)
     * @param showIndustry true or false (optional, default to true)
     * @param showSector true or false (optional, default to true)
     * @param showSecurityClass true or false (optional, default to true)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getPortfolioAggregatedDataUsingGetWithHttpInfo(UUID portfolioId, Boolean showAssetClass, Boolean showCategory, Boolean showIndustry, Boolean showSector, Boolean showSecurityClass) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioAggregatedDataUsingGetValidateBeforeCall(portfolioId, showAssetClass, showCategory, showIndustry, showSector, showSecurityClass, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an portfolio aggregate data (asynchronously)
     * Retrieve the information for a securities associated with a portfolio.
     * @param portfolioId Portfolio Id (required)
     * @param showAssetClass true or false (optional, default to true)
     * @param showCategory true or false (optional, default to true)
     * @param showIndustry true or false (optional, default to true)
     * @param showSector true or false (optional, default to true)
     * @param showSecurityClass true or false (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAggregatedDataUsingGetAsync(UUID portfolioId, Boolean showAssetClass, Boolean showCategory, Boolean showIndustry, Boolean showSector, Boolean showSecurityClass, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioAggregatedDataUsingGetValidateBeforeCall(portfolioId, showAssetClass, showCategory, showIndustry, showSector, showSecurityClass, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolios
     * Get the information for all portfolios assigned to all of your firm’s accounts. 
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PagePortfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolio getPortfolioAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PagePortfolio> resp = getPortfolioAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all portfolios
     * Get the information for all portfolios assigned to all of your firm’s accounts. 
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PagePortfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolio> getPortfolioAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolios (asynchronously)
     * Get the information for all portfolios assigned to all of your firm’s accounts. 
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PagePortfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioAssetSizeAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizeAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioAssetSizeAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioAssetSizeAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio asset size
     * Retrieve the information for a portfolio asset size record for a portfolio. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PagePortfolioAssetSizeLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioAssetSizeLog getPortfolioAssetSizeAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PagePortfolioAssetSizeLog> resp = getPortfolioAssetSizeAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio asset size
     * Retrieve the information for a portfolio asset size record for a portfolio. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PagePortfolioAssetSizeLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioAssetSizeLog> getPortfolioAssetSizeAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioAssetSizeAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioAssetSizeLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio asset size (asynchronously)
     * Retrieve the information for a portfolio asset size record for a portfolio. 
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizeAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PagePortfolioAssetSizeLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioAssetSizeAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioAssetSizeLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioAssetSizeUsingGet
     * @param portfolioAssetSizeId portfolio_asset_size_id (required)
     * @param currencyConversion currency_conversion (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizeUsingGetCall(UUID portfolioAssetSizeId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}"
            .replaceAll("\\{" + "portfolio_asset_size_id" + "\\}", apiClient.escapeString(portfolioAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioAssetSizeUsingGetValidateBeforeCall(UUID portfolioAssetSizeId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioAssetSizeId' is set
        if (portfolioAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSizeId' when calling getPortfolioAssetSizeUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioAssetSizeUsingGetCall(portfolioAssetSizeId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio asset size
     * Retrieve the information for a portfolio asset size record for a portfolio.
     * @param portfolioAssetSizeId portfolio_asset_size_id (required)
     * @param currencyConversion currency_conversion (optional)
     * @return PortfolioAssetSizeLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioAssetSizeLog getPortfolioAssetSizeUsingGet(UUID portfolioAssetSizeId, String currencyConversion) throws ApiException {
        ApiResponse<PortfolioAssetSizeLog> resp = getPortfolioAssetSizeUsingGetWithHttpInfo(portfolioAssetSizeId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio asset size
     * Retrieve the information for a portfolio asset size record for a portfolio.
     * @param portfolioAssetSizeId portfolio_asset_size_id (required)
     * @param currencyConversion currency_conversion (optional)
     * @return ApiResponse&lt;PortfolioAssetSizeLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioAssetSizeLog> getPortfolioAssetSizeUsingGetWithHttpInfo(UUID portfolioAssetSizeId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioAssetSizeUsingGetValidateBeforeCall(portfolioAssetSizeId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<PortfolioAssetSizeLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio asset size (asynchronously)
     * Retrieve the information for a portfolio asset size record for a portfolio.
     * @param portfolioAssetSizeId portfolio_asset_size_id (required)
     * @param currencyConversion currency_conversion (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAssetSizeUsingGetAsync(UUID portfolioAssetSizeId, String currencyConversion, final ApiCallback<PortfolioAssetSizeLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioAssetSizeUsingGetValidateBeforeCall(portfolioAssetSizeId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioAssetSizeLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioCommentAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioCommentAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioCommentAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioCommentAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio commentary
     * List all comments for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PagePortfolioComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioComment getPortfolioCommentAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PagePortfolioComment> resp = getPortfolioCommentAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all portfolio commentary
     * List all comments for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PagePortfolioComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioComment> getPortfolioCommentAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioCommentAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio commentary (asynchronously)
     * List all comments for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioCommentAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PagePortfolioComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioCommentAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioCommentUsingGet
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioCommentUsingGetCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}"
            .replaceAll("\\{" + "portfolio_comment_id" + "\\}", apiClient.escapeString(portfolioCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioCommentUsingGetValidateBeforeCall(UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioCommentId' is set
        if (portfolioCommentId == null) {
            throw new ApiException("Missing the required parameter 'portfolioCommentId' when calling getPortfolioCommentUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioCommentUsingGetCall(portfolioCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio commentary
     * Retrieve the information for a portfolio comment for a portfolio.
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @return PortfolioComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioComment getPortfolioCommentUsingGet(UUID portfolioCommentId) throws ApiException {
        ApiResponse<PortfolioComment> resp = getPortfolioCommentUsingGetWithHttpInfo(portfolioCommentId);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio commentary
     * Retrieve the information for a portfolio comment for a portfolio.
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @return ApiResponse&lt;PortfolioComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioComment> getPortfolioCommentUsingGetWithHttpInfo(UUID portfolioCommentId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioCommentUsingGetValidateBeforeCall(portfolioCommentId, null, null);
        Type localVarReturnType = new TypeToken<PortfolioComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio commentary (asynchronously)
     * Retrieve the information for a portfolio comment for a portfolio.
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioCommentUsingGetAsync(UUID portfolioCommentId, final ApiCallback<PortfolioComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioCommentUsingGetValidateBeforeCall(portfolioCommentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioGoalAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioGoalAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_goal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioGoalAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioGoalAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio goals
     * Get information for all portfolio-goal mappings defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PagePortfolioGoal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioGoal getPortfolioGoalAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PagePortfolioGoal> resp = getPortfolioGoalAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all portfolio goals
     * Get information for all portfolio-goal mappings defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PagePortfolioGoal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioGoal> getPortfolioGoalAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioGoalAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioGoal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio goals (asynchronously)
     * Get information for all portfolio-goal mappings defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioGoalAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PagePortfolioGoal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioGoalAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioGoal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioGoalUsingGet
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioGoalUsingGetCall(UUID portfolioGoalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}"
            .replaceAll("\\{" + "portfolio_goal_id" + "\\}", apiClient.escapeString(portfolioGoalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioGoalUsingGetValidateBeforeCall(UUID portfolioGoalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioGoalId' is set
        if (portfolioGoalId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGoalId' when calling getPortfolioGoalUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioGoalUsingGetCall(portfolioGoalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an portfolio goal
     * Retrieve the information for a specific portfolio-goal mapping.
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @return PortfolioGoal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioGoal getPortfolioGoalUsingGet(UUID portfolioGoalId) throws ApiException {
        ApiResponse<PortfolioGoal> resp = getPortfolioGoalUsingGetWithHttpInfo(portfolioGoalId);
        return resp.getData();
    }

    /**
     * Retrieve an portfolio goal
     * Retrieve the information for a specific portfolio-goal mapping.
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @return ApiResponse&lt;PortfolioGoal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioGoal> getPortfolioGoalUsingGetWithHttpInfo(UUID portfolioGoalId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioGoalUsingGetValidateBeforeCall(portfolioGoalId, null, null);
        Type localVarReturnType = new TypeToken<PortfolioGoal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an portfolio goal (asynchronously)
     * Retrieve the information for a specific portfolio-goal mapping.
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioGoalUsingGetAsync(UUID portfolioGoalId, final ApiCallback<PortfolioGoal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioGoalUsingGetValidateBeforeCall(portfolioGoalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioGoal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioHoldingAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioHoldingAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioHoldingAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioHoldingAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio holdings
     * Get the information for all holding records for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PagePortfolioHoldingLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioHoldingLog getPortfolioHoldingAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PagePortfolioHoldingLog> resp = getPortfolioHoldingAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all portfolio holdings
     * Get the information for all holding records for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PagePortfolioHoldingLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioHoldingLog> getPortfolioHoldingAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioHoldingAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio holdings (asynchronously)
     * Get the information for all holding records for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioHoldingAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PagePortfolioHoldingLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioHoldingAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioHoldingUsingGet
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioHoldingUsingGetCall(UUID portfolioHoldingId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}"
            .replaceAll("\\{" + "portfolio_holding_id" + "\\}", apiClient.escapeString(portfolioHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioHoldingUsingGetValidateBeforeCall(UUID portfolioHoldingId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioHoldingId' is set
        if (portfolioHoldingId == null) {
            throw new ApiException("Missing the required parameter 'portfolioHoldingId' when calling getPortfolioHoldingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioHoldingUsingGetCall(portfolioHoldingId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio holding
     * Retrieve the information for a portfolio holding record for a portfolio.
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param currencyConversion USD (optional)
     * @return PortfolioHoldingLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioHoldingLog getPortfolioHoldingUsingGet(UUID portfolioHoldingId, String currencyConversion) throws ApiException {
        ApiResponse<PortfolioHoldingLog> resp = getPortfolioHoldingUsingGetWithHttpInfo(portfolioHoldingId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio holding
     * Retrieve the information for a portfolio holding record for a portfolio.
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;PortfolioHoldingLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioHoldingLog> getPortfolioHoldingUsingGetWithHttpInfo(UUID portfolioHoldingId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioHoldingUsingGetValidateBeforeCall(portfolioHoldingId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<PortfolioHoldingLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio holding (asynchronously)
     * Retrieve the information for a portfolio holding record for a portfolio.
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioHoldingUsingGetAsync(UUID portfolioHoldingId, String currencyConversion, final ApiCallback<PortfolioHoldingLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioHoldingUsingGetValidateBeforeCall(portfolioHoldingId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioHoldingLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioTransactionAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioTransactionAllUsingGetCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioTransactionAllUsingGetValidateBeforeCall(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfolioTransactionAllUsingGetCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all portfolio transactions
     * Get the information for all transaction records for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PagePortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioTransaction getPortfolioTransactionAllUsingGet(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PagePortfolioTransaction> resp = getPortfolioTransactionAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all portfolio transactions
     * Get the information for all transaction records for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PagePortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioTransaction> getPortfolioTransactionAllUsingGetWithHttpInfo(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioTransactionAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all portfolio transactions (asynchronously)
     * Get the information for all transaction records for all portfolios defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion currency_conversion (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioTransactionAllUsingGetAsync(Boolean ascending, String currencyConversion, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PagePortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioTransactionAllUsingGetValidateBeforeCall(ascending, currencyConversion, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioTransactionUsingGet
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioTransactionUsingGetCall(UUID portfolioTransactionId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}"
            .replaceAll("\\{" + "portfolio_transaction_id" + "\\}", apiClient.escapeString(portfolioTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioTransactionUsingGetValidateBeforeCall(UUID portfolioTransactionId, String currencyConversion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioTransactionId' is set
        if (portfolioTransactionId == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionId' when calling getPortfolioTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioTransactionUsingGetCall(portfolioTransactionId, currencyConversion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio transaction
     * Retrieve the information for a portfolio transaction record for a portfolio. 
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @return PortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioTransaction getPortfolioTransactionUsingGet(UUID portfolioTransactionId, String currencyConversion) throws ApiException {
        ApiResponse<PortfolioTransaction> resp = getPortfolioTransactionUsingGetWithHttpInfo(portfolioTransactionId, currencyConversion);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio transaction
     * Retrieve the information for a portfolio transaction record for a portfolio. 
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @return ApiResponse&lt;PortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioTransaction> getPortfolioTransactionUsingGetWithHttpInfo(UUID portfolioTransactionId, String currencyConversion) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioTransactionUsingGetValidateBeforeCall(portfolioTransactionId, currencyConversion, null, null);
        Type localVarReturnType = new TypeToken<PortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio transaction (asynchronously)
     * Retrieve the information for a portfolio transaction record for a portfolio. 
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param currencyConversion USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioTransactionUsingGetAsync(UUID portfolioTransactionId, String currencyConversion, final ApiCallback<PortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioTransactionUsingGetValidateBeforeCall(portfolioTransactionId, currencyConversion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioUsingGet
     * @param portfolioId UUID portfolio_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioUsingGetCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioUsingGetValidateBeforeCall(UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getPortfolioUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioUsingGetCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a portfolio
     * Retrieve a portfolio for an account.
     * @param portfolioId UUID portfolio_id (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio getPortfolioUsingGet(UUID portfolioId) throws ApiException {
        ApiResponse<Portfolio> resp = getPortfolioUsingGetWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * Retrieve a portfolio
     * Retrieve a portfolio for an account.
     * @param portfolioId UUID portfolio_id (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> getPortfolioUsingGetWithHttpInfo(UUID portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioUsingGetValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a portfolio (asynchronously)
     * Retrieve a portfolio for an account.
     * @param portfolioId UUID portfolio_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioUsingGetAsync(UUID portfolioId, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioUsingGetValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioAssetSizeUsingPut
     * @param portfolioAssetSize portfolio_asset_size (required)
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioAssetSizeUsingPutCall(Object portfolioAssetSize, UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioAssetSize;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}"
            .replaceAll("\\{" + "portfolio_asset_size_id" + "\\}", apiClient.escapeString(portfolioAssetSizeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioAssetSizeUsingPutValidateBeforeCall(Object portfolioAssetSize, UUID portfolioAssetSizeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioAssetSize' is set
        if (portfolioAssetSize == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSize' when calling updatePortfolioAssetSizeUsingPut(Async)");
        }
        
        // verify the required parameter 'portfolioAssetSizeId' is set
        if (portfolioAssetSizeId == null) {
            throw new ApiException("Missing the required parameter 'portfolioAssetSizeId' when calling updatePortfolioAssetSizeUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioAssetSizeUsingPutCall(portfolioAssetSize, portfolioAssetSizeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio asset size
     * Update the information for a portfolio asset size record for a portfolio.
     * @param portfolioAssetSize portfolio_asset_size (required)
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @return PortfolioAssetSizeLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioAssetSizeLog updatePortfolioAssetSizeUsingPut(Object portfolioAssetSize, UUID portfolioAssetSizeId) throws ApiException {
        ApiResponse<PortfolioAssetSizeLog> resp = updatePortfolioAssetSizeUsingPutWithHttpInfo(portfolioAssetSize, portfolioAssetSizeId);
        return resp.getData();
    }

    /**
     * Update a portfolio asset size
     * Update the information for a portfolio asset size record for a portfolio.
     * @param portfolioAssetSize portfolio_asset_size (required)
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @return ApiResponse&lt;PortfolioAssetSizeLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioAssetSizeLog> updatePortfolioAssetSizeUsingPutWithHttpInfo(Object portfolioAssetSize, UUID portfolioAssetSizeId) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioAssetSizeUsingPutValidateBeforeCall(portfolioAssetSize, portfolioAssetSizeId, null, null);
        Type localVarReturnType = new TypeToken<PortfolioAssetSizeLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio asset size (asynchronously)
     * Update the information for a portfolio asset size record for a portfolio.
     * @param portfolioAssetSize portfolio_asset_size (required)
     * @param portfolioAssetSizeId UUID portfolio_asset_size_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioAssetSizeUsingPutAsync(Object portfolioAssetSize, UUID portfolioAssetSizeId, final ApiCallback<PortfolioAssetSizeLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioAssetSizeUsingPutValidateBeforeCall(portfolioAssetSize, portfolioAssetSizeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioAssetSizeLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioCommentUsingPut
     * @param portfolioComment portfolio_comment (required)
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioCommentUsingPutCall(Object portfolioComment, UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioComment;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}"
            .replaceAll("\\{" + "portfolio_comment_id" + "\\}", apiClient.escapeString(portfolioCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioCommentUsingPutValidateBeforeCall(Object portfolioComment, UUID portfolioCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioComment' is set
        if (portfolioComment == null) {
            throw new ApiException("Missing the required parameter 'portfolioComment' when calling updatePortfolioCommentUsingPut(Async)");
        }
        
        // verify the required parameter 'portfolioCommentId' is set
        if (portfolioCommentId == null) {
            throw new ApiException("Missing the required parameter 'portfolioCommentId' when calling updatePortfolioCommentUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioCommentUsingPutCall(portfolioComment, portfolioCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio comment
     * Update the information for a portfolio comment for a portfolio.
     * @param portfolioComment portfolio_comment (required)
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @return PortfolioComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioComment updatePortfolioCommentUsingPut(Object portfolioComment, UUID portfolioCommentId) throws ApiException {
        ApiResponse<PortfolioComment> resp = updatePortfolioCommentUsingPutWithHttpInfo(portfolioComment, portfolioCommentId);
        return resp.getData();
    }

    /**
     * Update a portfolio comment
     * Update the information for a portfolio comment for a portfolio.
     * @param portfolioComment portfolio_comment (required)
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @return ApiResponse&lt;PortfolioComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioComment> updatePortfolioCommentUsingPutWithHttpInfo(Object portfolioComment, UUID portfolioCommentId) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioCommentUsingPutValidateBeforeCall(portfolioComment, portfolioCommentId, null, null);
        Type localVarReturnType = new TypeToken<PortfolioComment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio comment (asynchronously)
     * Update the information for a portfolio comment for a portfolio.
     * @param portfolioComment portfolio_comment (required)
     * @param portfolioCommentId UUID portfolio_comment_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioCommentUsingPutAsync(Object portfolioComment, UUID portfolioCommentId, final ApiCallback<PortfolioComment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioCommentUsingPutValidateBeforeCall(portfolioComment, portfolioCommentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioComment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioGoalUsingPut
     * @param portfolioGoal portfolio_goal (required)
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioGoalUsingPutCall(Object portfolioGoal, UUID portfolioGoalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioGoal;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}"
            .replaceAll("\\{" + "portfolio_goal_id" + "\\}", apiClient.escapeString(portfolioGoalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioGoalUsingPutValidateBeforeCall(Object portfolioGoal, UUID portfolioGoalId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioGoal' is set
        if (portfolioGoal == null) {
            throw new ApiException("Missing the required parameter 'portfolioGoal' when calling updatePortfolioGoalUsingPut(Async)");
        }
        
        // verify the required parameter 'portfolioGoalId' is set
        if (portfolioGoalId == null) {
            throw new ApiException("Missing the required parameter 'portfolioGoalId' when calling updatePortfolioGoalUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioGoalUsingPutCall(portfolioGoal, portfolioGoalId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an portfolio goal
     * Update the information for an portfolio-goal mapping.
     * @param portfolioGoal portfolio_goal (required)
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @return PortfolioGoal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioGoal updatePortfolioGoalUsingPut(Object portfolioGoal, UUID portfolioGoalId) throws ApiException {
        ApiResponse<PortfolioGoal> resp = updatePortfolioGoalUsingPutWithHttpInfo(portfolioGoal, portfolioGoalId);
        return resp.getData();
    }

    /**
     * Update an portfolio goal
     * Update the information for an portfolio-goal mapping.
     * @param portfolioGoal portfolio_goal (required)
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @return ApiResponse&lt;PortfolioGoal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioGoal> updatePortfolioGoalUsingPutWithHttpInfo(Object portfolioGoal, UUID portfolioGoalId) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioGoalUsingPutValidateBeforeCall(portfolioGoal, portfolioGoalId, null, null);
        Type localVarReturnType = new TypeToken<PortfolioGoal>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an portfolio goal (asynchronously)
     * Update the information for an portfolio-goal mapping.
     * @param portfolioGoal portfolio_goal (required)
     * @param portfolioGoalId UUID portfolio_goal_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioGoalUsingPutAsync(Object portfolioGoal, UUID portfolioGoalId, final ApiCallback<PortfolioGoal> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioGoalUsingPutValidateBeforeCall(portfolioGoal, portfolioGoalId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioGoal>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioHoldingUsingPut
     * @param portfolioHolding portfolio_holding (required)
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioHoldingUsingPutCall(Object portfolioHolding, UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioHolding;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}"
            .replaceAll("\\{" + "portfolio_holding_id" + "\\}", apiClient.escapeString(portfolioHoldingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioHoldingUsingPutValidateBeforeCall(Object portfolioHolding, UUID portfolioHoldingId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioHolding' is set
        if (portfolioHolding == null) {
            throw new ApiException("Missing the required parameter 'portfolioHolding' when calling updatePortfolioHoldingUsingPut(Async)");
        }
        
        // verify the required parameter 'portfolioHoldingId' is set
        if (portfolioHoldingId == null) {
            throw new ApiException("Missing the required parameter 'portfolioHoldingId' when calling updatePortfolioHoldingUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioHoldingUsingPutCall(portfolioHolding, portfolioHoldingId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio holding
     * Update the information for a portfolio holding record for a portfolio.
     * @param portfolioHolding portfolio_holding (required)
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @return PortfolioHoldingLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioHoldingLog updatePortfolioHoldingUsingPut(Object portfolioHolding, UUID portfolioHoldingId) throws ApiException {
        ApiResponse<PortfolioHoldingLog> resp = updatePortfolioHoldingUsingPutWithHttpInfo(portfolioHolding, portfolioHoldingId);
        return resp.getData();
    }

    /**
     * Update a portfolio holding
     * Update the information for a portfolio holding record for a portfolio.
     * @param portfolioHolding portfolio_holding (required)
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @return ApiResponse&lt;PortfolioHoldingLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioHoldingLog> updatePortfolioHoldingUsingPutWithHttpInfo(Object portfolioHolding, UUID portfolioHoldingId) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioHoldingUsingPutValidateBeforeCall(portfolioHolding, portfolioHoldingId, null, null);
        Type localVarReturnType = new TypeToken<PortfolioHoldingLog>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio holding (asynchronously)
     * Update the information for a portfolio holding record for a portfolio.
     * @param portfolioHolding portfolio_holding (required)
     * @param portfolioHoldingId UUID portfolio_holding_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioHoldingUsingPutAsync(Object portfolioHolding, UUID portfolioHoldingId, final ApiCallback<PortfolioHoldingLog> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioHoldingUsingPutValidateBeforeCall(portfolioHolding, portfolioHoldingId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioHoldingLog>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioTransactionUsingPut
     * @param portfolioTransaction portfolio_transaction (required)
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioTransactionUsingPutCall(Object portfolioTransaction, UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioTransaction;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}"
            .replaceAll("\\{" + "portfolio_transaction_id" + "\\}", apiClient.escapeString(portfolioTransactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioTransactionUsingPutValidateBeforeCall(Object portfolioTransaction, UUID portfolioTransactionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioTransaction' is set
        if (portfolioTransaction == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransaction' when calling updatePortfolioTransactionUsingPut(Async)");
        }
        
        // verify the required parameter 'portfolioTransactionId' is set
        if (portfolioTransactionId == null) {
            throw new ApiException("Missing the required parameter 'portfolioTransactionId' when calling updatePortfolioTransactionUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioTransactionUsingPutCall(portfolioTransaction, portfolioTransactionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio transaction
     * Update the information for a portfolio transaction record for a portfolio.
     * @param portfolioTransaction portfolio_transaction (required)
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @return PortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioTransaction updatePortfolioTransactionUsingPut(Object portfolioTransaction, UUID portfolioTransactionId) throws ApiException {
        ApiResponse<PortfolioTransaction> resp = updatePortfolioTransactionUsingPutWithHttpInfo(portfolioTransaction, portfolioTransactionId);
        return resp.getData();
    }

    /**
     * Update a portfolio transaction
     * Update the information for a portfolio transaction record for a portfolio.
     * @param portfolioTransaction portfolio_transaction (required)
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @return ApiResponse&lt;PortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioTransaction> updatePortfolioTransactionUsingPutWithHttpInfo(Object portfolioTransaction, UUID portfolioTransactionId) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioTransactionUsingPutValidateBeforeCall(portfolioTransaction, portfolioTransactionId, null, null);
        Type localVarReturnType = new TypeToken<PortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio transaction (asynchronously)
     * Update the information for a portfolio transaction record for a portfolio.
     * @param portfolioTransaction portfolio_transaction (required)
     * @param portfolioTransactionId UUID portfolio_transaction_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioTransactionUsingPutAsync(Object portfolioTransaction, UUID portfolioTransactionId, final ApiCallback<PortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioTransactionUsingPutValidateBeforeCall(portfolioTransaction, portfolioTransactionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioUsingPut
     * @param portfolio portfolio (required)
     * @param portfolioId UUID portfolio_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioUsingPutCall(Object portfolio, UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolio;

        // create path and map variables
        String localVarPath = "/nucleus/v1/portfolio/{portfolio_id}"
            .replaceAll("\\{" + "portfolio_id" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioUsingPutValidateBeforeCall(Object portfolio, UUID portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolio' is set
        if (portfolio == null) {
            throw new ApiException("Missing the required parameter 'portfolio' when calling updatePortfolioUsingPut(Async)");
        }
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling updatePortfolioUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioUsingPutCall(portfolio, portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio
     * Update a portfolio for an account.
     * @param portfolio portfolio (required)
     * @param portfolioId UUID portfolio_id (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio updatePortfolioUsingPut(Object portfolio, UUID portfolioId) throws ApiException {
        ApiResponse<Portfolio> resp = updatePortfolioUsingPutWithHttpInfo(portfolio, portfolioId);
        return resp.getData();
    }

    /**
     * Update a portfolio
     * Update a portfolio for an account.
     * @param portfolio portfolio (required)
     * @param portfolioId UUID portfolio_id (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> updatePortfolioUsingPutWithHttpInfo(Object portfolio, UUID portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioUsingPutValidateBeforeCall(portfolio, portfolioId, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio (asynchronously)
     * Update a portfolio for an account.
     * @param portfolio portfolio (required)
     * @param portfolioId UUID portfolio_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioUsingPutAsync(Object portfolio, UUID portfolioId, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioUsingPutValidateBeforeCall(portfolio, portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
