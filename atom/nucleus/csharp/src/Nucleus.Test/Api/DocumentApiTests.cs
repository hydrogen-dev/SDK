/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing DocumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DocumentApiTests
    {
        private DocumentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DocumentApi
            //Assert.IsInstanceOfType(typeof(DocumentApi), instance, "instance is a DocumentApi");
        }

        
        /// <summary>
        /// Test CreateDocumentUsingPost
        /// </summary>
        [Test]
        public void CreateDocumentUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Document documentRequest = null;
            //var response = instance.CreateDocumentUsingPost(documentRequest);
            //Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test DeleteDocumentUsingDelete
        /// </summary>
        [Test]
        public void DeleteDocumentUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? documentId = null;
            //instance.DeleteDocumentUsingDelete(documentId);
            
        }
        
        /// <summary>
        /// Test GetDocumentAllUsingGet
        /// </summary>
        [Test]
        public void GetDocumentAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetDocumentAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageDocument> (response, "response is PageDocument");
        }
        
        /// <summary>
        /// Test GetDocumentUsingGet
        /// </summary>
        [Test]
        public void GetDocumentUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? documentId = null;
            //var response = instance.GetDocumentUsingGet(documentId);
            //Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
        /// <summary>
        /// Test UpdateDocumentUsingPut
        /// </summary>
        [Test]
        public void UpdateDocumentUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object document = null;
            //Guid? documentId = null;
            //var response = instance.UpdateDocumentUsingPut(document, documentId);
            //Assert.IsInstanceOf<Document> (response, "response is Document");
        }
        
    }

}
