<?php
/**
 * RatioTargets
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * RatioTargets Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RatioTargets implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RatioTargets';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'liquidity_ratio_liabilities' => 'float',
        'current_ratio' => 'float',
        'asset_allocation_ratio' => 'float',
        'savings_ratio_net' => 'float',
        'savings_ratio_gross' => 'float',
        'liquidity_ratio_expenses' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'liquidity_ratio_liabilities' => 'float',
        'current_ratio' => 'float',
        'asset_allocation_ratio' => 'float',
        'savings_ratio_net' => 'float',
        'savings_ratio_gross' => 'float',
        'liquidity_ratio_expenses' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'liquidity_ratio_liabilities' => 'liquidity_ratio_liabilities',
        'current_ratio' => 'current_ratio',
        'asset_allocation_ratio' => 'asset_allocation_ratio',
        'savings_ratio_net' => 'savings_ratio_net',
        'savings_ratio_gross' => 'savings_ratio_gross',
        'liquidity_ratio_expenses' => 'liquidity_ratio_expenses'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'liquidity_ratio_liabilities' => 'setLiquidityRatioLiabilities',
        'current_ratio' => 'setCurrentRatio',
        'asset_allocation_ratio' => 'setAssetAllocationRatio',
        'savings_ratio_net' => 'setSavingsRatioNet',
        'savings_ratio_gross' => 'setSavingsRatioGross',
        'liquidity_ratio_expenses' => 'setLiquidityRatioExpenses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'liquidity_ratio_liabilities' => 'getLiquidityRatioLiabilities',
        'current_ratio' => 'getCurrentRatio',
        'asset_allocation_ratio' => 'getAssetAllocationRatio',
        'savings_ratio_net' => 'getSavingsRatioNet',
        'savings_ratio_gross' => 'getSavingsRatioGross',
        'liquidity_ratio_expenses' => 'getLiquidityRatioExpenses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['liquidity_ratio_liabilities'] = isset($data['liquidity_ratio_liabilities']) ? $data['liquidity_ratio_liabilities'] : 0.1;
        $this->container['current_ratio'] = isset($data['current_ratio']) ? $data['current_ratio'] : 0.5;
        $this->container['asset_allocation_ratio'] = isset($data['asset_allocation_ratio']) ? $data['asset_allocation_ratio'] : 1.5;
        $this->container['savings_ratio_net'] = isset($data['savings_ratio_net']) ? $data['savings_ratio_net'] : 0.1;
        $this->container['savings_ratio_gross'] = isset($data['savings_ratio_gross']) ? $data['savings_ratio_gross'] : 0.1;
        $this->container['liquidity_ratio_expenses'] = isset($data['liquidity_ratio_expenses']) ? $data['liquidity_ratio_expenses'] : 2.5;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['liquidity_ratio_liabilities']) && ($this->container['liquidity_ratio_liabilities'] < 0)) {
            $invalidProperties[] = "invalid value for 'liquidity_ratio_liabilities', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['current_ratio']) && ($this->container['current_ratio'] < 0)) {
            $invalidProperties[] = "invalid value for 'current_ratio', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['asset_allocation_ratio']) && ($this->container['asset_allocation_ratio'] < 0)) {
            $invalidProperties[] = "invalid value for 'asset_allocation_ratio', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['savings_ratio_net']) && ($this->container['savings_ratio_net'] < 0)) {
            $invalidProperties[] = "invalid value for 'savings_ratio_net', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['savings_ratio_gross']) && ($this->container['savings_ratio_gross'] < 0)) {
            $invalidProperties[] = "invalid value for 'savings_ratio_gross', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['liquidity_ratio_expenses']) && ($this->container['liquidity_ratio_expenses'] < 0)) {
            $invalidProperties[] = "invalid value for 'liquidity_ratio_expenses', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets liquidity_ratio_liabilities
     *
     * @return float
     */
    public function getLiquidityRatioLiabilities()
    {
        return $this->container['liquidity_ratio_liabilities'];
    }

    /**
     * Sets liquidity_ratio_liabilities
     *
     * @param float $liquidity_ratio_liabilities liquidity_ratio_liabilities
     *
     * @return $this
     */
    public function setLiquidityRatioLiabilities($liquidity_ratio_liabilities)
    {

        if (!is_null($liquidity_ratio_liabilities) && ($liquidity_ratio_liabilities < 0)) {
            throw new \InvalidArgumentException('invalid value for $liquidity_ratio_liabilities when calling RatioTargets., must be bigger than or equal to 0.');
        }

        $this->container['liquidity_ratio_liabilities'] = $liquidity_ratio_liabilities;

        return $this;
    }

    /**
     * Gets current_ratio
     *
     * @return float
     */
    public function getCurrentRatio()
    {
        return $this->container['current_ratio'];
    }

    /**
     * Sets current_ratio
     *
     * @param float $current_ratio current_ratio
     *
     * @return $this
     */
    public function setCurrentRatio($current_ratio)
    {

        if (!is_null($current_ratio) && ($current_ratio < 0)) {
            throw new \InvalidArgumentException('invalid value for $current_ratio when calling RatioTargets., must be bigger than or equal to 0.');
        }

        $this->container['current_ratio'] = $current_ratio;

        return $this;
    }

    /**
     * Gets asset_allocation_ratio
     *
     * @return float
     */
    public function getAssetAllocationRatio()
    {
        return $this->container['asset_allocation_ratio'];
    }

    /**
     * Sets asset_allocation_ratio
     *
     * @param float $asset_allocation_ratio asset_allocation_ratio
     *
     * @return $this
     */
    public function setAssetAllocationRatio($asset_allocation_ratio)
    {

        if (!is_null($asset_allocation_ratio) && ($asset_allocation_ratio < 0)) {
            throw new \InvalidArgumentException('invalid value for $asset_allocation_ratio when calling RatioTargets., must be bigger than or equal to 0.');
        }

        $this->container['asset_allocation_ratio'] = $asset_allocation_ratio;

        return $this;
    }

    /**
     * Gets savings_ratio_net
     *
     * @return float
     */
    public function getSavingsRatioNet()
    {
        return $this->container['savings_ratio_net'];
    }

    /**
     * Sets savings_ratio_net
     *
     * @param float $savings_ratio_net savings_ratio_net
     *
     * @return $this
     */
    public function setSavingsRatioNet($savings_ratio_net)
    {

        if (!is_null($savings_ratio_net) && ($savings_ratio_net < 0)) {
            throw new \InvalidArgumentException('invalid value for $savings_ratio_net when calling RatioTargets., must be bigger than or equal to 0.');
        }

        $this->container['savings_ratio_net'] = $savings_ratio_net;

        return $this;
    }

    /**
     * Gets savings_ratio_gross
     *
     * @return float
     */
    public function getSavingsRatioGross()
    {
        return $this->container['savings_ratio_gross'];
    }

    /**
     * Sets savings_ratio_gross
     *
     * @param float $savings_ratio_gross savings_ratio_gross
     *
     * @return $this
     */
    public function setSavingsRatioGross($savings_ratio_gross)
    {

        if (!is_null($savings_ratio_gross) && ($savings_ratio_gross < 0)) {
            throw new \InvalidArgumentException('invalid value for $savings_ratio_gross when calling RatioTargets., must be bigger than or equal to 0.');
        }

        $this->container['savings_ratio_gross'] = $savings_ratio_gross;

        return $this;
    }

    /**
     * Gets liquidity_ratio_expenses
     *
     * @return float
     */
    public function getLiquidityRatioExpenses()
    {
        return $this->container['liquidity_ratio_expenses'];
    }

    /**
     * Sets liquidity_ratio_expenses
     *
     * @param float $liquidity_ratio_expenses liquidity_ratio_expenses
     *
     * @return $this
     */
    public function setLiquidityRatioExpenses($liquidity_ratio_expenses)
    {

        if (!is_null($liquidity_ratio_expenses) && ($liquidity_ratio_expenses < 0)) {
            throw new \InvalidArgumentException('invalid value for $liquidity_ratio_expenses when calling RatioTargets., must be bigger than or equal to 0.');
        }

        $this->container['liquidity_ratio_expenses'] = $liquidity_ratio_expenses;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


