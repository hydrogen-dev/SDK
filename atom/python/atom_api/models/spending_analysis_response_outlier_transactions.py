# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpendingAnalysisResponseOutlierTransactions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'transaction_date': 'str',
        'transaction_type': 'str',
        'amount': 'float',
        'merchant': 'str',
        'category': 'str',
        'subcategory': 'str',
        'description': 'str',
        'memo': 'str'
    }

    attribute_map = {
        'id': 'id',
        'transaction_date': 'transaction_date',
        'transaction_type': 'transaction_type',
        'amount': 'amount',
        'merchant': 'merchant',
        'category': 'category',
        'subcategory': 'subcategory',
        'description': 'description',
        'memo': 'memo'
    }

    def __init__(self, id=None, transaction_date=None, transaction_type=None, amount=None, merchant=None, category=None, subcategory=None, description=None, memo=None):  # noqa: E501
        """SpendingAnalysisResponseOutlierTransactions - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._transaction_date = None
        self._transaction_type = None
        self._amount = None
        self._merchant = None
        self._category = None
        self._subcategory = None
        self._description = None
        self._memo = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if amount is not None:
            self.amount = amount
        if merchant is not None:
            self.merchant = merchant
        if category is not None:
            self.category = category
        if subcategory is not None:
            self.subcategory = subcategory
        if description is not None:
            self.description = description
        if memo is not None:
            self.memo = memo

    @property
    def id(self):
        """Gets the id of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        The id for the aggregation account transaction record  # noqa: E501

        :return: The id of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SpendingAnalysisResponseOutlierTransactions.

        The id for the aggregation account transaction record  # noqa: E501

        :param id: The id of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def transaction_date(self):
        """Gets the transaction_date of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        The date the transaction took place  # noqa: E501

        :return: The transaction_date of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this SpendingAnalysisResponseOutlierTransactions.

        The date the transaction took place  # noqa: E501

        :param transaction_date: The transaction_date of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """

        self._transaction_date = transaction_date

    @property
    def transaction_type(self):
        """Gets the transaction_type of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        Type of the transaction. Value may be Debit or Credit.  # noqa: E501

        :return: The transaction_type of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this SpendingAnalysisResponseOutlierTransactions.

        Type of the transaction. Value may be Debit or Credit.  # noqa: E501

        :param transaction_type: The transaction_type of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """
        allowed_values = ["Debit", "Credit"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def amount(self):
        """Gets the amount of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        Amount of the transaction  # noqa: E501

        :return: The amount of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SpendingAnalysisResponseOutlierTransactions.

        Amount of the transaction  # noqa: E501

        :param amount: The amount of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def merchant(self):
        """Gets the merchant of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        The merchant for the transaction such as the merchant posted for a credit card charge  # noqa: E501

        :return: The merchant of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this SpendingAnalysisResponseOutlierTransactions.

        The merchant for the transaction such as the merchant posted for a credit card charge  # noqa: E501

        :param merchant: The merchant of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """

        self._merchant = merchant

    @property
    def category(self):
        """Gets the category of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        Category of the transaction  # noqa: E501

        :return: The category of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SpendingAnalysisResponseOutlierTransactions.

        Category of the transaction  # noqa: E501

        :param category: The category of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def subcategory(self):
        """Gets the subcategory of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        Subcategory of the transaction  # noqa: E501

        :return: The subcategory of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this SpendingAnalysisResponseOutlierTransactions.

        Subcategory of the transaction  # noqa: E501

        :param subcategory: The subcategory of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def description(self):
        """Gets the description of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        Description of the transaction  # noqa: E501

        :return: The description of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SpendingAnalysisResponseOutlierTransactions.

        Description of the transaction  # noqa: E501

        :param description: The description of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def memo(self):
        """Gets the memo of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501

        Memo attached to the transaction  # noqa: E501

        :return: The memo of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this SpendingAnalysisResponseOutlierTransactions.

        Memo attached to the transaction  # noqa: E501

        :param memo: The memo of this SpendingAnalysisResponseOutlierTransactions.  # noqa: E501
        :type: str
        """

        self._memo = memo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpendingAnalysisResponseOutlierTransactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpendingAnalysisResponseOutlierTransactions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
