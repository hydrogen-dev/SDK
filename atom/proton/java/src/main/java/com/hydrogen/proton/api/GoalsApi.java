/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiCallback;
import com.hydrogen.proton.ApiResponse;
import com.hydrogen.proton.Configuration;
import com.hydrogen.proton.model.GoalAccumulationAllocationRequest;
import com.hydrogen.proton.model.GoalAccumulationRecommendationRequest;
import com.hydrogen.proton.model.GoalAccumulationStatusRequest;
import com.hydrogen.proton.model.GoalDecumulationAllocationRequest;
import com.hydrogen.proton.model.GoalDecumulationRecommendationRequest;
import com.hydrogen.proton.model.GoalDecumulationStatusRequest;
import com.hydrogen.proton.ApiClient;
import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.Pair;
import com.hydrogen.proton.ProgressRequestBody;
import com.hydrogen.proton.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GoalsApi {
    private ApiClient apiClient;

    public GoalsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GoalsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for goalAccumulationAllocation
     * @param goalAccumulationAllocationRequest Request payload for Goal Accumulation Allocation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goalAccumulationAllocationCall(GoalAccumulationAllocationRequest goalAccumulationAllocationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalAccumulationAllocationRequest;

        // create path and map variables
        String localVarPath = "/goal_accumulation/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalAccumulationAllocationValidateBeforeCall(GoalAccumulationAllocationRequest goalAccumulationAllocationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalAccumulationAllocationRequest' is set
        if (goalAccumulationAllocationRequest == null) {
            throw new ApiException("Missing the required parameter 'goalAccumulationAllocationRequest' when calling goalAccumulationAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalAccumulationAllocationCall(goalAccumulationAllocationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal Accumulation Allocation
     * Allocate based on an accumulation goal
     * @param goalAccumulationAllocationRequest Request payload for Goal Accumulation Allocation (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> goalAccumulationAllocation(GoalAccumulationAllocationRequest goalAccumulationAllocationRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = goalAccumulationAllocationWithHttpInfo(goalAccumulationAllocationRequest);
        return resp.getData();
    }

    /**
     * Goal Accumulation Allocation
     * Allocate based on an accumulation goal
     * @param goalAccumulationAllocationRequest Request payload for Goal Accumulation Allocation (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> goalAccumulationAllocationWithHttpInfo(GoalAccumulationAllocationRequest goalAccumulationAllocationRequest) throws ApiException {
        com.squareup.okhttp.Call call = goalAccumulationAllocationValidateBeforeCall(goalAccumulationAllocationRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal Accumulation Allocation (asynchronously)
     * Allocate based on an accumulation goal
     * @param goalAccumulationAllocationRequest Request payload for Goal Accumulation Allocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goalAccumulationAllocationAsync(GoalAccumulationAllocationRequest goalAccumulationAllocationRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalAccumulationAllocationValidateBeforeCall(goalAccumulationAllocationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalAccumulationRecommendation
     * @param goalAccumulationRecommendationRequest Request payload for Goal Accumulation Recommendation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goalAccumulationRecommendationCall(GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalAccumulationRecommendationRequest;

        // create path and map variables
        String localVarPath = "/goal_accumulation/recommendation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalAccumulationRecommendationValidateBeforeCall(GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalAccumulationRecommendationRequest' is set
        if (goalAccumulationRecommendationRequest == null) {
            throw new ApiException("Missing the required parameter 'goalAccumulationRecommendationRequest' when calling goalAccumulationRecommendation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalAccumulationRecommendationCall(goalAccumulationRecommendationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal Accumulation Recommendation
     * Generate recommendations to achieve an accumulation goal
     * @param goalAccumulationRecommendationRequest Request payload for Goal Accumulation Recommendation (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> goalAccumulationRecommendation(GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = goalAccumulationRecommendationWithHttpInfo(goalAccumulationRecommendationRequest);
        return resp.getData();
    }

    /**
     * Goal Accumulation Recommendation
     * Generate recommendations to achieve an accumulation goal
     * @param goalAccumulationRecommendationRequest Request payload for Goal Accumulation Recommendation (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> goalAccumulationRecommendationWithHttpInfo(GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest) throws ApiException {
        com.squareup.okhttp.Call call = goalAccumulationRecommendationValidateBeforeCall(goalAccumulationRecommendationRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal Accumulation Recommendation (asynchronously)
     * Generate recommendations to achieve an accumulation goal
     * @param goalAccumulationRecommendationRequest Request payload for Goal Accumulation Recommendation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goalAccumulationRecommendationAsync(GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalAccumulationRecommendationValidateBeforeCall(goalAccumulationRecommendationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalAccumulationStatus
     * @param goalAccumulationStatusRequest Request payload for Goal Accumulation Status (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goalAccumulationStatusCall(GoalAccumulationStatusRequest goalAccumulationStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalAccumulationStatusRequest;

        // create path and map variables
        String localVarPath = "/goal_accumulation/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalAccumulationStatusValidateBeforeCall(GoalAccumulationStatusRequest goalAccumulationStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalAccumulationStatusRequest' is set
        if (goalAccumulationStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'goalAccumulationStatusRequest' when calling goalAccumulationStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = goalAccumulationStatusCall(goalAccumulationStatusRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal Accumulation Status
     * Track the status of an accumulation goal
     * @param goalAccumulationStatusRequest Request payload for Goal Accumulation Status (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> goalAccumulationStatus(GoalAccumulationStatusRequest goalAccumulationStatusRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = goalAccumulationStatusWithHttpInfo(goalAccumulationStatusRequest);
        return resp.getData();
    }

    /**
     * Goal Accumulation Status
     * Track the status of an accumulation goal
     * @param goalAccumulationStatusRequest Request payload for Goal Accumulation Status (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> goalAccumulationStatusWithHttpInfo(GoalAccumulationStatusRequest goalAccumulationStatusRequest) throws ApiException {
        com.squareup.okhttp.Call call = goalAccumulationStatusValidateBeforeCall(goalAccumulationStatusRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal Accumulation Status (asynchronously)
     * Track the status of an accumulation goal
     * @param goalAccumulationStatusRequest Request payload for Goal Accumulation Status (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goalAccumulationStatusAsync(GoalAccumulationStatusRequest goalAccumulationStatusRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalAccumulationStatusValidateBeforeCall(goalAccumulationStatusRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalDecumulationAllocation
     * @param goalDecumulationAllocationRequest Request payload for Goal Decumulation Allocation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goalDecumulationAllocationCall(GoalDecumulationAllocationRequest goalDecumulationAllocationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalDecumulationAllocationRequest;

        // create path and map variables
        String localVarPath = "/goal_decumulation/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalDecumulationAllocationValidateBeforeCall(GoalDecumulationAllocationRequest goalDecumulationAllocationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalDecumulationAllocationRequest' is set
        if (goalDecumulationAllocationRequest == null) {
            throw new ApiException("Missing the required parameter 'goalDecumulationAllocationRequest' when calling goalDecumulationAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalDecumulationAllocationCall(goalDecumulationAllocationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal Decumulation Allocation
     * Allocate based on a decumulation goal
     * @param goalDecumulationAllocationRequest Request payload for Goal Decumulation Allocation (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> goalDecumulationAllocation(GoalDecumulationAllocationRequest goalDecumulationAllocationRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = goalDecumulationAllocationWithHttpInfo(goalDecumulationAllocationRequest);
        return resp.getData();
    }

    /**
     * Goal Decumulation Allocation
     * Allocate based on a decumulation goal
     * @param goalDecumulationAllocationRequest Request payload for Goal Decumulation Allocation (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> goalDecumulationAllocationWithHttpInfo(GoalDecumulationAllocationRequest goalDecumulationAllocationRequest) throws ApiException {
        com.squareup.okhttp.Call call = goalDecumulationAllocationValidateBeforeCall(goalDecumulationAllocationRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal Decumulation Allocation (asynchronously)
     * Allocate based on a decumulation goal
     * @param goalDecumulationAllocationRequest Request payload for Goal Decumulation Allocation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goalDecumulationAllocationAsync(GoalDecumulationAllocationRequest goalDecumulationAllocationRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalDecumulationAllocationValidateBeforeCall(goalDecumulationAllocationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalDecumulationRecommendation
     * @param goalDecumulationRecommendationRequest Request payload for Goal Decumulation Recommendation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goalDecumulationRecommendationCall(GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalDecumulationRecommendationRequest;

        // create path and map variables
        String localVarPath = "/goal_decumulation/recommendation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalDecumulationRecommendationValidateBeforeCall(GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalDecumulationRecommendationRequest' is set
        if (goalDecumulationRecommendationRequest == null) {
            throw new ApiException("Missing the required parameter 'goalDecumulationRecommendationRequest' when calling goalDecumulationRecommendation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalDecumulationRecommendationCall(goalDecumulationRecommendationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal Decumulation Recommendation
     * Generate recommendations to achieve a decumulation goal
     * @param goalDecumulationRecommendationRequest Request payload for Goal Decumulation Recommendation (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> goalDecumulationRecommendation(GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = goalDecumulationRecommendationWithHttpInfo(goalDecumulationRecommendationRequest);
        return resp.getData();
    }

    /**
     * Goal Decumulation Recommendation
     * Generate recommendations to achieve a decumulation goal
     * @param goalDecumulationRecommendationRequest Request payload for Goal Decumulation Recommendation (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> goalDecumulationRecommendationWithHttpInfo(GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest) throws ApiException {
        com.squareup.okhttp.Call call = goalDecumulationRecommendationValidateBeforeCall(goalDecumulationRecommendationRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal Decumulation Recommendation (asynchronously)
     * Generate recommendations to achieve a decumulation goal
     * @param goalDecumulationRecommendationRequest Request payload for Goal Decumulation Recommendation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goalDecumulationRecommendationAsync(GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalDecumulationRecommendationValidateBeforeCall(goalDecumulationRecommendationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalDecumulationStatus
     * @param goalDecumulationStatusRequest Request payload for Goal Decumulation Status (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call goalDecumulationStatusCall(GoalDecumulationStatusRequest goalDecumulationStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = goalDecumulationStatusRequest;

        // create path and map variables
        String localVarPath = "/goal_decumulation/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalDecumulationStatusValidateBeforeCall(GoalDecumulationStatusRequest goalDecumulationStatusRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'goalDecumulationStatusRequest' is set
        if (goalDecumulationStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'goalDecumulationStatusRequest' when calling goalDecumulationStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = goalDecumulationStatusCall(goalDecumulationStatusRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal Decumulation Status
     * Track the status of a decumulation goal
     * @param goalDecumulationStatusRequest Request payload for Goal Decumulation Status (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> goalDecumulationStatus(GoalDecumulationStatusRequest goalDecumulationStatusRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = goalDecumulationStatusWithHttpInfo(goalDecumulationStatusRequest);
        return resp.getData();
    }

    /**
     * Goal Decumulation Status
     * Track the status of a decumulation goal
     * @param goalDecumulationStatusRequest Request payload for Goal Decumulation Status (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> goalDecumulationStatusWithHttpInfo(GoalDecumulationStatusRequest goalDecumulationStatusRequest) throws ApiException {
        com.squareup.okhttp.Call call = goalDecumulationStatusValidateBeforeCall(goalDecumulationStatusRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal Decumulation Status (asynchronously)
     * Track the status of a decumulation goal
     * @param goalDecumulationStatusRequest Request payload for Goal Decumulation Status (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call goalDecumulationStatusAsync(GoalDecumulationStatusRequest goalDecumulationStatusRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalDecumulationStatusValidateBeforeCall(goalDecumulationStatusRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
