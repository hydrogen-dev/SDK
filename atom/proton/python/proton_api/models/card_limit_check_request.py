# coding: utf-8

"""
    Hydrogen Proton API

    Financial engineering module of Hydrogen Atom  # noqa: E501

    OpenAPI spec version: 1.9.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from proton_api.configuration import Configuration


class CardLimitCheckRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'client_id': 'str',
        'as_of_date': 'datetime',
        'transaction_status_scope': 'list[str]',
        'create_log': 'bool'
    }

    attribute_map = {
        'currency_code': 'currency_code',
        'client_id': 'client_id',
        'as_of_date': 'as_of_date',
        'transaction_status_scope': 'transaction_status_scope',
        'create_log': 'create_log'
    }

    def __init__(self, currency_code=None, client_id=None, as_of_date=None, transaction_status_scope=None, create_log=False, _configuration=None):  # noqa: E501
        """CardLimitCheckRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency_code = None
        self._client_id = None
        self._as_of_date = None
        self._transaction_status_scope = None
        self._create_log = None
        self.discriminator = None

        self.currency_code = currency_code
        self.client_id = client_id
        if as_of_date is not None:
            self.as_of_date = as_of_date
        if transaction_status_scope is not None:
            self.transaction_status_scope = transaction_status_scope
        if create_log is not None:
            self.create_log = create_log

    @property
    def currency_code(self):
        """Gets the currency_code of this CardLimitCheckRequest.  # noqa: E501


        :return: The currency_code of this CardLimitCheckRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CardLimitCheckRequest.


        :param currency_code: The currency_code of this CardLimitCheckRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def client_id(self):
        """Gets the client_id of this CardLimitCheckRequest.  # noqa: E501


        :return: The client_id of this CardLimitCheckRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CardLimitCheckRequest.


        :param client_id: The client_id of this CardLimitCheckRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def as_of_date(self):
        """Gets the as_of_date of this CardLimitCheckRequest.  # noqa: E501


        :return: The as_of_date of this CardLimitCheckRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this CardLimitCheckRequest.


        :param as_of_date: The as_of_date of this CardLimitCheckRequest.  # noqa: E501
        :type: datetime
        """

        self._as_of_date = as_of_date

    @property
    def transaction_status_scope(self):
        """Gets the transaction_status_scope of this CardLimitCheckRequest.  # noqa: E501


        :return: The transaction_status_scope of this CardLimitCheckRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_status_scope

    @transaction_status_scope.setter
    def transaction_status_scope(self, transaction_status_scope):
        """Sets the transaction_status_scope of this CardLimitCheckRequest.


        :param transaction_status_scope: The transaction_status_scope of this CardLimitCheckRequest.  # noqa: E501
        :type: list[str]
        """

        self._transaction_status_scope = transaction_status_scope

    @property
    def create_log(self):
        """Gets the create_log of this CardLimitCheckRequest.  # noqa: E501


        :return: The create_log of this CardLimitCheckRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_log

    @create_log.setter
    def create_log(self, create_log):
        """Sets the create_log of this CardLimitCheckRequest.


        :param create_log: The create_log of this CardLimitCheckRequest.  # noqa: E501
        :type: bool
        """

        self._create_log = create_log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardLimitCheckRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardLimitCheckRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CardLimitCheckRequest):
            return True

        return self.to_dict() != other.to_dict()
