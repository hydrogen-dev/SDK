/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// FxRate view object
    /// </summary>
    [DataContract]
    public partial class FxRateView :  IEquatable<FxRateView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateView" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FxRateView() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FxRateView" /> class.
        /// </summary>
        /// <param name="currencyCodeFrom">currency_code_from (required).</param>
        /// <param name="currencyCodeTo">currency_code_to (required).</param>
        /// <param name="date">date (required).</param>
        /// <param name="exchangeRate">exchangeRate (required).</param>
        public FxRateView(string currencyCodeFrom = default(string), string currencyCodeTo = default(string), DateTime? date = default(DateTime?), double? exchangeRate = default(double?))
        {
            // to ensure "currencyCodeFrom" is required (not null)
            if (currencyCodeFrom == null)
            {
                throw new InvalidDataException("currencyCodeFrom is a required property for FxRateView and cannot be null");
            }
            else
            {
                this.CurrencyCodeFrom = currencyCodeFrom;
            }
            // to ensure "currencyCodeTo" is required (not null)
            if (currencyCodeTo == null)
            {
                throw new InvalidDataException("currencyCodeTo is a required property for FxRateView and cannot be null");
            }
            else
            {
                this.CurrencyCodeTo = currencyCodeTo;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for FxRateView and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "exchangeRate" is required (not null)
            if (exchangeRate == null)
            {
                throw new InvalidDataException("exchangeRate is a required property for FxRateView and cannot be null");
            }
            else
            {
                this.ExchangeRate = exchangeRate;
            }
        }
        
        /// <summary>
        /// currency_code_from
        /// </summary>
        /// <value>currency_code_from</value>
        [DataMember(Name="currency_code_from", EmitDefaultValue=false)]
        public string CurrencyCodeFrom { get; set; }

        /// <summary>
        /// currency_code_to
        /// </summary>
        /// <value>currency_code_to</value>
        [DataMember(Name="currency_code_to", EmitDefaultValue=false)]
        public string CurrencyCodeTo { get; set; }

        /// <summary>
        /// date
        /// </summary>
        /// <value>date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// exchangeRate
        /// </summary>
        /// <value>exchangeRate</value>
        [DataMember(Name="exchange_rate", EmitDefaultValue=false)]
        public double? ExchangeRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FxRateView {\n");
            sb.Append("  CurrencyCodeFrom: ").Append(CurrencyCodeFrom).Append("\n");
            sb.Append("  CurrencyCodeTo: ").Append(CurrencyCodeTo).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FxRateView);
        }

        /// <summary>
        /// Returns true if FxRateView instances are equal
        /// </summary>
        /// <param name="input">Instance of FxRateView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FxRateView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCodeFrom == input.CurrencyCodeFrom ||
                    (this.CurrencyCodeFrom != null &&
                    this.CurrencyCodeFrom.Equals(input.CurrencyCodeFrom))
                ) && 
                (
                    this.CurrencyCodeTo == input.CurrencyCodeTo ||
                    (this.CurrencyCodeTo != null &&
                    this.CurrencyCodeTo.Equals(input.CurrencyCodeTo))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCodeFrom != null)
                    hashCode = hashCode * 59 + this.CurrencyCodeFrom.GetHashCode();
                if (this.CurrencyCodeTo != null)
                    hashCode = hashCode * 59 + this.CurrencyCodeTo.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
