# coding: utf-8

"""
    Hydrogen Proton API

    Financial engineering module of Hydrogen Atom  # noqa: E501

    OpenAPI spec version: 1.9.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from proton_api.api_client import ApiClient


class GoalsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def goal_accumulation_allocation(self, goal_accumulation_allocation_request, **kwargs):  # noqa: E501
        """Goal Accumulation Allocation  # noqa: E501

        Allocate based on an accumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_accumulation_allocation(goal_accumulation_allocation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalAccumulationAllocationRequest goal_accumulation_allocation_request: Request payload for Goal Accumulation Allocation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.goal_accumulation_allocation_with_http_info(goal_accumulation_allocation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.goal_accumulation_allocation_with_http_info(goal_accumulation_allocation_request, **kwargs)  # noqa: E501
            return data

    def goal_accumulation_allocation_with_http_info(self, goal_accumulation_allocation_request, **kwargs):  # noqa: E501
        """Goal Accumulation Allocation  # noqa: E501

        Allocate based on an accumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_accumulation_allocation_with_http_info(goal_accumulation_allocation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalAccumulationAllocationRequest goal_accumulation_allocation_request: Request payload for Goal Accumulation Allocation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['goal_accumulation_allocation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method goal_accumulation_allocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'goal_accumulation_allocation_request' is set
        if self.api_client.client_side_validation and ('goal_accumulation_allocation_request' not in params or
                                                       params['goal_accumulation_allocation_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_accumulation_allocation_request` when calling `goal_accumulation_allocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'goal_accumulation_allocation_request' in params:
            body_params = params['goal_accumulation_allocation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/goal_accumulation/allocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def goal_accumulation_recommendation(self, goal_accumulation_recommendation_request, **kwargs):  # noqa: E501
        """Goal Accumulation Recommendation  # noqa: E501

        Generate recommendations to achieve an accumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_accumulation_recommendation(goal_accumulation_recommendation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalAccumulationRecommendationRequest goal_accumulation_recommendation_request: Request payload for Goal Accumulation Recommendation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.goal_accumulation_recommendation_with_http_info(goal_accumulation_recommendation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.goal_accumulation_recommendation_with_http_info(goal_accumulation_recommendation_request, **kwargs)  # noqa: E501
            return data

    def goal_accumulation_recommendation_with_http_info(self, goal_accumulation_recommendation_request, **kwargs):  # noqa: E501
        """Goal Accumulation Recommendation  # noqa: E501

        Generate recommendations to achieve an accumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_accumulation_recommendation_with_http_info(goal_accumulation_recommendation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalAccumulationRecommendationRequest goal_accumulation_recommendation_request: Request payload for Goal Accumulation Recommendation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['goal_accumulation_recommendation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method goal_accumulation_recommendation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'goal_accumulation_recommendation_request' is set
        if self.api_client.client_side_validation and ('goal_accumulation_recommendation_request' not in params or
                                                       params['goal_accumulation_recommendation_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_accumulation_recommendation_request` when calling `goal_accumulation_recommendation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'goal_accumulation_recommendation_request' in params:
            body_params = params['goal_accumulation_recommendation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/goal_accumulation/recommendation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def goal_accumulation_status(self, goal_accumulation_status_request, **kwargs):  # noqa: E501
        """Goal Accumulation Status  # noqa: E501

        Track the status of an accumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_accumulation_status(goal_accumulation_status_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalAccumulationStatusRequest goal_accumulation_status_request: Request payload for Goal Accumulation Status (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.goal_accumulation_status_with_http_info(goal_accumulation_status_request, **kwargs)  # noqa: E501
        else:
            (data) = self.goal_accumulation_status_with_http_info(goal_accumulation_status_request, **kwargs)  # noqa: E501
            return data

    def goal_accumulation_status_with_http_info(self, goal_accumulation_status_request, **kwargs):  # noqa: E501
        """Goal Accumulation Status  # noqa: E501

        Track the status of an accumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_accumulation_status_with_http_info(goal_accumulation_status_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalAccumulationStatusRequest goal_accumulation_status_request: Request payload for Goal Accumulation Status (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['goal_accumulation_status_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method goal_accumulation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'goal_accumulation_status_request' is set
        if self.api_client.client_side_validation and ('goal_accumulation_status_request' not in params or
                                                       params['goal_accumulation_status_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_accumulation_status_request` when calling `goal_accumulation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'goal_accumulation_status_request' in params:
            body_params = params['goal_accumulation_status_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/goal_accumulation/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def goal_decumulation_allocation(self, goal_decumulation_allocation_request, **kwargs):  # noqa: E501
        """Goal Decumulation Allocation  # noqa: E501

        Allocate based on a decumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_decumulation_allocation(goal_decumulation_allocation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalDecumulationAllocationRequest goal_decumulation_allocation_request: Request payload for Goal Decumulation Allocation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.goal_decumulation_allocation_with_http_info(goal_decumulation_allocation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.goal_decumulation_allocation_with_http_info(goal_decumulation_allocation_request, **kwargs)  # noqa: E501
            return data

    def goal_decumulation_allocation_with_http_info(self, goal_decumulation_allocation_request, **kwargs):  # noqa: E501
        """Goal Decumulation Allocation  # noqa: E501

        Allocate based on a decumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_decumulation_allocation_with_http_info(goal_decumulation_allocation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalDecumulationAllocationRequest goal_decumulation_allocation_request: Request payload for Goal Decumulation Allocation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['goal_decumulation_allocation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method goal_decumulation_allocation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'goal_decumulation_allocation_request' is set
        if self.api_client.client_side_validation and ('goal_decumulation_allocation_request' not in params or
                                                       params['goal_decumulation_allocation_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_decumulation_allocation_request` when calling `goal_decumulation_allocation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'goal_decumulation_allocation_request' in params:
            body_params = params['goal_decumulation_allocation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/goal_decumulation/allocation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def goal_decumulation_recommendation(self, goal_decumulation_recommendation_request, **kwargs):  # noqa: E501
        """Goal Decumulation Recommendation  # noqa: E501

        Generate recommendations to achieve a decumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_decumulation_recommendation(goal_decumulation_recommendation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalDecumulationRecommendationRequest goal_decumulation_recommendation_request: Request payload for Goal Decumulation Recommendation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.goal_decumulation_recommendation_with_http_info(goal_decumulation_recommendation_request, **kwargs)  # noqa: E501
        else:
            (data) = self.goal_decumulation_recommendation_with_http_info(goal_decumulation_recommendation_request, **kwargs)  # noqa: E501
            return data

    def goal_decumulation_recommendation_with_http_info(self, goal_decumulation_recommendation_request, **kwargs):  # noqa: E501
        """Goal Decumulation Recommendation  # noqa: E501

        Generate recommendations to achieve a decumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_decumulation_recommendation_with_http_info(goal_decumulation_recommendation_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalDecumulationRecommendationRequest goal_decumulation_recommendation_request: Request payload for Goal Decumulation Recommendation (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['goal_decumulation_recommendation_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method goal_decumulation_recommendation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'goal_decumulation_recommendation_request' is set
        if self.api_client.client_side_validation and ('goal_decumulation_recommendation_request' not in params or
                                                       params['goal_decumulation_recommendation_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_decumulation_recommendation_request` when calling `goal_decumulation_recommendation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'goal_decumulation_recommendation_request' in params:
            body_params = params['goal_decumulation_recommendation_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/goal_decumulation/recommendation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def goal_decumulation_status(self, goal_decumulation_status_request, **kwargs):  # noqa: E501
        """Goal Decumulation Status  # noqa: E501

        Track the status of a decumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_decumulation_status(goal_decumulation_status_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalDecumulationStatusRequest goal_decumulation_status_request: Request payload for Goal Decumulation Status (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.goal_decumulation_status_with_http_info(goal_decumulation_status_request, **kwargs)  # noqa: E501
        else:
            (data) = self.goal_decumulation_status_with_http_info(goal_decumulation_status_request, **kwargs)  # noqa: E501
            return data

    def goal_decumulation_status_with_http_info(self, goal_decumulation_status_request, **kwargs):  # noqa: E501
        """Goal Decumulation Status  # noqa: E501

        Track the status of a decumulation goal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.goal_decumulation_status_with_http_info(goal_decumulation_status_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GoalDecumulationStatusRequest goal_decumulation_status_request: Request payload for Goal Decumulation Status (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['goal_decumulation_status_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method goal_decumulation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'goal_decumulation_status_request' is set
        if self.api_client.client_side_validation and ('goal_decumulation_status_request' not in params or
                                                       params['goal_decumulation_status_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `goal_decumulation_status_request` when calling `goal_decumulation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'goal_decumulation_status_request' in params:
            body_params = params['goal_decumulation_status_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/goal_decumulation/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
