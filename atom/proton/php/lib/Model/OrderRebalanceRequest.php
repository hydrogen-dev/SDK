<?php
/**
 * OrderRebalanceRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * OrderRebalanceRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderRebalanceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'orderRebalanceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'non_fractional' => 'bool',
        'order_scope' => 'string',
        'buy_threshold' => 'float',
        'commit_orders' => 'bool',
        'account_id' => 'string',
        'port_threshold' => 'float',
        'use_cash_available' => 'bool',
        'use_strategic' => 'bool',
        'sell_transaction_code_id' => 'string',
        'buy_transaction_code_id' => 'string',
        'cash_portfolio_id' => 'string',
        'restrictions_on' => 'bool',
        'sell_threshold' => 'float',
        'portfolio_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'non_fractional' => null,
        'order_scope' => null,
        'buy_threshold' => 'float',
        'commit_orders' => null,
        'account_id' => 'uuid',
        'port_threshold' => 'float',
        'use_cash_available' => null,
        'use_strategic' => null,
        'sell_transaction_code_id' => 'uuid',
        'buy_transaction_code_id' => 'uuid',
        'cash_portfolio_id' => 'uuid',
        'restrictions_on' => null,
        'sell_threshold' => 'float',
        'portfolio_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'non_fractional' => 'non_fractional',
        'order_scope' => 'order_scope',
        'buy_threshold' => 'buy_threshold',
        'commit_orders' => 'commit_orders',
        'account_id' => 'account_id',
        'port_threshold' => 'port_threshold',
        'use_cash_available' => 'use_cash_available',
        'use_strategic' => 'use_strategic',
        'sell_transaction_code_id' => 'sell_transaction_code_id',
        'buy_transaction_code_id' => 'buy_transaction_code_id',
        'cash_portfolio_id' => 'cash_portfolio_id',
        'restrictions_on' => 'restrictions_on',
        'sell_threshold' => 'sell_threshold',
        'portfolio_id' => 'portfolio_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'non_fractional' => 'setNonFractional',
        'order_scope' => 'setOrderScope',
        'buy_threshold' => 'setBuyThreshold',
        'commit_orders' => 'setCommitOrders',
        'account_id' => 'setAccountId',
        'port_threshold' => 'setPortThreshold',
        'use_cash_available' => 'setUseCashAvailable',
        'use_strategic' => 'setUseStrategic',
        'sell_transaction_code_id' => 'setSellTransactionCodeId',
        'buy_transaction_code_id' => 'setBuyTransactionCodeId',
        'cash_portfolio_id' => 'setCashPortfolioId',
        'restrictions_on' => 'setRestrictionsOn',
        'sell_threshold' => 'setSellThreshold',
        'portfolio_id' => 'setPortfolioId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'non_fractional' => 'getNonFractional',
        'order_scope' => 'getOrderScope',
        'buy_threshold' => 'getBuyThreshold',
        'commit_orders' => 'getCommitOrders',
        'account_id' => 'getAccountId',
        'port_threshold' => 'getPortThreshold',
        'use_cash_available' => 'getUseCashAvailable',
        'use_strategic' => 'getUseStrategic',
        'sell_transaction_code_id' => 'getSellTransactionCodeId',
        'buy_transaction_code_id' => 'getBuyTransactionCodeId',
        'cash_portfolio_id' => 'getCashPortfolioId',
        'restrictions_on' => 'getRestrictionsOn',
        'sell_threshold' => 'getSellThreshold',
        'portfolio_id' => 'getPortfolioId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORDER_SCOPE_ALL = 'all';
    const ORDER_SCOPE_BUY_ONLY = 'buy_only';
    const ORDER_SCOPE_SELL_ONLY = 'sell_only';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderScopeAllowableValues()
    {
        return [
            self::ORDER_SCOPE_ALL,
            self::ORDER_SCOPE_BUY_ONLY,
            self::ORDER_SCOPE_SELL_ONLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['non_fractional'] = isset($data['non_fractional']) ? $data['non_fractional'] : false;
        $this->container['order_scope'] = isset($data['order_scope']) ? $data['order_scope'] : null;
        $this->container['buy_threshold'] = isset($data['buy_threshold']) ? $data['buy_threshold'] : 0.0;
        $this->container['commit_orders'] = isset($data['commit_orders']) ? $data['commit_orders'] : true;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['port_threshold'] = isset($data['port_threshold']) ? $data['port_threshold'] : 0.0;
        $this->container['use_cash_available'] = isset($data['use_cash_available']) ? $data['use_cash_available'] : false;
        $this->container['use_strategic'] = isset($data['use_strategic']) ? $data['use_strategic'] : false;
        $this->container['sell_transaction_code_id'] = isset($data['sell_transaction_code_id']) ? $data['sell_transaction_code_id'] : null;
        $this->container['buy_transaction_code_id'] = isset($data['buy_transaction_code_id']) ? $data['buy_transaction_code_id'] : null;
        $this->container['cash_portfolio_id'] = isset($data['cash_portfolio_id']) ? $data['cash_portfolio_id'] : null;
        $this->container['restrictions_on'] = isset($data['restrictions_on']) ? $data['restrictions_on'] : false;
        $this->container['sell_threshold'] = isset($data['sell_threshold']) ? $data['sell_threshold'] : 0.0;
        $this->container['portfolio_id'] = isset($data['portfolio_id']) ? $data['portfolio_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_scope'] === null) {
            $invalidProperties[] = "'order_scope' can't be null";
        }
        $allowedValues = $this->getOrderScopeAllowableValues();
        if (!is_null($this->container['order_scope']) && !in_array($this->container['order_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order_scope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['buy_threshold']) && ($this->container['buy_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'buy_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['port_threshold']) && ($this->container['port_threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'port_threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['sell_threshold']) && ($this->container['sell_threshold'] < 1)) {
            $invalidProperties[] = "invalid value for 'sell_threshold', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets non_fractional
     *
     * @return bool
     */
    public function getNonFractional()
    {
        return $this->container['non_fractional'];
    }

    /**
     * Sets non_fractional
     *
     * @param bool $non_fractional non_fractional
     *
     * @return $this
     */
    public function setNonFractional($non_fractional)
    {
        $this->container['non_fractional'] = $non_fractional;

        return $this;
    }

    /**
     * Gets order_scope
     *
     * @return string
     */
    public function getOrderScope()
    {
        return $this->container['order_scope'];
    }

    /**
     * Sets order_scope
     *
     * @param string $order_scope order_scope
     *
     * @return $this
     */
    public function setOrderScope($order_scope)
    {
        $allowedValues = $this->getOrderScopeAllowableValues();
        if (!in_array($order_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order_scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_scope'] = $order_scope;

        return $this;
    }

    /**
     * Gets buy_threshold
     *
     * @return float
     */
    public function getBuyThreshold()
    {
        return $this->container['buy_threshold'];
    }

    /**
     * Sets buy_threshold
     *
     * @param float $buy_threshold buy_threshold
     *
     * @return $this
     */
    public function setBuyThreshold($buy_threshold)
    {

        if (!is_null($buy_threshold) && ($buy_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $buy_threshold when calling OrderRebalanceRequest., must be bigger than or equal to 0.');
        }

        $this->container['buy_threshold'] = $buy_threshold;

        return $this;
    }

    /**
     * Gets commit_orders
     *
     * @return bool
     */
    public function getCommitOrders()
    {
        return $this->container['commit_orders'];
    }

    /**
     * Sets commit_orders
     *
     * @param bool $commit_orders commit_orders
     *
     * @return $this
     */
    public function setCommitOrders($commit_orders)
    {
        $this->container['commit_orders'] = $commit_orders;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets port_threshold
     *
     * @return float
     */
    public function getPortThreshold()
    {
        return $this->container['port_threshold'];
    }

    /**
     * Sets port_threshold
     *
     * @param float $port_threshold port_threshold
     *
     * @return $this
     */
    public function setPortThreshold($port_threshold)
    {

        if (!is_null($port_threshold) && ($port_threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $port_threshold when calling OrderRebalanceRequest., must be bigger than or equal to 0.');
        }

        $this->container['port_threshold'] = $port_threshold;

        return $this;
    }

    /**
     * Gets use_cash_available
     *
     * @return bool
     */
    public function getUseCashAvailable()
    {
        return $this->container['use_cash_available'];
    }

    /**
     * Sets use_cash_available
     *
     * @param bool $use_cash_available use_cash_available
     *
     * @return $this
     */
    public function setUseCashAvailable($use_cash_available)
    {
        $this->container['use_cash_available'] = $use_cash_available;

        return $this;
    }

    /**
     * Gets use_strategic
     *
     * @return bool
     */
    public function getUseStrategic()
    {
        return $this->container['use_strategic'];
    }

    /**
     * Sets use_strategic
     *
     * @param bool $use_strategic use_strategic
     *
     * @return $this
     */
    public function setUseStrategic($use_strategic)
    {
        $this->container['use_strategic'] = $use_strategic;

        return $this;
    }

    /**
     * Gets sell_transaction_code_id
     *
     * @return string
     */
    public function getSellTransactionCodeId()
    {
        return $this->container['sell_transaction_code_id'];
    }

    /**
     * Sets sell_transaction_code_id
     *
     * @param string $sell_transaction_code_id sell_transaction_code_id
     *
     * @return $this
     */
    public function setSellTransactionCodeId($sell_transaction_code_id)
    {
        $this->container['sell_transaction_code_id'] = $sell_transaction_code_id;

        return $this;
    }

    /**
     * Gets buy_transaction_code_id
     *
     * @return string
     */
    public function getBuyTransactionCodeId()
    {
        return $this->container['buy_transaction_code_id'];
    }

    /**
     * Sets buy_transaction_code_id
     *
     * @param string $buy_transaction_code_id buy_transaction_code_id
     *
     * @return $this
     */
    public function setBuyTransactionCodeId($buy_transaction_code_id)
    {
        $this->container['buy_transaction_code_id'] = $buy_transaction_code_id;

        return $this;
    }

    /**
     * Gets cash_portfolio_id
     *
     * @return string
     */
    public function getCashPortfolioId()
    {
        return $this->container['cash_portfolio_id'];
    }

    /**
     * Sets cash_portfolio_id
     *
     * @param string $cash_portfolio_id cash_portfolio_id
     *
     * @return $this
     */
    public function setCashPortfolioId($cash_portfolio_id)
    {
        $this->container['cash_portfolio_id'] = $cash_portfolio_id;

        return $this;
    }

    /**
     * Gets restrictions_on
     *
     * @return bool
     */
    public function getRestrictionsOn()
    {
        return $this->container['restrictions_on'];
    }

    /**
     * Sets restrictions_on
     *
     * @param bool $restrictions_on restrictions_on
     *
     * @return $this
     */
    public function setRestrictionsOn($restrictions_on)
    {
        $this->container['restrictions_on'] = $restrictions_on;

        return $this;
    }

    /**
     * Gets sell_threshold
     *
     * @return float
     */
    public function getSellThreshold()
    {
        return $this->container['sell_threshold'];
    }

    /**
     * Sets sell_threshold
     *
     * @param float $sell_threshold sell_threshold
     *
     * @return $this
     */
    public function setSellThreshold($sell_threshold)
    {

        if (!is_null($sell_threshold) && ($sell_threshold < 1)) {
            throw new \InvalidArgumentException('invalid value for $sell_threshold when calling OrderRebalanceRequest., must be bigger than or equal to 1.');
        }

        $this->container['sell_threshold'] = $sell_threshold;

        return $this;
    }

    /**
     * Gets portfolio_id
     *
     * @return string
     */
    public function getPortfolioId()
    {
        return $this->container['portfolio_id'];
    }

    /**
     * Sets portfolio_id
     *
     * @param string $portfolio_id portfolio_id
     *
     * @return $this
     */
    public function setPortfolioId($portfolio_id)
    {
        $this->container['portfolio_id'] = $portfolio_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


