/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenProtonApi) {
      root.HydrogenProtonApi = {};
    }
    root.HydrogenProtonApi.PerformanceCalculatorRequest = factory(root.HydrogenProtonApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The PerformanceCalculatorRequest model module.
   * @module model/PerformanceCalculatorRequest
   * @version 1.9.2
   */

  /**
   * Constructs a new <code>PerformanceCalculatorRequest</code>.
   * @alias module:model/PerformanceCalculatorRequest
   * @class
   * @param statName {String} 
   */
  var exports = function(statName) {
    this.statName = statName;
  };

  /**
   * Constructs a <code>PerformanceCalculatorRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/PerformanceCalculatorRequest} obj Optional instance to populate.
   * @return {module:model/PerformanceCalculatorRequest} The populated <code>PerformanceCalculatorRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('annualized_return_period'))
        obj.annualizedReturnPeriod = ApiClient.convertToType(data['annualized_return_period'], 'String');
      if (data.hasOwnProperty('risk_free_alpha'))
        obj.riskFreeAlpha = ApiClient.convertToType(data['risk_free_alpha'], 'Number');
      if (data.hasOwnProperty('allocation_id'))
        obj.allocationId = ApiClient.convertToType(data['allocation_id'], 'String');
      if (data.hasOwnProperty('mean_percentile_monte_carlo'))
        obj.meanPercentileMonteCarlo = ApiClient.convertToType(data['mean_percentile_monte_carlo'], 'Number');
      if (data.hasOwnProperty('model_id'))
        obj.modelId = ApiClient.convertToType(data['model_id'], 'String');
      if (data.hasOwnProperty('mar_downside_deviation'))
        obj.marDownsideDeviation = ApiClient.convertToType(data['mar_downside_deviation'], 'Number');
      if (data.hasOwnProperty('risk_free_sharpe'))
        obj.riskFreeSharpe = ApiClient.convertToType(data['risk_free_sharpe'], 'Number');
      if (data.hasOwnProperty('benchmark_id'))
        obj.benchmarkId = ApiClient.convertToType(data['benchmark_id'], 'String');
      if (data.hasOwnProperty('risk_free_sortino'))
        obj.riskFreeSortino = ApiClient.convertToType(data['risk_free_sortino'], 'Number');
      if (data.hasOwnProperty('household_id'))
        obj.householdId = ApiClient.convertToType(data['household_id'], 'String');
      if (data.hasOwnProperty('min_percentile_monte_carlo'))
        obj.minPercentileMonteCarlo = ApiClient.convertToType(data['min_percentile_monte_carlo'], 'Number');
      if (data.hasOwnProperty('moving_average_n_day'))
        obj.movingAverageNDay = ApiClient.convertToType(data['moving_average_n_day'], 'Number');
      if (data.hasOwnProperty('active_premium_period'))
        obj.activePremiumPeriod = ApiClient.convertToType(data['active_premium_period'], 'String');
      if (data.hasOwnProperty('stat_name'))
        obj.statName = ApiClient.convertToType(data['stat_name'], 'String');
      if (data.hasOwnProperty('end_date'))
        obj.endDate = ApiClient.convertToType(data['end_date'], 'Date');
      if (data.hasOwnProperty('start_date'))
        obj.startDate = ApiClient.convertToType(data['start_date'], 'Date');
      if (data.hasOwnProperty('n_day_returns'))
        obj.nDayReturns = ApiClient.convertToType(data['n_day_returns'], 'Number');
      if (data.hasOwnProperty('var_conf_interval'))
        obj.varConfInterval = ApiClient.convertToType(data['var_conf_interval'], 'Number');
      if (data.hasOwnProperty('period_type'))
        obj.periodType = ApiClient.convertToType(data['period_type'], 'String');
      if (data.hasOwnProperty('risk_free_treynor'))
        obj.riskFreeTreynor = ApiClient.convertToType(data['risk_free_treynor'], 'Number');
      if (data.hasOwnProperty('n_rolling_max_drawdown'))
        obj.nRollingMaxDrawdown = ApiClient.convertToType(data['n_rolling_max_drawdown'], 'Number');
      if (data.hasOwnProperty('portfolio_id'))
        obj.portfolioId = ApiClient.convertToType(data['portfolio_id'], 'String');
      if (data.hasOwnProperty('num_sim_monte_carlo'))
        obj.numSimMonteCarlo = ApiClient.convertToType(data['num_sim_monte_carlo'], 'Number');
      if (data.hasOwnProperty('goal_id'))
        obj.goalId = ApiClient.convertToType(data['goal_id'], 'String');
      if (data.hasOwnProperty('account_id'))
        obj.accountId = ApiClient.convertToType(data['account_id'], 'String');
      if (data.hasOwnProperty('security_id'))
        obj.securityId = ApiClient.convertToType(data['security_id'], 'String');
      if (data.hasOwnProperty('n_path_monte_carlo'))
        obj.nPathMonteCarlo = ApiClient.convertToType(data['n_path_monte_carlo'], 'Number');
      if (data.hasOwnProperty('client_id'))
        obj.clientId = ApiClient.convertToType(data['client_id'], 'String');
      if (data.hasOwnProperty('n_rolling_volatility'))
        obj.nRollingVolatility = ApiClient.convertToType(data['n_rolling_volatility'], 'Number');
      if (data.hasOwnProperty('hist_factor'))
        obj.histFactor = ApiClient.convertToType(data['hist_factor'], 'Number');
      if (data.hasOwnProperty('max_percentile_monte_carlo'))
        obj.maxPercentileMonteCarlo = ApiClient.convertToType(data['max_percentile_monte_carlo'], 'Number');
    }
    return obj;
  }

  /**
   * @member {module:model/PerformanceCalculatorRequest.AnnualizedReturnPeriodEnum} annualizedReturnPeriod
   * @default 'D'
   */
  exports.prototype.annualizedReturnPeriod = 'D';

  /**
   * @member {Number} riskFreeAlpha
   * @default 0.0
   */
  exports.prototype.riskFreeAlpha = 0.0;

  /**
   * @member {String} allocationId
   */
  exports.prototype.allocationId = undefined;

  /**
   * @member {Number} meanPercentileMonteCarlo
   * @default 50.0
   */
  exports.prototype.meanPercentileMonteCarlo = 50.0;

  /**
   * @member {String} modelId
   */
  exports.prototype.modelId = undefined;

  /**
   * @member {Number} marDownsideDeviation
   * @default 0.0
   */
  exports.prototype.marDownsideDeviation = 0.0;

  /**
   * @member {Number} riskFreeSharpe
   * @default 0.0
   */
  exports.prototype.riskFreeSharpe = 0.0;

  /**
   * @member {String} benchmarkId
   */
  exports.prototype.benchmarkId = undefined;

  /**
   * @member {Number} riskFreeSortino
   * @default 0.0
   */
  exports.prototype.riskFreeSortino = 0.0;

  /**
   * @member {String} householdId
   */
  exports.prototype.householdId = undefined;

  /**
   * @member {Number} minPercentileMonteCarlo
   * @default 20.0
   */
  exports.prototype.minPercentileMonteCarlo = 20.0;

  /**
   * @member {Number} movingAverageNDay
   * @default 7
   */
  exports.prototype.movingAverageNDay = 7;

  /**
   * @member {module:model/PerformanceCalculatorRequest.ActivePremiumPeriodEnum} activePremiumPeriod
   * @default 'D'
   */
  exports.prototype.activePremiumPeriod = 'D';

  /**
   * @member {String} statName
   */
  exports.prototype.statName = undefined;

  /**
   * @member {Date} endDate
   */
  exports.prototype.endDate = undefined;

  /**
   * @member {Date} startDate
   */
  exports.prototype.startDate = undefined;

  /**
   * @member {Number} nDayReturns
   * @default 7
   */
  exports.prototype.nDayReturns = 7;

  /**
   * @member {Number} varConfInterval
   * @default 95.0
   */
  exports.prototype.varConfInterval = 95.0;

  /**
   * @member {module:model/PerformanceCalculatorRequest.PeriodTypeEnum} periodType
   * @default 'D'
   */
  exports.prototype.periodType = 'D';

  /**
   * @member {Number} riskFreeTreynor
   * @default 0.0
   */
  exports.prototype.riskFreeTreynor = 0.0;

  /**
   * @member {Number} nRollingMaxDrawdown
   * @default 7
   */
  exports.prototype.nRollingMaxDrawdown = 7;

  /**
   * @member {String} portfolioId
   */
  exports.prototype.portfolioId = undefined;

  /**
   * @member {Number} numSimMonteCarlo
   * @default 1000
   */
  exports.prototype.numSimMonteCarlo = 1000;

  /**
   * @member {String} goalId
   */
  exports.prototype.goalId = undefined;

  /**
   * @member {String} accountId
   */
  exports.prototype.accountId = undefined;

  /**
   * @member {String} securityId
   */
  exports.prototype.securityId = undefined;

  /**
   * @member {Number} nPathMonteCarlo
   * @default 100
   */
  exports.prototype.nPathMonteCarlo = 100;

  /**
   * @member {String} clientId
   */
  exports.prototype.clientId = undefined;

  /**
   * @member {Number} nRollingVolatility
   * @default 7
   */
  exports.prototype.nRollingVolatility = 7;

  /**
   * @member {Number} histFactor
   * @default 5.0
   */
  exports.prototype.histFactor = 5.0;

  /**
   * @member {Number} maxPercentileMonteCarlo
   * @default 80.0
   */
  exports.prototype.maxPercentileMonteCarlo = 80.0;



  /**
   * Allowed values for the <code>annualizedReturnPeriod</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AnnualizedReturnPeriodEnum = {
    /**
     * value: "Y"
     * @const
     */
    Y: "Y",

    /**
     * value: "Q"
     * @const
     */
    Q: "Q",

    /**
     * value: "M"
     * @const
     */
    M: "M",

    /**
     * value: "D"
     * @const
     */
    D: "D"
  };


  /**
   * Allowed values for the <code>activePremiumPeriod</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ActivePremiumPeriodEnum = {
    /**
     * value: "Y"
     * @const
     */
    Y: "Y",

    /**
     * value: "Q"
     * @const
     */
    Q: "Q",

    /**
     * value: "M"
     * @const
     */
    M: "M",

    /**
     * value: "D"
     * @const
     */
    D: "D"
  };


  /**
   * Allowed values for the <code>periodType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PeriodTypeEnum = {
    /**
     * value: "Y"
     * @const
     */
    Y: "Y",

    /**
     * value: "Q"
     * @const
     */
    Q: "Q",

    /**
     * value: "M"
     * @const
     */
    M: "M",

    /**
     * value: "D"
     * @const
     */
    D: "D"
  };

  return exports;

}));
