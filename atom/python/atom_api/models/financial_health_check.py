# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.ratio_targets import RatioTargets  # noqa: F401,E501


class FinancialHealthCheck(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'liquid_assets': 'float',
        'non_liquid_assets': 'float',
        'short_term_liabilities': 'float',
        'total_liabilities': 'float',
        'gross_annual_income': 'float',
        'net_monthly_income': 'float',
        'monthly_expenses': 'float',
        'ratio_targets': 'RatioTargets'
    }

    attribute_map = {
        'liquid_assets': 'liquid_assets',
        'non_liquid_assets': 'non_liquid_assets',
        'short_term_liabilities': 'short_term_liabilities',
        'total_liabilities': 'total_liabilities',
        'gross_annual_income': 'gross_annual_income',
        'net_monthly_income': 'net_monthly_income',
        'monthly_expenses': 'monthly_expenses',
        'ratio_targets': 'ratio_targets'
    }

    def __init__(self, liquid_assets=None, non_liquid_assets=None, short_term_liabilities=None, total_liabilities=None, gross_annual_income=None, net_monthly_income=None, monthly_expenses=None, ratio_targets=None):  # noqa: E501
        """FinancialHealthCheck - a model defined in Swagger"""  # noqa: E501

        self._liquid_assets = None
        self._non_liquid_assets = None
        self._short_term_liabilities = None
        self._total_liabilities = None
        self._gross_annual_income = None
        self._net_monthly_income = None
        self._monthly_expenses = None
        self._ratio_targets = None
        self.discriminator = None

        if liquid_assets is not None:
            self.liquid_assets = liquid_assets
        if non_liquid_assets is not None:
            self.non_liquid_assets = non_liquid_assets
        if short_term_liabilities is not None:
            self.short_term_liabilities = short_term_liabilities
        if total_liabilities is not None:
            self.total_liabilities = total_liabilities
        if gross_annual_income is not None:
            self.gross_annual_income = gross_annual_income
        if net_monthly_income is not None:
            self.net_monthly_income = net_monthly_income
        if monthly_expenses is not None:
            self.monthly_expenses = monthly_expenses
        if ratio_targets is not None:
            self.ratio_targets = ratio_targets

    @property
    def liquid_assets(self):
        """Gets the liquid_assets of this FinancialHealthCheck.  # noqa: E501

        Liquid assets  # noqa: E501

        :return: The liquid_assets of this FinancialHealthCheck.  # noqa: E501
        :rtype: float
        """
        return self._liquid_assets

    @liquid_assets.setter
    def liquid_assets(self, liquid_assets):
        """Sets the liquid_assets of this FinancialHealthCheck.

        Liquid assets  # noqa: E501

        :param liquid_assets: The liquid_assets of this FinancialHealthCheck.  # noqa: E501
        :type: float
        """
        if liquid_assets is not None and liquid_assets < 0:  # noqa: E501
            raise ValueError("Invalid value for `liquid_assets`, must be a value greater than or equal to `0`")  # noqa: E501

        self._liquid_assets = liquid_assets

    @property
    def non_liquid_assets(self):
        """Gets the non_liquid_assets of this FinancialHealthCheck.  # noqa: E501

        Non-liquid assets  # noqa: E501

        :return: The non_liquid_assets of this FinancialHealthCheck.  # noqa: E501
        :rtype: float
        """
        return self._non_liquid_assets

    @non_liquid_assets.setter
    def non_liquid_assets(self, non_liquid_assets):
        """Sets the non_liquid_assets of this FinancialHealthCheck.

        Non-liquid assets  # noqa: E501

        :param non_liquid_assets: The non_liquid_assets of this FinancialHealthCheck.  # noqa: E501
        :type: float
        """
        if non_liquid_assets is not None and non_liquid_assets < 0:  # noqa: E501
            raise ValueError("Invalid value for `non_liquid_assets`, must be a value greater than or equal to `0`")  # noqa: E501

        self._non_liquid_assets = non_liquid_assets

    @property
    def short_term_liabilities(self):
        """Gets the short_term_liabilities of this FinancialHealthCheck.  # noqa: E501

        Short-term liabilities  # noqa: E501

        :return: The short_term_liabilities of this FinancialHealthCheck.  # noqa: E501
        :rtype: float
        """
        return self._short_term_liabilities

    @short_term_liabilities.setter
    def short_term_liabilities(self, short_term_liabilities):
        """Sets the short_term_liabilities of this FinancialHealthCheck.

        Short-term liabilities  # noqa: E501

        :param short_term_liabilities: The short_term_liabilities of this FinancialHealthCheck.  # noqa: E501
        :type: float
        """
        if short_term_liabilities is not None and short_term_liabilities < 0:  # noqa: E501
            raise ValueError("Invalid value for `short_term_liabilities`, must be a value greater than or equal to `0`")  # noqa: E501

        self._short_term_liabilities = short_term_liabilities

    @property
    def total_liabilities(self):
        """Gets the total_liabilities of this FinancialHealthCheck.  # noqa: E501

        Total liabilities  # noqa: E501

        :return: The total_liabilities of this FinancialHealthCheck.  # noqa: E501
        :rtype: float
        """
        return self._total_liabilities

    @total_liabilities.setter
    def total_liabilities(self, total_liabilities):
        """Sets the total_liabilities of this FinancialHealthCheck.

        Total liabilities  # noqa: E501

        :param total_liabilities: The total_liabilities of this FinancialHealthCheck.  # noqa: E501
        :type: float
        """
        if total_liabilities is not None and total_liabilities < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_liabilities`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_liabilities = total_liabilities

    @property
    def gross_annual_income(self):
        """Gets the gross_annual_income of this FinancialHealthCheck.  # noqa: E501

        Gross annual income  # noqa: E501

        :return: The gross_annual_income of this FinancialHealthCheck.  # noqa: E501
        :rtype: float
        """
        return self._gross_annual_income

    @gross_annual_income.setter
    def gross_annual_income(self, gross_annual_income):
        """Sets the gross_annual_income of this FinancialHealthCheck.

        Gross annual income  # noqa: E501

        :param gross_annual_income: The gross_annual_income of this FinancialHealthCheck.  # noqa: E501
        :type: float
        """
        if gross_annual_income is not None and gross_annual_income < 0:  # noqa: E501
            raise ValueError("Invalid value for `gross_annual_income`, must be a value greater than or equal to `0`")  # noqa: E501

        self._gross_annual_income = gross_annual_income

    @property
    def net_monthly_income(self):
        """Gets the net_monthly_income of this FinancialHealthCheck.  # noqa: E501

        Net monthly income  # noqa: E501

        :return: The net_monthly_income of this FinancialHealthCheck.  # noqa: E501
        :rtype: float
        """
        return self._net_monthly_income

    @net_monthly_income.setter
    def net_monthly_income(self, net_monthly_income):
        """Sets the net_monthly_income of this FinancialHealthCheck.

        Net monthly income  # noqa: E501

        :param net_monthly_income: The net_monthly_income of this FinancialHealthCheck.  # noqa: E501
        :type: float
        """
        if net_monthly_income is not None and net_monthly_income < 0:  # noqa: E501
            raise ValueError("Invalid value for `net_monthly_income`, must be a value greater than or equal to `0`")  # noqa: E501

        self._net_monthly_income = net_monthly_income

    @property
    def monthly_expenses(self):
        """Gets the monthly_expenses of this FinancialHealthCheck.  # noqa: E501

        Monthly expenses  # noqa: E501

        :return: The monthly_expenses of this FinancialHealthCheck.  # noqa: E501
        :rtype: float
        """
        return self._monthly_expenses

    @monthly_expenses.setter
    def monthly_expenses(self, monthly_expenses):
        """Sets the monthly_expenses of this FinancialHealthCheck.

        Monthly expenses  # noqa: E501

        :param monthly_expenses: The monthly_expenses of this FinancialHealthCheck.  # noqa: E501
        :type: float
        """
        if monthly_expenses is not None and monthly_expenses < 0:  # noqa: E501
            raise ValueError("Invalid value for `monthly_expenses`, must be a value greater than or equal to `0`")  # noqa: E501

        self._monthly_expenses = monthly_expenses

    @property
    def ratio_targets(self):
        """Gets the ratio_targets of this FinancialHealthCheck.  # noqa: E501


        :return: The ratio_targets of this FinancialHealthCheck.  # noqa: E501
        :rtype: RatioTargets
        """
        return self._ratio_targets

    @ratio_targets.setter
    def ratio_targets(self, ratio_targets):
        """Sets the ratio_targets of this FinancialHealthCheck.


        :param ratio_targets: The ratio_targets of this FinancialHealthCheck.  # noqa: E501
        :type: RatioTargets
        """

        self._ratio_targets = ratio_targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialHealthCheck, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialHealthCheck):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
