/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * DimensionalRiskScore
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-31T19:17:39.885-04:00")
public class DimensionalRiskScore {
  @SerializedName("answers")
  private List<BigDecimal> answers = new ArrayList<BigDecimal>();

  @SerializedName("max_answers")
  private List<BigDecimal> maxAnswers = new ArrayList<BigDecimal>();

  @SerializedName("answer_dims")
  private List<List<String>> answerDims = new ArrayList<List<String>>();

  @SerializedName("dims")
  private List<String> dims = new ArrayList<String>();

  @SerializedName("dim_weights")
  private List<BigDecimal> dimWeights = null;

  @SerializedName("answer_weights")
  private List<BigDecimal> answerWeights = null;

  public DimensionalRiskScore answers(List<BigDecimal> answers) {
    this.answers = answers;
    return this;
  }

  public DimensionalRiskScore addAnswersItem(BigDecimal answersItem) {
    this.answers.add(answersItem);
    return this;
  }

   /**
   * Answer values
   * @return answers
  **/
  @ApiModelProperty(required = true, value = "Answer values")
  public List<BigDecimal> getAnswers() {
    return answers;
  }

  public void setAnswers(List<BigDecimal> answers) {
    this.answers = answers;
  }

  public DimensionalRiskScore maxAnswers(List<BigDecimal> maxAnswers) {
    this.maxAnswers = maxAnswers;
    return this;
  }

  public DimensionalRiskScore addMaxAnswersItem(BigDecimal maxAnswersItem) {
    this.maxAnswers.add(maxAnswersItem);
    return this;
  }

   /**
   * Maximum possible answer values
   * @return maxAnswers
  **/
  @ApiModelProperty(required = true, value = "Maximum possible answer values")
  public List<BigDecimal> getMaxAnswers() {
    return maxAnswers;
  }

  public void setMaxAnswers(List<BigDecimal> maxAnswers) {
    this.maxAnswers = maxAnswers;
  }

  public DimensionalRiskScore answerDims(List<List<String>> answerDims) {
    this.answerDims = answerDims;
    return this;
  }

  public DimensionalRiskScore addAnswerDimsItem(List<String> answerDimsItem) {
    this.answerDims.add(answerDimsItem);
    return this;
  }

   /**
   * Get answerDims
   * @return answerDims
  **/
  @ApiModelProperty(required = true, value = "")
  public List<List<String>> getAnswerDims() {
    return answerDims;
  }

  public void setAnswerDims(List<List<String>> answerDims) {
    this.answerDims = answerDims;
  }

  public DimensionalRiskScore dims(List<String> dims) {
    this.dims = dims;
    return this;
  }

  public DimensionalRiskScore addDimsItem(String dimsItem) {
    this.dims.add(dimsItem);
    return this;
  }

   /**
   * Labels for available risk dimensions
   * @return dims
  **/
  @ApiModelProperty(required = true, value = "Labels for available risk dimensions")
  public List<String> getDims() {
    return dims;
  }

  public void setDims(List<String> dims) {
    this.dims = dims;
  }

  public DimensionalRiskScore dimWeights(List<BigDecimal> dimWeights) {
    this.dimWeights = dimWeights;
    return this;
  }

  public DimensionalRiskScore addDimWeightsItem(BigDecimal dimWeightsItem) {
    if (this.dimWeights == null) {
      this.dimWeights = new ArrayList<BigDecimal>();
    }
    this.dimWeights.add(dimWeightsItem);
    return this;
  }

   /**
   * Weights for each risk dimension
   * @return dimWeights
  **/
  @ApiModelProperty(value = "Weights for each risk dimension")
  public List<BigDecimal> getDimWeights() {
    return dimWeights;
  }

  public void setDimWeights(List<BigDecimal> dimWeights) {
    this.dimWeights = dimWeights;
  }

  public DimensionalRiskScore answerWeights(List<BigDecimal> answerWeights) {
    this.answerWeights = answerWeights;
    return this;
  }

  public DimensionalRiskScore addAnswerWeightsItem(BigDecimal answerWeightsItem) {
    if (this.answerWeights == null) {
      this.answerWeights = new ArrayList<BigDecimal>();
    }
    this.answerWeights.add(answerWeightsItem);
    return this;
  }

   /**
   * Weights for each risk dimension answer
   * @return answerWeights
  **/
  @ApiModelProperty(value = "Weights for each risk dimension answer")
  public List<BigDecimal> getAnswerWeights() {
    return answerWeights;
  }

  public void setAnswerWeights(List<BigDecimal> answerWeights) {
    this.answerWeights = answerWeights;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionalRiskScore dimensionalRiskScore = (DimensionalRiskScore) o;
    return Objects.equals(this.answers, dimensionalRiskScore.answers) &&
        Objects.equals(this.maxAnswers, dimensionalRiskScore.maxAnswers) &&
        Objects.equals(this.answerDims, dimensionalRiskScore.answerDims) &&
        Objects.equals(this.dims, dimensionalRiskScore.dims) &&
        Objects.equals(this.dimWeights, dimensionalRiskScore.dimWeights) &&
        Objects.equals(this.answerWeights, dimensionalRiskScore.answerWeights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answers, maxAnswers, answerDims, dims, dimWeights, answerWeights);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionalRiskScore {\n");
    
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    maxAnswers: ").append(toIndentedString(maxAnswers)).append("\n");
    sb.append("    answerDims: ").append(toIndentedString(answerDims)).append("\n");
    sb.append("    dims: ").append(toIndentedString(dims)).append("\n");
    sb.append("    dimWeights: ").append(toIndentedString(dimWeights)).append("\n");
    sb.append("    answerWeights: ").append(toIndentedString(answerWeights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

