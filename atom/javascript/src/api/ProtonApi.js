/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AnnuityAccumulationResponse', 'model/AnnuityAmountResponse', 'model/AnnuityCalculatorAccumulationHorizon', 'model/AnnuityCalculatorAnnuityAmount', 'model/AnnuityCalculatorDecumulationHorizon', 'model/AnnuityCalculatorDepositAmount', 'model/AnnuityCalculatorInitialBalance', 'model/AnnuityDecumulationResponse', 'model/AnnuityDepositamountResponse', 'model/AnnuityInitialbalanceResponse', 'model/Backtest', 'model/BacktestResponse', 'model/BudgetCalculatorPayload', 'model/BudgetCalculatorResponse', 'model/CashFlowAnalysisPayload', 'model/CashFlowAnalysisResponse', 'model/DimRiskScoreResponse', 'model/DimensionalRiskScore', 'model/DiversificationScore', 'model/EducationCalculatorAnnualCost', 'model/EducationCalculatorAnnualcostResponse', 'model/EducationCalculatorDepositAmount', 'model/EducationCalculatorDepositamountResponse', 'model/EducationCalculatorPctcoveredResponse', 'model/EducationCalculatorPercentCovered', 'model/EmergencyFundCalculator', 'model/EmergencyFundResponse', 'model/EventStudy', 'model/EventStudyResponse', 'model/FinancialHealthCheck', 'model/FinancialPicturePayload', 'model/FinancialPictureResponse', 'model/GoalAccumulationAllocation', 'model/GoalAccumulationRecommendation', 'model/GoalAccumulationStatus', 'model/GoalAllocationResponse', 'model/GoalDecumulationAllocation', 'model/GoalDecumulationRecommendation', 'model/GoalDecumulationStatus', 'model/GoalRecommendationResponse', 'model/GoalStatusResponse', 'model/HealthCheckResponse', 'model/LifeInsuranceCalculator', 'model/LifeInsuranceNeedsResponse', 'model/MonteCarlo', 'model/MonteCarloResponse', 'model/MortgageCalculatorDownPayment', 'model/MortgageCalculatorDownpaymentResponse', 'model/MortgageCalculatorHomePrice', 'model/MortgageCalculatorHomepriceResponse', 'model/MortgageCalculatorPeriodicPayment', 'model/MortgageCalculatorPeriodicpaymentResponse', 'model/MvoResponse', 'model/OptConfigPortfolio', 'model/OptimizationScore', 'model/PfloDiversificationScoreResponse', 'model/PfloOptimizationScoreResponse', 'model/PortfolioWhatIfResponse', 'model/PurchaseCalculatorAmount', 'model/PurchaseCalculatorDepositAmount', 'model/PurchaseCalculatorDepositamountResponse', 'model/PurchaseCalculatorHorizon', 'model/PurchaseCalculatorPurchaseamountResponse', 'model/PurchaseCalculatorPurchasehorizonResponse', 'model/Rebalance', 'model/RebalanceResponse', 'model/RetirementCalculatorDepositAmount', 'model/RetirementCalculatorDepositamountResponse', 'model/RetirementCalculatorExpenses', 'model/RetirementCalculatorExpensesResponse', 'model/RetirementCalculatorPctcoveredResponse', 'model/RetirementCalculatorPercentCovered', 'model/RiskAllocation', 'model/RiskAllocationResponse', 'model/RiskScore', 'model/RiskScoreResponse', 'model/SavingsCalculatorResponse', 'model/ScenarioAnalysis', 'model/ScenarioAnalysisResponse', 'model/SensitivityAnalysis', 'model/SensitivityAnalysisResponse', 'model/SimpleSavingsCalculator', 'model/VariableAnnuityPayload', 'model/VariableAnnuityResponse', 'model/WhatIfPortfolio'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AnnuityAccumulationResponse'), require('../model/AnnuityAmountResponse'), require('../model/AnnuityCalculatorAccumulationHorizon'), require('../model/AnnuityCalculatorAnnuityAmount'), require('../model/AnnuityCalculatorDecumulationHorizon'), require('../model/AnnuityCalculatorDepositAmount'), require('../model/AnnuityCalculatorInitialBalance'), require('../model/AnnuityDecumulationResponse'), require('../model/AnnuityDepositamountResponse'), require('../model/AnnuityInitialbalanceResponse'), require('../model/Backtest'), require('../model/BacktestResponse'), require('../model/BudgetCalculatorPayload'), require('../model/BudgetCalculatorResponse'), require('../model/CashFlowAnalysisPayload'), require('../model/CashFlowAnalysisResponse'), require('../model/DimRiskScoreResponse'), require('../model/DimensionalRiskScore'), require('../model/DiversificationScore'), require('../model/EducationCalculatorAnnualCost'), require('../model/EducationCalculatorAnnualcostResponse'), require('../model/EducationCalculatorDepositAmount'), require('../model/EducationCalculatorDepositamountResponse'), require('../model/EducationCalculatorPctcoveredResponse'), require('../model/EducationCalculatorPercentCovered'), require('../model/EmergencyFundCalculator'), require('../model/EmergencyFundResponse'), require('../model/EventStudy'), require('../model/EventStudyResponse'), require('../model/FinancialHealthCheck'), require('../model/FinancialPicturePayload'), require('../model/FinancialPictureResponse'), require('../model/GoalAccumulationAllocation'), require('../model/GoalAccumulationRecommendation'), require('../model/GoalAccumulationStatus'), require('../model/GoalAllocationResponse'), require('../model/GoalDecumulationAllocation'), require('../model/GoalDecumulationRecommendation'), require('../model/GoalDecumulationStatus'), require('../model/GoalRecommendationResponse'), require('../model/GoalStatusResponse'), require('../model/HealthCheckResponse'), require('../model/LifeInsuranceCalculator'), require('../model/LifeInsuranceNeedsResponse'), require('../model/MonteCarlo'), require('../model/MonteCarloResponse'), require('../model/MortgageCalculatorDownPayment'), require('../model/MortgageCalculatorDownpaymentResponse'), require('../model/MortgageCalculatorHomePrice'), require('../model/MortgageCalculatorHomepriceResponse'), require('../model/MortgageCalculatorPeriodicPayment'), require('../model/MortgageCalculatorPeriodicpaymentResponse'), require('../model/MvoResponse'), require('../model/OptConfigPortfolio'), require('../model/OptimizationScore'), require('../model/PfloDiversificationScoreResponse'), require('../model/PfloOptimizationScoreResponse'), require('../model/PortfolioWhatIfResponse'), require('../model/PurchaseCalculatorAmount'), require('../model/PurchaseCalculatorDepositAmount'), require('../model/PurchaseCalculatorDepositamountResponse'), require('../model/PurchaseCalculatorHorizon'), require('../model/PurchaseCalculatorPurchaseamountResponse'), require('../model/PurchaseCalculatorPurchasehorizonResponse'), require('../model/Rebalance'), require('../model/RebalanceResponse'), require('../model/RetirementCalculatorDepositAmount'), require('../model/RetirementCalculatorDepositamountResponse'), require('../model/RetirementCalculatorExpenses'), require('../model/RetirementCalculatorExpensesResponse'), require('../model/RetirementCalculatorPctcoveredResponse'), require('../model/RetirementCalculatorPercentCovered'), require('../model/RiskAllocation'), require('../model/RiskAllocationResponse'), require('../model/RiskScore'), require('../model/RiskScoreResponse'), require('../model/SavingsCalculatorResponse'), require('../model/ScenarioAnalysis'), require('../model/ScenarioAnalysisResponse'), require('../model/SensitivityAnalysis'), require('../model/SensitivityAnalysisResponse'), require('../model/SimpleSavingsCalculator'), require('../model/VariableAnnuityPayload'), require('../model/VariableAnnuityResponse'), require('../model/WhatIfPortfolio'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.ProtonApi = factory(root.atom_api.ApiClient, root.atom_api.AnnuityAccumulationResponse, root.atom_api.AnnuityAmountResponse, root.atom_api.AnnuityCalculatorAccumulationHorizon, root.atom_api.AnnuityCalculatorAnnuityAmount, root.atom_api.AnnuityCalculatorDecumulationHorizon, root.atom_api.AnnuityCalculatorDepositAmount, root.atom_api.AnnuityCalculatorInitialBalance, root.atom_api.AnnuityDecumulationResponse, root.atom_api.AnnuityDepositamountResponse, root.atom_api.AnnuityInitialbalanceResponse, root.atom_api.Backtest, root.atom_api.BacktestResponse, root.atom_api.BudgetCalculatorPayload, root.atom_api.BudgetCalculatorResponse, root.atom_api.CashFlowAnalysisPayload, root.atom_api.CashFlowAnalysisResponse, root.atom_api.DimRiskScoreResponse, root.atom_api.DimensionalRiskScore, root.atom_api.DiversificationScore, root.atom_api.EducationCalculatorAnnualCost, root.atom_api.EducationCalculatorAnnualcostResponse, root.atom_api.EducationCalculatorDepositAmount, root.atom_api.EducationCalculatorDepositamountResponse, root.atom_api.EducationCalculatorPctcoveredResponse, root.atom_api.EducationCalculatorPercentCovered, root.atom_api.EmergencyFundCalculator, root.atom_api.EmergencyFundResponse, root.atom_api.EventStudy, root.atom_api.EventStudyResponse, root.atom_api.FinancialHealthCheck, root.atom_api.FinancialPicturePayload, root.atom_api.FinancialPictureResponse, root.atom_api.GoalAccumulationAllocation, root.atom_api.GoalAccumulationRecommendation, root.atom_api.GoalAccumulationStatus, root.atom_api.GoalAllocationResponse, root.atom_api.GoalDecumulationAllocation, root.atom_api.GoalDecumulationRecommendation, root.atom_api.GoalDecumulationStatus, root.atom_api.GoalRecommendationResponse, root.atom_api.GoalStatusResponse, root.atom_api.HealthCheckResponse, root.atom_api.LifeInsuranceCalculator, root.atom_api.LifeInsuranceNeedsResponse, root.atom_api.MonteCarlo, root.atom_api.MonteCarloResponse, root.atom_api.MortgageCalculatorDownPayment, root.atom_api.MortgageCalculatorDownpaymentResponse, root.atom_api.MortgageCalculatorHomePrice, root.atom_api.MortgageCalculatorHomepriceResponse, root.atom_api.MortgageCalculatorPeriodicPayment, root.atom_api.MortgageCalculatorPeriodicpaymentResponse, root.atom_api.MvoResponse, root.atom_api.OptConfigPortfolio, root.atom_api.OptimizationScore, root.atom_api.PfloDiversificationScoreResponse, root.atom_api.PfloOptimizationScoreResponse, root.atom_api.PortfolioWhatIfResponse, root.atom_api.PurchaseCalculatorAmount, root.atom_api.PurchaseCalculatorDepositAmount, root.atom_api.PurchaseCalculatorDepositamountResponse, root.atom_api.PurchaseCalculatorHorizon, root.atom_api.PurchaseCalculatorPurchaseamountResponse, root.atom_api.PurchaseCalculatorPurchasehorizonResponse, root.atom_api.Rebalance, root.atom_api.RebalanceResponse, root.atom_api.RetirementCalculatorDepositAmount, root.atom_api.RetirementCalculatorDepositamountResponse, root.atom_api.RetirementCalculatorExpenses, root.atom_api.RetirementCalculatorExpensesResponse, root.atom_api.RetirementCalculatorPctcoveredResponse, root.atom_api.RetirementCalculatorPercentCovered, root.atom_api.RiskAllocation, root.atom_api.RiskAllocationResponse, root.atom_api.RiskScore, root.atom_api.RiskScoreResponse, root.atom_api.SavingsCalculatorResponse, root.atom_api.ScenarioAnalysis, root.atom_api.ScenarioAnalysisResponse, root.atom_api.SensitivityAnalysis, root.atom_api.SensitivityAnalysisResponse, root.atom_api.SimpleSavingsCalculator, root.atom_api.VariableAnnuityPayload, root.atom_api.VariableAnnuityResponse, root.atom_api.WhatIfPortfolio);
  }
}(this, function(ApiClient, AnnuityAccumulationResponse, AnnuityAmountResponse, AnnuityCalculatorAccumulationHorizon, AnnuityCalculatorAnnuityAmount, AnnuityCalculatorDecumulationHorizon, AnnuityCalculatorDepositAmount, AnnuityCalculatorInitialBalance, AnnuityDecumulationResponse, AnnuityDepositamountResponse, AnnuityInitialbalanceResponse, Backtest, BacktestResponse, BudgetCalculatorPayload, BudgetCalculatorResponse, CashFlowAnalysisPayload, CashFlowAnalysisResponse, DimRiskScoreResponse, DimensionalRiskScore, DiversificationScore, EducationCalculatorAnnualCost, EducationCalculatorAnnualcostResponse, EducationCalculatorDepositAmount, EducationCalculatorDepositamountResponse, EducationCalculatorPctcoveredResponse, EducationCalculatorPercentCovered, EmergencyFundCalculator, EmergencyFundResponse, EventStudy, EventStudyResponse, FinancialHealthCheck, FinancialPicturePayload, FinancialPictureResponse, GoalAccumulationAllocation, GoalAccumulationRecommendation, GoalAccumulationStatus, GoalAllocationResponse, GoalDecumulationAllocation, GoalDecumulationRecommendation, GoalDecumulationStatus, GoalRecommendationResponse, GoalStatusResponse, HealthCheckResponse, LifeInsuranceCalculator, LifeInsuranceNeedsResponse, MonteCarlo, MonteCarloResponse, MortgageCalculatorDownPayment, MortgageCalculatorDownpaymentResponse, MortgageCalculatorHomePrice, MortgageCalculatorHomepriceResponse, MortgageCalculatorPeriodicPayment, MortgageCalculatorPeriodicpaymentResponse, MvoResponse, OptConfigPortfolio, OptimizationScore, PfloDiversificationScoreResponse, PfloOptimizationScoreResponse, PortfolioWhatIfResponse, PurchaseCalculatorAmount, PurchaseCalculatorDepositAmount, PurchaseCalculatorDepositamountResponse, PurchaseCalculatorHorizon, PurchaseCalculatorPurchaseamountResponse, PurchaseCalculatorPurchasehorizonResponse, Rebalance, RebalanceResponse, RetirementCalculatorDepositAmount, RetirementCalculatorDepositamountResponse, RetirementCalculatorExpenses, RetirementCalculatorExpensesResponse, RetirementCalculatorPctcoveredResponse, RetirementCalculatorPercentCovered, RiskAllocation, RiskAllocationResponse, RiskScore, RiskScoreResponse, SavingsCalculatorResponse, ScenarioAnalysis, ScenarioAnalysisResponse, SensitivityAnalysis, SensitivityAnalysisResponse, SimpleSavingsCalculator, VariableAnnuityPayload, VariableAnnuityResponse, WhatIfPortfolio) {
  'use strict';

  /**
   * Proton service.
   * @module api/ProtonApi
   * @version 1.0.1
   */

  /**
   * Constructs a new ProtonApi. 
   * @alias module:api/ProtonApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the annuityCalculatorAccumulationHorizon operation.
     * @callback module:api/ProtonApi~annuityCalculatorAccumulationHorizonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnuityAccumulationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annuity calculator - accumulation horizon
     * @param {module:model/AnnuityCalculatorAccumulationHorizon} payload 
     * @param {module:api/ProtonApi~annuityCalculatorAccumulationHorizonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnuityAccumulationResponse}
     */
    this.annuityCalculatorAccumulationHorizon = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling annuityCalculatorAccumulationHorizon");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnnuityAccumulationResponse;

      return this.apiClient.callApi(
        '/proton/v1/annuity_calculator/accumulation_horizon', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the annuityCalculatorAnnuityAmount operation.
     * @callback module:api/ProtonApi~annuityCalculatorAnnuityAmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnuityAmountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annuity calculator - annuity amount
     * @param {module:model/AnnuityCalculatorAnnuityAmount} payload 
     * @param {module:api/ProtonApi~annuityCalculatorAnnuityAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnuityAmountResponse}
     */
    this.annuityCalculatorAnnuityAmount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling annuityCalculatorAnnuityAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnnuityAmountResponse;

      return this.apiClient.callApi(
        '/proton/v1/annuity_calculator/annuity_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the annuityCalculatorDecumulationHorizon operation.
     * @callback module:api/ProtonApi~annuityCalculatorDecumulationHorizonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnuityDecumulationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annuity calculator - decumulation horizon
     * @param {module:model/AnnuityCalculatorDecumulationHorizon} payload 
     * @param {module:api/ProtonApi~annuityCalculatorDecumulationHorizonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnuityDecumulationResponse}
     */
    this.annuityCalculatorDecumulationHorizon = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling annuityCalculatorDecumulationHorizon");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnnuityDecumulationResponse;

      return this.apiClient.callApi(
        '/proton/v1/annuity_calculator/decumulation_horizon', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the annuityCalculatorDepositAmount operation.
     * @callback module:api/ProtonApi~annuityCalculatorDepositAmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnuityDepositamountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annuity calculator - deposit amount
     * @param {module:model/AnnuityCalculatorDepositAmount} payload 
     * @param {module:api/ProtonApi~annuityCalculatorDepositAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnuityDepositamountResponse}
     */
    this.annuityCalculatorDepositAmount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling annuityCalculatorDepositAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnnuityDepositamountResponse;

      return this.apiClient.callApi(
        '/proton/v1/annuity_calculator/deposit_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the annuityCalculatorInitialBalance operation.
     * @callback module:api/ProtonApi~annuityCalculatorInitialBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnnuityInitialbalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Annuity calculator - initial balance
     * @param {module:model/AnnuityCalculatorInitialBalance} payload 
     * @param {module:api/ProtonApi~annuityCalculatorInitialBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnnuityInitialbalanceResponse}
     */
    this.annuityCalculatorInitialBalance = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling annuityCalculatorInitialBalance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AnnuityInitialbalanceResponse;

      return this.apiClient.callApi(
        '/proton/v1/annuity_calculator/initial_balance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the budgetCalculator operation.
     * @callback module:api/ProtonApi~budgetCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetCalculatorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Budget Calculator
     * @param {module:model/BudgetCalculatorPayload} payload 
     * @param {module:api/ProtonApi~budgetCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetCalculatorResponse}
     */
    this.budgetCalculator = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling budgetCalculator");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BudgetCalculatorResponse;

      return this.apiClient.callApi(
        '/proton/v1/budget_calculator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cashFlowAnalysis operation.
     * @callback module:api/ProtonApi~cashFlowAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CashFlowAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cash Flow Analysis
     * @param {module:model/CashFlowAnalysisPayload} payload 
     * @param {module:api/ProtonApi~cashFlowAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CashFlowAnalysisResponse}
     */
    this.cashFlowAnalysis = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling cashFlowAnalysis");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CashFlowAnalysisResponse;

      return this.apiClient.callApi(
        '/proton/v1/cash_flow_analysis', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimensionalRiskScore operation.
     * @callback module:api/ProtonApi~dimensionalRiskScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DimRiskScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dimensional risk score
     * @param {module:model/DimensionalRiskScore} payload 
     * @param {module:api/ProtonApi~dimensionalRiskScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DimRiskScoreResponse}
     */
    this.dimensionalRiskScore = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling dimensionalRiskScore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DimRiskScoreResponse;

      return this.apiClient.callApi(
        '/proton/v1/dimensional_risk_score', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the educationCalculatorAnnualCost operation.
     * @callback module:api/ProtonApi~educationCalculatorAnnualCostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationCalculatorAnnualcostResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Education calculator - total annual cost
     * @param {module:model/EducationCalculatorAnnualCost} payload 
     * @param {module:api/ProtonApi~educationCalculatorAnnualCostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationCalculatorAnnualcostResponse}
     */
    this.educationCalculatorAnnualCost = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling educationCalculatorAnnualCost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EducationCalculatorAnnualcostResponse;

      return this.apiClient.callApi(
        '/proton/v1/education_calculator/annual_cost', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the educationCalculatorDepositAmount operation.
     * @callback module:api/ProtonApi~educationCalculatorDepositAmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationCalculatorDepositamountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Education calculator - deposit amount
     * @param {module:model/EducationCalculatorDepositAmount} payload 
     * @param {module:api/ProtonApi~educationCalculatorDepositAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationCalculatorDepositamountResponse}
     */
    this.educationCalculatorDepositAmount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling educationCalculatorDepositAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EducationCalculatorDepositamountResponse;

      return this.apiClient.callApi(
        '/proton/v1/education_calculator/deposit_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the educationCalculatorPercentCovered operation.
     * @callback module:api/ProtonApi~educationCalculatorPercentCoveredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EducationCalculatorPctcoveredResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Education calculator - percent covered
     * @param {module:model/EducationCalculatorPercentCovered} payload 
     * @param {module:api/ProtonApi~educationCalculatorPercentCoveredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EducationCalculatorPctcoveredResponse}
     */
    this.educationCalculatorPercentCovered = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling educationCalculatorPercentCovered");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EducationCalculatorPctcoveredResponse;

      return this.apiClient.callApi(
        '/proton/v1/education_calculator/percent_covered', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the emergencyFundCalculator operation.
     * @callback module:api/ProtonApi~emergencyFundCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmergencyFundResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Emergency fund calculator
     * @param {module:model/EmergencyFundCalculator} payload 
     * @param {module:api/ProtonApi~emergencyFundCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmergencyFundResponse}
     */
    this.emergencyFundCalculator = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling emergencyFundCalculator");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmergencyFundResponse;

      return this.apiClient.callApi(
        '/proton/v1/emergency_fund_calculator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventStudy operation.
     * @callback module:api/ProtonApi~eventStudyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventStudyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Event study
     * @param {module:model/EventStudy} payload 
     * @param {module:api/ProtonApi~eventStudyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventStudyResponse}
     */
    this.eventStudy = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling eventStudy");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventStudyResponse;

      return this.apiClient.callApi(
        '/proton/v1/event_study', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financialHealthCheck operation.
     * @callback module:api/ProtonApi~financialHealthCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HealthCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Financial health check
     * @param {module:model/FinancialHealthCheck} payload 
     * @param {module:api/ProtonApi~financialHealthCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HealthCheckResponse}
     */
    this.financialHealthCheck = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling financialHealthCheck");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HealthCheckResponse;

      return this.apiClient.callApi(
        '/proton/v1/financial_health_check', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the financialPicture operation.
     * @callback module:api/ProtonApi~financialPictureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FinancialPictureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Financial Picture
     * @param {module:model/FinancialPicturePayload} payload 
     * @param {module:api/ProtonApi~financialPictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FinancialPictureResponse}
     */
    this.financialPicture = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling financialPicture");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FinancialPictureResponse;

      return this.apiClient.callApi(
        '/proton/v1/financial_picture', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAccumulationAllocation operation.
     * @callback module:api/ProtonApi~goalAccumulationAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal accumulation allocation
     * @param {module:model/GoalAccumulationAllocation} payload 
     * @param {module:api/ProtonApi~goalAccumulationAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalAllocationResponse}
     */
    this.goalAccumulationAllocation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling goalAccumulationAllocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalAllocationResponse;

      return this.apiClient.callApi(
        '/proton/v1/goal_accumulation/allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAccumulationRecommendation operation.
     * @callback module:api/ProtonApi~goalAccumulationRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal accumulation recommendation
     * @param {module:model/GoalAccumulationRecommendation} payload 
     * @param {module:api/ProtonApi~goalAccumulationRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalRecommendationResponse}
     */
    this.goalAccumulationRecommendation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling goalAccumulationRecommendation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalRecommendationResponse;

      return this.apiClient.callApi(
        '/proton/v1/goal_accumulation/recommendation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAccumulationStatus operation.
     * @callback module:api/ProtonApi~goalAccumulationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal accumulation status
     * @param {module:model/GoalAccumulationStatus} payload 
     * @param {module:api/ProtonApi~goalAccumulationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalStatusResponse}
     */
    this.goalAccumulationStatus = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling goalAccumulationStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalStatusResponse;

      return this.apiClient.callApi(
        '/proton/v1/goal_accumulation/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalDecumulationAllocation operation.
     * @callback module:api/ProtonApi~goalDecumulationAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal decumulation allocation
     * @param {module:model/GoalDecumulationAllocation} payload 
     * @param {module:api/ProtonApi~goalDecumulationAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalAllocationResponse}
     */
    this.goalDecumulationAllocation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling goalDecumulationAllocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalAllocationResponse;

      return this.apiClient.callApi(
        '/proton/v1/goal_decumulation/allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalDecumulationRecommendation operation.
     * @callback module:api/ProtonApi~goalDecumulationRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalRecommendationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal decumulation recommendation
     * @param {module:model/GoalDecumulationRecommendation} payload 
     * @param {module:api/ProtonApi~goalDecumulationRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalRecommendationResponse}
     */
    this.goalDecumulationRecommendation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling goalDecumulationRecommendation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalRecommendationResponse;

      return this.apiClient.callApi(
        '/proton/v1/goal_decumulation/recommendation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalDecumulationStatus operation.
     * @callback module:api/ProtonApi~goalDecumulationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal decumulation status
     * @param {module:model/GoalDecumulationStatus} payload 
     * @param {module:api/ProtonApi~goalDecumulationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalStatusResponse}
     */
    this.goalDecumulationStatus = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling goalDecumulationStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalStatusResponse;

      return this.apiClient.callApi(
        '/proton/v1/goal_decumulation/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lifeInsuranceNeedsCalculator operation.
     * @callback module:api/ProtonApi~lifeInsuranceNeedsCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LifeInsuranceNeedsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Life insurance needs calculator
     * @param {module:model/LifeInsuranceCalculator} payload 
     * @param {module:api/ProtonApi~lifeInsuranceNeedsCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LifeInsuranceNeedsResponse}
     */
    this.lifeInsuranceNeedsCalculator = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling lifeInsuranceNeedsCalculator");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LifeInsuranceNeedsResponse;

      return this.apiClient.callApi(
        '/proton/v1/life_insurance/needs_calculator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modelBacktest operation.
     * @callback module:api/ProtonApi~modelBacktestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BacktestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Model backtest
     * @param {module:model/Backtest} payload 
     * @param {module:api/ProtonApi~modelBacktestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BacktestResponse}
     */
    this.modelBacktest = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling modelBacktest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BacktestResponse;

      return this.apiClient.callApi(
        '/proton/v1/backtest', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the monteCarlo operation.
     * @callback module:api/ProtonApi~monteCarloCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MonteCarloResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Monte Carlo
     * @param {module:model/MonteCarlo} payload 
     * @param {module:api/ProtonApi~monteCarloCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MonteCarloResponse}
     */
    this.monteCarlo = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling monteCarlo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MonteCarloResponse;

      return this.apiClient.callApi(
        '/proton/v1/monte_carlo', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mortgageCalculatorDownPayment operation.
     * @callback module:api/ProtonApi~mortgageCalculatorDownPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MortgageCalculatorDownpaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mortgage calculator - down payment
     * @param {module:model/MortgageCalculatorDownPayment} payload 
     * @param {module:api/ProtonApi~mortgageCalculatorDownPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MortgageCalculatorDownpaymentResponse}
     */
    this.mortgageCalculatorDownPayment = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling mortgageCalculatorDownPayment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MortgageCalculatorDownpaymentResponse;

      return this.apiClient.callApi(
        '/proton/v1/mortgage_calculator/down_payment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mortgageCalculatorHomePrice operation.
     * @callback module:api/ProtonApi~mortgageCalculatorHomePriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MortgageCalculatorHomepriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mortgage calculator - home price
     * @param {module:model/MortgageCalculatorHomePrice} payload 
     * @param {module:api/ProtonApi~mortgageCalculatorHomePriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MortgageCalculatorHomepriceResponse}
     */
    this.mortgageCalculatorHomePrice = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling mortgageCalculatorHomePrice");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MortgageCalculatorHomepriceResponse;

      return this.apiClient.callApi(
        '/proton/v1/mortgage_calculator/home_price', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mortgageCalculatorPeriodicPayment operation.
     * @callback module:api/ProtonApi~mortgageCalculatorPeriodicPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MortgageCalculatorPeriodicpaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mortgage calculator - periodic payment
     * @param {module:model/MortgageCalculatorPeriodicPayment} payload 
     * @param {module:api/ProtonApi~mortgageCalculatorPeriodicPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MortgageCalculatorPeriodicpaymentResponse}
     */
    this.mortgageCalculatorPeriodicPayment = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling mortgageCalculatorPeriodicPayment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MortgageCalculatorPeriodicpaymentResponse;

      return this.apiClient.callApi(
        '/proton/v1/mortgage_calculator/periodic_payment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mvo operation.
     * @callback module:api/ProtonApi~mvoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MvoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mean-variance optimization
     * @param {module:model/OptConfigPortfolio} payload 
     * @param {module:api/ProtonApi~mvoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MvoResponse}
     */
    this.mvo = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling mvo");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MvoResponse;

      return this.apiClient.callApi(
        '/proton/v1/mvo', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioDiversificationScore operation.
     * @callback module:api/ProtonApi~portfolioDiversificationScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PfloDiversificationScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Portfolio diversification score
     * @param {module:model/DiversificationScore} payload 
     * @param {module:api/ProtonApi~portfolioDiversificationScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PfloDiversificationScoreResponse}
     */
    this.portfolioDiversificationScore = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling portfolioDiversificationScore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PfloDiversificationScoreResponse;

      return this.apiClient.callApi(
        '/proton/v1/diversification_score', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioOptimizationScore operation.
     * @callback module:api/ProtonApi~portfolioOptimizationScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PfloOptimizationScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Portfolio optimization score
     * @param {module:model/OptimizationScore} payload 
     * @param {module:api/ProtonApi~portfolioOptimizationScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PfloOptimizationScoreResponse}
     */
    this.portfolioOptimizationScore = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling portfolioOptimizationScore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PfloOptimizationScoreResponse;

      return this.apiClient.callApi(
        '/proton/v1/portfolio_optimization_score', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the portfolioWhatIf operation.
     * @callback module:api/ProtonApi~portfolioWhatIfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioWhatIfResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Portfolio what-if
     * @param {module:model/WhatIfPortfolio} payload 
     * @param {module:api/ProtonApi~portfolioWhatIfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioWhatIfResponse}
     */
    this.portfolioWhatIf = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling portfolioWhatIf");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortfolioWhatIfResponse;

      return this.apiClient.callApi(
        '/proton/v1/portfolio_what_if', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseCalculatorDepositAmount operation.
     * @callback module:api/ProtonApi~purchaseCalculatorDepositAmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseCalculatorDepositamountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase calculator - deposit amount
     * @param {module:model/PurchaseCalculatorDepositAmount} payload 
     * @param {module:api/ProtonApi~purchaseCalculatorDepositAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseCalculatorDepositamountResponse}
     */
    this.purchaseCalculatorDepositAmount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling purchaseCalculatorDepositAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseCalculatorDepositamountResponse;

      return this.apiClient.callApi(
        '/proton/v1/purchase_calculator/deposit_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseCalculatorHorizon operation.
     * @callback module:api/ProtonApi~purchaseCalculatorHorizonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseCalculatorPurchasehorizonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase calculator - horizon
     * @param {module:model/PurchaseCalculatorHorizon} payload 
     * @param {module:api/ProtonApi~purchaseCalculatorHorizonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseCalculatorPurchasehorizonResponse}
     */
    this.purchaseCalculatorHorizon = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling purchaseCalculatorHorizon");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseCalculatorPurchasehorizonResponse;

      return this.apiClient.callApi(
        '/proton/v1/purchase_calculator/horizon', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseCalculatorPurchaseAmount operation.
     * @callback module:api/ProtonApi~purchaseCalculatorPurchaseAmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseCalculatorPurchaseamountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase calculator - purchase amount
     * @param {module:model/PurchaseCalculatorAmount} payload 
     * @param {module:api/ProtonApi~purchaseCalculatorPurchaseAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseCalculatorPurchaseamountResponse}
     */
    this.purchaseCalculatorPurchaseAmount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling purchaseCalculatorPurchaseAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PurchaseCalculatorPurchaseamountResponse;

      return this.apiClient.callApi(
        '/proton/v1/purchase_calculator/amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebalancingSignal operation.
     * @callback module:api/ProtonApi~rebalancingSignalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rebalancing
     * @param {module:model/Rebalance} payload 
     * @param {module:api/ProtonApi~rebalancingSignalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebalanceResponse}
     */
    this.rebalancingSignal = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling rebalancingSignal");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RebalanceResponse;

      return this.apiClient.callApi(
        '/proton/v1/rebalancing_signal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementCalculatorDepositAmount operation.
     * @callback module:api/ProtonApi~retirementCalculatorDepositAmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementCalculatorDepositamountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retirement calculator - deposit amount
     * @param {module:model/RetirementCalculatorDepositAmount} payload 
     * @param {module:api/ProtonApi~retirementCalculatorDepositAmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementCalculatorDepositamountResponse}
     */
    this.retirementCalculatorDepositAmount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling retirementCalculatorDepositAmount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RetirementCalculatorDepositamountResponse;

      return this.apiClient.callApi(
        '/proton/v1/retirement_calculator/deposit_amount', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementCalculatorExpenses operation.
     * @callback module:api/ProtonApi~retirementCalculatorExpensesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementCalculatorExpensesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retirement calculator - expenses
     * @param {module:model/RetirementCalculatorExpenses} payload 
     * @param {module:api/ProtonApi~retirementCalculatorExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementCalculatorExpensesResponse}
     */
    this.retirementCalculatorExpenses = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling retirementCalculatorExpenses");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RetirementCalculatorExpensesResponse;

      return this.apiClient.callApi(
        '/proton/v1/retirement_calculator/expenses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retirementCalculatorPercentCovered operation.
     * @callback module:api/ProtonApi~retirementCalculatorPercentCoveredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetirementCalculatorPctcoveredResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retirement calculator - percent of costs covered
     * @param {module:model/RetirementCalculatorPercentCovered} payload 
     * @param {module:api/ProtonApi~retirementCalculatorPercentCoveredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetirementCalculatorPctcoveredResponse}
     */
    this.retirementCalculatorPercentCovered = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling retirementCalculatorPercentCovered");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RetirementCalculatorPctcoveredResponse;

      return this.apiClient.callApi(
        '/proton/v1/retirement_calculator/percent_covered', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the riskAllocation operation.
     * @callback module:api/ProtonApi~riskAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RiskAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Risk allocation
     * @param {module:model/RiskAllocation} payload 
     * @param {module:api/ProtonApi~riskAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RiskAllocationResponse}
     */
    this.riskAllocation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling riskAllocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RiskAllocationResponse;

      return this.apiClient.callApi(
        '/proton/v1/risk_allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the riskScore operation.
     * @callback module:api/ProtonApi~riskScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RiskScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Risk score
     * @param {module:model/RiskScore} payload 
     * @param {module:api/ProtonApi~riskScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RiskScoreResponse}
     */
    this.riskScore = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling riskScore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RiskScoreResponse;

      return this.apiClient.callApi(
        '/proton/v1/risk_score', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the savingsCalculator operation.
     * @callback module:api/ProtonApi~savingsCalculatorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SavingsCalculatorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Savings calculator
     * @param {module:model/SimpleSavingsCalculator} payload 
     * @param {module:api/ProtonApi~savingsCalculatorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SavingsCalculatorResponse}
     */
    this.savingsCalculator = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling savingsCalculator");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SavingsCalculatorResponse;

      return this.apiClient.callApi(
        '/proton/v1/savings_calculator', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the scenarioAnalysis operation.
     * @callback module:api/ProtonApi~scenarioAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScenarioAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scenario analysis
     * @param {module:model/ScenarioAnalysis} payload 
     * @param {module:api/ProtonApi~scenarioAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScenarioAnalysisResponse}
     */
    this.scenarioAnalysis = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling scenarioAnalysis");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScenarioAnalysisResponse;

      return this.apiClient.callApi(
        '/proton/v1/scenario_analysis', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sensitivityAnalysis operation.
     * @callback module:api/ProtonApi~sensitivityAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SensitivityAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sensitivity analysis
     * @param {module:model/SensitivityAnalysis} payload 
     * @param {module:api/ProtonApi~sensitivityAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SensitivityAnalysisResponse}
     */
    this.sensitivityAnalysis = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling sensitivityAnalysis");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SensitivityAnalysisResponse;

      return this.apiClient.callApi(
        '/proton/v1/sensitivity_analysis', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the variableAnnuity operation.
     * @callback module:api/ProtonApi~variableAnnuityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VariableAnnuityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Variable annuity
     * @param {module:model/VariableAnnuityPayload} payload 
     * @param {module:api/ProtonApi~variableAnnuityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VariableAnnuityResponse}
     */
    this.variableAnnuity = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling variableAnnuity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VariableAnnuityResponse;

      return this.apiClient.callApi(
        '/proton/v1/variable_annuity', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
