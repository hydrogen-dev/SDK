=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8-SNAPSHOT

=end

require 'date'

module AtomApi
  class HealthCheckResponse
    attr_accessor :liquidity_ratio_expenses

    attr_accessor :liquidity_ratio_liabilities

    attr_accessor :current_ratio

    attr_accessor :asset_allocation_ratio

    attr_accessor :savings_ratio_gross

    attr_accessor :savings_ratio_net

    # Total assets, calculated as liquid_assets + non_liquid_assets.
    attr_accessor :total_assets

    # Net worth, calculated as total_assets - total_liabilities.
    attr_accessor :net_worth

    # Gross monthly income, calculated as gross_annual_income / 12.
    attr_accessor :gross_monthly_income

    # Net monthly surplus, calculated as net_monthly_income - monthly_expenses.
    attr_accessor :monthly_surplus

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'liquidity_ratio_expenses' => :'liquidity_ratio_expenses',
        :'liquidity_ratio_liabilities' => :'liquidity_ratio_liabilities',
        :'current_ratio' => :'current_ratio',
        :'asset_allocation_ratio' => :'asset_allocation_ratio',
        :'savings_ratio_gross' => :'savings_ratio_gross',
        :'savings_ratio_net' => :'savings_ratio_net',
        :'total_assets' => :'total_assets',
        :'net_worth' => :'net_worth',
        :'gross_monthly_income' => :'gross_monthly_income',
        :'monthly_surplus' => :'monthly_surplus'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'liquidity_ratio_expenses' => :'HealthCheckResult',
        :'liquidity_ratio_liabilities' => :'HealthCheckResult',
        :'current_ratio' => :'HealthCheckResult',
        :'asset_allocation_ratio' => :'HealthCheckResult',
        :'savings_ratio_gross' => :'HealthCheckResult',
        :'savings_ratio_net' => :'HealthCheckResult',
        :'total_assets' => :'Float',
        :'net_worth' => :'Float',
        :'gross_monthly_income' => :'Float',
        :'monthly_surplus' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'liquidity_ratio_expenses')
        self.liquidity_ratio_expenses = attributes[:'liquidity_ratio_expenses']
      end

      if attributes.has_key?(:'liquidity_ratio_liabilities')
        self.liquidity_ratio_liabilities = attributes[:'liquidity_ratio_liabilities']
      end

      if attributes.has_key?(:'current_ratio')
        self.current_ratio = attributes[:'current_ratio']
      end

      if attributes.has_key?(:'asset_allocation_ratio')
        self.asset_allocation_ratio = attributes[:'asset_allocation_ratio']
      end

      if attributes.has_key?(:'savings_ratio_gross')
        self.savings_ratio_gross = attributes[:'savings_ratio_gross']
      end

      if attributes.has_key?(:'savings_ratio_net')
        self.savings_ratio_net = attributes[:'savings_ratio_net']
      end

      if attributes.has_key?(:'total_assets')
        self.total_assets = attributes[:'total_assets']
      end

      if attributes.has_key?(:'net_worth')
        self.net_worth = attributes[:'net_worth']
      end

      if attributes.has_key?(:'gross_monthly_income')
        self.gross_monthly_income = attributes[:'gross_monthly_income']
      end

      if attributes.has_key?(:'monthly_surplus')
        self.monthly_surplus = attributes[:'monthly_surplus']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          liquidity_ratio_expenses == o.liquidity_ratio_expenses &&
          liquidity_ratio_liabilities == o.liquidity_ratio_liabilities &&
          current_ratio == o.current_ratio &&
          asset_allocation_ratio == o.asset_allocation_ratio &&
          savings_ratio_gross == o.savings_ratio_gross &&
          savings_ratio_net == o.savings_ratio_net &&
          total_assets == o.total_assets &&
          net_worth == o.net_worth &&
          gross_monthly_income == o.gross_monthly_income &&
          monthly_surplus == o.monthly_surplus
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [liquidity_ratio_expenses, liquidity_ratio_liabilities, current_ratio, asset_allocation_ratio, savings_ratio_gross, savings_ratio_net, total_assets, net_worth, gross_monthly_income, monthly_surplus].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
