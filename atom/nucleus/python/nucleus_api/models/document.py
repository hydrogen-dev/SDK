# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'business_id': 'str',
        'client_id': 'str',
        'country_of_issue': 'str',
        'create_date': 'datetime',
        'doc_file': 'str',
        'doc_image_back': 'str',
        'doc_image_front': 'str',
        'doc_name': 'str',
        'doc_number': 'str',
        'doc_size': 'int',
        'doc_type': 'str',
        'expiry_date': 'date',
        'id': 'str',
        'is_active': 'bool',
        'is_sensitive': 'bool',
        'is_verified': 'bool',
        'issue_date': 'date',
        'metadata': 'dict(str, str)',
        'secondary_id': 'str',
        'state_of_issue': 'str',
        'update_date': 'datetime',
        'url_path': 'str'
    }

    attribute_map = {
        'account_id': 'account_id',
        'business_id': 'business_id',
        'client_id': 'client_id',
        'country_of_issue': 'country_of_issue',
        'create_date': 'create_date',
        'doc_file': 'doc_file',
        'doc_image_back': 'doc_image_back',
        'doc_image_front': 'doc_image_front',
        'doc_name': 'doc_name',
        'doc_number': 'doc_number',
        'doc_size': 'doc_size',
        'doc_type': 'doc_type',
        'expiry_date': 'expiry_date',
        'id': 'id',
        'is_active': 'is_active',
        'is_sensitive': 'is_sensitive',
        'is_verified': 'is_verified',
        'issue_date': 'issue_date',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id',
        'state_of_issue': 'state_of_issue',
        'update_date': 'update_date',
        'url_path': 'url_path'
    }

    def __init__(self, account_id=None, business_id=None, client_id=None, country_of_issue=None, create_date=None, doc_file=None, doc_image_back=None, doc_image_front=None, doc_name=None, doc_number=None, doc_size=None, doc_type=None, expiry_date=None, id=None, is_active=None, is_sensitive=None, is_verified=None, issue_date=None, metadata=None, secondary_id=None, state_of_issue=None, update_date=None, url_path=None, _configuration=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._business_id = None
        self._client_id = None
        self._country_of_issue = None
        self._create_date = None
        self._doc_file = None
        self._doc_image_back = None
        self._doc_image_front = None
        self._doc_name = None
        self._doc_number = None
        self._doc_size = None
        self._doc_type = None
        self._expiry_date = None
        self._id = None
        self._is_active = None
        self._is_sensitive = None
        self._is_verified = None
        self._issue_date = None
        self._metadata = None
        self._secondary_id = None
        self._state_of_issue = None
        self._update_date = None
        self._url_path = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if business_id is not None:
            self.business_id = business_id
        if client_id is not None:
            self.client_id = client_id
        if country_of_issue is not None:
            self.country_of_issue = country_of_issue
        if create_date is not None:
            self.create_date = create_date
        if doc_file is not None:
            self.doc_file = doc_file
        if doc_image_back is not None:
            self.doc_image_back = doc_image_back
        if doc_image_front is not None:
            self.doc_image_front = doc_image_front
        self.doc_name = doc_name
        if doc_number is not None:
            self.doc_number = doc_number
        if doc_size is not None:
            self.doc_size = doc_size
        if doc_type is not None:
            self.doc_type = doc_type
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if is_sensitive is not None:
            self.is_sensitive = is_sensitive
        if is_verified is not None:
            self.is_verified = is_verified
        if issue_date is not None:
            self.issue_date = issue_date
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if state_of_issue is not None:
            self.state_of_issue = state_of_issue
        if update_date is not None:
            self.update_date = update_date
        if url_path is not None:
            self.url_path = url_path

    @property
    def account_id(self):
        """Gets the account_id of this Document.  # noqa: E501

        accountId  # noqa: E501

        :return: The account_id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Document.

        accountId  # noqa: E501

        :param account_id: The account_id of this Document.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def business_id(self):
        """Gets the business_id of this Document.  # noqa: E501

        businessId  # noqa: E501

        :return: The business_id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this Document.

        businessId  # noqa: E501

        :param business_id: The business_id of this Document.  # noqa: E501
        :type: str
        """

        self._business_id = business_id

    @property
    def client_id(self):
        """Gets the client_id of this Document.  # noqa: E501

        clientId  # noqa: E501

        :return: The client_id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Document.

        clientId  # noqa: E501

        :param client_id: The client_id of this Document.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def country_of_issue(self):
        """Gets the country_of_issue of this Document.  # noqa: E501

        country_of_issue  # noqa: E501

        :return: The country_of_issue of this Document.  # noqa: E501
        :rtype: str
        """
        return self._country_of_issue

    @country_of_issue.setter
    def country_of_issue(self, country_of_issue):
        """Sets the country_of_issue of this Document.

        country_of_issue  # noqa: E501

        :param country_of_issue: The country_of_issue of this Document.  # noqa: E501
        :type: str
        """

        self._country_of_issue = country_of_issue

    @property
    def create_date(self):
        """Gets the create_date of this Document.  # noqa: E501


        :return: The create_date of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Document.


        :param create_date: The create_date of this Document.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def doc_file(self):
        """Gets the doc_file of this Document.  # noqa: E501

        doc_file  # noqa: E501

        :return: The doc_file of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_file

    @doc_file.setter
    def doc_file(self, doc_file):
        """Sets the doc_file of this Document.

        doc_file  # noqa: E501

        :param doc_file: The doc_file of this Document.  # noqa: E501
        :type: str
        """

        self._doc_file = doc_file

    @property
    def doc_image_back(self):
        """Gets the doc_image_back of this Document.  # noqa: E501

        doc_image_back  # noqa: E501

        :return: The doc_image_back of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_image_back

    @doc_image_back.setter
    def doc_image_back(self, doc_image_back):
        """Sets the doc_image_back of this Document.

        doc_image_back  # noqa: E501

        :param doc_image_back: The doc_image_back of this Document.  # noqa: E501
        :type: str
        """

        self._doc_image_back = doc_image_back

    @property
    def doc_image_front(self):
        """Gets the doc_image_front of this Document.  # noqa: E501

        doc_image_front  # noqa: E501

        :return: The doc_image_front of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_image_front

    @doc_image_front.setter
    def doc_image_front(self, doc_image_front):
        """Sets the doc_image_front of this Document.

        doc_image_front  # noqa: E501

        :param doc_image_front: The doc_image_front of this Document.  # noqa: E501
        :type: str
        """

        self._doc_image_front = doc_image_front

    @property
    def doc_name(self):
        """Gets the doc_name of this Document.  # noqa: E501

        doc_name  # noqa: E501

        :return: The doc_name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_name

    @doc_name.setter
    def doc_name(self, doc_name):
        """Sets the doc_name of this Document.

        doc_name  # noqa: E501

        :param doc_name: The doc_name of this Document.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and doc_name is None:
            raise ValueError("Invalid value for `doc_name`, must not be `None`")  # noqa: E501

        self._doc_name = doc_name

    @property
    def doc_number(self):
        """Gets the doc_number of this Document.  # noqa: E501

        doc_number  # noqa: E501

        :return: The doc_number of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_number

    @doc_number.setter
    def doc_number(self, doc_number):
        """Sets the doc_number of this Document.

        doc_number  # noqa: E501

        :param doc_number: The doc_number of this Document.  # noqa: E501
        :type: str
        """

        self._doc_number = doc_number

    @property
    def doc_size(self):
        """Gets the doc_size of this Document.  # noqa: E501

        doc_size  # noqa: E501

        :return: The doc_size of this Document.  # noqa: E501
        :rtype: int
        """
        return self._doc_size

    @doc_size.setter
    def doc_size(self, doc_size):
        """Sets the doc_size of this Document.

        doc_size  # noqa: E501

        :param doc_size: The doc_size of this Document.  # noqa: E501
        :type: int
        """

        self._doc_size = doc_size

    @property
    def doc_type(self):
        """Gets the doc_type of this Document.  # noqa: E501

        doc_type  # noqa: E501

        :return: The doc_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this Document.

        doc_type  # noqa: E501

        :param doc_type: The doc_type of this Document.  # noqa: E501
        :type: str
        """

        self._doc_type = doc_type

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Document.  # noqa: E501

        expiry_date  # noqa: E501

        :return: The expiry_date of this Document.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Document.

        expiry_date  # noqa: E501

        :param expiry_date: The expiry_date of this Document.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501


        :return: The id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.


        :param id: The id of this Document.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this Document.  # noqa: E501

        is_active  # noqa: E501

        :return: The is_active of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Document.

        is_active  # noqa: E501

        :param is_active: The is_active of this Document.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_sensitive(self):
        """Gets the is_sensitive of this Document.  # noqa: E501

        is_sensitive  # noqa: E501

        :return: The is_sensitive of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._is_sensitive

    @is_sensitive.setter
    def is_sensitive(self, is_sensitive):
        """Sets the is_sensitive of this Document.

        is_sensitive  # noqa: E501

        :param is_sensitive: The is_sensitive of this Document.  # noqa: E501
        :type: bool
        """

        self._is_sensitive = is_sensitive

    @property
    def is_verified(self):
        """Gets the is_verified of this Document.  # noqa: E501

        is_verified  # noqa: E501

        :return: The is_verified of this Document.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this Document.

        is_verified  # noqa: E501

        :param is_verified: The is_verified of this Document.  # noqa: E501
        :type: bool
        """

        self._is_verified = is_verified

    @property
    def issue_date(self):
        """Gets the issue_date of this Document.  # noqa: E501

        issue_date  # noqa: E501

        :return: The issue_date of this Document.  # noqa: E501
        :rtype: date
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Document.

        issue_date  # noqa: E501

        :param issue_date: The issue_date of this Document.  # noqa: E501
        :type: date
        """

        self._issue_date = issue_date

    @property
    def metadata(self):
        """Gets the metadata of this Document.  # noqa: E501

        metadata  # noqa: E501

        :return: The metadata of this Document.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Document.

        metadata  # noqa: E501

        :param metadata: The metadata of this Document.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this Document.  # noqa: E501


        :return: The secondary_id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this Document.


        :param secondary_id: The secondary_id of this Document.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def state_of_issue(self):
        """Gets the state_of_issue of this Document.  # noqa: E501

        state_of_issue  # noqa: E501

        :return: The state_of_issue of this Document.  # noqa: E501
        :rtype: str
        """
        return self._state_of_issue

    @state_of_issue.setter
    def state_of_issue(self, state_of_issue):
        """Sets the state_of_issue of this Document.

        state_of_issue  # noqa: E501

        :param state_of_issue: The state_of_issue of this Document.  # noqa: E501
        :type: str
        """

        self._state_of_issue = state_of_issue

    @property
    def update_date(self):
        """Gets the update_date of this Document.  # noqa: E501


        :return: The update_date of this Document.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Document.


        :param update_date: The update_date of this Document.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def url_path(self):
        """Gets the url_path of this Document.  # noqa: E501

        url_path  # noqa: E501

        :return: The url_path of this Document.  # noqa: E501
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this Document.

        url_path  # noqa: E501

        :param url_path: The url_path of this Document.  # noqa: E501
        :type: str
        """

        self._url_path = url_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Document):
            return True

        return self.to_dict() != other.to_dict()
