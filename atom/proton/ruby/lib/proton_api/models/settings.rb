=begin
#Hydrogen Proton API

#Financial engineering module of Hydrogen Atom

OpenAPI spec version: 1.9.2
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module ProtonApi
  class Settings
    attr_accessor :default_drift_factor

    attr_accessor :drift_rebal

    attr_accessor :downside

    attr_accessor :tax_efficiency_id

    attr_accessor :period_rebal

    attr_accessor :rebalance_period

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'default_drift_factor' => :'default_drift_factor',
        :'drift_rebal' => :'drift_rebal',
        :'downside' => :'downside',
        :'tax_efficiency_id' => :'tax_efficiency_id',
        :'period_rebal' => :'period_rebal',
        :'rebalance_period' => :'rebalance_period'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'default_drift_factor' => :'Float',
        :'drift_rebal' => :'BOOLEAN',
        :'downside' => :'BOOLEAN',
        :'tax_efficiency_id' => :'Integer',
        :'period_rebal' => :'BOOLEAN',
        :'rebalance_period' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'default_drift_factor')
        self.default_drift_factor = attributes[:'default_drift_factor']
      end

      if attributes.has_key?(:'drift_rebal')
        self.drift_rebal = attributes[:'drift_rebal']
      end

      if attributes.has_key?(:'downside')
        self.downside = attributes[:'downside']
      end

      if attributes.has_key?(:'tax_efficiency_id')
        self.tax_efficiency_id = attributes[:'tax_efficiency_id']
      end

      if attributes.has_key?(:'period_rebal')
        self.period_rebal = attributes[:'period_rebal']
      end

      if attributes.has_key?(:'rebalance_period')
        self.rebalance_period = attributes[:'rebalance_period']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@default_drift_factor.nil? && @default_drift_factor < 0
        invalid_properties.push('invalid value for "default_drift_factor", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@default_drift_factor.nil? && @default_drift_factor < 0
      tax_efficiency_id_validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4'])
      return false unless tax_efficiency_id_validator.valid?(@tax_efficiency_id)
      rebalance_period_validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4'])
      return false unless rebalance_period_validator.valid?(@rebalance_period)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] default_drift_factor Value to be assigned
    def default_drift_factor=(default_drift_factor)
      if !default_drift_factor.nil? && default_drift_factor < 0
        fail ArgumentError, 'invalid value for "default_drift_factor", must be greater than or equal to 0.'
      end

      @default_drift_factor = default_drift_factor
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_efficiency_id Object to be assigned
    def tax_efficiency_id=(tax_efficiency_id)
      validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4'])
      unless validator.valid?(tax_efficiency_id)
        fail ArgumentError, 'invalid value for "tax_efficiency_id", must be one of #{validator.allowable_values}.'
      end
      @tax_efficiency_id = tax_efficiency_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rebalance_period Object to be assigned
    def rebalance_period=(rebalance_period)
      validator = EnumAttributeValidator.new('Integer', ['0', '1', '2', '3', '4'])
      unless validator.valid?(rebalance_period)
        fail ArgumentError, 'invalid value for "rebalance_period", must be one of #{validator.allowable_values}.'
      end
      @rebalance_period = rebalance_period
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          default_drift_factor == o.default_drift_factor &&
          drift_rebal == o.drift_rebal &&
          downside == o.downside &&
          tax_efficiency_id == o.tax_efficiency_id &&
          period_rebal == o.period_rebal &&
          rebalance_period == o.rebalance_period
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [default_drift_factor, drift_rebal, downside, tax_efficiency_id, period_rebal, rebalance_period].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        value
      when :Date
        value
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ProtonApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end
# Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end
# Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
