/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IModelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a model asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>ModelAssetSize</returns>
        ModelAssetSize CreateModelAssetSizeUsingPost (ModelAssetSize req);

        /// <summary>
        /// Create a model asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of ModelAssetSize</returns>
        ApiResponse<ModelAssetSize> CreateModelAssetSizeUsingPostWithHttpInfo (ModelAssetSize req);
        /// <summary>
        /// Change a model composition
        /// </summary>
        /// <remarks>
        /// Model composition changes represent a change in a model’s holdings.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>List&lt;ModelTransaction&gt;</returns>
        List<ModelTransaction> CreateModelChangeUsingPost (OrderReconcileRequest changeRequest, Guid? modelId);

        /// <summary>
        /// Change a model composition
        /// </summary>
        /// <remarks>
        /// Model composition changes represent a change in a model’s holdings.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of List&lt;ModelTransaction&gt;</returns>
        ApiResponse<List<ModelTransaction>> CreateModelChangeUsingPostWithHttpInfo (OrderReconcileRequest changeRequest, Guid? modelId);
        /// <summary>
        /// Create a model commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a model available for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>ModelComment</returns>
        ModelComment CreateModelCommentUsingPost (ModelComment modelCommentRequest);

        /// <summary>
        /// Create a model commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a model available for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>ApiResponse of ModelComment</returns>
        ApiResponse<ModelComment> CreateModelCommentUsingPostWithHttpInfo (ModelComment modelCommentRequest);
        /// <summary>
        /// Create a model holding
        /// </summary>
        /// <remarks>
        /// Create a new model holding record for a specific model and date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>ModelHolding</returns>
        ModelHolding CreateModelHoldingUsingPost (ModelHolding modelHoldingRequest);

        /// <summary>
        /// Create a model holding
        /// </summary>
        /// <remarks>
        /// Create a new model holding record for a specific model and date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>ApiResponse of ModelHolding</returns>
        ApiResponse<ModelHolding> CreateModelHoldingUsingPostWithHttpInfo (ModelHolding modelHoldingRequest);
        /// <summary>
        /// Create a model transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a security under a model for a specific date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>ModelTransaction</returns>
        ModelTransaction CreateModelTransactionUsingPost (ModelTransaction modelTransactionRequest);

        /// <summary>
        /// Create a model transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a security under a model for a specific date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>ApiResponse of ModelTransaction</returns>
        ApiResponse<ModelTransaction> CreateModelTransactionUsingPostWithHttpInfo (ModelTransaction modelTransactionRequest);
        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// Create a new model for your firm to which a portfolios can later subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>Model</returns>
        Model CreateModelUsingPost (Model modelInfoRequest);

        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// Create a new model for your firm to which a portfolios can later subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>ApiResponse of Model</returns>
        ApiResponse<Model> CreateModelUsingPostWithHttpInfo (Model modelInfoRequest);
        /// <summary>
        /// Delete a model asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a model asset size record for a model. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns></returns>
        void DeleteModelAssetSizeUsingDelete (Guid? modelAssetSizeId);

        /// <summary>
        /// Delete a model asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a model asset size record for a model. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelAssetSizeUsingDeleteWithHttpInfo (Guid? modelAssetSizeId);
        /// <summary>
        /// Delete a model commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a model comment for a model
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns></returns>
        void DeleteModelCommentUsingDelete (Guid? modelCommentId);

        /// <summary>
        /// Delete a model commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a model comment for a model
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelCommentUsingDeleteWithHttpInfo (Guid? modelCommentId);
        /// <summary>
        /// Delete a model holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns></returns>
        void DeleteModelHoldingUsingDelete (Guid? modelHoldingId);

        /// <summary>
        /// Delete a model holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelHoldingUsingDeleteWithHttpInfo (Guid? modelHoldingId);
        /// <summary>
        /// Delete a model transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns></returns>
        void DeleteModelTransactionUsingDelete (Guid? modelTransactionId);

        /// <summary>
        /// Delete a model transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelTransactionUsingDeleteWithHttpInfo (Guid? modelTransactionId);
        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// Permanently delete a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns></returns>
        void DeleteModelUsingDelete (Guid? modelId);

        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// Permanently delete a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteModelUsingDeleteWithHttpInfo (Guid? modelId);
        /// <summary>
        /// List all models
        /// </summary>
        /// <remarks>
        /// Get details for all models defined for your firm to which portfolios can subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModel</returns>
        PageModel GetModelAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all models
        /// </summary>
        /// <remarks>
        /// Get details for all models defined for your firm to which portfolios can subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModel</returns>
        ApiResponse<PageModel> GetModelAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all model asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelAssetSize</returns>
        PageModelAssetSize GetModelAssetSizeAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelAssetSize</returns>
        ApiResponse<PageModelAssetSize> GetModelAssetSizeAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ModelAssetSize</returns>
        ModelAssetSize GetModelAssetSizeUsingGet (Guid? modelAssetSizeId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a model asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of ModelAssetSize</returns>
        ApiResponse<ModelAssetSize> GetModelAssetSizeUsingGetWithHttpInfo (Guid? modelAssetSizeId, string currencyConversion = null);
        /// <summary>
        /// List all model commentaries
        /// </summary>
        /// <remarks>
        /// List all comments for all models defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelComment</returns>
        PageModelComment GetModelCommentAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model commentaries
        /// </summary>
        /// <remarks>
        /// List all comments for all models defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelComment</returns>
        ApiResponse<PageModelComment> GetModelCommentAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ModelComment</returns>
        ModelComment GetModelCommentUsingGet (Guid? modelCommentId);

        /// <summary>
        /// Retrieve a model commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ApiResponse of ModelComment</returns>
        ApiResponse<ModelComment> GetModelCommentUsingGetWithHttpInfo (Guid? modelCommentId);
        /// <summary>
        /// List all model holdings
        /// </summary>
        /// <remarks>
        /// Get all model holding records for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelHolding</returns>
        PageModelHolding GetModelHoldingAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model holdings
        /// </summary>
        /// <remarks>
        /// Get all model holding records for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelHolding</returns>
        ApiResponse<PageModelHolding> GetModelHoldingAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ModelHolding</returns>
        ModelHolding GetModelHoldingUsingGet (Guid? modelHoldingId);

        /// <summary>
        /// Retrieve a model holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ApiResponse of ModelHolding</returns>
        ApiResponse<ModelHolding> GetModelHoldingUsingGetWithHttpInfo (Guid? modelHoldingId);
        /// <summary>
        /// List all model transactions
        /// </summary>
        /// <remarks>
        /// Get details for all transaction records for all models defined by your firm. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelTransaction</returns>
        PageModelTransaction GetModelTransactionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model transactions
        /// </summary>
        /// <remarks>
        /// Get details for all transaction records for all models defined by your firm. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelTransaction</returns>
        ApiResponse<PageModelTransaction> GetModelTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ModelTransaction</returns>
        ModelTransaction GetModelTransactionUsingGet (Guid? modelTransactionId);

        /// <summary>
        /// Retrieve a model transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ApiResponse of ModelTransaction</returns>
        ApiResponse<ModelTransaction> GetModelTransactionUsingGetWithHttpInfo (Guid? modelTransactionId);
        /// <summary>
        /// Retrieve a model
        /// </summary>
        /// <remarks>
        /// Get the information for a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Model</returns>
        Model GetModelUsingGet (Guid? modelId);

        /// <summary>
        /// Retrieve a model
        /// </summary>
        /// <remarks>
        /// Get the information for a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of Model</returns>
        ApiResponse<Model> GetModelUsingGetWithHttpInfo (Guid? modelId);
        /// <summary>
        /// Update a model asset size
        /// </summary>
        /// <remarks>
        /// Update a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>ModelAssetSize</returns>
        ModelAssetSize UpdateModelAssetSizeUsingPut (Object modelAssetSize, Guid? modelAssetSizeId);

        /// <summary>
        /// Update a model asset size
        /// </summary>
        /// <remarks>
        /// Update a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>ApiResponse of ModelAssetSize</returns>
        ApiResponse<ModelAssetSize> UpdateModelAssetSizeUsingPutWithHttpInfo (Object modelAssetSize, Guid? modelAssetSizeId);
        /// <summary>
        /// Update a model commentary
        /// </summary>
        /// <remarks>
        /// Update a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ModelComment</returns>
        ModelComment UpdateModelCommentUsingPut (Object modelComment, Guid? modelCommentId);

        /// <summary>
        /// Update a model commentary
        /// </summary>
        /// <remarks>
        /// Update a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ApiResponse of ModelComment</returns>
        ApiResponse<ModelComment> UpdateModelCommentUsingPutWithHttpInfo (Object modelComment, Guid? modelCommentId);
        /// <summary>
        /// Update a model holding
        /// </summary>
        /// <remarks>
        /// Update a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ModelHolding</returns>
        ModelHolding UpdateModelHoldingUsingPut (Object modelHolding, Guid? modelHoldingId);

        /// <summary>
        /// Update a model holding
        /// </summary>
        /// <remarks>
        /// Update a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ApiResponse of ModelHolding</returns>
        ApiResponse<ModelHolding> UpdateModelHoldingUsingPutWithHttpInfo (Object modelHolding, Guid? modelHoldingId);
        /// <summary>
        /// Update a model transaction
        /// </summary>
        /// <remarks>
        /// Update a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ModelTransaction</returns>
        ModelTransaction UpdateModelTransactionUsingPut (Object modelTransaction, Guid? modelTransactionId);

        /// <summary>
        /// Update a model transaction
        /// </summary>
        /// <remarks>
        /// Update a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ApiResponse of ModelTransaction</returns>
        ApiResponse<ModelTransaction> UpdateModelTransactionUsingPutWithHttpInfo (Object modelTransaction, Guid? modelTransactionId);
        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// Update a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Model</returns>
        Model UpdateModelUsingPut (Object model, Guid? modelId);

        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// Update a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of Model</returns>
        ApiResponse<Model> UpdateModelUsingPutWithHttpInfo (Object model, Guid? modelId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a model asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of ModelAssetSize</returns>
        System.Threading.Tasks.Task<ModelAssetSize> CreateModelAssetSizeUsingPostAsync (ModelAssetSize req);

        /// <summary>
        /// Create a model asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (ModelAssetSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAssetSize>> CreateModelAssetSizeUsingPostAsyncWithHttpInfo (ModelAssetSize req);
        /// <summary>
        /// Change a model composition
        /// </summary>
        /// <remarks>
        /// Model composition changes represent a change in a model’s holdings.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of List&lt;ModelTransaction&gt;</returns>
        System.Threading.Tasks.Task<List<ModelTransaction>> CreateModelChangeUsingPostAsync (OrderReconcileRequest changeRequest, Guid? modelId);

        /// <summary>
        /// Change a model composition
        /// </summary>
        /// <remarks>
        /// Model composition changes represent a change in a model’s holdings.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse (List&lt;ModelTransaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelTransaction>>> CreateModelChangeUsingPostAsyncWithHttpInfo (OrderReconcileRequest changeRequest, Guid? modelId);
        /// <summary>
        /// Create a model commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a model available for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>Task of ModelComment</returns>
        System.Threading.Tasks.Task<ModelComment> CreateModelCommentUsingPostAsync (ModelComment modelCommentRequest);

        /// <summary>
        /// Create a model commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a model available for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>Task of ApiResponse (ModelComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelComment>> CreateModelCommentUsingPostAsyncWithHttpInfo (ModelComment modelCommentRequest);
        /// <summary>
        /// Create a model holding
        /// </summary>
        /// <remarks>
        /// Create a new model holding record for a specific model and date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>Task of ModelHolding</returns>
        System.Threading.Tasks.Task<ModelHolding> CreateModelHoldingUsingPostAsync (ModelHolding modelHoldingRequest);

        /// <summary>
        /// Create a model holding
        /// </summary>
        /// <remarks>
        /// Create a new model holding record for a specific model and date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>Task of ApiResponse (ModelHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHolding>> CreateModelHoldingUsingPostAsyncWithHttpInfo (ModelHolding modelHoldingRequest);
        /// <summary>
        /// Create a model transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a security under a model for a specific date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>Task of ModelTransaction</returns>
        System.Threading.Tasks.Task<ModelTransaction> CreateModelTransactionUsingPostAsync (ModelTransaction modelTransactionRequest);

        /// <summary>
        /// Create a model transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a security under a model for a specific date.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>Task of ApiResponse (ModelTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelTransaction>> CreateModelTransactionUsingPostAsyncWithHttpInfo (ModelTransaction modelTransactionRequest);
        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// Create a new model for your firm to which a portfolios can later subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>Task of Model</returns>
        System.Threading.Tasks.Task<Model> CreateModelUsingPostAsync (Model modelInfoRequest);

        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// Create a new model for your firm to which a portfolios can later subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model>> CreateModelUsingPostAsyncWithHttpInfo (Model modelInfoRequest);
        /// <summary>
        /// Delete a model asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a model asset size record for a model. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelAssetSizeUsingDeleteAsync (Guid? modelAssetSizeId);

        /// <summary>
        /// Delete a model asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a model asset size record for a model. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelAssetSizeUsingDeleteAsyncWithHttpInfo (Guid? modelAssetSizeId);
        /// <summary>
        /// Delete a model commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a model comment for a model
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelCommentUsingDeleteAsync (Guid? modelCommentId);

        /// <summary>
        /// Delete a model commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a model comment for a model
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelCommentUsingDeleteAsyncWithHttpInfo (Guid? modelCommentId);
        /// <summary>
        /// Delete a model holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelHoldingUsingDeleteAsync (Guid? modelHoldingId);

        /// <summary>
        /// Delete a model holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelHoldingUsingDeleteAsyncWithHttpInfo (Guid? modelHoldingId);
        /// <summary>
        /// Delete a model transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelTransactionUsingDeleteAsync (Guid? modelTransactionId);

        /// <summary>
        /// Delete a model transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelTransactionUsingDeleteAsyncWithHttpInfo (Guid? modelTransactionId);
        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// Permanently delete a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteModelUsingDeleteAsync (Guid? modelId);

        /// <summary>
        /// Delete a model
        /// </summary>
        /// <remarks>
        /// Permanently delete a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelUsingDeleteAsyncWithHttpInfo (Guid? modelId);
        /// <summary>
        /// List all models
        /// </summary>
        /// <remarks>
        /// Get details for all models defined for your firm to which portfolios can subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModel</returns>
        System.Threading.Tasks.Task<PageModel> GetModelAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all models
        /// </summary>
        /// <remarks>
        /// Get details for all models defined for your firm to which portfolios can subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageModel>> GetModelAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all model asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelAssetSize</returns>
        System.Threading.Tasks.Task<PageModelAssetSize> GetModelAssetSizeAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelAssetSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageModelAssetSize>> GetModelAssetSizeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ModelAssetSize</returns>
        System.Threading.Tasks.Task<ModelAssetSize> GetModelAssetSizeUsingGetAsync (Guid? modelAssetSizeId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a model asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (ModelAssetSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAssetSize>> GetModelAssetSizeUsingGetAsyncWithHttpInfo (Guid? modelAssetSizeId, string currencyConversion = null);
        /// <summary>
        /// List all model commentaries
        /// </summary>
        /// <remarks>
        /// List all comments for all models defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelComment</returns>
        System.Threading.Tasks.Task<PageModelComment> GetModelCommentAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model commentaries
        /// </summary>
        /// <remarks>
        /// List all comments for all models defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageModelComment>> GetModelCommentAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ModelComment</returns>
        System.Threading.Tasks.Task<ModelComment> GetModelCommentUsingGetAsync (Guid? modelCommentId);

        /// <summary>
        /// Retrieve a model commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ApiResponse (ModelComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelComment>> GetModelCommentUsingGetAsyncWithHttpInfo (Guid? modelCommentId);
        /// <summary>
        /// List all model holdings
        /// </summary>
        /// <remarks>
        /// Get all model holding records for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelHolding</returns>
        System.Threading.Tasks.Task<PageModelHolding> GetModelHoldingAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model holdings
        /// </summary>
        /// <remarks>
        /// Get all model holding records for all models defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageModelHolding>> GetModelHoldingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ModelHolding</returns>
        System.Threading.Tasks.Task<ModelHolding> GetModelHoldingUsingGetAsync (Guid? modelHoldingId);

        /// <summary>
        /// Retrieve a model holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ApiResponse (ModelHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHolding>> GetModelHoldingUsingGetAsyncWithHttpInfo (Guid? modelHoldingId);
        /// <summary>
        /// List all model transactions
        /// </summary>
        /// <remarks>
        /// Get details for all transaction records for all models defined by your firm. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelTransaction</returns>
        System.Threading.Tasks.Task<PageModelTransaction> GetModelTransactionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all model transactions
        /// </summary>
        /// <remarks>
        /// Get details for all transaction records for all models defined by your firm. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageModelTransaction>> GetModelTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a model transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ModelTransaction</returns>
        System.Threading.Tasks.Task<ModelTransaction> GetModelTransactionUsingGetAsync (Guid? modelTransactionId);

        /// <summary>
        /// Retrieve a model transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ApiResponse (ModelTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelTransaction>> GetModelTransactionUsingGetAsyncWithHttpInfo (Guid? modelTransactionId);
        /// <summary>
        /// Retrieve a model
        /// </summary>
        /// <remarks>
        /// Get the information for a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of Model</returns>
        System.Threading.Tasks.Task<Model> GetModelUsingGetAsync (Guid? modelId);

        /// <summary>
        /// Retrieve a model
        /// </summary>
        /// <remarks>
        /// Get the information for a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model>> GetModelUsingGetAsyncWithHttpInfo (Guid? modelId);
        /// <summary>
        /// Update a model asset size
        /// </summary>
        /// <remarks>
        /// Update a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of ModelAssetSize</returns>
        System.Threading.Tasks.Task<ModelAssetSize> UpdateModelAssetSizeUsingPutAsync (Object modelAssetSize, Guid? modelAssetSizeId);

        /// <summary>
        /// Update a model asset size
        /// </summary>
        /// <remarks>
        /// Update a model asset size record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of ApiResponse (ModelAssetSize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelAssetSize>> UpdateModelAssetSizeUsingPutAsyncWithHttpInfo (Object modelAssetSize, Guid? modelAssetSizeId);
        /// <summary>
        /// Update a model commentary
        /// </summary>
        /// <remarks>
        /// Update a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ModelComment</returns>
        System.Threading.Tasks.Task<ModelComment> UpdateModelCommentUsingPutAsync (Object modelComment, Guid? modelCommentId);

        /// <summary>
        /// Update a model commentary
        /// </summary>
        /// <remarks>
        /// Update a model comment for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ApiResponse (ModelComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelComment>> UpdateModelCommentUsingPutAsyncWithHttpInfo (Object modelComment, Guid? modelCommentId);
        /// <summary>
        /// Update a model holding
        /// </summary>
        /// <remarks>
        /// Update a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ModelHolding</returns>
        System.Threading.Tasks.Task<ModelHolding> UpdateModelHoldingUsingPutAsync (Object modelHolding, Guid? modelHoldingId);

        /// <summary>
        /// Update a model holding
        /// </summary>
        /// <remarks>
        /// Update a model holding record for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ApiResponse (ModelHolding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelHolding>> UpdateModelHoldingUsingPutAsyncWithHttpInfo (Object modelHolding, Guid? modelHoldingId);
        /// <summary>
        /// Update a model transaction
        /// </summary>
        /// <remarks>
        /// Update a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ModelTransaction</returns>
        System.Threading.Tasks.Task<ModelTransaction> UpdateModelTransactionUsingPutAsync (Object modelTransaction, Guid? modelTransactionId);

        /// <summary>
        /// Update a model transaction
        /// </summary>
        /// <remarks>
        /// Update a model transaction for a model.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ApiResponse (ModelTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelTransaction>> UpdateModelTransactionUsingPutAsyncWithHttpInfo (Object modelTransaction, Guid? modelTransactionId);
        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// Update a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of Model</returns>
        System.Threading.Tasks.Task<Model> UpdateModelUsingPutAsync (Object model, Guid? modelId);

        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// Update a model for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        System.Threading.Tasks.Task<ApiResponse<Model>> UpdateModelUsingPutAsyncWithHttpInfo (Object model, Guid? modelId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ModelApi : IModelApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ModelApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ModelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ModelApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a model asset size Create a new asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>ModelAssetSize</returns>
        public ModelAssetSize CreateModelAssetSizeUsingPost (ModelAssetSize req)
        {
             ApiResponse<ModelAssetSize> localVarResponse = CreateModelAssetSizeUsingPostWithHttpInfo(req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a model asset size Create a new asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of ModelAssetSize</returns>
        public ApiResponse< ModelAssetSize > CreateModelAssetSizeUsingPostWithHttpInfo (ModelAssetSize req)
        {
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling ModelApi->CreateModelAssetSizeUsingPost");

            var localVarPath = "/nucleus/v1/model_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelAssetSizeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAssetSize)));
        }

        /// <summary>
        /// Create a model asset size Create a new asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of ModelAssetSize</returns>
        public async System.Threading.Tasks.Task<ModelAssetSize> CreateModelAssetSizeUsingPostAsync (ModelAssetSize req)
        {
             ApiResponse<ModelAssetSize> localVarResponse = await CreateModelAssetSizeUsingPostAsyncWithHttpInfo(req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a model asset size Create a new asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (ModelAssetSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAssetSize>> CreateModelAssetSizeUsingPostAsyncWithHttpInfo (ModelAssetSize req)
        {
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling ModelApi->CreateModelAssetSizeUsingPost");

            var localVarPath = "/nucleus/v1/model_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelAssetSizeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAssetSize)));
        }

        /// <summary>
        /// Change a model composition Model composition changes represent a change in a model’s holdings.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>List&lt;ModelTransaction&gt;</returns>
        public List<ModelTransaction> CreateModelChangeUsingPost (OrderReconcileRequest changeRequest, Guid? modelId)
        {
             ApiResponse<List<ModelTransaction>> localVarResponse = CreateModelChangeUsingPostWithHttpInfo(changeRequest, modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change a model composition Model composition changes represent a change in a model’s holdings.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of List&lt;ModelTransaction&gt;</returns>
        public ApiResponse< List<ModelTransaction> > CreateModelChangeUsingPostWithHttpInfo (OrderReconcileRequest changeRequest, Guid? modelId)
        {
            // verify the required parameter 'changeRequest' is set
            if (changeRequest == null)
                throw new ApiException(400, "Missing required parameter 'changeRequest' when calling ModelApi->CreateModelChangeUsingPost");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->CreateModelChangeUsingPost");

            var localVarPath = "/nucleus/v1/model/{model_id}/model_change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (changeRequest != null && changeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelChangeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelTransaction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelTransaction>)));
        }

        /// <summary>
        /// Change a model composition Model composition changes represent a change in a model’s holdings.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of List&lt;ModelTransaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelTransaction>> CreateModelChangeUsingPostAsync (OrderReconcileRequest changeRequest, Guid? modelId)
        {
             ApiResponse<List<ModelTransaction>> localVarResponse = await CreateModelChangeUsingPostAsyncWithHttpInfo(changeRequest, modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change a model composition Model composition changes represent a change in a model’s holdings.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changeRequest">changeRequest</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse (List&lt;ModelTransaction&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelTransaction>>> CreateModelChangeUsingPostAsyncWithHttpInfo (OrderReconcileRequest changeRequest, Guid? modelId)
        {
            // verify the required parameter 'changeRequest' is set
            if (changeRequest == null)
                throw new ApiException(400, "Missing required parameter 'changeRequest' when calling ModelApi->CreateModelChangeUsingPost");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->CreateModelChangeUsingPost");

            var localVarPath = "/nucleus/v1/model/{model_id}/model_change";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (changeRequest != null && changeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(changeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = changeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelChangeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelTransaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelTransaction>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelTransaction>)));
        }

        /// <summary>
        /// Create a model commentary Create a new comment for a model available for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>ModelComment</returns>
        public ModelComment CreateModelCommentUsingPost (ModelComment modelCommentRequest)
        {
             ApiResponse<ModelComment> localVarResponse = CreateModelCommentUsingPostWithHttpInfo(modelCommentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a model commentary Create a new comment for a model available for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>ApiResponse of ModelComment</returns>
        public ApiResponse< ModelComment > CreateModelCommentUsingPostWithHttpInfo (ModelComment modelCommentRequest)
        {
            // verify the required parameter 'modelCommentRequest' is set
            if (modelCommentRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentRequest' when calling ModelApi->CreateModelCommentUsingPost");

            var localVarPath = "/nucleus/v1/model_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentRequest != null && modelCommentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelCommentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelCommentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelCommentUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelComment)));
        }

        /// <summary>
        /// Create a model commentary Create a new comment for a model available for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>Task of ModelComment</returns>
        public async System.Threading.Tasks.Task<ModelComment> CreateModelCommentUsingPostAsync (ModelComment modelCommentRequest)
        {
             ApiResponse<ModelComment> localVarResponse = await CreateModelCommentUsingPostAsyncWithHttpInfo(modelCommentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a model commentary Create a new comment for a model available for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentRequest">modelCommentRequest</param>
        /// <returns>Task of ApiResponse (ModelComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelComment>> CreateModelCommentUsingPostAsyncWithHttpInfo (ModelComment modelCommentRequest)
        {
            // verify the required parameter 'modelCommentRequest' is set
            if (modelCommentRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentRequest' when calling ModelApi->CreateModelCommentUsingPost");

            var localVarPath = "/nucleus/v1/model_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentRequest != null && modelCommentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelCommentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelCommentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelCommentUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelComment)));
        }

        /// <summary>
        /// Create a model holding Create a new model holding record for a specific model and date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>ModelHolding</returns>
        public ModelHolding CreateModelHoldingUsingPost (ModelHolding modelHoldingRequest)
        {
             ApiResponse<ModelHolding> localVarResponse = CreateModelHoldingUsingPostWithHttpInfo(modelHoldingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a model holding Create a new model holding record for a specific model and date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>ApiResponse of ModelHolding</returns>
        public ApiResponse< ModelHolding > CreateModelHoldingUsingPostWithHttpInfo (ModelHolding modelHoldingRequest)
        {
            // verify the required parameter 'modelHoldingRequest' is set
            if (modelHoldingRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingRequest' when calling ModelApi->CreateModelHoldingUsingPost");

            var localVarPath = "/nucleus/v1/model_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingRequest != null && modelHoldingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHoldingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHoldingRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelHoldingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHolding)));
        }

        /// <summary>
        /// Create a model holding Create a new model holding record for a specific model and date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>Task of ModelHolding</returns>
        public async System.Threading.Tasks.Task<ModelHolding> CreateModelHoldingUsingPostAsync (ModelHolding modelHoldingRequest)
        {
             ApiResponse<ModelHolding> localVarResponse = await CreateModelHoldingUsingPostAsyncWithHttpInfo(modelHoldingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a model holding Create a new model holding record for a specific model and date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingRequest">modelHoldingRequest</param>
        /// <returns>Task of ApiResponse (ModelHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHolding>> CreateModelHoldingUsingPostAsyncWithHttpInfo (ModelHolding modelHoldingRequest)
        {
            // verify the required parameter 'modelHoldingRequest' is set
            if (modelHoldingRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingRequest' when calling ModelApi->CreateModelHoldingUsingPost");

            var localVarPath = "/nucleus/v1/model_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingRequest != null && modelHoldingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHoldingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHoldingRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelHoldingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHolding)));
        }

        /// <summary>
        /// Create a model transaction Create a new transaction record for a security under a model for a specific date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>ModelTransaction</returns>
        public ModelTransaction CreateModelTransactionUsingPost (ModelTransaction modelTransactionRequest)
        {
             ApiResponse<ModelTransaction> localVarResponse = CreateModelTransactionUsingPostWithHttpInfo(modelTransactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a model transaction Create a new transaction record for a security under a model for a specific date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>ApiResponse of ModelTransaction</returns>
        public ApiResponse< ModelTransaction > CreateModelTransactionUsingPostWithHttpInfo (ModelTransaction modelTransactionRequest)
        {
            // verify the required parameter 'modelTransactionRequest' is set
            if (modelTransactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionRequest' when calling ModelApi->CreateModelTransactionUsingPost");

            var localVarPath = "/nucleus/v1/model_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionRequest != null && modelTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelTransactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransaction)));
        }

        /// <summary>
        /// Create a model transaction Create a new transaction record for a security under a model for a specific date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>Task of ModelTransaction</returns>
        public async System.Threading.Tasks.Task<ModelTransaction> CreateModelTransactionUsingPostAsync (ModelTransaction modelTransactionRequest)
        {
             ApiResponse<ModelTransaction> localVarResponse = await CreateModelTransactionUsingPostAsyncWithHttpInfo(modelTransactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a model transaction Create a new transaction record for a security under a model for a specific date.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionRequest">modelTransactionRequest</param>
        /// <returns>Task of ApiResponse (ModelTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelTransaction>> CreateModelTransactionUsingPostAsyncWithHttpInfo (ModelTransaction modelTransactionRequest)
        {
            // verify the required parameter 'modelTransactionRequest' is set
            if (modelTransactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionRequest' when calling ModelApi->CreateModelTransactionUsingPost");

            var localVarPath = "/nucleus/v1/model_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionRequest != null && modelTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelTransactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransaction)));
        }

        /// <summary>
        /// Create a model Create a new model for your firm to which a portfolios can later subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>Model</returns>
        public Model CreateModelUsingPost (Model modelInfoRequest)
        {
             ApiResponse<Model> localVarResponse = CreateModelUsingPostWithHttpInfo(modelInfoRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a model Create a new model for your firm to which a portfolios can later subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>ApiResponse of Model</returns>
        public ApiResponse< Model > CreateModelUsingPostWithHttpInfo (Model modelInfoRequest)
        {
            // verify the required parameter 'modelInfoRequest' is set
            if (modelInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelInfoRequest' when calling ModelApi->CreateModelUsingPost");

            var localVarPath = "/nucleus/v1/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelInfoRequest != null && modelInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model)));
        }

        /// <summary>
        /// Create a model Create a new model for your firm to which a portfolios can later subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>Task of Model</returns>
        public async System.Threading.Tasks.Task<Model> CreateModelUsingPostAsync (Model modelInfoRequest)
        {
             ApiResponse<Model> localVarResponse = await CreateModelUsingPostAsyncWithHttpInfo(modelInfoRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a model Create a new model for your firm to which a portfolios can later subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelInfoRequest">modelInfoRequest</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model>> CreateModelUsingPostAsyncWithHttpInfo (Model modelInfoRequest)
        {
            // verify the required parameter 'modelInfoRequest' is set
            if (modelInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'modelInfoRequest' when calling ModelApi->CreateModelUsingPost");

            var localVarPath = "/nucleus/v1/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelInfoRequest != null && modelInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateModelUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model)));
        }

        /// <summary>
        /// Delete a model asset size Permanently delete a model asset size record for a model. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns></returns>
        public void DeleteModelAssetSizeUsingDelete (Guid? modelAssetSizeId)
        {
             DeleteModelAssetSizeUsingDeleteWithHttpInfo(modelAssetSizeId);
        }

        /// <summary>
        /// Delete a model asset size Permanently delete a model asset size record for a model. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelAssetSizeUsingDeleteWithHttpInfo (Guid? modelAssetSizeId)
        {
            // verify the required parameter 'modelAssetSizeId' is set
            if (modelAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSizeId' when calling ModelApi->DeleteModelAssetSizeUsingDelete");

            var localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelAssetSizeId != null) localVarPathParams.Add("model_asset_size_id", this.Configuration.ApiClient.ParameterToString(modelAssetSizeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelAssetSizeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model asset size Permanently delete a model asset size record for a model. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelAssetSizeUsingDeleteAsync (Guid? modelAssetSizeId)
        {
             await DeleteModelAssetSizeUsingDeleteAsyncWithHttpInfo(modelAssetSizeId);

        }

        /// <summary>
        /// Delete a model asset size Permanently delete a model asset size record for a model. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelAssetSizeUsingDeleteAsyncWithHttpInfo (Guid? modelAssetSizeId)
        {
            // verify the required parameter 'modelAssetSizeId' is set
            if (modelAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSizeId' when calling ModelApi->DeleteModelAssetSizeUsingDelete");

            var localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelAssetSizeId != null) localVarPathParams.Add("model_asset_size_id", this.Configuration.ApiClient.ParameterToString(modelAssetSizeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelAssetSizeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model commentary Permanently delete a model comment for a model
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns></returns>
        public void DeleteModelCommentUsingDelete (Guid? modelCommentId)
        {
             DeleteModelCommentUsingDeleteWithHttpInfo(modelCommentId);
        }

        /// <summary>
        /// Delete a model commentary Permanently delete a model comment for a model
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelCommentUsingDeleteWithHttpInfo (Guid? modelCommentId)
        {
            // verify the required parameter 'modelCommentId' is set
            if (modelCommentId == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentId' when calling ModelApi->DeleteModelCommentUsingDelete");

            var localVarPath = "/nucleus/v1/model_comment/{model_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentId != null) localVarPathParams.Add("model_comment_id", this.Configuration.ApiClient.ParameterToString(modelCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelCommentUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model commentary Permanently delete a model comment for a model
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelCommentUsingDeleteAsync (Guid? modelCommentId)
        {
             await DeleteModelCommentUsingDeleteAsyncWithHttpInfo(modelCommentId);

        }

        /// <summary>
        /// Delete a model commentary Permanently delete a model comment for a model
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelCommentUsingDeleteAsyncWithHttpInfo (Guid? modelCommentId)
        {
            // verify the required parameter 'modelCommentId' is set
            if (modelCommentId == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentId' when calling ModelApi->DeleteModelCommentUsingDelete");

            var localVarPath = "/nucleus/v1/model_comment/{model_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentId != null) localVarPathParams.Add("model_comment_id", this.Configuration.ApiClient.ParameterToString(modelCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelCommentUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model holding Permanently delete a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns></returns>
        public void DeleteModelHoldingUsingDelete (Guid? modelHoldingId)
        {
             DeleteModelHoldingUsingDeleteWithHttpInfo(modelHoldingId);
        }

        /// <summary>
        /// Delete a model holding Permanently delete a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelHoldingUsingDeleteWithHttpInfo (Guid? modelHoldingId)
        {
            // verify the required parameter 'modelHoldingId' is set
            if (modelHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingId' when calling ModelApi->DeleteModelHoldingUsingDelete");

            var localVarPath = "/nucleus/v1/model_holding/{model_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingId != null) localVarPathParams.Add("model_holding_id", this.Configuration.ApiClient.ParameterToString(modelHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelHoldingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model holding Permanently delete a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelHoldingUsingDeleteAsync (Guid? modelHoldingId)
        {
             await DeleteModelHoldingUsingDeleteAsyncWithHttpInfo(modelHoldingId);

        }

        /// <summary>
        /// Delete a model holding Permanently delete a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelHoldingUsingDeleteAsyncWithHttpInfo (Guid? modelHoldingId)
        {
            // verify the required parameter 'modelHoldingId' is set
            if (modelHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingId' when calling ModelApi->DeleteModelHoldingUsingDelete");

            var localVarPath = "/nucleus/v1/model_holding/{model_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingId != null) localVarPathParams.Add("model_holding_id", this.Configuration.ApiClient.ParameterToString(modelHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelHoldingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model transaction Permanently delete a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns></returns>
        public void DeleteModelTransactionUsingDelete (Guid? modelTransactionId)
        {
             DeleteModelTransactionUsingDeleteWithHttpInfo(modelTransactionId);
        }

        /// <summary>
        /// Delete a model transaction Permanently delete a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelTransactionUsingDeleteWithHttpInfo (Guid? modelTransactionId)
        {
            // verify the required parameter 'modelTransactionId' is set
            if (modelTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionId' when calling ModelApi->DeleteModelTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionId != null) localVarPathParams.Add("model_transaction_id", this.Configuration.ApiClient.ParameterToString(modelTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model transaction Permanently delete a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelTransactionUsingDeleteAsync (Guid? modelTransactionId)
        {
             await DeleteModelTransactionUsingDeleteAsyncWithHttpInfo(modelTransactionId);

        }

        /// <summary>
        /// Delete a model transaction Permanently delete a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelTransactionUsingDeleteAsyncWithHttpInfo (Guid? modelTransactionId)
        {
            // verify the required parameter 'modelTransactionId' is set
            if (modelTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionId' when calling ModelApi->DeleteModelTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionId != null) localVarPathParams.Add("model_transaction_id", this.Configuration.ApiClient.ParameterToString(modelTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model Permanently delete a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns></returns>
        public void DeleteModelUsingDelete (Guid? modelId)
        {
             DeleteModelUsingDeleteWithHttpInfo(modelId);
        }

        /// <summary>
        /// Delete a model Permanently delete a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteModelUsingDeleteWithHttpInfo (Guid? modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->DeleteModelUsingDelete");

            var localVarPath = "/nucleus/v1/model/{model_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a model Permanently delete a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteModelUsingDeleteAsync (Guid? modelId)
        {
             await DeleteModelUsingDeleteAsyncWithHttpInfo(modelId);

        }

        /// <summary>
        /// Delete a model Permanently delete a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteModelUsingDeleteAsyncWithHttpInfo (Guid? modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->DeleteModelUsingDelete");

            var localVarPath = "/nucleus/v1/model/{model_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteModelUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all models Get details for all models defined for your firm to which portfolios can subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModel</returns>
        public PageModel GetModelAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModel> localVarResponse = GetModelAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all models Get details for all models defined for your firm to which portfolios can subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModel</returns>
        public ApiResponse< PageModel > GetModelAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModel)));
        }

        /// <summary>
        /// List all models Get details for all models defined for your firm to which portfolios can subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModel</returns>
        public async System.Threading.Tasks.Task<PageModel> GetModelAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModel> localVarResponse = await GetModelAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all models Get details for all models defined for your firm to which portfolios can subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageModel>> GetModelAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModel)));
        }

        /// <summary>
        /// List all model asset sizes Get a list of asset sizes per date for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelAssetSize</returns>
        public PageModelAssetSize GetModelAssetSizeAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelAssetSize> localVarResponse = GetModelAssetSizeAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all model asset sizes Get a list of asset sizes per date for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelAssetSize</returns>
        public ApiResponse< PageModelAssetSize > GetModelAssetSizeAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelAssetSize)));
        }

        /// <summary>
        /// List all model asset sizes Get a list of asset sizes per date for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelAssetSize</returns>
        public async System.Threading.Tasks.Task<PageModelAssetSize> GetModelAssetSizeAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelAssetSize> localVarResponse = await GetModelAssetSizeAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all model asset sizes Get a list of asset sizes per date for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelAssetSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageModelAssetSize>> GetModelAssetSizeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelAssetSize)));
        }

        /// <summary>
        /// Retrieve a model asset size Retrieve the information for a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ModelAssetSize</returns>
        public ModelAssetSize GetModelAssetSizeUsingGet (Guid? modelAssetSizeId, string currencyConversion = null)
        {
             ApiResponse<ModelAssetSize> localVarResponse = GetModelAssetSizeUsingGetWithHttpInfo(modelAssetSizeId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a model asset size Retrieve the information for a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of ModelAssetSize</returns>
        public ApiResponse< ModelAssetSize > GetModelAssetSizeUsingGetWithHttpInfo (Guid? modelAssetSizeId, string currencyConversion = null)
        {
            // verify the required parameter 'modelAssetSizeId' is set
            if (modelAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSizeId' when calling ModelApi->GetModelAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelAssetSizeId != null) localVarPathParams.Add("model_asset_size_id", this.Configuration.ApiClient.ParameterToString(modelAssetSizeId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAssetSize)));
        }

        /// <summary>
        /// Retrieve a model asset size Retrieve the information for a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ModelAssetSize</returns>
        public async System.Threading.Tasks.Task<ModelAssetSize> GetModelAssetSizeUsingGetAsync (Guid? modelAssetSizeId, string currencyConversion = null)
        {
             ApiResponse<ModelAssetSize> localVarResponse = await GetModelAssetSizeUsingGetAsyncWithHttpInfo(modelAssetSizeId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a model asset size Retrieve the information for a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (ModelAssetSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAssetSize>> GetModelAssetSizeUsingGetAsyncWithHttpInfo (Guid? modelAssetSizeId, string currencyConversion = null)
        {
            // verify the required parameter 'modelAssetSizeId' is set
            if (modelAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSizeId' when calling ModelApi->GetModelAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelAssetSizeId != null) localVarPathParams.Add("model_asset_size_id", this.Configuration.ApiClient.ParameterToString(modelAssetSizeId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAssetSize)));
        }

        /// <summary>
        /// List all model commentaries List all comments for all models defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelComment</returns>
        public PageModelComment GetModelCommentAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelComment> localVarResponse = GetModelCommentAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all model commentaries List all comments for all models defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelComment</returns>
        public ApiResponse< PageModelComment > GetModelCommentAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelCommentAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelComment)));
        }

        /// <summary>
        /// List all model commentaries List all comments for all models defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelComment</returns>
        public async System.Threading.Tasks.Task<PageModelComment> GetModelCommentAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelComment> localVarResponse = await GetModelCommentAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all model commentaries List all comments for all models defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageModelComment>> GetModelCommentAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelCommentAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelComment)));
        }

        /// <summary>
        /// Retrieve a model commentary Retrieve the information for a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ModelComment</returns>
        public ModelComment GetModelCommentUsingGet (Guid? modelCommentId)
        {
             ApiResponse<ModelComment> localVarResponse = GetModelCommentUsingGetWithHttpInfo(modelCommentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a model commentary Retrieve the information for a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ApiResponse of ModelComment</returns>
        public ApiResponse< ModelComment > GetModelCommentUsingGetWithHttpInfo (Guid? modelCommentId)
        {
            // verify the required parameter 'modelCommentId' is set
            if (modelCommentId == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentId' when calling ModelApi->GetModelCommentUsingGet");

            var localVarPath = "/nucleus/v1/model_comment/{model_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentId != null) localVarPathParams.Add("model_comment_id", this.Configuration.ApiClient.ParameterToString(modelCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelCommentUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelComment)));
        }

        /// <summary>
        /// Retrieve a model commentary Retrieve the information for a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ModelComment</returns>
        public async System.Threading.Tasks.Task<ModelComment> GetModelCommentUsingGetAsync (Guid? modelCommentId)
        {
             ApiResponse<ModelComment> localVarResponse = await GetModelCommentUsingGetAsyncWithHttpInfo(modelCommentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a model commentary Retrieve the information for a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ApiResponse (ModelComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelComment>> GetModelCommentUsingGetAsyncWithHttpInfo (Guid? modelCommentId)
        {
            // verify the required parameter 'modelCommentId' is set
            if (modelCommentId == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentId' when calling ModelApi->GetModelCommentUsingGet");

            var localVarPath = "/nucleus/v1/model_comment/{model_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentId != null) localVarPathParams.Add("model_comment_id", this.Configuration.ApiClient.ParameterToString(modelCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelCommentUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelComment)));
        }

        /// <summary>
        /// List all model holdings Get all model holding records for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelHolding</returns>
        public PageModelHolding GetModelHoldingAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelHolding> localVarResponse = GetModelHoldingAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all model holdings Get all model holding records for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelHolding</returns>
        public ApiResponse< PageModelHolding > GetModelHoldingAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelHolding)));
        }

        /// <summary>
        /// List all model holdings Get all model holding records for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelHolding</returns>
        public async System.Threading.Tasks.Task<PageModelHolding> GetModelHoldingAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelHolding> localVarResponse = await GetModelHoldingAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all model holdings Get all model holding records for all models defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageModelHolding>> GetModelHoldingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelHolding)));
        }

        /// <summary>
        /// Retrieve a model holding Retrieve the information for a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ModelHolding</returns>
        public ModelHolding GetModelHoldingUsingGet (Guid? modelHoldingId)
        {
             ApiResponse<ModelHolding> localVarResponse = GetModelHoldingUsingGetWithHttpInfo(modelHoldingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a model holding Retrieve the information for a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ApiResponse of ModelHolding</returns>
        public ApiResponse< ModelHolding > GetModelHoldingUsingGetWithHttpInfo (Guid? modelHoldingId)
        {
            // verify the required parameter 'modelHoldingId' is set
            if (modelHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingId' when calling ModelApi->GetModelHoldingUsingGet");

            var localVarPath = "/nucleus/v1/model_holding/{model_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingId != null) localVarPathParams.Add("model_holding_id", this.Configuration.ApiClient.ParameterToString(modelHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHolding)));
        }

        /// <summary>
        /// Retrieve a model holding Retrieve the information for a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ModelHolding</returns>
        public async System.Threading.Tasks.Task<ModelHolding> GetModelHoldingUsingGetAsync (Guid? modelHoldingId)
        {
             ApiResponse<ModelHolding> localVarResponse = await GetModelHoldingUsingGetAsyncWithHttpInfo(modelHoldingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a model holding Retrieve the information for a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ApiResponse (ModelHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHolding>> GetModelHoldingUsingGetAsyncWithHttpInfo (Guid? modelHoldingId)
        {
            // verify the required parameter 'modelHoldingId' is set
            if (modelHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingId' when calling ModelApi->GetModelHoldingUsingGet");

            var localVarPath = "/nucleus/v1/model_holding/{model_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingId != null) localVarPathParams.Add("model_holding_id", this.Configuration.ApiClient.ParameterToString(modelHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHolding)));
        }

        /// <summary>
        /// List all model transactions Get details for all transaction records for all models defined by your firm. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageModelTransaction</returns>
        public PageModelTransaction GetModelTransactionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelTransaction> localVarResponse = GetModelTransactionAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all model transactions Get details for all transaction records for all models defined by your firm. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageModelTransaction</returns>
        public ApiResponse< PageModelTransaction > GetModelTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelTransaction)));
        }

        /// <summary>
        /// List all model transactions Get details for all transaction records for all models defined by your firm. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageModelTransaction</returns>
        public async System.Threading.Tasks.Task<PageModelTransaction> GetModelTransactionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageModelTransaction> localVarResponse = await GetModelTransactionAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all model transactions Get details for all transaction records for all models defined by your firm. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageModelTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageModelTransaction>> GetModelTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/model_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageModelTransaction)));
        }

        /// <summary>
        /// Retrieve a model transaction Retrieve the information for a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ModelTransaction</returns>
        public ModelTransaction GetModelTransactionUsingGet (Guid? modelTransactionId)
        {
             ApiResponse<ModelTransaction> localVarResponse = GetModelTransactionUsingGetWithHttpInfo(modelTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a model transaction Retrieve the information for a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ApiResponse of ModelTransaction</returns>
        public ApiResponse< ModelTransaction > GetModelTransactionUsingGetWithHttpInfo (Guid? modelTransactionId)
        {
            // verify the required parameter 'modelTransactionId' is set
            if (modelTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionId' when calling ModelApi->GetModelTransactionUsingGet");

            var localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionId != null) localVarPathParams.Add("model_transaction_id", this.Configuration.ApiClient.ParameterToString(modelTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransaction)));
        }

        /// <summary>
        /// Retrieve a model transaction Retrieve the information for a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ModelTransaction</returns>
        public async System.Threading.Tasks.Task<ModelTransaction> GetModelTransactionUsingGetAsync (Guid? modelTransactionId)
        {
             ApiResponse<ModelTransaction> localVarResponse = await GetModelTransactionUsingGetAsyncWithHttpInfo(modelTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a model transaction Retrieve the information for a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ApiResponse (ModelTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelTransaction>> GetModelTransactionUsingGetAsyncWithHttpInfo (Guid? modelTransactionId)
        {
            // verify the required parameter 'modelTransactionId' is set
            if (modelTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionId' when calling ModelApi->GetModelTransactionUsingGet");

            var localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionId != null) localVarPathParams.Add("model_transaction_id", this.Configuration.ApiClient.ParameterToString(modelTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransaction)));
        }

        /// <summary>
        /// Retrieve a model Get the information for a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Model</returns>
        public Model GetModelUsingGet (Guid? modelId)
        {
             ApiResponse<Model> localVarResponse = GetModelUsingGetWithHttpInfo(modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a model Get the information for a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of Model</returns>
        public ApiResponse< Model > GetModelUsingGetWithHttpInfo (Guid? modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->GetModelUsingGet");

            var localVarPath = "/nucleus/v1/model/{model_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model)));
        }

        /// <summary>
        /// Retrieve a model Get the information for a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of Model</returns>
        public async System.Threading.Tasks.Task<Model> GetModelUsingGetAsync (Guid? modelId)
        {
             ApiResponse<Model> localVarResponse = await GetModelUsingGetAsyncWithHttpInfo(modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a model Get the information for a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model>> GetModelUsingGetAsyncWithHttpInfo (Guid? modelId)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->GetModelUsingGet");

            var localVarPath = "/nucleus/v1/model/{model_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetModelUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model)));
        }

        /// <summary>
        /// Update a model asset size Update a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>ModelAssetSize</returns>
        public ModelAssetSize UpdateModelAssetSizeUsingPut (Object modelAssetSize, Guid? modelAssetSizeId)
        {
             ApiResponse<ModelAssetSize> localVarResponse = UpdateModelAssetSizeUsingPutWithHttpInfo(modelAssetSize, modelAssetSizeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model asset size Update a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>ApiResponse of ModelAssetSize</returns>
        public ApiResponse< ModelAssetSize > UpdateModelAssetSizeUsingPutWithHttpInfo (Object modelAssetSize, Guid? modelAssetSizeId)
        {
            // verify the required parameter 'modelAssetSize' is set
            if (modelAssetSize == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSize' when calling ModelApi->UpdateModelAssetSizeUsingPut");
            // verify the required parameter 'modelAssetSizeId' is set
            if (modelAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSizeId' when calling ModelApi->UpdateModelAssetSizeUsingPut");

            var localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelAssetSizeId != null) localVarPathParams.Add("model_asset_size_id", this.Configuration.ApiClient.ParameterToString(modelAssetSizeId)); // path parameter
            if (modelAssetSize != null && modelAssetSize.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelAssetSize); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelAssetSize; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelAssetSizeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAssetSize)));
        }

        /// <summary>
        /// Update a model asset size Update a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of ModelAssetSize</returns>
        public async System.Threading.Tasks.Task<ModelAssetSize> UpdateModelAssetSizeUsingPutAsync (Object modelAssetSize, Guid? modelAssetSizeId)
        {
             ApiResponse<ModelAssetSize> localVarResponse = await UpdateModelAssetSizeUsingPutAsyncWithHttpInfo(modelAssetSize, modelAssetSizeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model asset size Update a model asset size record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelAssetSize">model_asset_size</param>
        /// <param name="modelAssetSizeId">UUID model_asset_size_id</param>
        /// <returns>Task of ApiResponse (ModelAssetSize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelAssetSize>> UpdateModelAssetSizeUsingPutAsyncWithHttpInfo (Object modelAssetSize, Guid? modelAssetSizeId)
        {
            // verify the required parameter 'modelAssetSize' is set
            if (modelAssetSize == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSize' when calling ModelApi->UpdateModelAssetSizeUsingPut");
            // verify the required parameter 'modelAssetSizeId' is set
            if (modelAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'modelAssetSizeId' when calling ModelApi->UpdateModelAssetSizeUsingPut");

            var localVarPath = "/nucleus/v1/model_asset_size/{model_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelAssetSizeId != null) localVarPathParams.Add("model_asset_size_id", this.Configuration.ApiClient.ParameterToString(modelAssetSizeId)); // path parameter
            if (modelAssetSize != null && modelAssetSize.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelAssetSize); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelAssetSize; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelAssetSizeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelAssetSize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelAssetSize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelAssetSize)));
        }

        /// <summary>
        /// Update a model commentary Update a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ModelComment</returns>
        public ModelComment UpdateModelCommentUsingPut (Object modelComment, Guid? modelCommentId)
        {
             ApiResponse<ModelComment> localVarResponse = UpdateModelCommentUsingPutWithHttpInfo(modelComment, modelCommentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model commentary Update a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>ApiResponse of ModelComment</returns>
        public ApiResponse< ModelComment > UpdateModelCommentUsingPutWithHttpInfo (Object modelComment, Guid? modelCommentId)
        {
            // verify the required parameter 'modelComment' is set
            if (modelComment == null)
                throw new ApiException(400, "Missing required parameter 'modelComment' when calling ModelApi->UpdateModelCommentUsingPut");
            // verify the required parameter 'modelCommentId' is set
            if (modelCommentId == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentId' when calling ModelApi->UpdateModelCommentUsingPut");

            var localVarPath = "/nucleus/v1/model_comment/{model_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentId != null) localVarPathParams.Add("model_comment_id", this.Configuration.ApiClient.ParameterToString(modelCommentId)); // path parameter
            if (modelComment != null && modelComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelComment; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelCommentUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelComment)));
        }

        /// <summary>
        /// Update a model commentary Update a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ModelComment</returns>
        public async System.Threading.Tasks.Task<ModelComment> UpdateModelCommentUsingPutAsync (Object modelComment, Guid? modelCommentId)
        {
             ApiResponse<ModelComment> localVarResponse = await UpdateModelCommentUsingPutAsyncWithHttpInfo(modelComment, modelCommentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model commentary Update a model comment for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelComment">model_comment</param>
        /// <param name="modelCommentId">UUID model_comment_id</param>
        /// <returns>Task of ApiResponse (ModelComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelComment>> UpdateModelCommentUsingPutAsyncWithHttpInfo (Object modelComment, Guid? modelCommentId)
        {
            // verify the required parameter 'modelComment' is set
            if (modelComment == null)
                throw new ApiException(400, "Missing required parameter 'modelComment' when calling ModelApi->UpdateModelCommentUsingPut");
            // verify the required parameter 'modelCommentId' is set
            if (modelCommentId == null)
                throw new ApiException(400, "Missing required parameter 'modelCommentId' when calling ModelApi->UpdateModelCommentUsingPut");

            var localVarPath = "/nucleus/v1/model_comment/{model_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelCommentId != null) localVarPathParams.Add("model_comment_id", this.Configuration.ApiClient.ParameterToString(modelCommentId)); // path parameter
            if (modelComment != null && modelComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelComment; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelCommentUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelComment)));
        }

        /// <summary>
        /// Update a model holding Update a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ModelHolding</returns>
        public ModelHolding UpdateModelHoldingUsingPut (Object modelHolding, Guid? modelHoldingId)
        {
             ApiResponse<ModelHolding> localVarResponse = UpdateModelHoldingUsingPutWithHttpInfo(modelHolding, modelHoldingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model holding Update a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>ApiResponse of ModelHolding</returns>
        public ApiResponse< ModelHolding > UpdateModelHoldingUsingPutWithHttpInfo (Object modelHolding, Guid? modelHoldingId)
        {
            // verify the required parameter 'modelHolding' is set
            if (modelHolding == null)
                throw new ApiException(400, "Missing required parameter 'modelHolding' when calling ModelApi->UpdateModelHoldingUsingPut");
            // verify the required parameter 'modelHoldingId' is set
            if (modelHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingId' when calling ModelApi->UpdateModelHoldingUsingPut");

            var localVarPath = "/nucleus/v1/model_holding/{model_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingId != null) localVarPathParams.Add("model_holding_id", this.Configuration.ApiClient.ParameterToString(modelHoldingId)); // path parameter
            if (modelHolding != null && modelHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelHoldingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHolding)));
        }

        /// <summary>
        /// Update a model holding Update a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ModelHolding</returns>
        public async System.Threading.Tasks.Task<ModelHolding> UpdateModelHoldingUsingPutAsync (Object modelHolding, Guid? modelHoldingId)
        {
             ApiResponse<ModelHolding> localVarResponse = await UpdateModelHoldingUsingPutAsyncWithHttpInfo(modelHolding, modelHoldingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model holding Update a model holding record for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelHolding">model_holding</param>
        /// <param name="modelHoldingId">UUID model_holding_id</param>
        /// <returns>Task of ApiResponse (ModelHolding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelHolding>> UpdateModelHoldingUsingPutAsyncWithHttpInfo (Object modelHolding, Guid? modelHoldingId)
        {
            // verify the required parameter 'modelHolding' is set
            if (modelHolding == null)
                throw new ApiException(400, "Missing required parameter 'modelHolding' when calling ModelApi->UpdateModelHoldingUsingPut");
            // verify the required parameter 'modelHoldingId' is set
            if (modelHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'modelHoldingId' when calling ModelApi->UpdateModelHoldingUsingPut");

            var localVarPath = "/nucleus/v1/model_holding/{model_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelHoldingId != null) localVarPathParams.Add("model_holding_id", this.Configuration.ApiClient.ParameterToString(modelHoldingId)); // path parameter
            if (modelHolding != null && modelHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelHoldingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelHolding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelHolding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelHolding)));
        }

        /// <summary>
        /// Update a model transaction Update a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ModelTransaction</returns>
        public ModelTransaction UpdateModelTransactionUsingPut (Object modelTransaction, Guid? modelTransactionId)
        {
             ApiResponse<ModelTransaction> localVarResponse = UpdateModelTransactionUsingPutWithHttpInfo(modelTransaction, modelTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model transaction Update a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>ApiResponse of ModelTransaction</returns>
        public ApiResponse< ModelTransaction > UpdateModelTransactionUsingPutWithHttpInfo (Object modelTransaction, Guid? modelTransactionId)
        {
            // verify the required parameter 'modelTransaction' is set
            if (modelTransaction == null)
                throw new ApiException(400, "Missing required parameter 'modelTransaction' when calling ModelApi->UpdateModelTransactionUsingPut");
            // verify the required parameter 'modelTransactionId' is set
            if (modelTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionId' when calling ModelApi->UpdateModelTransactionUsingPut");

            var localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionId != null) localVarPathParams.Add("model_transaction_id", this.Configuration.ApiClient.ParameterToString(modelTransactionId)); // path parameter
            if (modelTransaction != null && modelTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransaction)));
        }

        /// <summary>
        /// Update a model transaction Update a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ModelTransaction</returns>
        public async System.Threading.Tasks.Task<ModelTransaction> UpdateModelTransactionUsingPutAsync (Object modelTransaction, Guid? modelTransactionId)
        {
             ApiResponse<ModelTransaction> localVarResponse = await UpdateModelTransactionUsingPutAsyncWithHttpInfo(modelTransaction, modelTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model transaction Update a model transaction for a model.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelTransaction">model_transaction</param>
        /// <param name="modelTransactionId">UUID model_transaction_id</param>
        /// <returns>Task of ApiResponse (ModelTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelTransaction>> UpdateModelTransactionUsingPutAsyncWithHttpInfo (Object modelTransaction, Guid? modelTransactionId)
        {
            // verify the required parameter 'modelTransaction' is set
            if (modelTransaction == null)
                throw new ApiException(400, "Missing required parameter 'modelTransaction' when calling ModelApi->UpdateModelTransactionUsingPut");
            // verify the required parameter 'modelTransactionId' is set
            if (modelTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'modelTransactionId' when calling ModelApi->UpdateModelTransactionUsingPut");

            var localVarPath = "/nucleus/v1/model_transaction/{model_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelTransactionId != null) localVarPathParams.Add("model_transaction_id", this.Configuration.ApiClient.ParameterToString(modelTransactionId)); // path parameter
            if (modelTransaction != null && modelTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(modelTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = modelTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelTransaction)));
        }

        /// <summary>
        /// Update a model Update a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Model</returns>
        public Model UpdateModelUsingPut (Object model, Guid? modelId)
        {
             ApiResponse<Model> localVarResponse = UpdateModelUsingPutWithHttpInfo(model, modelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a model Update a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>ApiResponse of Model</returns>
        public ApiResponse< Model > UpdateModelUsingPutWithHttpInfo (Object model, Guid? modelId)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ModelApi->UpdateModelUsingPut");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->UpdateModelUsingPut");

            var localVarPath = "/nucleus/v1/model/{model_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model)));
        }

        /// <summary>
        /// Update a model Update a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of Model</returns>
        public async System.Threading.Tasks.Task<Model> UpdateModelUsingPutAsync (Object model, Guid? modelId)
        {
             ApiResponse<Model> localVarResponse = await UpdateModelUsingPutAsyncWithHttpInfo(model, modelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a model Update a model for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">model</param>
        /// <param name="modelId">UUID model_id</param>
        /// <returns>Task of ApiResponse (Model)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Model>> UpdateModelUsingPutAsyncWithHttpInfo (Object model, Guid? modelId)
        {
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling ModelApi->UpdateModelUsingPut");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling ModelApi->UpdateModelUsingPut");

            var localVarPath = "/nucleus/v1/model/{model_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelId != null) localVarPathParams.Add("model_id", this.Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (model != null && model.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(model); // http body (model) parameter
            }
            else
            {
                localVarPostBody = model; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateModelUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Model>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Model) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Model)));
        }

    }
}
