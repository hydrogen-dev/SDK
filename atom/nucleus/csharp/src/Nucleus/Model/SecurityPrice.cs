/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// SecurityPrice
    /// </summary>
    [DataContract]
    public partial class SecurityPrice :  IEquatable<SecurityPrice>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityPrice" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SecurityPrice() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityPrice" /> class.
        /// </summary>
        /// <param name="adjustedPrice">Security adjusted price.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="currencyCode">currency_code.</param>
        /// <param name="date">Security date (required).</param>
        /// <param name="high">high.</param>
        /// <param name="id">id.</param>
        /// <param name="low">low.</param>
        /// <param name="open">open.</param>
        /// <param name="price">Security price (required).</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="securityId">Security id (required).</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="volume">volume.</param>
        public SecurityPrice(double? adjustedPrice = default(double?), DateTime? createDate = default(DateTime?), string currencyCode = default(string), DateTime? date = default(DateTime?), double? high = default(double?), Guid? id = default(Guid?), double? low = default(double?), double? open = default(double?), double? price = default(double?), string secondaryId = default(string), Guid? securityId = default(Guid?), DateTime? updateDate = default(DateTime?), double? volume = default(double?))
        {
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for SecurityPrice and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for SecurityPrice and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            // to ensure "securityId" is required (not null)
            if (securityId == null)
            {
                throw new InvalidDataException("securityId is a required property for SecurityPrice and cannot be null");
            }
            else
            {
                this.SecurityId = securityId;
            }
            this.AdjustedPrice = adjustedPrice;
            this.CreateDate = createDate;
            this.CurrencyCode = currencyCode;
            this.High = high;
            this.Id = id;
            this.Low = low;
            this.Open = open;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
            this.Volume = volume;
        }
        
        /// <summary>
        /// Security adjusted price
        /// </summary>
        /// <value>Security adjusted price</value>
        [DataMember(Name="adjusted_price", EmitDefaultValue=false)]
        public double? AdjustedPrice { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// currency_code
        /// </summary>
        /// <value>currency_code</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Security date
        /// </summary>
        /// <value>Security date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// high
        /// </summary>
        /// <value>high</value>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public double? High { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// low
        /// </summary>
        /// <value>low</value>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public double? Low { get; set; }

        /// <summary>
        /// open
        /// </summary>
        /// <value>open</value>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public double? Open { get; set; }

        /// <summary>
        /// Security price
        /// </summary>
        /// <value>Security price</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Security id
        /// </summary>
        /// <value>Security id</value>
        [DataMember(Name="security_id", EmitDefaultValue=false)]
        public Guid? SecurityId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// volume
        /// </summary>
        /// <value>volume</value>
        [DataMember(Name="volume", EmitDefaultValue=false)]
        public double? Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecurityPrice {\n");
            sb.Append("  AdjustedPrice: ").Append(AdjustedPrice).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecurityPrice);
        }

        /// <summary>
        /// Returns true if SecurityPrice instances are equal
        /// </summary>
        /// <param name="input">Instance of SecurityPrice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecurityPrice input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdjustedPrice == input.AdjustedPrice ||
                    (this.AdjustedPrice != null &&
                    this.AdjustedPrice.Equals(input.AdjustedPrice))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.Open == input.Open ||
                    (this.Open != null &&
                    this.Open.Equals(input.Open))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdjustedPrice != null)
                    hashCode = hashCode * 59 + this.AdjustedPrice.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.Open != null)
                    hashCode = hashCode * 59 + this.Open.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.SecurityId != null)
                    hashCode = hashCode * 59 + this.SecurityId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
