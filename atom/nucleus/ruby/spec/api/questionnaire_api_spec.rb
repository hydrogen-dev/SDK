=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'spec_helper'
require 'json'

# Unit tests for NucleusApi::QuestionnaireApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'QuestionnaireApi' do
  before do
    # run before each test
    @instance = NucleusApi::QuestionnaireApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of QuestionnaireApi' do
    it 'should create an instance of QuestionnaireApi' do
      expect(@instance).to be_instance_of(NucleusApi::QuestionnaireApi)
    end
  end

  # unit tests for create_answer_using_post
  # Create an answer
  # Create a new answer for question.
  # @param answer answer
  # @param [Hash] opts the optional parameters
  # @return [Answer]
  describe 'create_answer_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_question_using_post
  # Create a question
  # Create a new question for questionnaire.
  # @param question question
  # @param [Hash] opts the optional parameters
  # @return [Question]
  describe 'create_question_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_questionnaire_using_post
  # Create a questionnaire
  # Create a new questionnaire for your firm.
  # @param questionnaire questionnaire
  # @param [Hash] opts the optional parameters
  # @return [Questionnaire]
  describe 'create_questionnaire_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_answer_using_delete
  # Delete an answer
  # Delete an answer for the question
  # @param answer_id UUID answer_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_answer_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_question_using_delete
  # Delete a question
  # Delete an answer for the question
  # @param question_id UUID question_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_question_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_questionnaire_using_delete
  # Delete a questionnaire
  # Permanently delete a questionnaire for your firm.
  # @param questionnaire_id UUID questionnaire_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_questionnaire_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_answer_all_using_get
  # List all Answers
  # Get information for all Answers
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageAnswer]
  describe 'get_answer_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_answer_using_get
  # Retrieve an answer
  # Retrieve the information for an answer for question
  # @param answer_id UUID answer_id
  # @param [Hash] opts the optional parameters
  # @return [Answer]
  describe 'get_answer_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_question_all_using_get
  # List all Questions
  # Get information for all Questions
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageQuestion]
  describe 'get_question_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_question_using_get
  # Retrieve a question
  # Retrieve the information for a question for questionnaire
  # @param question_id UUID question_id
  # @param [Hash] opts the optional parameters
  # @return [Question]
  describe 'get_question_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_questionnaire_all_using_get
  # List all questionnaires
  # Get the information for all questionnaires defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageQuestionnaire]
  describe 'get_questionnaire_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_questionnaire_using_get
  # Retrieve a questionnaire
  # Retrieve the information for a questionnaire for your firm.
  # @param questionnaire_id UUID questionnaire_id
  # @param [Hash] opts the optional parameters
  # @return [Questionnaire]
  describe 'get_questionnaire_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_answer_using_put
  # Update an answer
  # Update a answer for question.
  # @param answer answer
  # @param answer_id UUID answer_id
  # @param [Hash] opts the optional parameters
  # @return [Answer]
  describe 'update_answer_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_question_using_put
  # Update a question.
  # Update a question for questionnaire.
  # @param question question
  # @param question_id UUID question_id
  # @param [Hash] opts the optional parameters
  # @return [Question]
  describe 'update_question_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_questionnaire_using_put
  # Update a questionnaire
  # Update a questionnaire for your firm.
  # @param questionnaire questionnaire
  # @param questionnaire_id UUID questionnaire_id
  # @param [Hash] opts the optional parameters
  # @return [Questionnaire]
  describe 'update_questionnaire_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
