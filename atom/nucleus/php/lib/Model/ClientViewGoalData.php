<?php
/**
 * ClientViewGoalData
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * ClientViewGoalData Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientViewGoalData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientViewGoalData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accounts' => '\com\hydrogen\nucleus\Model\VAccountVO[]',
        'accumulation_horizon' => 'double',
        'decumulation_horizon' => 'double',
        'goal_amount' => 'double',
        'goal_asset_size_by_goal' => 'double',
        'goal_asset_size_by_goal_date' => '\DateTime',
        'goal_category' => 'string',
        'goal_create_date' => '\DateTime',
        'goal_id' => 'string',
        'goal_name' => 'string',
        'goal_type' => 'string',
        'goal_update_date' => '\DateTime',
        'is_decumulation' => 'bool',
        'portfolios' => '\com\hydrogen\nucleus\Model\VPortfolioVO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accounts' => null,
        'accumulation_horizon' => 'double',
        'decumulation_horizon' => 'double',
        'goal_amount' => 'double',
        'goal_asset_size_by_goal' => 'double',
        'goal_asset_size_by_goal_date' => 'date',
        'goal_category' => null,
        'goal_create_date' => 'date-time',
        'goal_id' => 'uuid',
        'goal_name' => null,
        'goal_type' => null,
        'goal_update_date' => 'date-time',
        'is_decumulation' => null,
        'portfolios' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'accumulation_horizon' => 'accumulation_horizon',
        'decumulation_horizon' => 'decumulation_horizon',
        'goal_amount' => 'goal_amount',
        'goal_asset_size_by_goal' => 'goal_asset_size_by_goal',
        'goal_asset_size_by_goal_date' => 'goal_asset_size_by_goal_date',
        'goal_category' => 'goal_category',
        'goal_create_date' => 'goal_create_date',
        'goal_id' => 'goal_id',
        'goal_name' => 'goal_name',
        'goal_type' => 'goal_type',
        'goal_update_date' => 'goal_update_date',
        'is_decumulation' => 'is_decumulation',
        'portfolios' => 'portfolios'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'accumulation_horizon' => 'setAccumulationHorizon',
        'decumulation_horizon' => 'setDecumulationHorizon',
        'goal_amount' => 'setGoalAmount',
        'goal_asset_size_by_goal' => 'setGoalAssetSizeByGoal',
        'goal_asset_size_by_goal_date' => 'setGoalAssetSizeByGoalDate',
        'goal_category' => 'setGoalCategory',
        'goal_create_date' => 'setGoalCreateDate',
        'goal_id' => 'setGoalId',
        'goal_name' => 'setGoalName',
        'goal_type' => 'setGoalType',
        'goal_update_date' => 'setGoalUpdateDate',
        'is_decumulation' => 'setIsDecumulation',
        'portfolios' => 'setPortfolios'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'accumulation_horizon' => 'getAccumulationHorizon',
        'decumulation_horizon' => 'getDecumulationHorizon',
        'goal_amount' => 'getGoalAmount',
        'goal_asset_size_by_goal' => 'getGoalAssetSizeByGoal',
        'goal_asset_size_by_goal_date' => 'getGoalAssetSizeByGoalDate',
        'goal_category' => 'getGoalCategory',
        'goal_create_date' => 'getGoalCreateDate',
        'goal_id' => 'getGoalId',
        'goal_name' => 'getGoalName',
        'goal_type' => 'getGoalType',
        'goal_update_date' => 'getGoalUpdateDate',
        'is_decumulation' => 'getIsDecumulation',
        'portfolios' => 'getPortfolios'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['accumulation_horizon'] = isset($data['accumulation_horizon']) ? $data['accumulation_horizon'] : null;
        $this->container['decumulation_horizon'] = isset($data['decumulation_horizon']) ? $data['decumulation_horizon'] : null;
        $this->container['goal_amount'] = isset($data['goal_amount']) ? $data['goal_amount'] : null;
        $this->container['goal_asset_size_by_goal'] = isset($data['goal_asset_size_by_goal']) ? $data['goal_asset_size_by_goal'] : null;
        $this->container['goal_asset_size_by_goal_date'] = isset($data['goal_asset_size_by_goal_date']) ? $data['goal_asset_size_by_goal_date'] : null;
        $this->container['goal_category'] = isset($data['goal_category']) ? $data['goal_category'] : null;
        $this->container['goal_create_date'] = isset($data['goal_create_date']) ? $data['goal_create_date'] : null;
        $this->container['goal_id'] = isset($data['goal_id']) ? $data['goal_id'] : null;
        $this->container['goal_name'] = isset($data['goal_name']) ? $data['goal_name'] : null;
        $this->container['goal_type'] = isset($data['goal_type']) ? $data['goal_type'] : null;
        $this->container['goal_update_date'] = isset($data['goal_update_date']) ? $data['goal_update_date'] : null;
        $this->container['is_decumulation'] = isset($data['is_decumulation']) ? $data['is_decumulation'] : null;
        $this->container['portfolios'] = isset($data['portfolios']) ? $data['portfolios'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \com\hydrogen\nucleus\Model\VAccountVO[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \com\hydrogen\nucleus\Model\VAccountVO[] $accounts accounts
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets accumulation_horizon
     *
     * @return double
     */
    public function getAccumulationHorizon()
    {
        return $this->container['accumulation_horizon'];
    }

    /**
     * Sets accumulation_horizon
     *
     * @param double $accumulation_horizon accumulation_horizon
     *
     * @return $this
     */
    public function setAccumulationHorizon($accumulation_horizon)
    {
        $this->container['accumulation_horizon'] = $accumulation_horizon;

        return $this;
    }

    /**
     * Gets decumulation_horizon
     *
     * @return double
     */
    public function getDecumulationHorizon()
    {
        return $this->container['decumulation_horizon'];
    }

    /**
     * Sets decumulation_horizon
     *
     * @param double $decumulation_horizon decumulation_horizon
     *
     * @return $this
     */
    public function setDecumulationHorizon($decumulation_horizon)
    {
        $this->container['decumulation_horizon'] = $decumulation_horizon;

        return $this;
    }

    /**
     * Gets goal_amount
     *
     * @return double
     */
    public function getGoalAmount()
    {
        return $this->container['goal_amount'];
    }

    /**
     * Sets goal_amount
     *
     * @param double $goal_amount goal_amount
     *
     * @return $this
     */
    public function setGoalAmount($goal_amount)
    {
        $this->container['goal_amount'] = $goal_amount;

        return $this;
    }

    /**
     * Gets goal_asset_size_by_goal
     *
     * @return double
     */
    public function getGoalAssetSizeByGoal()
    {
        return $this->container['goal_asset_size_by_goal'];
    }

    /**
     * Sets goal_asset_size_by_goal
     *
     * @param double $goal_asset_size_by_goal goal_asset_size_by_goal
     *
     * @return $this
     */
    public function setGoalAssetSizeByGoal($goal_asset_size_by_goal)
    {
        $this->container['goal_asset_size_by_goal'] = $goal_asset_size_by_goal;

        return $this;
    }

    /**
     * Gets goal_asset_size_by_goal_date
     *
     * @return \DateTime
     */
    public function getGoalAssetSizeByGoalDate()
    {
        return $this->container['goal_asset_size_by_goal_date'];
    }

    /**
     * Sets goal_asset_size_by_goal_date
     *
     * @param \DateTime $goal_asset_size_by_goal_date goal_asset_size_by_goal_date
     *
     * @return $this
     */
    public function setGoalAssetSizeByGoalDate($goal_asset_size_by_goal_date)
    {
        $this->container['goal_asset_size_by_goal_date'] = $goal_asset_size_by_goal_date;

        return $this;
    }

    /**
     * Gets goal_category
     *
     * @return string
     */
    public function getGoalCategory()
    {
        return $this->container['goal_category'];
    }

    /**
     * Sets goal_category
     *
     * @param string $goal_category goal_category
     *
     * @return $this
     */
    public function setGoalCategory($goal_category)
    {
        $this->container['goal_category'] = $goal_category;

        return $this;
    }

    /**
     * Gets goal_create_date
     *
     * @return \DateTime
     */
    public function getGoalCreateDate()
    {
        return $this->container['goal_create_date'];
    }

    /**
     * Sets goal_create_date
     *
     * @param \DateTime $goal_create_date goal_create_date
     *
     * @return $this
     */
    public function setGoalCreateDate($goal_create_date)
    {
        $this->container['goal_create_date'] = $goal_create_date;

        return $this;
    }

    /**
     * Gets goal_id
     *
     * @return string
     */
    public function getGoalId()
    {
        return $this->container['goal_id'];
    }

    /**
     * Sets goal_id
     *
     * @param string $goal_id goal_id
     *
     * @return $this
     */
    public function setGoalId($goal_id)
    {
        $this->container['goal_id'] = $goal_id;

        return $this;
    }

    /**
     * Gets goal_name
     *
     * @return string
     */
    public function getGoalName()
    {
        return $this->container['goal_name'];
    }

    /**
     * Sets goal_name
     *
     * @param string $goal_name goal_name
     *
     * @return $this
     */
    public function setGoalName($goal_name)
    {
        $this->container['goal_name'] = $goal_name;

        return $this;
    }

    /**
     * Gets goal_type
     *
     * @return string
     */
    public function getGoalType()
    {
        return $this->container['goal_type'];
    }

    /**
     * Sets goal_type
     *
     * @param string $goal_type goal_type
     *
     * @return $this
     */
    public function setGoalType($goal_type)
    {
        $this->container['goal_type'] = $goal_type;

        return $this;
    }

    /**
     * Gets goal_update_date
     *
     * @return \DateTime
     */
    public function getGoalUpdateDate()
    {
        return $this->container['goal_update_date'];
    }

    /**
     * Sets goal_update_date
     *
     * @param \DateTime $goal_update_date goal_update_date
     *
     * @return $this
     */
    public function setGoalUpdateDate($goal_update_date)
    {
        $this->container['goal_update_date'] = $goal_update_date;

        return $this;
    }

    /**
     * Gets is_decumulation
     *
     * @return bool
     */
    public function getIsDecumulation()
    {
        return $this->container['is_decumulation'];
    }

    /**
     * Sets is_decumulation
     *
     * @param bool $is_decumulation is_decumulation
     *
     * @return $this
     */
    public function setIsDecumulation($is_decumulation)
    {
        $this->container['is_decumulation'] = $is_decumulation;

        return $this;
    }

    /**
     * Gets portfolios
     *
     * @return \com\hydrogen\nucleus\Model\VPortfolioVO[]
     */
    public function getPortfolios()
    {
        return $this->container['portfolios'];
    }

    /**
     * Sets portfolios
     *
     * @param \com\hydrogen\nucleus\Model\VPortfolioVO[] $portfolios portfolios
     *
     * @return $this
     */
    public function setPortfolios($portfolios)
    {
        $this->container['portfolios'] = $portfolios;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


