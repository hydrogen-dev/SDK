=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NucleusApi
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bulk orders for an account
    # Aggregates all orders on a given date for an account.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<Order>]
    def create_account_order_bulk_using_post(account_id, req, opts = {})
      data, _status_code, _headers = create_account_order_bulk_using_post_with_http_info(account_id, req, opts)
      data
    end

    # Bulk orders for an account
    # Aggregates all orders on a given date for an account.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Order>, Fixnum, Hash)>] Array<Order> data, response status code and response headers
    def create_account_order_bulk_using_post_with_http_info(account_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_account_order_bulk_using_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.create_account_order_bulk_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_account_order_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_bulk'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Order>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_account_order_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create buy-only account rebalance orders
    # Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_account_order_buy_only_using_post(account_id, req, opts = {})
      data, _status_code, _headers = create_account_order_buy_only_using_post_with_http_info(account_id, req, opts)
      data
    end

    # Create buy-only account rebalance orders
    # Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_account_order_buy_only_using_post_with_http_info(account_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_account_order_buy_only_using_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.create_account_order_buy_only_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_account_order_buy_only_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_buy_only'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_account_order_buy_only_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create account rebalance orders
    # Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_account_order_rebalance_using_post(account_id, req, opts = {})
      data, _status_code, _headers = create_account_order_rebalance_using_post_with_http_info(account_id, req, opts)
      data
    end

    # Create account rebalance orders
    # Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_account_order_rebalance_using_post_with_http_info(account_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_account_order_rebalance_using_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.create_account_order_rebalance_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_account_order_rebalance_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_rebalance'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_account_order_rebalance_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create account reconciliation order
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [OrderReconcileReturnObject]
    def create_account_order_reconciliation(account_id, req, opts = {})
      data, _status_code, _headers = create_account_order_reconciliation_with_http_info(account_id, req, opts)
      data
    end

    # Create account reconciliation order
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderReconcileReturnObject, Fixnum, Hash)>] OrderReconcileReturnObject data, response status code and response headers
    def create_account_order_reconciliation_with_http_info(account_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_account_order_reconciliation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.create_account_order_reconciliation"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_account_order_reconciliation"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_reconciliation'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderReconcileReturnObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_account_order_reconciliation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sell all account order
    # Create order records necessary to entirely sell all the holdings within an account.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_account_order_sell_all_using_post(account_id, req, opts = {})
      data, _status_code, _headers = create_account_order_sell_all_using_post_with_http_info(account_id, req, opts)
      data
    end

    # Sell all account order
    # Create order records necessary to entirely sell all the holdings within an account.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_account_order_sell_all_using_post_with_http_info(account_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_account_order_sell_all_using_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.create_account_order_sell_all_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_account_order_sell_all_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_sell_all'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_account_order_sell_all_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create sell-only account rebalance orders
    # Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_account_order_sell_only_using_post(account_id, req, opts = {})
      data, _status_code, _headers = create_account_order_sell_only_using_post_with_http_info(account_id, req, opts)
      data
    end

    # Create sell-only account rebalance orders
    # Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
    # @param account_id account_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_account_order_sell_only_using_post_with_http_info(account_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_account_order_sell_only_using_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling OrderApi.create_account_order_sell_only_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_account_order_sell_only_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_sell_only'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_account_order_sell_only_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk orders for a client
    # Aggregates all orders on a given date for a client
    # @param client_id client_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<Order>]
    def create_client_order_bulk_using_post(client_id, req, opts = {})
      data, _status_code, _headers = create_client_order_bulk_using_post_with_http_info(client_id, req, opts)
      data
    end

    # Bulk orders for a client
    # Aggregates all orders on a given date for a client
    # @param client_id client_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Order>, Fixnum, Hash)>] Array<Order> data, response status code and response headers
    def create_client_order_bulk_using_post_with_http_info(client_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_client_order_bulk_using_post ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling OrderApi.create_client_order_bulk_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_client_order_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/order_bulk'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Order>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_client_order_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk orders for your firm
    # Aggregates all orders on a given date for your firm.
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<Order>]
    def create_order_bulk_using_post(req, opts = {})
      data, _status_code, _headers = create_order_bulk_using_post_with_http_info(req, opts)
      data
    end

    # Bulk orders for your firm
    # Aggregates all orders on a given date for your firm.
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Order>, Fixnum, Hash)>] Array<Order> data, response status code and response headers
    def create_order_bulk_using_post_with_http_info(req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_order_bulk_using_post ...'
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_order_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Order>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_order_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an order status
    # Create an order status for your firm.
    # @param order_status_request orderStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [OrderStatus]
    def create_order_status_using_post(order_status_request, opts = {})
      data, _status_code, _headers = create_order_status_using_post_with_http_info(order_status_request, opts)
      data
    end

    # Create an order status
    # Create an order status for your firm.
    # @param order_status_request orderStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderStatus, Fixnum, Hash)>] OrderStatus data, response status code and response headers
    def create_order_status_using_post_with_http_info(order_status_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_order_status_using_post ...'
      end
      # verify the required parameter 'order_status_request' is set
      if @api_client.config.client_side_validation && order_status_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_status_request' when calling OrderApi.create_order_status_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_status_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_order_status_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an order tracking record
    # Create a new order tracking record for an order.
    # @param order_track_request orderTrackRequest
    # @param [Hash] opts the optional parameters
    # @return [OrderTrack]
    def create_order_track_using_post(order_track_request, opts = {})
      data, _status_code, _headers = create_order_track_using_post_with_http_info(order_track_request, opts)
      data
    end

    # Create an order tracking record
    # Create a new order tracking record for an order.
    # @param order_track_request orderTrackRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderTrack, Fixnum, Hash)>] OrderTrack data, response status code and response headers
    def create_order_track_using_post_with_http_info(order_track_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_order_track_using_post ...'
      end
      # verify the required parameter 'order_track_request' is set
      if @api_client.config.client_side_validation && order_track_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_track_request' when calling OrderApi.create_order_track_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_track_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_order_track_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an order record
    # Create an order record defined for your firm.
    # @param order_info_request orderInfoRequest
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def create_order_using_post(order_info_request, opts = {})
      data, _status_code, _headers = create_order_using_post_with_http_info(order_info_request, opts)
      data
    end

    # Create an order record
    # Create an order record defined for your firm.
    # @param order_info_request orderInfoRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def create_order_using_post_with_http_info(order_info_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_order_using_post ...'
      end
      # verify the required parameter 'order_info_request' is set
      if @api_client.config.client_side_validation && order_info_request.nil?
        fail ArgumentError, "Missing the required parameter 'order_info_request' when calling OrderApi.create_order_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/order'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_info_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_order_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create buy-only portfolio rebalance orders
    # Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_portfolio_order_buy_only_using_post(portfolio_id, req, opts = {})
      data, _status_code, _headers = create_portfolio_order_buy_only_using_post_with_http_info(portfolio_id, req, opts)
      data
    end

    # Create buy-only portfolio rebalance orders
    # Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_portfolio_order_buy_only_using_post_with_http_info(portfolio_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_portfolio_order_buy_only_using_post ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling OrderApi.create_portfolio_order_buy_only_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_portfolio_order_buy_only_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_buy_only'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_portfolio_order_buy_only_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create portfolio rebalance orders
    # Create order records necessary to rebalance a portfolio to the model to which it subscribes.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_portfolio_order_rebalance_using_post(portfolio_id, req, opts = {})
      data, _status_code, _headers = create_portfolio_order_rebalance_using_post_with_http_info(portfolio_id, req, opts)
      data
    end

    # Create portfolio rebalance orders
    # Create order records necessary to rebalance a portfolio to the model to which it subscribes.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_portfolio_order_rebalance_using_post_with_http_info(portfolio_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_portfolio_order_rebalance_using_post ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling OrderApi.create_portfolio_order_rebalance_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_portfolio_order_rebalance_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_rebalance'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_portfolio_order_rebalance_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create portfolio reconciliation order
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [OrderReconcileReturnObject]
    def create_portfolio_order_reconciliation(portfolio_id, req, opts = {})
      data, _status_code, _headers = create_portfolio_order_reconciliation_with_http_info(portfolio_id, req, opts)
      data
    end

    # Create portfolio reconciliation order
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderReconcileReturnObject, Fixnum, Hash)>] OrderReconcileReturnObject data, response status code and response headers
    def create_portfolio_order_reconciliation_with_http_info(portfolio_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_portfolio_order_reconciliation ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling OrderApi.create_portfolio_order_reconciliation"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_portfolio_order_reconciliation"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_reconciliation'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderReconcileReturnObject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_portfolio_order_reconciliation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sell all portfolio order
    # Create order records necessary to entirely sell all the holdings within a portfolio.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_portfolio_order_sell_all_using_post(portfolio_id, req, opts = {})
      data, _status_code, _headers = create_portfolio_order_sell_all_using_post_with_http_info(portfolio_id, req, opts)
      data
    end

    # Sell all portfolio order
    # Create order records necessary to entirely sell all the holdings within a portfolio.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_portfolio_order_sell_all_using_post_with_http_info(portfolio_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_portfolio_order_sell_all_using_post ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling OrderApi.create_portfolio_order_sell_all_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_portfolio_order_sell_all_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_sell_all'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_portfolio_order_sell_all_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create sell-only portfolio rebalance orders
    # Create order records necessary to rebalance a portfolio to the model to which it subscribes.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderVoClone>]
    def create_portfolio_order_sell_only_using_post(portfolio_id, req, opts = {})
      data, _status_code, _headers = create_portfolio_order_sell_only_using_post_with_http_info(portfolio_id, req, opts)
      data
    end

    # Create sell-only portfolio rebalance orders
    # Create order records necessary to rebalance a portfolio to the model to which it subscribes.
    # @param portfolio_id portfolio_id
    # @param req req
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderVoClone>, Fixnum, Hash)>] Array<OrderVoClone> data, response status code and response headers
    def create_portfolio_order_sell_only_using_post_with_http_info(portfolio_id, req, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.create_portfolio_order_sell_only_using_post ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling OrderApi.create_portfolio_order_sell_only_using_post"
      end
      # verify the required parameter 'req' is set
      if @api_client.config.client_side_validation && req.nil?
        fail ArgumentError, "Missing the required parameter 'req' when calling OrderApi.create_portfolio_order_sell_only_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_sell_only'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(req)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<OrderVoClone>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#create_portfolio_order_sell_only_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an order status
    # Permanently delete an order status defined for your firm.
    # @param order_status_id UUID order_status_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_order_status_using_delete(order_status_id, opts = {})
      delete_order_status_using_delete_with_http_info(order_status_id, opts)
      nil
    end

    # Delete an order status
    # Permanently delete an order status defined for your firm.
    # @param order_status_id UUID order_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_order_status_using_delete_with_http_info(order_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.delete_order_status_using_delete ...'
      end
      # verify the required parameter 'order_status_id' is set
      if @api_client.config.client_side_validation && order_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_status_id' when calling OrderApi.delete_order_status_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status/{order_status_id}'.sub('{' + 'order_status_id' + '}', order_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#delete_order_status_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an order tracking record
    # Permanently delete an order tracking record for an order.
    # @param order_track_id UUID order_track_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_order_track_using_delete(order_track_id, opts = {})
      delete_order_track_using_delete_with_http_info(order_track_id, opts)
      nil
    end

    # Delete an order tracking record
    # Permanently delete an order tracking record for an order.
    # @param order_track_id UUID order_track_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_order_track_using_delete_with_http_info(order_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.delete_order_track_using_delete ...'
      end
      # verify the required parameter 'order_track_id' is set
      if @api_client.config.client_side_validation && order_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_track_id' when calling OrderApi.delete_order_track_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track/{order_track_id}'.sub('{' + 'order_track_id' + '}', order_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#delete_order_track_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an order record
    # Permanently delete an order record.
    # @param order_id UUID order_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_order_using_delete(order_id, opts = {})
      delete_order_using_delete_with_http_info(order_id, opts)
      nil
    end

    # Delete an order record
    # Permanently delete an order record.
    # @param order_id UUID order_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_order_using_delete_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.delete_order_using_delete ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.delete_order_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/order/{order_id}'.sub('{' + 'order_id' + '}', order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#delete_order_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all order records
    # Get the information for all order records defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageOrder]
    def get_order_all_using_get(opts = {})
      data, _status_code, _headers = get_order_all_using_get_with_http_info(opts)
      data
    end

    # List all order records
    # Get the information for all order records defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageOrder, Fixnum, Hash)>] PageOrder data, response status code and response headers
    def get_order_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/order'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOrder')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all bulk orders
    # Get the information for all bulk order records.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to true)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to order_bulk_id)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageOrderBulk]
    def get_order_bulk_all_using_get(opts = {})
      data, _status_code, _headers = get_order_bulk_all_using_get_with_http_info(opts)
      data
    end

    # List all bulk orders
    # Get the information for all bulk order records.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageOrderBulk, Fixnum, Hash)>] PageOrderBulk data, response status code and response headers
    def get_order_bulk_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_bulk_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/order_bulk'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOrderBulk')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_bulk_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all order statuses
    # Get the information for all order statuses defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageOrderStatus]
    def get_order_status_all_using_get(opts = {})
      data, _status_code, _headers = get_order_status_all_using_get_with_http_info(opts)
      data
    end

    # List all order statuses
    # Get the information for all order statuses defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageOrderStatus, Fixnum, Hash)>] PageOrderStatus data, response status code and response headers
    def get_order_status_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_status_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOrderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_status_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an order status
    # Retrieve the information for an order status defined for your firm.
    # @param order_status_id UUID order_status_id
    # @param [Hash] opts the optional parameters
    # @return [OrderStatus]
    def get_order_status_using_get(order_status_id, opts = {})
      data, _status_code, _headers = get_order_status_using_get_with_http_info(order_status_id, opts)
      data
    end

    # Retrieve an order status
    # Retrieve the information for an order status defined for your firm.
    # @param order_status_id UUID order_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderStatus, Fixnum, Hash)>] OrderStatus data, response status code and response headers
    def get_order_status_using_get_with_http_info(order_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_status_using_get ...'
      end
      # verify the required parameter 'order_status_id' is set
      if @api_client.config.client_side_validation && order_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_status_id' when calling OrderApi.get_order_status_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status/{order_status_id}'.sub('{' + 'order_status_id' + '}', order_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_status_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all order tracking records
    # Get the information for all order tracking record for all order records.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageOrderTrack]
    def get_order_track_all_using_get(opts = {})
      data, _status_code, _headers = get_order_track_all_using_get_with_http_info(opts)
      data
    end

    # List all order tracking records
    # Get the information for all order tracking record for all order records.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageOrderTrack, Fixnum, Hash)>] PageOrderTrack data, response status code and response headers
    def get_order_track_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_track_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageOrderTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_track_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an order tracking record
    # Retrieve the information for an order tracking record for an order.
    # @param order_track_id UUID order_track_id
    # @param [Hash] opts the optional parameters
    # @return [OrderTrack]
    def get_order_track_using_get(order_track_id, opts = {})
      data, _status_code, _headers = get_order_track_using_get_with_http_info(order_track_id, opts)
      data
    end

    # Retrieve an order tracking record
    # Retrieve the information for an order tracking record for an order.
    # @param order_track_id UUID order_track_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderTrack, Fixnum, Hash)>] OrderTrack data, response status code and response headers
    def get_order_track_using_get_with_http_info(order_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_track_using_get ...'
      end
      # verify the required parameter 'order_track_id' is set
      if @api_client.config.client_side_validation && order_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_track_id' when calling OrderApi.get_order_track_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track/{order_track_id}'.sub('{' + 'order_track_id' + '}', order_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_track_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an order record
    # Retrieve the information for an order record.
    # @param order_id UUID order_id
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def get_order_using_get(order_id, opts = {})
      data, _status_code, _headers = get_order_using_get_with_http_info(order_id, opts)
      data
    end

    # Retrieve an order record
    # Retrieve the information for an order record.
    # @param order_id UUID order_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def get_order_using_get_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.get_order_using_get ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.get_order_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/order/{order_id}'.sub('{' + 'order_id' + '}', order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#get_order_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an order status
    # Update the information for an order status defined for your firm.
    # @param order_status order_status
    # @param order_status_id UUID order_status_id
    # @param [Hash] opts the optional parameters
    # @return [OrderStatus]
    def update_order_status_using_put(order_status, order_status_id, opts = {})
      data, _status_code, _headers = update_order_status_using_put_with_http_info(order_status, order_status_id, opts)
      data
    end

    # Update an order status
    # Update the information for an order status defined for your firm.
    # @param order_status order_status
    # @param order_status_id UUID order_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderStatus, Fixnum, Hash)>] OrderStatus data, response status code and response headers
    def update_order_status_using_put_with_http_info(order_status, order_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.update_order_status_using_put ...'
      end
      # verify the required parameter 'order_status' is set
      if @api_client.config.client_side_validation && order_status.nil?
        fail ArgumentError, "Missing the required parameter 'order_status' when calling OrderApi.update_order_status_using_put"
      end
      # verify the required parameter 'order_status_id' is set
      if @api_client.config.client_side_validation && order_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_status_id' when calling OrderApi.update_order_status_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status/{order_status_id}'.sub('{' + 'order_status_id' + '}', order_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_status)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#update_order_status_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an order tracking record
    # Update the information for an order tracking record for an order.
    # @param order_track order_track
    # @param order_track_id UUID order_track_id
    # @param [Hash] opts the optional parameters
    # @return [OrderTrack]
    def update_order_track_using_put(order_track, order_track_id, opts = {})
      data, _status_code, _headers = update_order_track_using_put_with_http_info(order_track, order_track_id, opts)
      data
    end

    # Update an order tracking record
    # Update the information for an order tracking record for an order.
    # @param order_track order_track
    # @param order_track_id UUID order_track_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderTrack, Fixnum, Hash)>] OrderTrack data, response status code and response headers
    def update_order_track_using_put_with_http_info(order_track, order_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.update_order_track_using_put ...'
      end
      # verify the required parameter 'order_track' is set
      if @api_client.config.client_side_validation && order_track.nil?
        fail ArgumentError, "Missing the required parameter 'order_track' when calling OrderApi.update_order_track_using_put"
      end
      # verify the required parameter 'order_track_id' is set
      if @api_client.config.client_side_validation && order_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_track_id' when calling OrderApi.update_order_track_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track/{order_track_id}'.sub('{' + 'order_track_id' + '}', order_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order_track)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OrderTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#update_order_track_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an order record
    # Update the information for an order record.
    # @param order order
    # @param order_id UUID order_id
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def update_order_using_put(order, order_id, opts = {})
      data, _status_code, _headers = update_order_using_put_with_http_info(order, order_id, opts)
      data
    end

    # Update an order record
    # Update the information for an order record.
    # @param order order
    # @param order_id UUID order_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Fixnum, Hash)>] Order data, response status code and response headers
    def update_order_using_put_with_http_info(order, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.update_order_using_put ...'
      end
      # verify the required parameter 'order' is set
      if @api_client.config.client_side_validation && order.nil?
        fail ArgumentError, "Missing the required parameter 'order' when calling OrderApi.update_order_using_put"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.update_order_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/order/{order_id}'.sub('{' + 'order_id' + '}', order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(order)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Order')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#update_order_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
