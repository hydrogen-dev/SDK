/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.model.BacktestRequest;
import com.hydrogen.proton.model.EventStudyRequest;
import com.hydrogen.proton.model.MonteCarloRequest;
import com.hydrogen.proton.model.PortfolioWhatIfRequest;
import com.hydrogen.proton.model.SavingsCalculatorRequest;
import com.hydrogen.proton.model.ScenarioAnalysisRequest;
import com.hydrogen.proton.model.SensitivityAnalysisRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.Map;

/**
 * API tests for SimulationsApi
 */
@Ignore
public class SimulationsApiTest {

    private final SimulationsApi api = new SimulationsApi();

    
    /**
     * Backtest
     *
     * Run a historical analysis for a group of investments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backtestTest() throws ApiException {
        BacktestRequest backtestRequest = null;
        Map<String, Object> response = api.backtest(backtestRequest);

        // TODO: test validations
    }
    
    /**
     * Event Study
     *
     * Analyze a group of investments against key historical events
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventStudyTest() throws ApiException {
        EventStudyRequest eventStudyRequest = null;
        Map<String, Object> response = api.eventStudy(eventStudyRequest);

        // TODO: test validations
    }
    
    /**
     * Monte Carlo
     *
     * Simulate the future growth of a group of investments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void monteCarloTest() throws ApiException {
        MonteCarloRequest monteCarloRequest = null;
        Map<String, Object> response = api.monteCarlo(monteCarloRequest);

        // TODO: test validations
    }
    
    /**
     * Porfolio What-If
     *
     * Simulate the impact of adding, removing, reducing, or increasing various positions in a group of investments
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void portfolioWhatIfTest() throws ApiException {
        PortfolioWhatIfRequest portfolioWhatIfRequest = null;
        Map<String, Object> response = api.portfolioWhatIf(portfolioWhatIfRequest);

        // TODO: test validations
    }
    
    /**
     * Savings Calculator
     *
     * Simulate the future growth of a simple savings account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void savingsCalculatorTest() throws ApiException {
        SavingsCalculatorRequest savingsCalculatorRequest = null;
        Map<String, Object> response = api.savingsCalculator(savingsCalculatorRequest);

        // TODO: test validations
    }
    
    /**
     * Scenario Analysis
     *
     * Analyze a group of investments against a series of external economic factors
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void scenarioAnalysisTest() throws ApiException {
        ScenarioAnalysisRequest scnearioAnalysisRequest = null;
        Map<String, Object> response = api.scenarioAnalysis(scnearioAnalysisRequest);

        // TODO: test validations
    }
    
    /**
     * Sensitivity Analysis
     *
     * Analyze a group of investments against an external economic factor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sensitivityAnalysisTest() throws ApiException {
        SensitivityAnalysisRequest sensitivityAnalysisRequest = null;
        Map<String, Object> response = api.sensitivityAnalysis(sensitivityAnalysisRequest);

        // TODO: test validations
    }
    
}
