# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WalletKeyCreatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'wallet_id': 'str',
        'address': 'str',
        'private_key': 'str'
    }

    attribute_map = {
        'wallet_id': 'wallet_id',
        'address': 'address',
        'private_key': 'private_key'
    }

    def __init__(self, wallet_id=None, address=None, private_key=None):  # noqa: E501
        """WalletKeyCreatePayload - a model defined in Swagger"""  # noqa: E501

        self._wallet_id = None
        self._address = None
        self._private_key = None
        self.discriminator = None

        self.wallet_id = wallet_id
        self.address = address
        self.private_key = private_key

    @property
    def wallet_id(self):
        """Gets the wallet_id of this WalletKeyCreatePayload.  # noqa: E501

        The ID of the wallet the keys are generating for  # noqa: E501

        :return: The wallet_id of this WalletKeyCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this WalletKeyCreatePayload.

        The ID of the wallet the keys are generating for  # noqa: E501

        :param wallet_id: The wallet_id of this WalletKeyCreatePayload.  # noqa: E501
        :type: str
        """
        if wallet_id is None:
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")  # noqa: E501

        self._wallet_id = wallet_id

    @property
    def address(self):
        """Gets the address of this WalletKeyCreatePayload.  # noqa: E501

        Public address of the key pair getting stored  # noqa: E501

        :return: The address of this WalletKeyCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WalletKeyCreatePayload.

        Public address of the key pair getting stored  # noqa: E501

        :param address: The address of this WalletKeyCreatePayload.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def private_key(self):
        """Gets the private_key of this WalletKeyCreatePayload.  # noqa: E501

        Private key of the key pair getting stored  # noqa: E501

        :return: The private_key of this WalletKeyCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this WalletKeyCreatePayload.

        Private key of the key pair getting stored  # noqa: E501

        :param private_key: The private_key of this WalletKeyCreatePayload.  # noqa: E501
        :type: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")  # noqa: E501

        self._private_key = private_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletKeyCreatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletKeyCreatePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
