<?php
/**
 * AnnuitiesApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\proton\ApiException;
use com\hydrogen\proton\Configuration;
use com\hydrogen\proton\HeaderSelector;
use com\hydrogen\proton\ObjectSerializer;

/**
 * AnnuitiesApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnnuitiesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation annuityCalculatorAccumulationHorizon
     *
     * Annuity Calculator - Accumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAccumulationHorizonRequest $annuity_calculator_accumulation_horizon_request Request payload for Annuity Calculator - Accumulation Horizon (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function annuityCalculatorAccumulationHorizon($annuity_calculator_accumulation_horizon_request)
    {
        list($response) = $this->annuityCalculatorAccumulationHorizonWithHttpInfo($annuity_calculator_accumulation_horizon_request);
        return $response;
    }

    /**
     * Operation annuityCalculatorAccumulationHorizonWithHttpInfo
     *
     * Annuity Calculator - Accumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAccumulationHorizonRequest $annuity_calculator_accumulation_horizon_request Request payload for Annuity Calculator - Accumulation Horizon (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function annuityCalculatorAccumulationHorizonWithHttpInfo($annuity_calculator_accumulation_horizon_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorAccumulationHorizonRequest($annuity_calculator_accumulation_horizon_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation annuityCalculatorAccumulationHorizonAsync
     *
     * Annuity Calculator - Accumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAccumulationHorizonRequest $annuity_calculator_accumulation_horizon_request Request payload for Annuity Calculator - Accumulation Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorAccumulationHorizonAsync($annuity_calculator_accumulation_horizon_request)
    {
        return $this->annuityCalculatorAccumulationHorizonAsyncWithHttpInfo($annuity_calculator_accumulation_horizon_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation annuityCalculatorAccumulationHorizonAsyncWithHttpInfo
     *
     * Annuity Calculator - Accumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAccumulationHorizonRequest $annuity_calculator_accumulation_horizon_request Request payload for Annuity Calculator - Accumulation Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorAccumulationHorizonAsyncWithHttpInfo($annuity_calculator_accumulation_horizon_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorAccumulationHorizonRequest($annuity_calculator_accumulation_horizon_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'annuityCalculatorAccumulationHorizon'
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAccumulationHorizonRequest $annuity_calculator_accumulation_horizon_request Request payload for Annuity Calculator - Accumulation Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function annuityCalculatorAccumulationHorizonRequest($annuity_calculator_accumulation_horizon_request)
    {
        // verify the required parameter 'annuity_calculator_accumulation_horizon_request' is set
        if ($annuity_calculator_accumulation_horizon_request === null || (is_array($annuity_calculator_accumulation_horizon_request) && count($annuity_calculator_accumulation_horizon_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annuity_calculator_accumulation_horizon_request when calling annuityCalculatorAccumulationHorizon'
            );
        }

        $resourcePath = '/annuity_calculator/accumulation_horizon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($annuity_calculator_accumulation_horizon_request)) {
            $_tempBody = $annuity_calculator_accumulation_horizon_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation annuityCalculatorAnnuityAmount
     *
     * Annuity Calculator - Annuity Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAnnuityAmountRequest $annuity_calculator_annuity_amount_request Request payload for Annuity Calculator - Annuity Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function annuityCalculatorAnnuityAmount($annuity_calculator_annuity_amount_request)
    {
        list($response) = $this->annuityCalculatorAnnuityAmountWithHttpInfo($annuity_calculator_annuity_amount_request);
        return $response;
    }

    /**
     * Operation annuityCalculatorAnnuityAmountWithHttpInfo
     *
     * Annuity Calculator - Annuity Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAnnuityAmountRequest $annuity_calculator_annuity_amount_request Request payload for Annuity Calculator - Annuity Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function annuityCalculatorAnnuityAmountWithHttpInfo($annuity_calculator_annuity_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorAnnuityAmountRequest($annuity_calculator_annuity_amount_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation annuityCalculatorAnnuityAmountAsync
     *
     * Annuity Calculator - Annuity Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAnnuityAmountRequest $annuity_calculator_annuity_amount_request Request payload for Annuity Calculator - Annuity Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorAnnuityAmountAsync($annuity_calculator_annuity_amount_request)
    {
        return $this->annuityCalculatorAnnuityAmountAsyncWithHttpInfo($annuity_calculator_annuity_amount_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation annuityCalculatorAnnuityAmountAsyncWithHttpInfo
     *
     * Annuity Calculator - Annuity Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAnnuityAmountRequest $annuity_calculator_annuity_amount_request Request payload for Annuity Calculator - Annuity Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorAnnuityAmountAsyncWithHttpInfo($annuity_calculator_annuity_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorAnnuityAmountRequest($annuity_calculator_annuity_amount_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'annuityCalculatorAnnuityAmount'
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorAnnuityAmountRequest $annuity_calculator_annuity_amount_request Request payload for Annuity Calculator - Annuity Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function annuityCalculatorAnnuityAmountRequest($annuity_calculator_annuity_amount_request)
    {
        // verify the required parameter 'annuity_calculator_annuity_amount_request' is set
        if ($annuity_calculator_annuity_amount_request === null || (is_array($annuity_calculator_annuity_amount_request) && count($annuity_calculator_annuity_amount_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annuity_calculator_annuity_amount_request when calling annuityCalculatorAnnuityAmount'
            );
        }

        $resourcePath = '/annuity_calculator/annuity_amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($annuity_calculator_annuity_amount_request)) {
            $_tempBody = $annuity_calculator_annuity_amount_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation annuityCalculatorDecumulationHorizon
     *
     * Annuity Calculator - Decumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDecumulationHorizonRequest $annuity_calculator_decumulation_horizon_request Request payload for Annuity Calculator - Decumulation Horizon (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function annuityCalculatorDecumulationHorizon($annuity_calculator_decumulation_horizon_request)
    {
        list($response) = $this->annuityCalculatorDecumulationHorizonWithHttpInfo($annuity_calculator_decumulation_horizon_request);
        return $response;
    }

    /**
     * Operation annuityCalculatorDecumulationHorizonWithHttpInfo
     *
     * Annuity Calculator - Decumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDecumulationHorizonRequest $annuity_calculator_decumulation_horizon_request Request payload for Annuity Calculator - Decumulation Horizon (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function annuityCalculatorDecumulationHorizonWithHttpInfo($annuity_calculator_decumulation_horizon_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorDecumulationHorizonRequest($annuity_calculator_decumulation_horizon_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation annuityCalculatorDecumulationHorizonAsync
     *
     * Annuity Calculator - Decumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDecumulationHorizonRequest $annuity_calculator_decumulation_horizon_request Request payload for Annuity Calculator - Decumulation Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorDecumulationHorizonAsync($annuity_calculator_decumulation_horizon_request)
    {
        return $this->annuityCalculatorDecumulationHorizonAsyncWithHttpInfo($annuity_calculator_decumulation_horizon_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation annuityCalculatorDecumulationHorizonAsyncWithHttpInfo
     *
     * Annuity Calculator - Decumulation Horizon
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDecumulationHorizonRequest $annuity_calculator_decumulation_horizon_request Request payload for Annuity Calculator - Decumulation Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorDecumulationHorizonAsyncWithHttpInfo($annuity_calculator_decumulation_horizon_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorDecumulationHorizonRequest($annuity_calculator_decumulation_horizon_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'annuityCalculatorDecumulationHorizon'
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDecumulationHorizonRequest $annuity_calculator_decumulation_horizon_request Request payload for Annuity Calculator - Decumulation Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function annuityCalculatorDecumulationHorizonRequest($annuity_calculator_decumulation_horizon_request)
    {
        // verify the required parameter 'annuity_calculator_decumulation_horizon_request' is set
        if ($annuity_calculator_decumulation_horizon_request === null || (is_array($annuity_calculator_decumulation_horizon_request) && count($annuity_calculator_decumulation_horizon_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annuity_calculator_decumulation_horizon_request when calling annuityCalculatorDecumulationHorizon'
            );
        }

        $resourcePath = '/annuity_calculator/decumulation_horizon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($annuity_calculator_decumulation_horizon_request)) {
            $_tempBody = $annuity_calculator_decumulation_horizon_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation annuityCalculatorDepositAmount
     *
     * Annuity Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDepositAmountRequest $annuity_calculator_deposit_amount_request Request payload for Annuity Calculator - Deposit Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function annuityCalculatorDepositAmount($annuity_calculator_deposit_amount_request)
    {
        list($response) = $this->annuityCalculatorDepositAmountWithHttpInfo($annuity_calculator_deposit_amount_request);
        return $response;
    }

    /**
     * Operation annuityCalculatorDepositAmountWithHttpInfo
     *
     * Annuity Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDepositAmountRequest $annuity_calculator_deposit_amount_request Request payload for Annuity Calculator - Deposit Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function annuityCalculatorDepositAmountWithHttpInfo($annuity_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorDepositAmountRequest($annuity_calculator_deposit_amount_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation annuityCalculatorDepositAmountAsync
     *
     * Annuity Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDepositAmountRequest $annuity_calculator_deposit_amount_request Request payload for Annuity Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorDepositAmountAsync($annuity_calculator_deposit_amount_request)
    {
        return $this->annuityCalculatorDepositAmountAsyncWithHttpInfo($annuity_calculator_deposit_amount_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation annuityCalculatorDepositAmountAsyncWithHttpInfo
     *
     * Annuity Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDepositAmountRequest $annuity_calculator_deposit_amount_request Request payload for Annuity Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorDepositAmountAsyncWithHttpInfo($annuity_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorDepositAmountRequest($annuity_calculator_deposit_amount_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'annuityCalculatorDepositAmount'
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorDepositAmountRequest $annuity_calculator_deposit_amount_request Request payload for Annuity Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function annuityCalculatorDepositAmountRequest($annuity_calculator_deposit_amount_request)
    {
        // verify the required parameter 'annuity_calculator_deposit_amount_request' is set
        if ($annuity_calculator_deposit_amount_request === null || (is_array($annuity_calculator_deposit_amount_request) && count($annuity_calculator_deposit_amount_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annuity_calculator_deposit_amount_request when calling annuityCalculatorDepositAmount'
            );
        }

        $resourcePath = '/annuity_calculator/deposit_amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($annuity_calculator_deposit_amount_request)) {
            $_tempBody = $annuity_calculator_deposit_amount_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation annuityCalculatorInitialBalance
     *
     * Annuity Calculator - Initial Balance
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorInitialBalanceRequest $annuity_calculator_initial_balance_request Request payload for Annuity Calculator - Initial Balance (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function annuityCalculatorInitialBalance($annuity_calculator_initial_balance_request)
    {
        list($response) = $this->annuityCalculatorInitialBalanceWithHttpInfo($annuity_calculator_initial_balance_request);
        return $response;
    }

    /**
     * Operation annuityCalculatorInitialBalanceWithHttpInfo
     *
     * Annuity Calculator - Initial Balance
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorInitialBalanceRequest $annuity_calculator_initial_balance_request Request payload for Annuity Calculator - Initial Balance (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function annuityCalculatorInitialBalanceWithHttpInfo($annuity_calculator_initial_balance_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorInitialBalanceRequest($annuity_calculator_initial_balance_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation annuityCalculatorInitialBalanceAsync
     *
     * Annuity Calculator - Initial Balance
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorInitialBalanceRequest $annuity_calculator_initial_balance_request Request payload for Annuity Calculator - Initial Balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorInitialBalanceAsync($annuity_calculator_initial_balance_request)
    {
        return $this->annuityCalculatorInitialBalanceAsyncWithHttpInfo($annuity_calculator_initial_balance_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation annuityCalculatorInitialBalanceAsyncWithHttpInfo
     *
     * Annuity Calculator - Initial Balance
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorInitialBalanceRequest $annuity_calculator_initial_balance_request Request payload for Annuity Calculator - Initial Balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function annuityCalculatorInitialBalanceAsyncWithHttpInfo($annuity_calculator_initial_balance_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->annuityCalculatorInitialBalanceRequest($annuity_calculator_initial_balance_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'annuityCalculatorInitialBalance'
     *
     * @param  \com\hydrogen\proton\Model\AnnuityCalculatorInitialBalanceRequest $annuity_calculator_initial_balance_request Request payload for Annuity Calculator - Initial Balance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function annuityCalculatorInitialBalanceRequest($annuity_calculator_initial_balance_request)
    {
        // verify the required parameter 'annuity_calculator_initial_balance_request' is set
        if ($annuity_calculator_initial_balance_request === null || (is_array($annuity_calculator_initial_balance_request) && count($annuity_calculator_initial_balance_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $annuity_calculator_initial_balance_request when calling annuityCalculatorInitialBalance'
            );
        }

        $resourcePath = '/annuity_calculator/initial_balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($annuity_calculator_initial_balance_request)) {
            $_tempBody = $annuity_calculator_initial_balance_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation variableAnnuity
     *
     * Variable Annuity
     *
     * @param  \com\hydrogen\proton\Model\VariableAnnuityRequest $variable_annuity_request Request payload for Variable Annuity (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function variableAnnuity($variable_annuity_request)
    {
        list($response) = $this->variableAnnuityWithHttpInfo($variable_annuity_request);
        return $response;
    }

    /**
     * Operation variableAnnuityWithHttpInfo
     *
     * Variable Annuity
     *
     * @param  \com\hydrogen\proton\Model\VariableAnnuityRequest $variable_annuity_request Request payload for Variable Annuity (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function variableAnnuityWithHttpInfo($variable_annuity_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->variableAnnuityRequest($variable_annuity_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation variableAnnuityAsync
     *
     * Variable Annuity
     *
     * @param  \com\hydrogen\proton\Model\VariableAnnuityRequest $variable_annuity_request Request payload for Variable Annuity (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function variableAnnuityAsync($variable_annuity_request)
    {
        return $this->variableAnnuityAsyncWithHttpInfo($variable_annuity_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation variableAnnuityAsyncWithHttpInfo
     *
     * Variable Annuity
     *
     * @param  \com\hydrogen\proton\Model\VariableAnnuityRequest $variable_annuity_request Request payload for Variable Annuity (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function variableAnnuityAsyncWithHttpInfo($variable_annuity_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->variableAnnuityRequest($variable_annuity_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'variableAnnuity'
     *
     * @param  \com\hydrogen\proton\Model\VariableAnnuityRequest $variable_annuity_request Request payload for Variable Annuity (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function variableAnnuityRequest($variable_annuity_request)
    {
        // verify the required parameter 'variable_annuity_request' is set
        if ($variable_annuity_request === null || (is_array($variable_annuity_request) && count($variable_annuity_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $variable_annuity_request when calling variableAnnuity'
            );
        }

        $resourcePath = '/variable_annuity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($variable_annuity_request)) {
            $_tempBody = $variable_annuity_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
