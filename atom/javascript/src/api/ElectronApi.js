/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CampaignDataPayload', 'model/CampaignManagementPayload', 'model/CampaignPlanPayload', 'model/ChatPayload', 'model/ClientCampaignPayload', 'model/ConsultationPayload', 'model/CreateCampaignDataResponse', 'model/CreateCampaignPlanResponse', 'model/CreateCampaignResponse', 'model/CreateChatResponse', 'model/CreateClientCampaignResponse', 'model/CreateConsultationResponse', 'model/CreateDocumentResponse', 'model/CreateFaqResponse', 'model/CreateSalesResponse', 'model/CreateSupportTicketCommentResponse', 'model/CreateSupportTicketResponse', 'model/DocumentPayload', 'model/FaqPayload', 'model/GetCampaignDataResponse', 'model/GetCampaignPlanResponse', 'model/GetCampaignResponse', 'model/GetChatResponse', 'model/GetClientCampaignResponse', 'model/GetConsultationResponse', 'model/GetDocumentResponse', 'model/GetFaqResponse', 'model/GetSalesResponse', 'model/GetSupportTicketCommentResponse', 'model/GetSupportTicketResponse', 'model/SalesPayload', 'model/SpecificCampaignDataResponse', 'model/SpecificCampaignPlanResponse', 'model/SpecificCampaignResponse', 'model/SpecificChatResponse', 'model/SpecificClientCampaignResponse', 'model/SpecificConsultationResponse', 'model/SpecificDocumentResponse', 'model/SpecificFaqResponse', 'model/SpecificSalesResponse', 'model/SpecificSupportTicketCommentResponse', 'model/SpecificSupportTicketResponse', 'model/SupportTicketCommentPayload', 'model/SupportTicketPayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CampaignDataPayload'), require('../model/CampaignManagementPayload'), require('../model/CampaignPlanPayload'), require('../model/ChatPayload'), require('../model/ClientCampaignPayload'), require('../model/ConsultationPayload'), require('../model/CreateCampaignDataResponse'), require('../model/CreateCampaignPlanResponse'), require('../model/CreateCampaignResponse'), require('../model/CreateChatResponse'), require('../model/CreateClientCampaignResponse'), require('../model/CreateConsultationResponse'), require('../model/CreateDocumentResponse'), require('../model/CreateFaqResponse'), require('../model/CreateSalesResponse'), require('../model/CreateSupportTicketCommentResponse'), require('../model/CreateSupportTicketResponse'), require('../model/DocumentPayload'), require('../model/FaqPayload'), require('../model/GetCampaignDataResponse'), require('../model/GetCampaignPlanResponse'), require('../model/GetCampaignResponse'), require('../model/GetChatResponse'), require('../model/GetClientCampaignResponse'), require('../model/GetConsultationResponse'), require('../model/GetDocumentResponse'), require('../model/GetFaqResponse'), require('../model/GetSalesResponse'), require('../model/GetSupportTicketCommentResponse'), require('../model/GetSupportTicketResponse'), require('../model/SalesPayload'), require('../model/SpecificCampaignDataResponse'), require('../model/SpecificCampaignPlanResponse'), require('../model/SpecificCampaignResponse'), require('../model/SpecificChatResponse'), require('../model/SpecificClientCampaignResponse'), require('../model/SpecificConsultationResponse'), require('../model/SpecificDocumentResponse'), require('../model/SpecificFaqResponse'), require('../model/SpecificSalesResponse'), require('../model/SpecificSupportTicketCommentResponse'), require('../model/SpecificSupportTicketResponse'), require('../model/SupportTicketCommentPayload'), require('../model/SupportTicketPayload'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.ElectronApi = factory(root.atom_api.ApiClient, root.atom_api.CampaignDataPayload, root.atom_api.CampaignManagementPayload, root.atom_api.CampaignPlanPayload, root.atom_api.ChatPayload, root.atom_api.ClientCampaignPayload, root.atom_api.ConsultationPayload, root.atom_api.CreateCampaignDataResponse, root.atom_api.CreateCampaignPlanResponse, root.atom_api.CreateCampaignResponse, root.atom_api.CreateChatResponse, root.atom_api.CreateClientCampaignResponse, root.atom_api.CreateConsultationResponse, root.atom_api.CreateDocumentResponse, root.atom_api.CreateFaqResponse, root.atom_api.CreateSalesResponse, root.atom_api.CreateSupportTicketCommentResponse, root.atom_api.CreateSupportTicketResponse, root.atom_api.DocumentPayload, root.atom_api.FaqPayload, root.atom_api.GetCampaignDataResponse, root.atom_api.GetCampaignPlanResponse, root.atom_api.GetCampaignResponse, root.atom_api.GetChatResponse, root.atom_api.GetClientCampaignResponse, root.atom_api.GetConsultationResponse, root.atom_api.GetDocumentResponse, root.atom_api.GetFaqResponse, root.atom_api.GetSalesResponse, root.atom_api.GetSupportTicketCommentResponse, root.atom_api.GetSupportTicketResponse, root.atom_api.SalesPayload, root.atom_api.SpecificCampaignDataResponse, root.atom_api.SpecificCampaignPlanResponse, root.atom_api.SpecificCampaignResponse, root.atom_api.SpecificChatResponse, root.atom_api.SpecificClientCampaignResponse, root.atom_api.SpecificConsultationResponse, root.atom_api.SpecificDocumentResponse, root.atom_api.SpecificFaqResponse, root.atom_api.SpecificSalesResponse, root.atom_api.SpecificSupportTicketCommentResponse, root.atom_api.SpecificSupportTicketResponse, root.atom_api.SupportTicketCommentPayload, root.atom_api.SupportTicketPayload);
  }
}(this, function(ApiClient, CampaignDataPayload, CampaignManagementPayload, CampaignPlanPayload, ChatPayload, ClientCampaignPayload, ConsultationPayload, CreateCampaignDataResponse, CreateCampaignPlanResponse, CreateCampaignResponse, CreateChatResponse, CreateClientCampaignResponse, CreateConsultationResponse, CreateDocumentResponse, CreateFaqResponse, CreateSalesResponse, CreateSupportTicketCommentResponse, CreateSupportTicketResponse, DocumentPayload, FaqPayload, GetCampaignDataResponse, GetCampaignPlanResponse, GetCampaignResponse, GetChatResponse, GetClientCampaignResponse, GetConsultationResponse, GetDocumentResponse, GetFaqResponse, GetSalesResponse, GetSupportTicketCommentResponse, GetSupportTicketResponse, SalesPayload, SpecificCampaignDataResponse, SpecificCampaignPlanResponse, SpecificCampaignResponse, SpecificChatResponse, SpecificClientCampaignResponse, SpecificConsultationResponse, SpecificDocumentResponse, SpecificFaqResponse, SpecificSalesResponse, SpecificSupportTicketCommentResponse, SpecificSupportTicketResponse, SupportTicketCommentPayload, SupportTicketPayload) {
  'use strict';

  /**
   * Electron service.
   * @module api/ElectronApi
   * @version 1.0.1
   */

  /**
   * Constructs a new ElectronApi. 
   * @alias module:api/ElectronApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteCampaign operation.
     * @callback module:api/ElectronApi~deleteCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a marketing campaign
     * @param {String} campaignId UUID of a marketing campaign
     * @param {module:api/ElectronApi~deleteCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCampaign = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCampaign");
      }


      var pathParams = {
        'campaign_id': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/campaign/{campaign_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCampaignDataRecord operation.
     * @callback module:api/ElectronApi~deleteCampaignDataRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a marketing campaign data record
     * @param {String} campaignDataId UUID of a campaign data record
     * @param {module:api/ElectronApi~deleteCampaignDataRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCampaignDataRecord = function(campaignDataId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignDataId' is set
      if (campaignDataId === undefined || campaignDataId === null) {
        throw new Error("Missing the required parameter 'campaignDataId' when calling deleteCampaignDataRecord");
      }


      var pathParams = {
        'campaign_data_id': campaignDataId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/campaign_data/{campaign_data_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCampaignPlan operation.
     * @callback module:api/ElectronApi~deleteCampaignPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a marketing campaign plan
     * @param {String} campaignPlanId UUID of a campaign plan
     * @param {module:api/ElectronApi~deleteCampaignPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCampaignPlan = function(campaignPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignPlanId' is set
      if (campaignPlanId === undefined || campaignPlanId === null) {
        throw new Error("Missing the required parameter 'campaignPlanId' when calling deleteCampaignPlan");
      }


      var pathParams = {
        'campaign_plan_id': campaignPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/campaign_plan/{campaign_plan_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChatLog operation.
     * @callback module:api/ElectronApi~deleteChatLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a chat log
     * @param {String} chatId UUID of a chat record
     * @param {module:api/ElectronApi~deleteChatLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChatLog = function(chatId, callback) {
      var postBody = null;

      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling deleteChatLog");
      }


      var pathParams = {
        'chat_id': chatId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/chat/{chat_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClientCampaign operation.
     * @callback module:api/ElectronApi~deleteClientCampaignCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a client from a campaign
     * @param {String} clientCampaignId UUID of a client campaign record
     * @param {module:api/ElectronApi~deleteClientCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClientCampaign = function(clientCampaignId, callback) {
      var postBody = null;

      // verify the required parameter 'clientCampaignId' is set
      if (clientCampaignId === undefined || clientCampaignId === null) {
        throw new Error("Missing the required parameter 'clientCampaignId' when calling deleteClientCampaign");
      }


      var pathParams = {
        'client_campaign_id': clientCampaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/client_campaign/{client_campaign_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConsultation operation.
     * @callback module:api/ElectronApi~deleteConsultationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a consultation
     * @param {String} consultationId UUID of a consultation record
     * @param {module:api/ElectronApi~deleteConsultationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteConsultation = function(consultationId, callback) {
      var postBody = null;

      // verify the required parameter 'consultationId' is set
      if (consultationId === undefined || consultationId === null) {
        throw new Error("Missing the required parameter 'consultationId' when calling deleteConsultation");
      }


      var pathParams = {
        'consultation_id': consultationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/consultation/{consultation_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocument operation.
     * @callback module:api/ElectronApi~deleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a document
     * @param {String} documentId UUID of a document
     * @param {module:api/ElectronApi~deleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDocument = function(documentId, callback) {
      var postBody = null;

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteDocument");
      }


      var pathParams = {
        'document_id': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/document/{document_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFaq operation.
     * @callback module:api/ElectronApi~deleteFaqCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a FAQ
     * @param {String} faqId UUID of a FAQ
     * @param {module:api/ElectronApi~deleteFaqCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFaq = function(faqId, callback) {
      var postBody = null;

      // verify the required parameter 'faqId' is set
      if (faqId === undefined || faqId === null) {
        throw new Error("Missing the required parameter 'faqId' when calling deleteFaq");
      }


      var pathParams = {
        'faq_id': faqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/faq/{faq_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSalesInquiry operation.
     * @callback module:api/ElectronApi~deleteSalesInquiryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a sales inquiry
     * @param {String} salesId UUID of a sales record
     * @param {module:api/ElectronApi~deleteSalesInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSalesInquiry = function(salesId, callback) {
      var postBody = null;

      // verify the required parameter 'salesId' is set
      if (salesId === undefined || salesId === null) {
        throw new Error("Missing the required parameter 'salesId' when calling deleteSalesInquiry");
      }


      var pathParams = {
        'sales_id': salesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/sales/{sales_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupportTicket operation.
     * @callback module:api/ElectronApi~deleteSupportTicketCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a support ticket
     * @param {String} supportTicketId UUID of a support ticket
     * @param {module:api/ElectronApi~deleteSupportTicketCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSupportTicket = function(supportTicketId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketId' is set
      if (supportTicketId === undefined || supportTicketId === null) {
        throw new Error("Missing the required parameter 'supportTicketId' when calling deleteSupportTicket");
      }


      var pathParams = {
        'support_ticket_id': supportTicketId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket/{support_ticket_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupportTicketComment operation.
     * @callback module:api/ElectronApi~deleteSupportTicketCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a support ticket comment
     * @param {String} supportTicketCommentId UUID of a support ticket comment
     * @param {module:api/ElectronApi~deleteSupportTicketCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSupportTicketComment = function(supportTicketCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketCommentId' is set
      if (supportTicketCommentId === undefined || supportTicketCommentId === null) {
        throw new Error("Missing the required parameter 'supportTicketCommentId' when calling deleteSupportTicketComment");
      }


      var pathParams = {
        'support_ticket_comment_id': supportTicketCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket_comment/{support_ticket_comment_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaign operation.
     * @callback module:api/ElectronApi~getCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a marketing campaign
     * @param {String} campaignId UUID of a marketing campaign
     * @param {module:api/ElectronApi~getCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificCampaignResponse}
     */
    this.getCampaign = function(campaignId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaign");
      }


      var pathParams = {
        'campaign_id': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign/{campaign_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignDataRecord operation.
     * @callback module:api/ElectronApi~getCampaignDataRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificCampaignDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a marketing campaign data record
     * @param {String} campaignDataId UUID of a campaign data record
     * @param {module:api/ElectronApi~getCampaignDataRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificCampaignDataResponse}
     */
    this.getCampaignDataRecord = function(campaignDataId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignDataId' is set
      if (campaignDataId === undefined || campaignDataId === null) {
        throw new Error("Missing the required parameter 'campaignDataId' when calling getCampaignDataRecord");
      }


      var pathParams = {
        'campaign_data_id': campaignDataId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificCampaignDataResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_data/{campaign_data_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignDataRecords operation.
     * @callback module:api/ElectronApi~getCampaignDataRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all marketing campaign data records
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getCampaignDataRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignDataResponse}
     */
    this.getCampaignDataRecords = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCampaignDataResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignPlan operation.
     * @callback module:api/ElectronApi~getCampaignPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificCampaignPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a marketing campaign plan
     * @param {String} campaignPlanId UUID of a campaign plan
     * @param {module:api/ElectronApi~getCampaignPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificCampaignPlanResponse}
     */
    this.getCampaignPlan = function(campaignPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'campaignPlanId' is set
      if (campaignPlanId === undefined || campaignPlanId === null) {
        throw new Error("Missing the required parameter 'campaignPlanId' when calling getCampaignPlan");
      }


      var pathParams = {
        'campaign_plan_id': campaignPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificCampaignPlanResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_plan/{campaign_plan_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignPlans operation.
     * @callback module:api/ElectronApi~getCampaignPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all marketing campaign plans
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getCampaignPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignPlanResponse}
     */
    this.getCampaignPlans = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCampaignPlanResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_plan', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaigns operation.
     * @callback module:api/ElectronApi~getCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all marketing campaigns
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignResponse}
     */
    this.getCampaigns = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatLog operation.
     * @callback module:api/ElectronApi~getChatLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificChatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a chat log
     * @param {String} chatId UUID of a chat record
     * @param {module:api/ElectronApi~getChatLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificChatResponse}
     */
    this.getChatLog = function(chatId, callback) {
      var postBody = null;

      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling getChatLog");
      }


      var pathParams = {
        'chat_id': chatId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificChatResponse;

      return this.apiClient.callApi(
        '/electron/v1/chat/{chat_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatLogs operation.
     * @callback module:api/ElectronApi~getChatLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all chat logs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getChatLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatResponse}
     */
    this.getChatLogs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetChatResponse;

      return this.apiClient.callApi(
        '/electron/v1/chat', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientCampaign operation.
     * @callback module:api/ElectronApi~getClientCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client assigned to a campaign
     * @param {String} clientCampaignId UUID of a client campaign record
     * @param {module:api/ElectronApi~getClientCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientCampaignResponse}
     */
    this.getClientCampaign = function(clientCampaignId, callback) {
      var postBody = null;

      // verify the required parameter 'clientCampaignId' is set
      if (clientCampaignId === undefined || clientCampaignId === null) {
        throw new Error("Missing the required parameter 'clientCampaignId' when calling getClientCampaign");
      }


      var pathParams = {
        'client_campaign_id': clientCampaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/client_campaign/{client_campaign_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientCampaigns operation.
     * @callback module:api/ElectronApi~getClientCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClientCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List information for all clients that are assigned to a marketing campaign defined for your firm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getClientCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClientCampaignResponse}
     */
    this.getClientCampaigns = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetClientCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/client_campaign', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsultation operation.
     * @callback module:api/ElectronApi~getConsultationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificConsultationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a consultation
     * @param {String} consultationId UUID of a consultation record
     * @param {module:api/ElectronApi~getConsultationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificConsultationResponse}
     */
    this.getConsultation = function(consultationId, callback) {
      var postBody = null;

      // verify the required parameter 'consultationId' is set
      if (consultationId === undefined || consultationId === null) {
        throw new Error("Missing the required parameter 'consultationId' when calling getConsultation");
      }


      var pathParams = {
        'consultation_id': consultationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificConsultationResponse;

      return this.apiClient.callApi(
        '/electron/v1/consultation/{consultation_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsultations operation.
     * @callback module:api/ElectronApi~getConsultationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConsultationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all consultations
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getConsultationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConsultationResponse}
     */
    this.getConsultations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetConsultationResponse;

      return this.apiClient.callApi(
        '/electron/v1/consultation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocument operation.
     * @callback module:api/ElectronApi~getDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a document
     * @param {String} documentId UUID of a document
     * @param {module:api/ElectronApi~getDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificDocumentResponse}
     */
    this.getDocument = function(documentId, callback) {
      var postBody = null;

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocument");
      }


      var pathParams = {
        'document_id': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificDocumentResponse;

      return this.apiClient.callApi(
        '/electron/v1/document/{document_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocuments operation.
     * @callback module:api/ElectronApi~getDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all documents
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDocumentResponse}
     */
    this.getDocuments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetDocumentResponse;

      return this.apiClient.callApi(
        '/electron/v1/document', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFaq operation.
     * @callback module:api/ElectronApi~getFaqCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificFaqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a FAQ
     * @param {String} faqId UUID of a FAQ
     * @param {module:api/ElectronApi~getFaqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificFaqResponse}
     */
    this.getFaq = function(faqId, callback) {
      var postBody = null;

      // verify the required parameter 'faqId' is set
      if (faqId === undefined || faqId === null) {
        throw new Error("Missing the required parameter 'faqId' when calling getFaq");
      }


      var pathParams = {
        'faq_id': faqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificFaqResponse;

      return this.apiClient.callApi(
        '/electron/v1/faq/{faq_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFaqs operation.
     * @callback module:api/ElectronApi~getFaqsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFaqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all FAQs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getFaqsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFaqResponse}
     */
    this.getFaqs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetFaqResponse;

      return this.apiClient.callApi(
        '/electron/v1/faq', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInquiries operation.
     * @callback module:api/ElectronApi~getSalesInquiriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSalesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all sales inquiries
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getSalesInquiriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSalesResponse}
     */
    this.getSalesInquiries = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSalesResponse;

      return this.apiClient.callApi(
        '/electron/v1/sales', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSalesInquiry operation.
     * @callback module:api/ElectronApi~getSalesInquiryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSalesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a sales inquiry
     * @param {String} salesId UUID of a sales record
     * @param {module:api/ElectronApi~getSalesInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSalesResponse}
     */
    this.getSalesInquiry = function(salesId, callback) {
      var postBody = null;

      // verify the required parameter 'salesId' is set
      if (salesId === undefined || salesId === null) {
        throw new Error("Missing the required parameter 'salesId' when calling getSalesInquiry");
      }


      var pathParams = {
        'sales_id': salesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSalesResponse;

      return this.apiClient.callApi(
        '/electron/v1/sales/{sales_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTicket operation.
     * @callback module:api/ElectronApi~getSupportTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSupportTicketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a support ticket
     * @param {String} supportTicketId UUID of a support ticket
     * @param {module:api/ElectronApi~getSupportTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSupportTicketResponse}
     */
    this.getSupportTicket = function(supportTicketId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketId' is set
      if (supportTicketId === undefined || supportTicketId === null) {
        throw new Error("Missing the required parameter 'supportTicketId' when calling getSupportTicket");
      }


      var pathParams = {
        'support_ticket_id': supportTicketId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSupportTicketResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket/{support_ticket_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTicketComment operation.
     * @callback module:api/ElectronApi~getSupportTicketCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSupportTicketCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a support ticket comment
     * @param {String} supportTicketCommentId UUID of a support ticket comment
     * @param {module:api/ElectronApi~getSupportTicketCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSupportTicketCommentResponse}
     */
    this.getSupportTicketComment = function(supportTicketCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'supportTicketCommentId' is set
      if (supportTicketCommentId === undefined || supportTicketCommentId === null) {
        throw new Error("Missing the required parameter 'supportTicketCommentId' when calling getSupportTicketComment");
      }


      var pathParams = {
        'support_ticket_comment_id': supportTicketCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSupportTicketCommentResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket_comment/{support_ticket_comment_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTicketComments operation.
     * @callback module:api/ElectronApi~getSupportTicketCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSupportTicketCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all support ticket comments
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getSupportTicketCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSupportTicketCommentResponse}
     */
    this.getSupportTicketComments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSupportTicketCommentResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket_comment', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportTickets operation.
     * @callback module:api/ElectronApi~getSupportTicketsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSupportTicketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all support tickets
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/ElectronApi~getSupportTicketsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSupportTicketResponse}
     */
    this.getSupportTickets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSupportTicketResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCampaign operation.
     * @callback module:api/ElectronApi~postCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a marketing campaign
     * @param {module:model/CampaignManagementPayload} payload 
     * @param {module:api/ElectronApi~postCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCampaignResponse}
     */
    this.postCampaign = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postCampaign");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCampaignDataRecord operation.
     * @callback module:api/ElectronApi~postCampaignDataRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCampaignDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a marketing campaign data record
     * @param {module:model/CampaignDataPayload} payload 
     * @param {module:api/ElectronApi~postCampaignDataRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCampaignDataResponse}
     */
    this.postCampaignDataRecord = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postCampaignDataRecord");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCampaignDataResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCampaignPlan operation.
     * @callback module:api/ElectronApi~postCampaignPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCampaignPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a marketing campaign plan
     * @param {module:model/CampaignPlanPayload} payload 
     * @param {module:api/ElectronApi~postCampaignPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCampaignPlanResponse}
     */
    this.postCampaignPlan = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postCampaignPlan");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCampaignPlanResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_plan', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postChatLog operation.
     * @callback module:api/ElectronApi~postChatLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a chat log
     * @param {module:model/ChatPayload} payload 
     * @param {module:api/ElectronApi~postChatLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChatResponse}
     */
    this.postChatLog = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postChatLog");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateChatResponse;

      return this.apiClient.callApi(
        '/electron/v1/chat', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postClientCampaign operation.
     * @callback module:api/ElectronApi~postClientCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClientCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign a client to a campaign to indicate the client has registered through the campaign specified
     * @param {module:model/ClientCampaignPayload} payload 
     * @param {module:api/ElectronApi~postClientCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClientCampaignResponse}
     */
    this.postClientCampaign = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postClientCampaign");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateClientCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/client_campaign', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postConsultation operation.
     * @callback module:api/ElectronApi~postConsultationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConsultationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a consultation
     * @param {module:model/ConsultationPayload} payload 
     * @param {module:api/ElectronApi~postConsultationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConsultationResponse}
     */
    this.postConsultation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postConsultation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateConsultationResponse;

      return this.apiClient.callApi(
        '/electron/v1/consultation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postDocument operation.
     * @callback module:api/ElectronApi~postDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a document
     * @param {module:model/DocumentPayload} payload 
     * @param {module:api/ElectronApi~postDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDocumentResponse}
     */
    this.postDocument = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postDocument");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateDocumentResponse;

      return this.apiClient.callApi(
        '/electron/v1/document', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFaq operation.
     * @callback module:api/ElectronApi~postFaqCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFaqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a faq
     * @param {module:model/FaqPayload} payload 
     * @param {module:api/ElectronApi~postFaqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFaqResponse}
     */
    this.postFaq = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postFaq");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateFaqResponse;

      return this.apiClient.callApi(
        '/electron/v1/faq', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSalesInquiry operation.
     * @callback module:api/ElectronApi~postSalesInquiryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSalesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a sales inquiry
     * @param {module:model/SalesPayload} payload 
     * @param {module:api/ElectronApi~postSalesInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSalesResponse}
     */
    this.postSalesInquiry = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSalesInquiry");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSalesResponse;

      return this.apiClient.callApi(
        '/electron/v1/sales', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSupportTicket operation.
     * @callback module:api/ElectronApi~postSupportTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSupportTicketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a support ticket
     * @param {module:model/SupportTicketPayload} payload 
     * @param {module:api/ElectronApi~postSupportTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSupportTicketResponse}
     */
    this.postSupportTicket = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSupportTicket");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSupportTicketResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSupportTicketComment operation.
     * @callback module:api/ElectronApi~postSupportTicketCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSupportTicketCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a support ticket comment
     * @param {module:model/SupportTicketCommentPayload} payload 
     * @param {module:api/ElectronApi~postSupportTicketCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSupportTicketCommentResponse}
     */
    this.postSupportTicketComment = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSupportTicketComment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSupportTicketCommentResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket_comment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaign operation.
     * @callback module:api/ElectronApi~updateCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a marketing campaign
     * @param {String} campaignId UUID of a marketing campaign
     * @param {module:model/ClientCampaignPayload} payload 
     * @param {module:api/ElectronApi~updateCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificCampaignResponse}
     */
    this.updateCampaign = function(campaignId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCampaign");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateCampaign");
      }


      var pathParams = {
        'campaign_id': campaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign/{campaign_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignDataRecord operation.
     * @callback module:api/ElectronApi~updateCampaignDataRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificCampaignDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a marketing campaign data record
     * @param {String} campaignDataId UUID of a campaign data record
     * @param {module:model/CampaignDataPayload} payload 
     * @param {module:api/ElectronApi~updateCampaignDataRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificCampaignDataResponse}
     */
    this.updateCampaignDataRecord = function(campaignDataId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'campaignDataId' is set
      if (campaignDataId === undefined || campaignDataId === null) {
        throw new Error("Missing the required parameter 'campaignDataId' when calling updateCampaignDataRecord");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateCampaignDataRecord");
      }


      var pathParams = {
        'campaign_data_id': campaignDataId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificCampaignDataResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_data/{campaign_data_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaignPlan operation.
     * @callback module:api/ElectronApi~updateCampaignPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificCampaignPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a marketing campaign plan
     * @param {String} campaignPlanId UUID of a campaign plan
     * @param {module:model/CampaignPlanPayload} payload 
     * @param {module:api/ElectronApi~updateCampaignPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificCampaignPlanResponse}
     */
    this.updateCampaignPlan = function(campaignPlanId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'campaignPlanId' is set
      if (campaignPlanId === undefined || campaignPlanId === null) {
        throw new Error("Missing the required parameter 'campaignPlanId' when calling updateCampaignPlan");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateCampaignPlan");
      }


      var pathParams = {
        'campaign_plan_id': campaignPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificCampaignPlanResponse;

      return this.apiClient.callApi(
        '/electron/v1/campaign_plan/{campaign_plan_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChatLog operation.
     * @callback module:api/ElectronApi~updateChatLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificChatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a chat log
     * @param {String} chatId UUID of a chat record
     * @param {module:model/ChatPayload} payload 
     * @param {module:api/ElectronApi~updateChatLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificChatResponse}
     */
    this.updateChatLog = function(chatId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling updateChatLog");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateChatLog");
      }


      var pathParams = {
        'chat_id': chatId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificChatResponse;

      return this.apiClient.callApi(
        '/electron/v1/chat/{chat_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientCampaign operation.
     * @callback module:api/ElectronApi~updateClientCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client assigned to a campaign
     * @param {String} clientCampaignId UUID of a client campaign record
     * @param {module:model/ClientCampaignPayload} payload 
     * @param {module:api/ElectronApi~updateClientCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientCampaignResponse}
     */
    this.updateClientCampaign = function(clientCampaignId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'clientCampaignId' is set
      if (clientCampaignId === undefined || clientCampaignId === null) {
        throw new Error("Missing the required parameter 'clientCampaignId' when calling updateClientCampaign");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateClientCampaign");
      }


      var pathParams = {
        'client_campaign_id': clientCampaignId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientCampaignResponse;

      return this.apiClient.callApi(
        '/electron/v1/client_campaign/{client_campaign_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConsultation operation.
     * @callback module:api/ElectronApi~updateConsultationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificConsultationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a consultation
     * @param {String} consultationId UUID of a consultation record
     * @param {module:model/ConsultationPayload} payload 
     * @param {module:api/ElectronApi~updateConsultationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificConsultationResponse}
     */
    this.updateConsultation = function(consultationId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'consultationId' is set
      if (consultationId === undefined || consultationId === null) {
        throw new Error("Missing the required parameter 'consultationId' when calling updateConsultation");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateConsultation");
      }


      var pathParams = {
        'consultation_id': consultationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificConsultationResponse;

      return this.apiClient.callApi(
        '/electron/v1/consultation/{consultation_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocument operation.
     * @callback module:api/ElectronApi~updateDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a document
     * @param {String} documentId UUID of a document
     * @param {module:model/DocumentPayload} payload 
     * @param {module:api/ElectronApi~updateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificDocumentResponse}
     */
    this.updateDocument = function(documentId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateDocument");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateDocument");
      }


      var pathParams = {
        'document_id': documentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificDocumentResponse;

      return this.apiClient.callApi(
        '/electron/v1/document/{document_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFaq operation.
     * @callback module:api/ElectronApi~updateFaqCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificFaqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a FAQ
     * @param {String} faqId UUID of a FAQ
     * @param {module:model/FaqPayload} payload 
     * @param {module:api/ElectronApi~updateFaqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificFaqResponse}
     */
    this.updateFaq = function(faqId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'faqId' is set
      if (faqId === undefined || faqId === null) {
        throw new Error("Missing the required parameter 'faqId' when calling updateFaq");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateFaq");
      }


      var pathParams = {
        'faq_id': faqId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificFaqResponse;

      return this.apiClient.callApi(
        '/electron/v1/faq/{faq_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSalesInquiry operation.
     * @callback module:api/ElectronApi~updateSalesInquiryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSalesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a sales inquiry
     * @param {String} salesId UUID of a sales record
     * @param {module:model/SalesPayload} payload 
     * @param {module:api/ElectronApi~updateSalesInquiryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSalesResponse}
     */
    this.updateSalesInquiry = function(salesId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'salesId' is set
      if (salesId === undefined || salesId === null) {
        throw new Error("Missing the required parameter 'salesId' when calling updateSalesInquiry");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSalesInquiry");
      }


      var pathParams = {
        'sales_id': salesId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSalesResponse;

      return this.apiClient.callApi(
        '/electron/v1/sales/{sales_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSupportTicket operation.
     * @callback module:api/ElectronApi~updateSupportTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSupportTicketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a support ticket
     * @param {String} supportTicketId UUID of a support ticket
     * @param {module:model/SupportTicketPayload} payload 
     * @param {module:api/ElectronApi~updateSupportTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSupportTicketResponse}
     */
    this.updateSupportTicket = function(supportTicketId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'supportTicketId' is set
      if (supportTicketId === undefined || supportTicketId === null) {
        throw new Error("Missing the required parameter 'supportTicketId' when calling updateSupportTicket");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSupportTicket");
      }


      var pathParams = {
        'support_ticket_id': supportTicketId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSupportTicketResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket/{support_ticket_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSupportTicketComment operation.
     * @callback module:api/ElectronApi~updateSupportTicketCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSupportTicketCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a support ticket comment
     * @param {String} supportTicketCommentId UUID of a support ticket comment
     * @param {module:model/SupportTicketCommentPayload} payload 
     * @param {module:api/ElectronApi~updateSupportTicketCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSupportTicketCommentResponse}
     */
    this.updateSupportTicketComment = function(supportTicketCommentId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'supportTicketCommentId' is set
      if (supportTicketCommentId === undefined || supportTicketCommentId === null) {
        throw new Error("Missing the required parameter 'supportTicketCommentId' when calling updateSupportTicketComment");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSupportTicketComment");
      }


      var pathParams = {
        'support_ticket_comment_id': supportTicketCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSupportTicketCommentResponse;

      return this.apiClient.callApi(
        '/electron/v1/support_ticket_comment/{support_ticket_comment_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
