=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'spec_helper'
require 'json'

# Unit tests for NucleusApi::AllocationApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AllocationApi' do
  before do
    # run before each test
    @instance = NucleusApi::AllocationApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AllocationApi' do
    it 'should create an instance of AllocationApi' do
      expect(@instance).to be_instance_of(NucleusApi::AllocationApi)
    end
  end

  # unit tests for create_allocation_composition_using_post
  # Create an allocation composition
  # Create a new allocation composition record for an allocation.
  # @param alloc_request allocRequest
  # @param [Hash] opts the optional parameters
  # @return [AllocationComposition]
  describe 'create_allocation_composition_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_allocation_using_post
  # Create an allocation
  # Create a new allocation for your firm.
  # @param allocation_request allocationRequest
  # @param [Hash] opts the optional parameters
  # @return [Allocation]
  describe 'create_allocation_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_allocation_composition_using_delete
  # Delete an allocation composition
  # Permanently delete an allocation composition record for an allocation.
  # @param allocation_composition_id UUID allocation_composition_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_allocation_composition_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_allocation_using_delete
  # Delete an allocation
  # Permanently delete an allocation defined by your firm.
  # @param allocation_id UUID allocation_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_allocation_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_all_aggregate_data_using_get
  # List all Allocation aggregated data overview
  # @param allocation_id Allocation Id
  # @param [Hash] opts the optional parameters
  # @return [AllocationAggregatedVO]
  describe 'get_allocation_all_aggregate_data_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_all_asset_size_all_using_get
  # List all allocation asset sizes
  # Get a list of asset sizes by date for a specific allocation.
  # @param allocation_id UUID allocation_id
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :end_date end date
  # @option opts [BOOLEAN] :get_latest get_latest
  # @option opts [BOOLEAN] :is_current_weight is_current_weight
  # @option opts [String] :sort_type D (Daily), Q (quarterly), M (Monthly), Y (Annually) 
  # @option opts [Date] :start_date start date
  # @return [Array<DateDoubleVO>]
  describe 'get_allocation_all_asset_size_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_all_holding_all_using_get
  # List all allocation holdings
  # Get the information for all securities assigned to a specific allocation. 
  # @param allocation_id UUID allocation_id
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :end_date end date
  # @option opts [Date] :start_date start date
  # @return [Array<ModelHoldingVO>]
  describe 'get_allocation_all_holding_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_all_transaction_all_using_get
  # List all allocation transactions
  # Get the information for all transactions made under an allocation to achieve the composition of the allocation.
  # @param allocation_id UUID allocation_id
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [Date] :end_date end date
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @option opts [Date] :start_date start date
  # @return [PageModelTransaction]
  describe 'get_allocation_all_transaction_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_all_using_get
  # List all allocations
  # Get details for all allocations defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageAllocation]
  describe 'get_allocation_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_composition_all_using_get
  # List all allocations compositions
  # Get the allocation composition for all allocations.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageAllocationComposition]
  describe 'get_allocation_composition_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_composition_using_get
  # Retrieve an allocation composition
  # Retrieve the information of an allocation composition record for an allocation.
  # @param allocation_composition_id UUID allocation_composition_id
  # @param [Hash] opts the optional parameters
  # @return [AllocationComposition]
  describe 'get_allocation_composition_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_using_get
  # Retrieve an allocation
  # Retrieve the information for an allocation defined by your firm.
  # @param allocation_id UUID allocation_id
  # @param [Hash] opts the optional parameters
  # @return [Allocation]
  describe 'get_allocation_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_allocation_composition_using_put
  # Update an allocation composition
  # Update the information of an allocation composition record for an allocation.
  # @param allocation_composition allocation_composition
  # @param allocation_composition_id UUID allocation_composition_id
  # @param [Hash] opts the optional parameters
  # @return [AllocationComposition]
  describe 'update_allocation_composition_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_allocation_using_put
  # Update an allocation
  # Update an allocation defined by your firm.
  # @param allocation allocation
  # @param allocation_id UUID allocation_id
  # @param [Hash] opts the optional parameters
  # @return [Allocation]
  describe 'update_allocation_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
