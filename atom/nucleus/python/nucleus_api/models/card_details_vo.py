# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class CardDetailsVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'CardBalanceVO',
        'card_holder_name': 'str',
        'card_id': 'str',
        'card_issuance': 'str',
        'card_name': 'str',
        'card_network': 'str',
        'card_type': 'str',
        'expiry_date': 'date',
        'mask': 'str',
        'prepaid_amount': 'float',
        'status': 'str'
    }

    attribute_map = {
        'balance': 'balance',
        'card_holder_name': 'card_holder_name',
        'card_id': 'card_id',
        'card_issuance': 'card_issuance',
        'card_name': 'card_name',
        'card_network': 'card_network',
        'card_type': 'card_type',
        'expiry_date': 'expiry_date',
        'mask': 'mask',
        'prepaid_amount': 'prepaid_amount',
        'status': 'status'
    }

    def __init__(self, balance=None, card_holder_name=None, card_id=None, card_issuance=None, card_name=None, card_network=None, card_type=None, expiry_date=None, mask=None, prepaid_amount=None, status=None, _configuration=None):  # noqa: E501
        """CardDetailsVO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._balance = None
        self._card_holder_name = None
        self._card_id = None
        self._card_issuance = None
        self._card_name = None
        self._card_network = None
        self._card_type = None
        self._expiry_date = None
        self._mask = None
        self._prepaid_amount = None
        self._status = None
        self.discriminator = None

        if balance is not None:
            self.balance = balance
        if card_holder_name is not None:
            self.card_holder_name = card_holder_name
        if card_id is not None:
            self.card_id = card_id
        if card_issuance is not None:
            self.card_issuance = card_issuance
        if card_name is not None:
            self.card_name = card_name
        if card_network is not None:
            self.card_network = card_network
        if card_type is not None:
            self.card_type = card_type
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if mask is not None:
            self.mask = mask
        if prepaid_amount is not None:
            self.prepaid_amount = prepaid_amount
        if status is not None:
            self.status = status

    @property
    def balance(self):
        """Gets the balance of this CardDetailsVO.  # noqa: E501

        balance  # noqa: E501

        :return: The balance of this CardDetailsVO.  # noqa: E501
        :rtype: CardBalanceVO
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CardDetailsVO.

        balance  # noqa: E501

        :param balance: The balance of this CardDetailsVO.  # noqa: E501
        :type: CardBalanceVO
        """

        self._balance = balance

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this CardDetailsVO.  # noqa: E501

        cardHolderName  # noqa: E501

        :return: The card_holder_name of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this CardDetailsVO.

        cardHolderName  # noqa: E501

        :param card_holder_name: The card_holder_name of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._card_holder_name = card_holder_name

    @property
    def card_id(self):
        """Gets the card_id of this CardDetailsVO.  # noqa: E501

        cardId  # noqa: E501

        :return: The card_id of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this CardDetailsVO.

        cardId  # noqa: E501

        :param card_id: The card_id of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def card_issuance(self):
        """Gets the card_issuance of this CardDetailsVO.  # noqa: E501

        cardIssuance  # noqa: E501

        :return: The card_issuance of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._card_issuance

    @card_issuance.setter
    def card_issuance(self, card_issuance):
        """Sets the card_issuance of this CardDetailsVO.

        cardIssuance  # noqa: E501

        :param card_issuance: The card_issuance of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._card_issuance = card_issuance

    @property
    def card_name(self):
        """Gets the card_name of this CardDetailsVO.  # noqa: E501

        cardName  # noqa: E501

        :return: The card_name of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._card_name

    @card_name.setter
    def card_name(self, card_name):
        """Sets the card_name of this CardDetailsVO.

        cardName  # noqa: E501

        :param card_name: The card_name of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._card_name = card_name

    @property
    def card_network(self):
        """Gets the card_network of this CardDetailsVO.  # noqa: E501

        cardNetwork  # noqa: E501

        :return: The card_network of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._card_network

    @card_network.setter
    def card_network(self, card_network):
        """Sets the card_network of this CardDetailsVO.

        cardNetwork  # noqa: E501

        :param card_network: The card_network of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._card_network = card_network

    @property
    def card_type(self):
        """Gets the card_type of this CardDetailsVO.  # noqa: E501

        cardType  # noqa: E501

        :return: The card_type of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CardDetailsVO.

        cardType  # noqa: E501

        :param card_type: The card_type of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def expiry_date(self):
        """Gets the expiry_date of this CardDetailsVO.  # noqa: E501

        expiryDate  # noqa: E501

        :return: The expiry_date of this CardDetailsVO.  # noqa: E501
        :rtype: date
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this CardDetailsVO.

        expiryDate  # noqa: E501

        :param expiry_date: The expiry_date of this CardDetailsVO.  # noqa: E501
        :type: date
        """

        self._expiry_date = expiry_date

    @property
    def mask(self):
        """Gets the mask of this CardDetailsVO.  # noqa: E501

        mask  # noqa: E501

        :return: The mask of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this CardDetailsVO.

        mask  # noqa: E501

        :param mask: The mask of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._mask = mask

    @property
    def prepaid_amount(self):
        """Gets the prepaid_amount of this CardDetailsVO.  # noqa: E501

        prepaidAmount  # noqa: E501

        :return: The prepaid_amount of this CardDetailsVO.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_amount

    @prepaid_amount.setter
    def prepaid_amount(self, prepaid_amount):
        """Sets the prepaid_amount of this CardDetailsVO.

        prepaidAmount  # noqa: E501

        :param prepaid_amount: The prepaid_amount of this CardDetailsVO.  # noqa: E501
        :type: float
        """

        self._prepaid_amount = prepaid_amount

    @property
    def status(self):
        """Gets the status of this CardDetailsVO.  # noqa: E501

        status  # noqa: E501

        :return: The status of this CardDetailsVO.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CardDetailsVO.

        status  # noqa: E501

        :param status: The status of this CardDetailsVO.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardDetailsVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardDetailsVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CardDetailsVO):
            return True

        return self.to_dict() != other.to_dict()
