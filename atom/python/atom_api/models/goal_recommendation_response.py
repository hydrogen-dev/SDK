# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.goal_recommendation_response_action import GoalRecommendationResponseAction  # noqa: F401,E501
from atom_api.models.goal_return_details_period_response import GoalReturnDetailsPeriodResponse  # noqa: F401,E501


class GoalRecommendationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'on_track': 'bool',
        'progress': 'float',
        'goal_probability': 'float',
        'goal_achievement_score': 'int',
        'action': 'list[GoalRecommendationResponseAction]',
        'return_details': 'dict(str, GoalReturnDetailsPeriodResponse)',
        'adjusted_goal_amount': 'float'
    }

    attribute_map = {
        'on_track': 'on_track',
        'progress': 'progress',
        'goal_probability': 'goal_probability',
        'goal_achievement_score': 'goal_achievement_score',
        'action': 'action',
        'return_details': 'return_details',
        'adjusted_goal_amount': 'adjusted_goal_amount'
    }

    def __init__(self, on_track=None, progress=None, goal_probability=None, goal_achievement_score=None, action=None, return_details=None, adjusted_goal_amount=None):  # noqa: E501
        """GoalRecommendationResponse - a model defined in Swagger"""  # noqa: E501

        self._on_track = None
        self._progress = None
        self._goal_probability = None
        self._goal_achievement_score = None
        self._action = None
        self._return_details = None
        self._adjusted_goal_amount = None
        self.discriminator = None

        self.on_track = on_track
        self.progress = progress
        self.goal_probability = goal_probability
        self.goal_achievement_score = goal_achievement_score
        self.action = action
        self.return_details = return_details
        self.adjusted_goal_amount = adjusted_goal_amount

    @property
    def on_track(self):
        """Gets the on_track of this GoalRecommendationResponse.  # noqa: E501

        If true, the goal is on track.  # noqa: E501

        :return: The on_track of this GoalRecommendationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._on_track

    @on_track.setter
    def on_track(self, on_track):
        """Sets the on_track of this GoalRecommendationResponse.

        If true, the goal is on track.  # noqa: E501

        :param on_track: The on_track of this GoalRecommendationResponse.  # noqa: E501
        :type: bool
        """
        if on_track is None:
            raise ValueError("Invalid value for `on_track`, must not be `None`")  # noqa: E501

        self._on_track = on_track

    @property
    def progress(self):
        """Gets the progress of this GoalRecommendationResponse.  # noqa: E501

        The goal progress percentage, defined as the current invested amount divided by the total target withdrawal amount over d_horizon.  # noqa: E501

        :return: The progress of this GoalRecommendationResponse.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this GoalRecommendationResponse.

        The goal progress percentage, defined as the current invested amount divided by the total target withdrawal amount over d_horizon.  # noqa: E501

        :param progress: The progress of this GoalRecommendationResponse.  # noqa: E501
        :type: float
        """
        if progress is None:
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501
        if progress is not None and progress < 0:  # noqa: E501
            raise ValueError("Invalid value for `progress`, must be a value greater than or equal to `0`")  # noqa: E501

        self._progress = progress

    @property
    def goal_probability(self):
        """Gets the goal_probability of this GoalRecommendationResponse.  # noqa: E501

        The probability of achieving the goal with the given portfolio.  # noqa: E501

        :return: The goal_probability of this GoalRecommendationResponse.  # noqa: E501
        :rtype: float
        """
        return self._goal_probability

    @goal_probability.setter
    def goal_probability(self, goal_probability):
        """Sets the goal_probability of this GoalRecommendationResponse.

        The probability of achieving the goal with the given portfolio.  # noqa: E501

        :param goal_probability: The goal_probability of this GoalRecommendationResponse.  # noqa: E501
        :type: float
        """
        if goal_probability is None:
            raise ValueError("Invalid value for `goal_probability`, must not be `None`")  # noqa: E501
        if goal_probability is not None and goal_probability < 0:  # noqa: E501
            raise ValueError("Invalid value for `goal_probability`, must be a value greater than or equal to `0`")  # noqa: E501

        self._goal_probability = goal_probability

    @property
    def goal_achievement_score(self):
        """Gets the goal_achievement_score of this GoalRecommendationResponse.  # noqa: E501

        A ratio of goal_probability to the conf_tgt on a scale from 0 to 100.  # noqa: E501

        :return: The goal_achievement_score of this GoalRecommendationResponse.  # noqa: E501
        :rtype: int
        """
        return self._goal_achievement_score

    @goal_achievement_score.setter
    def goal_achievement_score(self, goal_achievement_score):
        """Sets the goal_achievement_score of this GoalRecommendationResponse.

        A ratio of goal_probability to the conf_tgt on a scale from 0 to 100.  # noqa: E501

        :param goal_achievement_score: The goal_achievement_score of this GoalRecommendationResponse.  # noqa: E501
        :type: int
        """
        if goal_achievement_score is None:
            raise ValueError("Invalid value for `goal_achievement_score`, must not be `None`")  # noqa: E501
        if goal_achievement_score is not None and goal_achievement_score > 100:  # noqa: E501
            raise ValueError("Invalid value for `goal_achievement_score`, must be a value less than or equal to `100`")  # noqa: E501
        if goal_achievement_score is not None and goal_achievement_score < 0:  # noqa: E501
            raise ValueError("Invalid value for `goal_achievement_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._goal_achievement_score = goal_achievement_score

    @property
    def action(self):
        """Gets the action of this GoalRecommendationResponse.  # noqa: E501


        :return: The action of this GoalRecommendationResponse.  # noqa: E501
        :rtype: list[GoalRecommendationResponseAction]
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GoalRecommendationResponse.


        :param action: The action of this GoalRecommendationResponse.  # noqa: E501
        :type: list[GoalRecommendationResponseAction]
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def return_details(self):
        """Gets the return_details of this GoalRecommendationResponse.  # noqa: E501

        Portfolio return information over the length of the horizon, broken down by period.  # noqa: E501

        :return: The return_details of this GoalRecommendationResponse.  # noqa: E501
        :rtype: dict(str, GoalReturnDetailsPeriodResponse)
        """
        return self._return_details

    @return_details.setter
    def return_details(self, return_details):
        """Sets the return_details of this GoalRecommendationResponse.

        Portfolio return information over the length of the horizon, broken down by period.  # noqa: E501

        :param return_details: The return_details of this GoalRecommendationResponse.  # noqa: E501
        :type: dict(str, GoalReturnDetailsPeriodResponse)
        """
        if return_details is None:
            raise ValueError("Invalid value for `return_details`, must not be `None`")  # noqa: E501

        self._return_details = return_details

    @property
    def adjusted_goal_amount(self):
        """Gets the adjusted_goal_amount of this GoalRecommendationResponse.  # noqa: E501

        The effective goal target amount, adjusted for taxes, inflation, and goal deviation threshold.  # noqa: E501

        :return: The adjusted_goal_amount of this GoalRecommendationResponse.  # noqa: E501
        :rtype: float
        """
        return self._adjusted_goal_amount

    @adjusted_goal_amount.setter
    def adjusted_goal_amount(self, adjusted_goal_amount):
        """Sets the adjusted_goal_amount of this GoalRecommendationResponse.

        The effective goal target amount, adjusted for taxes, inflation, and goal deviation threshold.  # noqa: E501

        :param adjusted_goal_amount: The adjusted_goal_amount of this GoalRecommendationResponse.  # noqa: E501
        :type: float
        """
        if adjusted_goal_amount is None:
            raise ValueError("Invalid value for `adjusted_goal_amount`, must not be `None`")  # noqa: E501

        self._adjusted_goal_amount = adjusted_goal_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalRecommendationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalRecommendationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
