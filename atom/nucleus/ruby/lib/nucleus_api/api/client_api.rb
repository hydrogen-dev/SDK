=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.20

=end

require 'uri'

module NucleusApi
  class ClientApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a client response
    # Create a new client response for a question as part of a questionnaires.
    # @param client_response clientResponse
    # @param [Hash] opts the optional parameters
    # @return [ClientResponse]
    def create_client_response_using_post(client_response, opts = {})
      data, _status_code, _headers = create_client_response_using_post_with_http_info(client_response, opts)
      data
    end

    # Create a client response
    # Create a new client response for a question as part of a questionnaires.
    # @param client_response clientResponse
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientResponse, Fixnum, Hash)>] ClientResponse data, response status code and response headers
    def create_client_response_using_post_with_http_info(client_response, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.create_client_response_using_post ...'
      end
      # verify the required parameter 'client_response' is set
      if @api_client.config.client_side_validation && client_response.nil?
        fail ArgumentError, "Missing the required parameter 'client_response' when calling ClientApi.create_client_response_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_response)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#create_client_response_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an client status
    # Create an client status record for an client.
    # @param client_status_request clientStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [ClientStatus]
    def create_client_status_using_post(client_status_request, opts = {})
      data, _status_code, _headers = create_client_status_using_post_with_http_info(client_status_request, opts)
      data
    end

    # Create an client status
    # Create an client status record for an client.
    # @param client_status_request clientStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientStatus, Fixnum, Hash)>] ClientStatus data, response status code and response headers
    def create_client_status_using_post_with_http_info(client_status_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.create_client_status_using_post ...'
      end
      # verify the required parameter 'client_status_request' is set
      if @api_client.config.client_side_validation && client_status_request.nil?
        fail ArgumentError, "Missing the required parameter 'client_status_request' when calling ClientApi.create_client_status_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_status_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#create_client_status_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a client
    # Create a new client, or register a new user, with your firm.
    # @param client_request clientRequest
    # @param [Hash] opts the optional parameters
    # @return [Client]
    def create_client_using_post(client_request, opts = {})
      data, _status_code, _headers = create_client_using_post_with_http_info(client_request, opts)
      data
    end

    # Create a client
    # Create a new client, or register a new user, with your firm.
    # @param client_request clientRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def create_client_using_post_with_http_info(client_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.create_client_using_post ...'
      end
      # verify the required parameter 'client_request' is set
      if @api_client.config.client_side_validation && client_request.nil?
        fail ArgumentError, "Missing the required parameter 'client_request' when calling ClientApi.create_client_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/client'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#create_client_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a client response
    # Permanently delete a client response for a client.
    # @param client_response_id UUID client_response_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client_response_using_delete(client_response_id, opts = {})
      delete_client_response_using_delete_with_http_info(client_response_id, opts)
      nil
    end

    # Delete a client response
    # Permanently delete a client response for a client.
    # @param client_response_id UUID client_response_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_response_using_delete_with_http_info(client_response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.delete_client_response_using_delete ...'
      end
      # verify the required parameter 'client_response_id' is set
      if @api_client.config.client_side_validation && client_response_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_response_id' when calling ClientApi.delete_client_response_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response/{client_response_id}'.sub('{' + 'client_response_id' + '}', client_response_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#delete_client_response_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an client status
    # Permanently delete an client status record from an clientâ€™s history.
    # @param client_status_id UUID client_status_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client_status_using_delete(client_status_id, opts = {})
      delete_client_status_using_delete_with_http_info(client_status_id, opts)
      nil
    end

    # Delete an client status
    # Permanently delete an client status record from an clientâ€™s history.
    # @param client_status_id UUID client_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_status_using_delete_with_http_info(client_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.delete_client_status_using_delete ...'
      end
      # verify the required parameter 'client_status_id' is set
      if @api_client.config.client_side_validation && client_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_status_id' when calling ClientApi.delete_client_status_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_status/{client_status_id}'.sub('{' + 'client_status_id' + '}', client_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#delete_client_status_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a client
    # Permanently delete a client registered with your firm. Turns the client's is_active  = 0
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client_using_delete(client_id, opts = {})
      delete_client_using_delete_with_http_info(client_id, opts)
      nil
    end

    # Delete a client
    # Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_using_delete_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.delete_client_using_delete ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.delete_client_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#delete_client_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client Account overview
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :order_by order_by (default to update_date)
    # @return [Object]
    def get_client_account_overview_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_account_overview_using_get_with_http_info(client_id, opts)
      data
    end

    # List all client Account overview
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :order_by order_by
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_client_account_overview_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_account_overview_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_account_overview_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/account_overview'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_account_overview_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Advisor overview
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :show_clients show_clients (default to false)
    # @return [Object]
    def get_client_advisor_overview_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_advisor_overview_using_get_with_http_info(client_id, opts)
      data
    end

    # Advisor overview
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :show_clients show_clients
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_client_advisor_overview_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_advisor_overview_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_advisor_overview_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/advisor_overview'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'show_clients'] = opts[:'show_clients'] if !opts[:'show_clients'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_advisor_overview_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all clients
    # Get details for all clients registered with your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageClient]
    def get_client_all_using_get(opts = {})
      data, _status_code, _headers = get_client_all_using_get_with_http_info(opts)
      data
    end

    # List all clients
    # Get details for all clients registered with your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageClient, Fixnum, Hash)>] PageClient data, response status code and response headers
    def get_client_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/client'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageClient')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client asset sizes
    # Get a list of asset sizes per date for a client.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date (default to null)
    # @option opts [BOOLEAN] :exclude_subledger exclude_subledger (default to false)
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :sort_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
    # @option opts [Date] :start_date start date (default to null)
    # @return [Array<AvailableDateDoubleVO>]
    def get_client_asset_size_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_asset_size_using_get_with_http_info(client_id, opts)
      data
    end

    # List all client asset sizes
    # Get a list of asset sizes per date for a client.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date
    # @option opts [BOOLEAN] :exclude_subledger exclude_subledger
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :sort_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
    # @option opts [Date] :start_date start date
    # @return [Array<(Array<AvailableDateDoubleVO>, Fixnum, Hash)>] Array<AvailableDateDoubleVO> data, response status code and response headers
    def get_client_asset_size_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_asset_size_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_asset_size_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/asset_size'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'exclude_subledger'] = opts[:'exclude_subledger'] if !opts[:'exclude_subledger'].nil?
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'sort_type'] = opts[:'sort_type'] if !opts[:'sort_type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AvailableDateDoubleVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_asset_size_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve client's goal details 
    # Retrieve client's goal details
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal (default to false)
    # @return [VClientGoalViewData]
    def get_client_goal_overview_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_goal_overview_using_get_with_http_info(client_id, opts)
      data
    end

    # Retrieve client&#39;s goal details 
    # Retrieve client&#39;s goal details
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal
    # @return [Array<(VClientGoalViewData, Fixnum, Hash)>] VClientGoalViewData data, response status code and response headers
    def get_client_goal_overview_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_goal_overview_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_goal_overview_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/goal_overview'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'portfolio_goal'] = opts[:'portfolio_goal'] if !opts[:'portfolio_goal'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VClientGoalViewData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_goal_overview_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client holdings
    # Get the information for all the securities that are currently being held by a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [String] :end_date end date - yyyy-mm-dd
    # @option opts [String] :filter filter
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :order_by order_by (default to date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [String] :start_date start date - yyyy-mm-dd
    # @return [PagePortfolioHoldingAgg]
    def get_client_holding_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_holding_using_get_with_http_info(client_id, opts)
      data
    end

    # List all client holdings
    # Get the information for all the securities that are currently being held by a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [String] :end_date end date - yyyy-mm-dd
    # @option opts [String] :filter filter
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @option opts [String] :start_date start date - yyyy-mm-dd
    # @return [Array<(PagePortfolioHoldingAgg, Fixnum, Hash)>] PagePortfolioHoldingAgg data, response status code and response headers
    def get_client_holding_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_holding_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_holding_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/holding'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioHoldingAgg')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_holding_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client responses
    # Get all the client responses for questions as part of a questionnaire defined by your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageClientResponse]
    def get_client_response_all_using_get(opts = {})
      data, _status_code, _headers = get_client_response_all_using_get_with_http_info(opts)
      data
    end

    # List all client responses
    # Get all the client responses for questions as part of a questionnaire defined by your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageClientResponse, Fixnum, Hash)>] PageClientResponse data, response status code and response headers
    def get_client_response_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_response_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_response_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a client response
    # Retrieve the information for a client response for a client.
    # @param client_response_id UUID client_response_id
    # @param [Hash] opts the optional parameters
    # @return [ClientResponse]
    def get_client_response_using_get(client_response_id, opts = {})
      data, _status_code, _headers = get_client_response_using_get_with_http_info(client_response_id, opts)
      data
    end

    # Retrieve a client response
    # Retrieve the information for a client response for a client.
    # @param client_response_id UUID client_response_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientResponse, Fixnum, Hash)>] ClientResponse data, response status code and response headers
    def get_client_response_using_get_with_http_info(client_response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_response_using_get ...'
      end
      # verify the required parameter 'client_response_id' is set
      if @api_client.config.client_side_validation && client_response_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_response_id' when calling ClientApi.get_client_response_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response/{client_response_id}'.sub('{' + 'client_response_id' + '}', client_response_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_response_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client statuses
    # Get the client status history information for all clients.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageClientStatus]
    def get_client_status_all_using_get(opts = {})
      data, _status_code, _headers = get_client_status_all_using_get_with_http_info(opts)
      data
    end

    # List all client statuses
    # Get the client status history information for all clients.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageClientStatus, Fixnum, Hash)>] PageClientStatus data, response status code and response headers
    def get_client_status_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_status_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/client_status'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageClientStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_status_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an client status
    # Retrieve the information for a specific client status record for an client.
    # @param client_status_id UUID client_status_id
    # @param [Hash] opts the optional parameters
    # @return [ClientStatus]
    def get_client_status_using_get(client_status_id, opts = {})
      data, _status_code, _headers = get_client_status_using_get_with_http_info(client_status_id, opts)
      data
    end

    # Retrieve an client status
    # Retrieve the information for a specific client status record for an client.
    # @param client_status_id UUID client_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientStatus, Fixnum, Hash)>] ClientStatus data, response status code and response headers
    def get_client_status_using_get_with_http_info(client_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_status_using_get ...'
      end
      # verify the required parameter 'client_status_id' is set
      if @api_client.config.client_side_validation && client_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_status_id' when calling ClientApi.get_client_status_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_status/{client_status_id}'.sub('{' + 'client_status_id' + '}', client_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_status_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client transactions
    # Get the information for all transactions under a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :end_date end date - yyyy-mm-dd
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [String] :start_date start date - yyyy-mm-dd
    # @return [PagePortfolioTransaction]
    def get_client_transaction_all_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_transaction_all_using_get_with_http_info(client_id, opts)
      data
    end

    # List all client transactions
    # Get the information for all transactions under a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :end_date end date - yyyy-mm-dd
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @option opts [String] :start_date start date - yyyy-mm-dd
    # @return [Array<(PagePortfolioTransaction, Fixnum, Hash)>] PagePortfolioTransaction data, response status code and response headers
    def get_client_transaction_all_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_transaction_all_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_transaction_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/transaction'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_transaction_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a client
    # Retrieve the information for a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Client]
    def get_client_using_get(client_id, opts = {})
      data, _status_code, _headers = get_client_using_get_with_http_info(client_id, opts)
      data
    end

    # Retrieve a client
    # Retrieve the information for a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def get_client_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client response
    # Update a client response for a client.
    # @param client_response client_response
    # @param client_response_id UUID client_response_id
    # @param [Hash] opts the optional parameters
    # @return [ClientResponse]
    def update_client_response_using_put(client_response, client_response_id, opts = {})
      data, _status_code, _headers = update_client_response_using_put_with_http_info(client_response, client_response_id, opts)
      data
    end

    # Update a client response
    # Update a client response for a client.
    # @param client_response client_response
    # @param client_response_id UUID client_response_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientResponse, Fixnum, Hash)>] ClientResponse data, response status code and response headers
    def update_client_response_using_put_with_http_info(client_response, client_response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.update_client_response_using_put ...'
      end
      # verify the required parameter 'client_response' is set
      if @api_client.config.client_side_validation && client_response.nil?
        fail ArgumentError, "Missing the required parameter 'client_response' when calling ClientApi.update_client_response_using_put"
      end
      # verify the required parameter 'client_response_id' is set
      if @api_client.config.client_side_validation && client_response_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_response_id' when calling ClientApi.update_client_response_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response/{client_response_id}'.sub('{' + 'client_response_id' + '}', client_response_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_response)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#update_client_response_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an client status
    # Update an client status record for an client.
    # @param client_status client_status
    # @param client_status_id UUID client_status_id
    # @param [Hash] opts the optional parameters
    # @return [ClientStatus]
    def update_client_status_using_put(client_status, client_status_id, opts = {})
      data, _status_code, _headers = update_client_status_using_put_with_http_info(client_status, client_status_id, opts)
      data
    end

    # Update an client status
    # Update an client status record for an client.
    # @param client_status client_status
    # @param client_status_id UUID client_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientStatus, Fixnum, Hash)>] ClientStatus data, response status code and response headers
    def update_client_status_using_put_with_http_info(client_status, client_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.update_client_status_using_put ...'
      end
      # verify the required parameter 'client_status' is set
      if @api_client.config.client_side_validation && client_status.nil?
        fail ArgumentError, "Missing the required parameter 'client_status' when calling ClientApi.update_client_status_using_put"
      end
      # verify the required parameter 'client_status_id' is set
      if @api_client.config.client_side_validation && client_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_status_id' when calling ClientApi.update_client_status_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_status/{client_status_id}'.sub('{' + 'client_status_id' + '}', client_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_status)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#update_client_status_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client
    # Update the information for a client registered with your firm.
    # @param client client
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Client]
    def update_client_using_put(client, client_id, opts = {})
      data, _status_code, _headers = update_client_using_put_with_http_info(client, client_id, opts)
      data
    end

    # Update a client
    # Update the information for a client registered with your firm.
    # @param client client
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def update_client_using_put_with_http_info(client, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.update_client_using_put ...'
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ClientApi.update_client_using_put"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.update_client_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#update_client_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
