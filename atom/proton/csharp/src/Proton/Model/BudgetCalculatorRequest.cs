/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// BudgetCalculatorRequest
    /// </summary>
    [DataContract]
    public partial class BudgetCalculatorRequest :  IEquatable<BudgetCalculatorRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            
            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 2,
            
            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 3
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetCalculatorRequest" /> class.
        /// </summary>
        /// <param name="scope">scope (default to ScopeEnum.All).</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="relativeLookback">relativeLookback (default to true).</param>
        /// <param name="budgetId">budgetId.</param>
        /// <param name="asOfDate">asOfDate.</param>
        /// <param name="showAverageSpend">showAverageSpend (default to false).</param>
        /// <param name="lookbackPeriods">lookbackPeriods (default to 1).</param>
        /// <param name="budgetDetails">budgetDetails.</param>
        /// <param name="transactionStatusScope">transactionStatusScope.</param>
        /// <param name="onlyCleansed">onlyCleansed (default to false).</param>
        /// <param name="showBudgetTrack">showBudgetTrack (default to true).</param>
        public BudgetCalculatorRequest(ScopeEnum? scope = ScopeEnum.All, string currencyConversion = default(string), bool? relativeLookback = true, Guid? budgetId = default(Guid?), DateTime? asOfDate = default(DateTime?), bool? showAverageSpend = false, int? lookbackPeriods = 1, BudgetDetails budgetDetails = default(BudgetDetails), List<string> transactionStatusScope = default(List<string>), bool? onlyCleansed = false, bool? showBudgetTrack = true)
        {
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = ScopeEnum.All;
            }
            else
            {
                this.Scope = scope;
            }
            this.CurrencyConversion = currencyConversion;
            // use default value if no "relativeLookback" provided
            if (relativeLookback == null)
            {
                this.RelativeLookback = true;
            }
            else
            {
                this.RelativeLookback = relativeLookback;
            }
            this.BudgetId = budgetId;
            this.AsOfDate = asOfDate;
            // use default value if no "showAverageSpend" provided
            if (showAverageSpend == null)
            {
                this.ShowAverageSpend = false;
            }
            else
            {
                this.ShowAverageSpend = showAverageSpend;
            }
            // use default value if no "lookbackPeriods" provided
            if (lookbackPeriods == null)
            {
                this.LookbackPeriods = 1;
            }
            else
            {
                this.LookbackPeriods = lookbackPeriods;
            }
            this.BudgetDetails = budgetDetails;
            this.TransactionStatusScope = transactionStatusScope;
            // use default value if no "onlyCleansed" provided
            if (onlyCleansed == null)
            {
                this.OnlyCleansed = false;
            }
            else
            {
                this.OnlyCleansed = onlyCleansed;
            }
            // use default value if no "showBudgetTrack" provided
            if (showBudgetTrack == null)
            {
                this.ShowBudgetTrack = true;
            }
            else
            {
                this.ShowBudgetTrack = showBudgetTrack;
            }
        }
        

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets RelativeLookback
        /// </summary>
        [DataMember(Name="relative_lookback", EmitDefaultValue=false)]
        public bool? RelativeLookback { get; set; }

        /// <summary>
        /// Gets or Sets BudgetId
        /// </summary>
        [DataMember(Name="budget_id", EmitDefaultValue=false)]
        public Guid? BudgetId { get; set; }

        /// <summary>
        /// Gets or Sets AsOfDate
        /// </summary>
        [DataMember(Name="as_of_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AsOfDate { get; set; }

        /// <summary>
        /// Gets or Sets ShowAverageSpend
        /// </summary>
        [DataMember(Name="show_average_spend", EmitDefaultValue=false)]
        public bool? ShowAverageSpend { get; set; }

        /// <summary>
        /// Gets or Sets LookbackPeriods
        /// </summary>
        [DataMember(Name="lookback_periods", EmitDefaultValue=false)]
        public int? LookbackPeriods { get; set; }

        /// <summary>
        /// Gets or Sets BudgetDetails
        /// </summary>
        [DataMember(Name="budget_details", EmitDefaultValue=false)]
        public BudgetDetails BudgetDetails { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusScope
        /// </summary>
        [DataMember(Name="transaction_status_scope", EmitDefaultValue=false)]
        public List<string> TransactionStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets OnlyCleansed
        /// </summary>
        [DataMember(Name="only_cleansed", EmitDefaultValue=false)]
        public bool? OnlyCleansed { get; set; }

        /// <summary>
        /// Gets or Sets ShowBudgetTrack
        /// </summary>
        [DataMember(Name="show_budget_track", EmitDefaultValue=false)]
        public bool? ShowBudgetTrack { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BudgetCalculatorRequest {\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  RelativeLookback: ").Append(RelativeLookback).Append("\n");
            sb.Append("  BudgetId: ").Append(BudgetId).Append("\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  ShowAverageSpend: ").Append(ShowAverageSpend).Append("\n");
            sb.Append("  LookbackPeriods: ").Append(LookbackPeriods).Append("\n");
            sb.Append("  BudgetDetails: ").Append(BudgetDetails).Append("\n");
            sb.Append("  TransactionStatusScope: ").Append(TransactionStatusScope).Append("\n");
            sb.Append("  OnlyCleansed: ").Append(OnlyCleansed).Append("\n");
            sb.Append("  ShowBudgetTrack: ").Append(ShowBudgetTrack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BudgetCalculatorRequest);
        }

        /// <summary>
        /// Returns true if BudgetCalculatorRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BudgetCalculatorRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BudgetCalculatorRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.RelativeLookback == input.RelativeLookback ||
                    (this.RelativeLookback != null &&
                    this.RelativeLookback.Equals(input.RelativeLookback))
                ) && 
                (
                    this.BudgetId == input.BudgetId ||
                    (this.BudgetId != null &&
                    this.BudgetId.Equals(input.BudgetId))
                ) && 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.ShowAverageSpend == input.ShowAverageSpend ||
                    (this.ShowAverageSpend != null &&
                    this.ShowAverageSpend.Equals(input.ShowAverageSpend))
                ) && 
                (
                    this.LookbackPeriods == input.LookbackPeriods ||
                    (this.LookbackPeriods != null &&
                    this.LookbackPeriods.Equals(input.LookbackPeriods))
                ) && 
                (
                    this.BudgetDetails == input.BudgetDetails ||
                    (this.BudgetDetails != null &&
                    this.BudgetDetails.Equals(input.BudgetDetails))
                ) && 
                (
                    this.TransactionStatusScope == input.TransactionStatusScope ||
                    this.TransactionStatusScope != null &&
                    this.TransactionStatusScope.SequenceEqual(input.TransactionStatusScope)
                ) && 
                (
                    this.OnlyCleansed == input.OnlyCleansed ||
                    (this.OnlyCleansed != null &&
                    this.OnlyCleansed.Equals(input.OnlyCleansed))
                ) && 
                (
                    this.ShowBudgetTrack == input.ShowBudgetTrack ||
                    (this.ShowBudgetTrack != null &&
                    this.ShowBudgetTrack.Equals(input.ShowBudgetTrack))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.RelativeLookback != null)
                    hashCode = hashCode * 59 + this.RelativeLookback.GetHashCode();
                if (this.BudgetId != null)
                    hashCode = hashCode * 59 + this.BudgetId.GetHashCode();
                if (this.AsOfDate != null)
                    hashCode = hashCode * 59 + this.AsOfDate.GetHashCode();
                if (this.ShowAverageSpend != null)
                    hashCode = hashCode * 59 + this.ShowAverageSpend.GetHashCode();
                if (this.LookbackPeriods != null)
                    hashCode = hashCode * 59 + this.LookbackPeriods.GetHashCode();
                if (this.BudgetDetails != null)
                    hashCode = hashCode * 59 + this.BudgetDetails.GetHashCode();
                if (this.TransactionStatusScope != null)
                    hashCode = hashCode * 59 + this.TransactionStatusScope.GetHashCode();
                if (this.OnlyCleansed != null)
                    hashCode = hashCode * 59 + this.OnlyCleansed.GetHashCode();
                if (this.ShowBudgetTrack != null)
                    hashCode = hashCode * 59 + this.ShowBudgetTrack.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LookbackPeriods (int?) minimum
            if(this.LookbackPeriods < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LookbackPeriods, must be a value greater than or equal to 1.", new [] { "LookbackPeriods" });
            }

            yield break;
        }
    }

}
