/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import atom_api.ApiCallback;
import atom_api.ApiClient;
import atom_api.ApiException;
import atom_api.ApiResponse;
import atom_api.Configuration;
import atom_api.Pair;
import atom_api.ProgressRequestBody;
import atom_api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CampaignDataPayload;
import io.swagger.client.model.CampaignManagementPayload;
import io.swagger.client.model.CampaignPlanPayload;
import io.swagger.client.model.ChatPayload;
import io.swagger.client.model.ClientCampaignPayload;
import io.swagger.client.model.ConsultationPayload;
import io.swagger.client.model.CreateCampaignDataResponse;
import io.swagger.client.model.CreateCampaignPlanResponse;
import io.swagger.client.model.CreateCampaignResponse;
import io.swagger.client.model.CreateChatResponse;
import io.swagger.client.model.CreateClientCampaignResponse;
import io.swagger.client.model.CreateConsultationResponse;
import io.swagger.client.model.CreateDocumentResponse;
import io.swagger.client.model.CreateFaqResponse;
import io.swagger.client.model.CreateSalesResponse;
import io.swagger.client.model.CreateSupportTicketCommentResponse;
import io.swagger.client.model.CreateSupportTicketResponse;
import io.swagger.client.model.DocumentPayload;
import io.swagger.client.model.FaqPayload;
import io.swagger.client.model.GetCampaignDataResponse;
import io.swagger.client.model.GetCampaignPlanResponse;
import io.swagger.client.model.GetCampaignResponse;
import io.swagger.client.model.GetChatResponse;
import io.swagger.client.model.GetClientCampaignResponse;
import io.swagger.client.model.GetConsultationResponse;
import io.swagger.client.model.GetDocumentResponse;
import io.swagger.client.model.GetFaqResponse;
import io.swagger.client.model.GetSalesResponse;
import io.swagger.client.model.GetSupportTicketCommentResponse;
import io.swagger.client.model.GetSupportTicketResponse;
import io.swagger.client.model.SalesPayload;
import io.swagger.client.model.SpecificCampaignDataResponse;
import io.swagger.client.model.SpecificCampaignPlanResponse;
import io.swagger.client.model.SpecificCampaignResponse;
import io.swagger.client.model.SpecificChatResponse;
import io.swagger.client.model.SpecificClientCampaignResponse;
import io.swagger.client.model.SpecificConsultationResponse;
import io.swagger.client.model.SpecificDocumentResponse;
import io.swagger.client.model.SpecificFaqResponse;
import io.swagger.client.model.SpecificSalesResponse;
import io.swagger.client.model.SpecificSupportTicketCommentResponse;
import io.swagger.client.model.SpecificSupportTicketResponse;
import io.swagger.client.model.SupportTicketCommentPayload;
import io.swagger.client.model.SupportTicketPayload;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ElectronApi {
    private ApiClient apiClient;

    public ElectronApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ElectronApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteCampaign
     * @param campaignId UUID of a marketing campaign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-marketing-campaign">Delete a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call deleteCampaignCall(UUID campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign/{campaign_id}"
            .replaceAll("\\{" + "campaign_id" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCampaignValidateBeforeCall(UUID campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCampaignCall(campaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a marketing campaign
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-marketing-campaign">Delete a marketing campaign Documentation</a>
     */
    public void deleteCampaign(UUID campaignId) throws ApiException {
        deleteCampaignWithHttpInfo(campaignId);
    }

    /**
     * Delete a marketing campaign
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-marketing-campaign">Delete a marketing campaign Documentation</a>
     */
    public ApiResponse<Void> deleteCampaignWithHttpInfo(UUID campaignId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCampaignValidateBeforeCall(campaignId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a marketing campaign (asynchronously)
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-marketing-campaign">Delete a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call deleteCampaignAsync(UUID campaignId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCampaignValidateBeforeCall(campaignId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCampaignDataRecord
     * @param campaignDataId UUID of a campaign data record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-data-record">Delete a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteCampaignDataRecordCall(UUID campaignDataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_data/{campaign_data_id}"
            .replaceAll("\\{" + "campaign_data_id" + "\\}", apiClient.escapeString(campaignDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCampaignDataRecordValidateBeforeCall(UUID campaignDataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignDataId' is set
        if (campaignDataId == null) {
            throw new ApiException("Missing the required parameter 'campaignDataId' when calling deleteCampaignDataRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCampaignDataRecordCall(campaignDataId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a marketing campaign data record
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-data-record">Delete a marketing campaign data record Documentation</a>
     */
    public void deleteCampaignDataRecord(UUID campaignDataId) throws ApiException {
        deleteCampaignDataRecordWithHttpInfo(campaignDataId);
    }

    /**
     * Delete a marketing campaign data record
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-data-record">Delete a marketing campaign data record Documentation</a>
     */
    public ApiResponse<Void> deleteCampaignDataRecordWithHttpInfo(UUID campaignDataId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCampaignDataRecordValidateBeforeCall(campaignDataId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a marketing campaign data record (asynchronously)
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-data-record">Delete a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call deleteCampaignDataRecordAsync(UUID campaignDataId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCampaignDataRecordValidateBeforeCall(campaignDataId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCampaignPlan
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-plan">Delete a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call deleteCampaignPlanCall(UUID campaignPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_plan/{campaign_plan_id}"
            .replaceAll("\\{" + "campaign_plan_id" + "\\}", apiClient.escapeString(campaignPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCampaignPlanValidateBeforeCall(UUID campaignPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignPlanId' is set
        if (campaignPlanId == null) {
            throw new ApiException("Missing the required parameter 'campaignPlanId' when calling deleteCampaignPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCampaignPlanCall(campaignPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a marketing campaign plan
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-plan">Delete a marketing campaign plan Documentation</a>
     */
    public void deleteCampaignPlan(UUID campaignPlanId) throws ApiException {
        deleteCampaignPlanWithHttpInfo(campaignPlanId);
    }

    /**
     * Delete a marketing campaign plan
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-plan">Delete a marketing campaign plan Documentation</a>
     */
    public ApiResponse<Void> deleteCampaignPlanWithHttpInfo(UUID campaignPlanId) throws ApiException {
        com.squareup.okhttp.Call call = deleteCampaignPlanValidateBeforeCall(campaignPlanId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a marketing campaign plan (asynchronously)
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-campaign-plan">Delete a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call deleteCampaignPlanAsync(UUID campaignPlanId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCampaignPlanValidateBeforeCall(campaignPlanId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteChatLog
     * @param chatId UUID of a chat record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-chat-log">Delete a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call deleteChatLogCall(UUID chatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/chat/{chat_id}"
            .replaceAll("\\{" + "chat_id" + "\\}", apiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteChatLogValidateBeforeCall(UUID chatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling deleteChatLog(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteChatLogCall(chatId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a chat log
     * 
     * @param chatId UUID of a chat record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-chat-log">Delete a chat log Documentation</a>
     */
    public void deleteChatLog(UUID chatId) throws ApiException {
        deleteChatLogWithHttpInfo(chatId);
    }

    /**
     * Delete a chat log
     * 
     * @param chatId UUID of a chat record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-chat-log">Delete a chat log Documentation</a>
     */
    public ApiResponse<Void> deleteChatLogWithHttpInfo(UUID chatId) throws ApiException {
        com.squareup.okhttp.Call call = deleteChatLogValidateBeforeCall(chatId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a chat log (asynchronously)
     * 
     * @param chatId UUID of a chat record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-chat-log">Delete a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call deleteChatLogAsync(UUID chatId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChatLogValidateBeforeCall(chatId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteClientCampaign
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Remove-a-client-from-a-campaign">Remove a client from a campaign Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientCampaignCall(UUID clientCampaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/client_campaign/{client_campaign_id}"
            .replaceAll("\\{" + "client_campaign_id" + "\\}", apiClient.escapeString(clientCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClientCampaignValidateBeforeCall(UUID clientCampaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientCampaignId' is set
        if (clientCampaignId == null) {
            throw new ApiException("Missing the required parameter 'clientCampaignId' when calling deleteClientCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClientCampaignCall(clientCampaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove a client from a campaign
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Remove-a-client-from-a-campaign">Remove a client from a campaign Documentation</a>
     */
    public void deleteClientCampaign(UUID clientCampaignId) throws ApiException {
        deleteClientCampaignWithHttpInfo(clientCampaignId);
    }

    /**
     * Remove a client from a campaign
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Remove-a-client-from-a-campaign">Remove a client from a campaign Documentation</a>
     */
    public ApiResponse<Void> deleteClientCampaignWithHttpInfo(UUID clientCampaignId) throws ApiException {
        com.squareup.okhttp.Call call = deleteClientCampaignValidateBeforeCall(clientCampaignId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a client from a campaign (asynchronously)
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Remove-a-client-from-a-campaign">Remove a client from a campaign Documentation</a>
     */
    public com.squareup.okhttp.Call deleteClientCampaignAsync(UUID clientCampaignId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClientCampaignValidateBeforeCall(clientCampaignId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteConsultation
     * @param consultationId UUID of a consultation record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-consultation">Delete a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call deleteConsultationCall(UUID consultationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/consultation/{consultation_id}"
            .replaceAll("\\{" + "consultation_id" + "\\}", apiClient.escapeString(consultationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConsultationValidateBeforeCall(UUID consultationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'consultationId' is set
        if (consultationId == null) {
            throw new ApiException("Missing the required parameter 'consultationId' when calling deleteConsultation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteConsultationCall(consultationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a consultation
     * 
     * @param consultationId UUID of a consultation record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-consultation">Delete a consultation Documentation</a>
     */
    public void deleteConsultation(UUID consultationId) throws ApiException {
        deleteConsultationWithHttpInfo(consultationId);
    }

    /**
     * Delete a consultation
     * 
     * @param consultationId UUID of a consultation record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-consultation">Delete a consultation Documentation</a>
     */
    public ApiResponse<Void> deleteConsultationWithHttpInfo(UUID consultationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteConsultationValidateBeforeCall(consultationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a consultation (asynchronously)
     * 
     * @param consultationId UUID of a consultation record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-consultation">Delete a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call deleteConsultationAsync(UUID consultationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConsultationValidateBeforeCall(consultationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDocument
     * @param documentId UUID of a document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-document">Delete a document Documentation</a>
     */
    public com.squareup.okhttp.Call deleteDocumentCall(UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/document/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentValidateBeforeCall(UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDocumentCall(documentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a document
     * 
     * @param documentId UUID of a document (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-document">Delete a document Documentation</a>
     */
    public void deleteDocument(UUID documentId) throws ApiException {
        deleteDocumentWithHttpInfo(documentId);
    }

    /**
     * Delete a document
     * 
     * @param documentId UUID of a document (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-document">Delete a document Documentation</a>
     */
    public ApiResponse<Void> deleteDocumentWithHttpInfo(UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentValidateBeforeCall(documentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a document (asynchronously)
     * 
     * @param documentId UUID of a document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-document">Delete a document Documentation</a>
     */
    public com.squareup.okhttp.Call deleteDocumentAsync(UUID documentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentValidateBeforeCall(documentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFaq
     * @param faqId UUID of a FAQ (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-an-FAQ">Delete a FAQ Documentation</a>
     */
    public com.squareup.okhttp.Call deleteFaqCall(UUID faqId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/faq/{faq_id}"
            .replaceAll("\\{" + "faq_id" + "\\}", apiClient.escapeString(faqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFaqValidateBeforeCall(UUID faqId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'faqId' is set
        if (faqId == null) {
            throw new ApiException("Missing the required parameter 'faqId' when calling deleteFaq(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteFaqCall(faqId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a FAQ
     * 
     * @param faqId UUID of a FAQ (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-an-FAQ">Delete a FAQ Documentation</a>
     */
    public void deleteFaq(UUID faqId) throws ApiException {
        deleteFaqWithHttpInfo(faqId);
    }

    /**
     * Delete a FAQ
     * 
     * @param faqId UUID of a FAQ (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-an-FAQ">Delete a FAQ Documentation</a>
     */
    public ApiResponse<Void> deleteFaqWithHttpInfo(UUID faqId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFaqValidateBeforeCall(faqId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a FAQ (asynchronously)
     * 
     * @param faqId UUID of a FAQ (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-an-FAQ">Delete a FAQ Documentation</a>
     */
    public com.squareup.okhttp.Call deleteFaqAsync(UUID faqId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFaqValidateBeforeCall(faqId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSalesInquiry
     * @param salesId UUID of a sales record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Delete a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSalesInquiryCall(UUID salesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/sales/{sales_id}"
            .replaceAll("\\{" + "sales_id" + "\\}", apiClient.escapeString(salesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSalesInquiryValidateBeforeCall(UUID salesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesId' is set
        if (salesId == null) {
            throw new ApiException("Missing the required parameter 'salesId' when calling deleteSalesInquiry(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSalesInquiryCall(salesId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a sales inquiry
     * 
     * @param salesId UUID of a sales record (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Delete a sales inquiry Documentation</a>
     */
    public void deleteSalesInquiry(UUID salesId) throws ApiException {
        deleteSalesInquiryWithHttpInfo(salesId);
    }

    /**
     * Delete a sales inquiry
     * 
     * @param salesId UUID of a sales record (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Delete a sales inquiry Documentation</a>
     */
    public ApiResponse<Void> deleteSalesInquiryWithHttpInfo(UUID salesId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSalesInquiryValidateBeforeCall(salesId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a sales inquiry (asynchronously)
     * 
     * @param salesId UUID of a sales record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Delete a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSalesInquiryAsync(UUID salesId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSalesInquiryValidateBeforeCall(salesId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSupportTicket
     * @param supportTicketId UUID of a support ticket (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket">Delete a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSupportTicketCall(UUID supportTicketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket/{support_ticket_id}"
            .replaceAll("\\{" + "support_ticket_id" + "\\}", apiClient.escapeString(supportTicketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSupportTicketValidateBeforeCall(UUID supportTicketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supportTicketId' is set
        if (supportTicketId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketId' when calling deleteSupportTicket(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSupportTicketCall(supportTicketId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a support ticket
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket">Delete a support ticket Documentation</a>
     */
    public void deleteSupportTicket(UUID supportTicketId) throws ApiException {
        deleteSupportTicketWithHttpInfo(supportTicketId);
    }

    /**
     * Delete a support ticket
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket">Delete a support ticket Documentation</a>
     */
    public ApiResponse<Void> deleteSupportTicketWithHttpInfo(UUID supportTicketId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSupportTicketValidateBeforeCall(supportTicketId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a support ticket (asynchronously)
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket">Delete a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSupportTicketAsync(UUID supportTicketId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSupportTicketValidateBeforeCall(supportTicketId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteSupportTicketComment
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket-comment">Delete a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSupportTicketCommentCall(UUID supportTicketCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket_comment/{support_ticket_comment_id}"
            .replaceAll("\\{" + "support_ticket_comment_id" + "\\}", apiClient.escapeString(supportTicketCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSupportTicketCommentValidateBeforeCall(UUID supportTicketCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supportTicketCommentId' is set
        if (supportTicketCommentId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketCommentId' when calling deleteSupportTicketComment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSupportTicketCommentCall(supportTicketCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a support ticket comment
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket-comment">Delete a support ticket comment Documentation</a>
     */
    public void deleteSupportTicketComment(UUID supportTicketCommentId) throws ApiException {
        deleteSupportTicketCommentWithHttpInfo(supportTicketCommentId);
    }

    /**
     * Delete a support ticket comment
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket-comment">Delete a support ticket comment Documentation</a>
     */
    public ApiResponse<Void> deleteSupportTicketCommentWithHttpInfo(UUID supportTicketCommentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSupportTicketCommentValidateBeforeCall(supportTicketCommentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a support ticket comment (asynchronously)
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Delete-a-support-ticket-comment">Delete a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call deleteSupportTicketCommentAsync(UUID supportTicketCommentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSupportTicketCommentValidateBeforeCall(supportTicketCommentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCampaign
     * @param campaignId UUID of a marketing campaign (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-marketing-campaign">Retrieve a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignCall(UUID campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign/{campaign_id}"
            .replaceAll("\\{" + "campaign_id" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignValidateBeforeCall(UUID campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignCall(campaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a marketing campaign
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @return SpecificCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-marketing-campaign">Retrieve a marketing campaign Documentation</a>
     */
    public SpecificCampaignResponse getCampaign(UUID campaignId) throws ApiException {
        ApiResponse<SpecificCampaignResponse> resp = getCampaignWithHttpInfo(campaignId);
        return resp.getData();
    }

    /**
     * Retrieve a marketing campaign
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @return ApiResponse&lt;SpecificCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-marketing-campaign">Retrieve a marketing campaign Documentation</a>
     */
    public ApiResponse<SpecificCampaignResponse> getCampaignWithHttpInfo(UUID campaignId) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignValidateBeforeCall(campaignId, null, null);
        Type localVarReturnType = new TypeToken<SpecificCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a marketing campaign (asynchronously)
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-marketing-campaign">Retrieve a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignAsync(UUID campaignId, final ApiCallback<SpecificCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignValidateBeforeCall(campaignId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignDataRecord
     * @param campaignDataId UUID of a campaign data record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-data-record">Retrieve a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignDataRecordCall(UUID campaignDataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_data/{campaign_data_id}"
            .replaceAll("\\{" + "campaign_data_id" + "\\}", apiClient.escapeString(campaignDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignDataRecordValidateBeforeCall(UUID campaignDataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignDataId' is set
        if (campaignDataId == null) {
            throw new ApiException("Missing the required parameter 'campaignDataId' when calling getCampaignDataRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignDataRecordCall(campaignDataId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a marketing campaign data record
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @return SpecificCampaignDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-data-record">Retrieve a marketing campaign data record Documentation</a>
     */
    public SpecificCampaignDataResponse getCampaignDataRecord(UUID campaignDataId) throws ApiException {
        ApiResponse<SpecificCampaignDataResponse> resp = getCampaignDataRecordWithHttpInfo(campaignDataId);
        return resp.getData();
    }

    /**
     * Retrieve a marketing campaign data record
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @return ApiResponse&lt;SpecificCampaignDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-data-record">Retrieve a marketing campaign data record Documentation</a>
     */
    public ApiResponse<SpecificCampaignDataResponse> getCampaignDataRecordWithHttpInfo(UUID campaignDataId) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignDataRecordValidateBeforeCall(campaignDataId, null, null);
        Type localVarReturnType = new TypeToken<SpecificCampaignDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a marketing campaign data record (asynchronously)
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-data-record">Retrieve a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignDataRecordAsync(UUID campaignDataId, final ApiCallback<SpecificCampaignDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignDataRecordValidateBeforeCall(campaignDataId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificCampaignDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignDataRecords
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-data-records">List all marketing campaign data records Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignDataRecordsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignDataRecordsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCampaignDataRecordsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all marketing campaign data records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetCampaignDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-data-records">List all marketing campaign data records Documentation</a>
     */
    public GetCampaignDataResponse getCampaignDataRecords(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetCampaignDataResponse> resp = getCampaignDataRecordsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all marketing campaign data records
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetCampaignDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-data-records">List all marketing campaign data records Documentation</a>
     */
    public ApiResponse<GetCampaignDataResponse> getCampaignDataRecordsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignDataRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetCampaignDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all marketing campaign data records (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-data-records">List all marketing campaign data records Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignDataRecordsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetCampaignDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignDataRecordsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCampaignDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignPlan
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-plan">Retrieve a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignPlanCall(UUID campaignPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_plan/{campaign_plan_id}"
            .replaceAll("\\{" + "campaign_plan_id" + "\\}", apiClient.escapeString(campaignPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignPlanValidateBeforeCall(UUID campaignPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignPlanId' is set
        if (campaignPlanId == null) {
            throw new ApiException("Missing the required parameter 'campaignPlanId' when calling getCampaignPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getCampaignPlanCall(campaignPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a marketing campaign plan
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @return SpecificCampaignPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-plan">Retrieve a marketing campaign plan Documentation</a>
     */
    public SpecificCampaignPlanResponse getCampaignPlan(UUID campaignPlanId) throws ApiException {
        ApiResponse<SpecificCampaignPlanResponse> resp = getCampaignPlanWithHttpInfo(campaignPlanId);
        return resp.getData();
    }

    /**
     * Retrieve a marketing campaign plan
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @return ApiResponse&lt;SpecificCampaignPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-plan">Retrieve a marketing campaign plan Documentation</a>
     */
    public ApiResponse<SpecificCampaignPlanResponse> getCampaignPlanWithHttpInfo(UUID campaignPlanId) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignPlanValidateBeforeCall(campaignPlanId, null, null);
        Type localVarReturnType = new TypeToken<SpecificCampaignPlanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a marketing campaign plan (asynchronously)
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-campaign-plan">Retrieve a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignPlanAsync(UUID campaignPlanId, final ApiCallback<SpecificCampaignPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignPlanValidateBeforeCall(campaignPlanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificCampaignPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaignPlans
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-plans">List all marketing campaign plans Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignPlansCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignPlansValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCampaignPlansCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all marketing campaign plans
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetCampaignPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-plans">List all marketing campaign plans Documentation</a>
     */
    public GetCampaignPlanResponse getCampaignPlans(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetCampaignPlanResponse> resp = getCampaignPlansWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all marketing campaign plans
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetCampaignPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-plans">List all marketing campaign plans Documentation</a>
     */
    public ApiResponse<GetCampaignPlanResponse> getCampaignPlansWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignPlansValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetCampaignPlanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all marketing campaign plans (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-campaign-plans">List all marketing campaign plans Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignPlansAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetCampaignPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignPlansValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCampaignPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCampaigns
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-marketing-campaigns">List all marketing campaigns Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCampaignsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCampaignsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all marketing campaigns
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-marketing-campaigns">List all marketing campaigns Documentation</a>
     */
    public GetCampaignResponse getCampaigns(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetCampaignResponse> resp = getCampaignsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all marketing campaigns
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-marketing-campaigns">List all marketing campaigns Documentation</a>
     */
    public ApiResponse<GetCampaignResponse> getCampaignsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getCampaignsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all marketing campaigns (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-marketing-campaigns">List all marketing campaigns Documentation</a>
     */
    public com.squareup.okhttp.Call getCampaignsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCampaignsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChatLog
     * @param chatId UUID of a chat record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-chat-log">Retrieve a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call getChatLogCall(UUID chatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/chat/{chat_id}"
            .replaceAll("\\{" + "chat_id" + "\\}", apiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChatLogValidateBeforeCall(UUID chatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling getChatLog(Async)");
        }
        

        com.squareup.okhttp.Call call = getChatLogCall(chatId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a chat log
     * 
     * @param chatId UUID of a chat record (required)
     * @return SpecificChatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-chat-log">Retrieve a chat log Documentation</a>
     */
    public SpecificChatResponse getChatLog(UUID chatId) throws ApiException {
        ApiResponse<SpecificChatResponse> resp = getChatLogWithHttpInfo(chatId);
        return resp.getData();
    }

    /**
     * Retrieve a chat log
     * 
     * @param chatId UUID of a chat record (required)
     * @return ApiResponse&lt;SpecificChatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-chat-log">Retrieve a chat log Documentation</a>
     */
    public ApiResponse<SpecificChatResponse> getChatLogWithHttpInfo(UUID chatId) throws ApiException {
        com.squareup.okhttp.Call call = getChatLogValidateBeforeCall(chatId, null, null);
        Type localVarReturnType = new TypeToken<SpecificChatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a chat log (asynchronously)
     * 
     * @param chatId UUID of a chat record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-chat-log">Retrieve a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call getChatLogAsync(UUID chatId, final ApiCallback<SpecificChatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChatLogValidateBeforeCall(chatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificChatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChatLogs
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-chat-logs">List all chat logs Documentation</a>
     */
    public com.squareup.okhttp.Call getChatLogsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChatLogsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getChatLogsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all chat logs
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetChatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-chat-logs">List all chat logs Documentation</a>
     */
    public GetChatResponse getChatLogs(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetChatResponse> resp = getChatLogsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all chat logs
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetChatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-chat-logs">List all chat logs Documentation</a>
     */
    public ApiResponse<GetChatResponse> getChatLogsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getChatLogsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetChatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all chat logs (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-chat-logs">List all chat logs Documentation</a>
     */
    public com.squareup.okhttp.Call getChatLogsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetChatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChatLogsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetChatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientCampaign
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-client-assigned-to-a-campaign">Retrieve a client assigned to a campaign Documentation</a>
     */
    public com.squareup.okhttp.Call getClientCampaignCall(UUID clientCampaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/client_campaign/{client_campaign_id}"
            .replaceAll("\\{" + "client_campaign_id" + "\\}", apiClient.escapeString(clientCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientCampaignValidateBeforeCall(UUID clientCampaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientCampaignId' is set
        if (clientCampaignId == null) {
            throw new ApiException("Missing the required parameter 'clientCampaignId' when calling getClientCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = getClientCampaignCall(clientCampaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a client assigned to a campaign
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @return SpecificClientCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-client-assigned-to-a-campaign">Retrieve a client assigned to a campaign Documentation</a>
     */
    public SpecificClientCampaignResponse getClientCampaign(UUID clientCampaignId) throws ApiException {
        ApiResponse<SpecificClientCampaignResponse> resp = getClientCampaignWithHttpInfo(clientCampaignId);
        return resp.getData();
    }

    /**
     * Retrieve a client assigned to a campaign
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @return ApiResponse&lt;SpecificClientCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-client-assigned-to-a-campaign">Retrieve a client assigned to a campaign Documentation</a>
     */
    public ApiResponse<SpecificClientCampaignResponse> getClientCampaignWithHttpInfo(UUID clientCampaignId) throws ApiException {
        com.squareup.okhttp.Call call = getClientCampaignValidateBeforeCall(clientCampaignId, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a client assigned to a campaign (asynchronously)
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-client-assigned-to-a-campaign">Retrieve a client assigned to a campaign Documentation</a>
     */
    public com.squareup.okhttp.Call getClientCampaignAsync(UUID clientCampaignId, final ApiCallback<SpecificClientCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientCampaignValidateBeforeCall(clientCampaignId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClientCampaigns
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-client-campaigns">List information for all clients that are assigned to a marketing campaign defined for your firm Documentation</a>
     */
    public com.squareup.okhttp.Call getClientCampaignsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/client_campaign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClientCampaignsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getClientCampaignsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List information for all clients that are assigned to a marketing campaign defined for your firm
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetClientCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-client-campaigns">List information for all clients that are assigned to a marketing campaign defined for your firm Documentation</a>
     */
    public GetClientCampaignResponse getClientCampaigns(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetClientCampaignResponse> resp = getClientCampaignsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List information for all clients that are assigned to a marketing campaign defined for your firm
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetClientCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-client-campaigns">List information for all clients that are assigned to a marketing campaign defined for your firm Documentation</a>
     */
    public ApiResponse<GetClientCampaignResponse> getClientCampaignsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getClientCampaignsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetClientCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List information for all clients that are assigned to a marketing campaign defined for your firm (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-client-campaigns">List information for all clients that are assigned to a marketing campaign defined for your firm Documentation</a>
     */
    public com.squareup.okhttp.Call getClientCampaignsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetClientCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClientCampaignsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetClientCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsultation
     * @param consultationId UUID of a consultation record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-consultation">Retrieve a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call getConsultationCall(UUID consultationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/consultation/{consultation_id}"
            .replaceAll("\\{" + "consultation_id" + "\\}", apiClient.escapeString(consultationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsultationValidateBeforeCall(UUID consultationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'consultationId' is set
        if (consultationId == null) {
            throw new ApiException("Missing the required parameter 'consultationId' when calling getConsultation(Async)");
        }
        

        com.squareup.okhttp.Call call = getConsultationCall(consultationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a consultation
     * 
     * @param consultationId UUID of a consultation record (required)
     * @return SpecificConsultationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-consultation">Retrieve a consultation Documentation</a>
     */
    public SpecificConsultationResponse getConsultation(UUID consultationId) throws ApiException {
        ApiResponse<SpecificConsultationResponse> resp = getConsultationWithHttpInfo(consultationId);
        return resp.getData();
    }

    /**
     * Retrieve a consultation
     * 
     * @param consultationId UUID of a consultation record (required)
     * @return ApiResponse&lt;SpecificConsultationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-consultation">Retrieve a consultation Documentation</a>
     */
    public ApiResponse<SpecificConsultationResponse> getConsultationWithHttpInfo(UUID consultationId) throws ApiException {
        com.squareup.okhttp.Call call = getConsultationValidateBeforeCall(consultationId, null, null);
        Type localVarReturnType = new TypeToken<SpecificConsultationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a consultation (asynchronously)
     * 
     * @param consultationId UUID of a consultation record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-consultation">Retrieve a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call getConsultationAsync(UUID consultationId, final ApiCallback<SpecificConsultationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsultationValidateBeforeCall(consultationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificConsultationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsultations
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-consultations">List all consultations Documentation</a>
     */
    public com.squareup.okhttp.Call getConsultationsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/consultation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsultationsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getConsultationsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all consultations
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetConsultationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-consultations">List all consultations Documentation</a>
     */
    public GetConsultationResponse getConsultations(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetConsultationResponse> resp = getConsultationsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all consultations
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetConsultationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-consultations">List all consultations Documentation</a>
     */
    public ApiResponse<GetConsultationResponse> getConsultationsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getConsultationsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetConsultationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all consultations (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-consultations">List all consultations Documentation</a>
     */
    public com.squareup.okhttp.Call getConsultationsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetConsultationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsultationsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetConsultationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocument
     * @param documentId UUID of a document (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-document">Retrieve a document Documentation</a>
     */
    public com.squareup.okhttp.Call getDocumentCall(UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/document/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentValidateBeforeCall(UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = getDocumentCall(documentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a document
     * 
     * @param documentId UUID of a document (required)
     * @return SpecificDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-document">Retrieve a document Documentation</a>
     */
    public SpecificDocumentResponse getDocument(UUID documentId) throws ApiException {
        ApiResponse<SpecificDocumentResponse> resp = getDocumentWithHttpInfo(documentId);
        return resp.getData();
    }

    /**
     * Retrieve a document
     * 
     * @param documentId UUID of a document (required)
     * @return ApiResponse&lt;SpecificDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-document">Retrieve a document Documentation</a>
     */
    public ApiResponse<SpecificDocumentResponse> getDocumentWithHttpInfo(UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(documentId, null, null);
        Type localVarReturnType = new TypeToken<SpecificDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a document (asynchronously)
     * 
     * @param documentId UUID of a document (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-document">Retrieve a document Documentation</a>
     */
    public com.squareup.okhttp.Call getDocumentAsync(UUID documentId, final ApiCallback<SpecificDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentValidateBeforeCall(documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocuments
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-documents">List all documents Documentation</a>
     */
    public com.squareup.okhttp.Call getDocumentsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDocumentsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all documents
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-documents">List all documents Documentation</a>
     */
    public GetDocumentResponse getDocuments(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetDocumentResponse> resp = getDocumentsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all documents
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-documents">List all documents Documentation</a>
     */
    public ApiResponse<GetDocumentResponse> getDocumentsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all documents (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-documents">List all documents Documentation</a>
     */
    public com.squareup.okhttp.Call getDocumentsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFaq
     * @param faqId UUID of a FAQ (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-an-FAQ">Retrieve a FAQ Documentation</a>
     */
    public com.squareup.okhttp.Call getFaqCall(UUID faqId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/faq/{faq_id}"
            .replaceAll("\\{" + "faq_id" + "\\}", apiClient.escapeString(faqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFaqValidateBeforeCall(UUID faqId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'faqId' is set
        if (faqId == null) {
            throw new ApiException("Missing the required parameter 'faqId' when calling getFaq(Async)");
        }
        

        com.squareup.okhttp.Call call = getFaqCall(faqId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a FAQ
     * 
     * @param faqId UUID of a FAQ (required)
     * @return SpecificFaqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-an-FAQ">Retrieve a FAQ Documentation</a>
     */
    public SpecificFaqResponse getFaq(UUID faqId) throws ApiException {
        ApiResponse<SpecificFaqResponse> resp = getFaqWithHttpInfo(faqId);
        return resp.getData();
    }

    /**
     * Retrieve a FAQ
     * 
     * @param faqId UUID of a FAQ (required)
     * @return ApiResponse&lt;SpecificFaqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-an-FAQ">Retrieve a FAQ Documentation</a>
     */
    public ApiResponse<SpecificFaqResponse> getFaqWithHttpInfo(UUID faqId) throws ApiException {
        com.squareup.okhttp.Call call = getFaqValidateBeforeCall(faqId, null, null);
        Type localVarReturnType = new TypeToken<SpecificFaqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a FAQ (asynchronously)
     * 
     * @param faqId UUID of a FAQ (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-an-FAQ">Retrieve a FAQ Documentation</a>
     */
    public com.squareup.okhttp.Call getFaqAsync(UUID faqId, final ApiCallback<SpecificFaqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFaqValidateBeforeCall(faqId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificFaqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFaqs
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-FAQs">List all FAQs Documentation</a>
     */
    public com.squareup.okhttp.Call getFaqsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/faq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFaqsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getFaqsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all FAQs
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetFaqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-FAQs">List all FAQs Documentation</a>
     */
    public GetFaqResponse getFaqs(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetFaqResponse> resp = getFaqsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all FAQs
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetFaqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-FAQs">List all FAQs Documentation</a>
     */
    public ApiResponse<GetFaqResponse> getFaqsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getFaqsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetFaqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all FAQs (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-FAQs">List all FAQs Documentation</a>
     */
    public com.squareup.okhttp.Call getFaqsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetFaqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFaqsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetFaqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSalesInquiries
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-sales-inquiries">List all sales inquiries Documentation</a>
     */
    public com.squareup.okhttp.Call getSalesInquiriesCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSalesInquiriesValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSalesInquiriesCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all sales inquiries
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetSalesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-sales-inquiries">List all sales inquiries Documentation</a>
     */
    public GetSalesResponse getSalesInquiries(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetSalesResponse> resp = getSalesInquiriesWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all sales inquiries
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetSalesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-sales-inquiries">List all sales inquiries Documentation</a>
     */
    public ApiResponse<GetSalesResponse> getSalesInquiriesWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getSalesInquiriesValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetSalesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all sales inquiries (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-sales-inquiries">List all sales inquiries Documentation</a>
     */
    public com.squareup.okhttp.Call getSalesInquiriesAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetSalesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalesInquiriesValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSalesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSalesInquiry
     * @param salesId UUID of a sales record (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-sales-inquiry">Retrieve a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call getSalesInquiryCall(UUID salesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/sales/{sales_id}"
            .replaceAll("\\{" + "sales_id" + "\\}", apiClient.escapeString(salesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSalesInquiryValidateBeforeCall(UUID salesId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesId' is set
        if (salesId == null) {
            throw new ApiException("Missing the required parameter 'salesId' when calling getSalesInquiry(Async)");
        }
        

        com.squareup.okhttp.Call call = getSalesInquiryCall(salesId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a sales inquiry
     * 
     * @param salesId UUID of a sales record (required)
     * @return SpecificSalesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-sales-inquiry">Retrieve a sales inquiry Documentation</a>
     */
    public SpecificSalesResponse getSalesInquiry(UUID salesId) throws ApiException {
        ApiResponse<SpecificSalesResponse> resp = getSalesInquiryWithHttpInfo(salesId);
        return resp.getData();
    }

    /**
     * Retrieve a sales inquiry
     * 
     * @param salesId UUID of a sales record (required)
     * @return ApiResponse&lt;SpecificSalesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-sales-inquiry">Retrieve a sales inquiry Documentation</a>
     */
    public ApiResponse<SpecificSalesResponse> getSalesInquiryWithHttpInfo(UUID salesId) throws ApiException {
        com.squareup.okhttp.Call call = getSalesInquiryValidateBeforeCall(salesId, null, null);
        Type localVarReturnType = new TypeToken<SpecificSalesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a sales inquiry (asynchronously)
     * 
     * @param salesId UUID of a sales record (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-sales-inquiry">Retrieve a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call getSalesInquiryAsync(UUID salesId, final ApiCallback<SpecificSalesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalesInquiryValidateBeforeCall(salesId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSalesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupportTicket
     * @param supportTicketId UUID of a support ticket (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket">Retrieve a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketCall(UUID supportTicketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket/{support_ticket_id}"
            .replaceAll("\\{" + "support_ticket_id" + "\\}", apiClient.escapeString(supportTicketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSupportTicketValidateBeforeCall(UUID supportTicketId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supportTicketId' is set
        if (supportTicketId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketId' when calling getSupportTicket(Async)");
        }
        

        com.squareup.okhttp.Call call = getSupportTicketCall(supportTicketId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a support ticket
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @return SpecificSupportTicketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket">Retrieve a support ticket Documentation</a>
     */
    public SpecificSupportTicketResponse getSupportTicket(UUID supportTicketId) throws ApiException {
        ApiResponse<SpecificSupportTicketResponse> resp = getSupportTicketWithHttpInfo(supportTicketId);
        return resp.getData();
    }

    /**
     * Retrieve a support ticket
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @return ApiResponse&lt;SpecificSupportTicketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket">Retrieve a support ticket Documentation</a>
     */
    public ApiResponse<SpecificSupportTicketResponse> getSupportTicketWithHttpInfo(UUID supportTicketId) throws ApiException {
        com.squareup.okhttp.Call call = getSupportTicketValidateBeforeCall(supportTicketId, null, null);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a support ticket (asynchronously)
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket">Retrieve a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketAsync(UUID supportTicketId, final ApiCallback<SpecificSupportTicketResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSupportTicketValidateBeforeCall(supportTicketId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupportTicketComment
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket-comment">Retrieve a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketCommentCall(UUID supportTicketCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket_comment/{support_ticket_comment_id}"
            .replaceAll("\\{" + "support_ticket_comment_id" + "\\}", apiClient.escapeString(supportTicketCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSupportTicketCommentValidateBeforeCall(UUID supportTicketCommentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supportTicketCommentId' is set
        if (supportTicketCommentId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketCommentId' when calling getSupportTicketComment(Async)");
        }
        

        com.squareup.okhttp.Call call = getSupportTicketCommentCall(supportTicketCommentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a support ticket comment
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @return SpecificSupportTicketCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket-comment">Retrieve a support ticket comment Documentation</a>
     */
    public SpecificSupportTicketCommentResponse getSupportTicketComment(UUID supportTicketCommentId) throws ApiException {
        ApiResponse<SpecificSupportTicketCommentResponse> resp = getSupportTicketCommentWithHttpInfo(supportTicketCommentId);
        return resp.getData();
    }

    /**
     * Retrieve a support ticket comment
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @return ApiResponse&lt;SpecificSupportTicketCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket-comment">Retrieve a support ticket comment Documentation</a>
     */
    public ApiResponse<SpecificSupportTicketCommentResponse> getSupportTicketCommentWithHttpInfo(UUID supportTicketCommentId) throws ApiException {
        com.squareup.okhttp.Call call = getSupportTicketCommentValidateBeforeCall(supportTicketCommentId, null, null);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a support ticket comment (asynchronously)
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Retrieve-a-support-ticket-comment">Retrieve a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketCommentAsync(UUID supportTicketCommentId, final ApiCallback<SpecificSupportTicketCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSupportTicketCommentValidateBeforeCall(supportTicketCommentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupportTicketComments
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-ticket-comments">List all support ticket comments Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketCommentsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSupportTicketCommentsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSupportTicketCommentsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all support ticket comments
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetSupportTicketCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-ticket-comments">List all support ticket comments Documentation</a>
     */
    public GetSupportTicketCommentResponse getSupportTicketComments(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetSupportTicketCommentResponse> resp = getSupportTicketCommentsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all support ticket comments
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetSupportTicketCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-ticket-comments">List all support ticket comments Documentation</a>
     */
    public ApiResponse<GetSupportTicketCommentResponse> getSupportTicketCommentsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getSupportTicketCommentsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetSupportTicketCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all support ticket comments (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-ticket-comments">List all support ticket comments Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketCommentsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetSupportTicketCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSupportTicketCommentsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSupportTicketCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSupportTickets
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-tickets">List all support tickets Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketsCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSupportTicketsValidateBeforeCall(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getSupportTicketsCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all support tickets
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return GetSupportTicketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-tickets">List all support tickets Documentation</a>
     */
    public GetSupportTicketResponse getSupportTickets(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        ApiResponse<GetSupportTicketResponse> resp = getSupportTicketsWithHttpInfo(page, size, orderBy, ascending, filter);
        return resp.getData();
    }

    /**
     * List all support tickets
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @return ApiResponse&lt;GetSupportTicketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-tickets">List all support tickets Documentation</a>
     */
    public ApiResponse<GetSupportTicketResponse> getSupportTicketsWithHttpInfo(Integer page, Integer size, String orderBy, Boolean ascending, String filter) throws ApiException {
        com.squareup.okhttp.Call call = getSupportTicketsValidateBeforeCall(page, size, orderBy, ascending, filter, null, null);
        Type localVarReturnType = new TypeToken<GetSupportTicketResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all support tickets (asynchronously)
     * 
     * @param page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (optional, default to 0)
     * @param size The number or records to be included per page. The default is 25. There is no max value. (optional, default to 25)
     * @param orderBy The field in the response body to order the list by. Default is update_date. (optional, default to update_date)
     * @param ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (optional, default to false)
     * @param filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#List-all-support-tickets">List all support tickets Documentation</a>
     */
    public com.squareup.okhttp.Call getSupportTicketsAsync(Integer page, Integer size, String orderBy, Boolean ascending, String filter, final ApiCallback<GetSupportTicketResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSupportTicketsValidateBeforeCall(page, size, orderBy, ascending, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSupportTicketResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCampaign
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-marketing-campaign">Create a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call postCampaignCall(CampaignManagementPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCampaignValidateBeforeCall(CampaignManagementPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = postCampaignCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a marketing campaign
     * 
     * @param payload  (required)
     * @return CreateCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-marketing-campaign">Create a marketing campaign Documentation</a>
     */
    public CreateCampaignResponse postCampaign(CampaignManagementPayload payload) throws ApiException {
        ApiResponse<CreateCampaignResponse> resp = postCampaignWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a marketing campaign
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-marketing-campaign">Create a marketing campaign Documentation</a>
     */
    public ApiResponse<CreateCampaignResponse> postCampaignWithHttpInfo(CampaignManagementPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postCampaignValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a marketing campaign (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-marketing-campaign">Create a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call postCampaignAsync(CampaignManagementPayload payload, final ApiCallback<CreateCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCampaignValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCampaignDataRecord
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-data-record">Create a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call postCampaignDataRecordCall(CampaignDataPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCampaignDataRecordValidateBeforeCall(CampaignDataPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postCampaignDataRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = postCampaignDataRecordCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a marketing campaign data record
     * 
     * @param payload  (required)
     * @return CreateCampaignDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-data-record">Create a marketing campaign data record Documentation</a>
     */
    public CreateCampaignDataResponse postCampaignDataRecord(CampaignDataPayload payload) throws ApiException {
        ApiResponse<CreateCampaignDataResponse> resp = postCampaignDataRecordWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a marketing campaign data record
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateCampaignDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-data-record">Create a marketing campaign data record Documentation</a>
     */
    public ApiResponse<CreateCampaignDataResponse> postCampaignDataRecordWithHttpInfo(CampaignDataPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postCampaignDataRecordValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateCampaignDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a marketing campaign data record (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-data-record">Create a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call postCampaignDataRecordAsync(CampaignDataPayload payload, final ApiCallback<CreateCampaignDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCampaignDataRecordValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateCampaignDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCampaignPlan
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-plan">Create a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call postCampaignPlanCall(CampaignPlanPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_plan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCampaignPlanValidateBeforeCall(CampaignPlanPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postCampaignPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = postCampaignPlanCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a marketing campaign plan
     * 
     * @param payload  (required)
     * @return CreateCampaignPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-plan">Create a marketing campaign plan Documentation</a>
     */
    public CreateCampaignPlanResponse postCampaignPlan(CampaignPlanPayload payload) throws ApiException {
        ApiResponse<CreateCampaignPlanResponse> resp = postCampaignPlanWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a marketing campaign plan
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateCampaignPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-plan">Create a marketing campaign plan Documentation</a>
     */
    public ApiResponse<CreateCampaignPlanResponse> postCampaignPlanWithHttpInfo(CampaignPlanPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postCampaignPlanValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateCampaignPlanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a marketing campaign plan (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-campaign-plan">Create a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call postCampaignPlanAsync(CampaignPlanPayload payload, final ApiCallback<CreateCampaignPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCampaignPlanValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateCampaignPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postChatLog
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-chat-log">Create a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call postChatLogCall(ChatPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/chat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postChatLogValidateBeforeCall(ChatPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postChatLog(Async)");
        }
        

        com.squareup.okhttp.Call call = postChatLogCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a chat log
     * 
     * @param payload  (required)
     * @return CreateChatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-chat-log">Create a chat log Documentation</a>
     */
    public CreateChatResponse postChatLog(ChatPayload payload) throws ApiException {
        ApiResponse<CreateChatResponse> resp = postChatLogWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a chat log
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateChatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-chat-log">Create a chat log Documentation</a>
     */
    public ApiResponse<CreateChatResponse> postChatLogWithHttpInfo(ChatPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postChatLogValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateChatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a chat log (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-chat-log">Create a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call postChatLogAsync(ChatPayload payload, final ApiCallback<CreateChatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postChatLogValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateChatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postClientCampaign
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Assign-a-client-to-a-campaign">Assign a client to a campaign to indicate the client has registered through the campaign specified Documentation</a>
     */
    public com.squareup.okhttp.Call postClientCampaignCall(ClientCampaignPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/client_campaign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postClientCampaignValidateBeforeCall(ClientCampaignPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postClientCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = postClientCampaignCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign a client to a campaign to indicate the client has registered through the campaign specified
     * 
     * @param payload  (required)
     * @return CreateClientCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Assign-a-client-to-a-campaign">Assign a client to a campaign to indicate the client has registered through the campaign specified Documentation</a>
     */
    public CreateClientCampaignResponse postClientCampaign(ClientCampaignPayload payload) throws ApiException {
        ApiResponse<CreateClientCampaignResponse> resp = postClientCampaignWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Assign a client to a campaign to indicate the client has registered through the campaign specified
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateClientCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Assign-a-client-to-a-campaign">Assign a client to a campaign to indicate the client has registered through the campaign specified Documentation</a>
     */
    public ApiResponse<CreateClientCampaignResponse> postClientCampaignWithHttpInfo(ClientCampaignPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postClientCampaignValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateClientCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign a client to a campaign to indicate the client has registered through the campaign specified (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Assign-a-client-to-a-campaign">Assign a client to a campaign to indicate the client has registered through the campaign specified Documentation</a>
     */
    public com.squareup.okhttp.Call postClientCampaignAsync(ClientCampaignPayload payload, final ApiCallback<CreateClientCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postClientCampaignValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateClientCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postConsultation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-consultation">Create a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call postConsultationCall(ConsultationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/consultation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConsultationValidateBeforeCall(ConsultationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postConsultation(Async)");
        }
        

        com.squareup.okhttp.Call call = postConsultationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a consultation
     * 
     * @param payload  (required)
     * @return CreateConsultationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-consultation">Create a consultation Documentation</a>
     */
    public CreateConsultationResponse postConsultation(ConsultationPayload payload) throws ApiException {
        ApiResponse<CreateConsultationResponse> resp = postConsultationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a consultation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateConsultationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-consultation">Create a consultation Documentation</a>
     */
    public ApiResponse<CreateConsultationResponse> postConsultationWithHttpInfo(ConsultationPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postConsultationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateConsultationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a consultation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-consultation">Create a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call postConsultationAsync(ConsultationPayload payload, final ApiCallback<CreateConsultationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConsultationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateConsultationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDocument
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-document">Create a document Documentation</a>
     */
    public com.squareup.okhttp.Call postDocumentCall(DocumentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDocumentValidateBeforeCall(DocumentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = postDocumentCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a document
     * 
     * @param payload  (required)
     * @return CreateDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-document">Create a document Documentation</a>
     */
    public CreateDocumentResponse postDocument(DocumentPayload payload) throws ApiException {
        ApiResponse<CreateDocumentResponse> resp = postDocumentWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a document
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-document">Create a document Documentation</a>
     */
    public ApiResponse<CreateDocumentResponse> postDocumentWithHttpInfo(DocumentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postDocumentValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a document (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-document">Create a document Documentation</a>
     */
    public com.squareup.okhttp.Call postDocumentAsync(DocumentPayload payload, final ApiCallback<CreateDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDocumentValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postFaq
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-an-FAQ">Create a faq Documentation</a>
     */
    public com.squareup.okhttp.Call postFaqCall(FaqPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/faq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postFaqValidateBeforeCall(FaqPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postFaq(Async)");
        }
        

        com.squareup.okhttp.Call call = postFaqCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a faq
     * 
     * @param payload  (required)
     * @return CreateFaqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-an-FAQ">Create a faq Documentation</a>
     */
    public CreateFaqResponse postFaq(FaqPayload payload) throws ApiException {
        ApiResponse<CreateFaqResponse> resp = postFaqWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a faq
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateFaqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-an-FAQ">Create a faq Documentation</a>
     */
    public ApiResponse<CreateFaqResponse> postFaqWithHttpInfo(FaqPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postFaqValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateFaqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a faq (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-an-FAQ">Create a faq Documentation</a>
     */
    public com.squareup.okhttp.Call postFaqAsync(FaqPayload payload, final ApiCallback<CreateFaqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postFaqValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateFaqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSalesInquiry
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-sales-inquiry">Create a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call postSalesInquiryCall(SalesPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/sales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSalesInquiryValidateBeforeCall(SalesPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postSalesInquiry(Async)");
        }
        

        com.squareup.okhttp.Call call = postSalesInquiryCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a sales inquiry
     * 
     * @param payload  (required)
     * @return CreateSalesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-sales-inquiry">Create a sales inquiry Documentation</a>
     */
    public CreateSalesResponse postSalesInquiry(SalesPayload payload) throws ApiException {
        ApiResponse<CreateSalesResponse> resp = postSalesInquiryWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a sales inquiry
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateSalesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-sales-inquiry">Create a sales inquiry Documentation</a>
     */
    public ApiResponse<CreateSalesResponse> postSalesInquiryWithHttpInfo(SalesPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postSalesInquiryValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateSalesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a sales inquiry (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-sales-inquiry">Create a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call postSalesInquiryAsync(SalesPayload payload, final ApiCallback<CreateSalesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSalesInquiryValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSalesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSupportTicket
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket">Create a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call postSupportTicketCall(SupportTicketPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSupportTicketValidateBeforeCall(SupportTicketPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postSupportTicket(Async)");
        }
        

        com.squareup.okhttp.Call call = postSupportTicketCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a support ticket
     * 
     * @param payload  (required)
     * @return CreateSupportTicketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket">Create a support ticket Documentation</a>
     */
    public CreateSupportTicketResponse postSupportTicket(SupportTicketPayload payload) throws ApiException {
        ApiResponse<CreateSupportTicketResponse> resp = postSupportTicketWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a support ticket
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateSupportTicketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket">Create a support ticket Documentation</a>
     */
    public ApiResponse<CreateSupportTicketResponse> postSupportTicketWithHttpInfo(SupportTicketPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postSupportTicketValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateSupportTicketResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a support ticket (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket">Create a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call postSupportTicketAsync(SupportTicketPayload payload, final ApiCallback<CreateSupportTicketResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSupportTicketValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSupportTicketResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postSupportTicketComment
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket-comment">Create a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call postSupportTicketCommentCall(SupportTicketCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postSupportTicketCommentValidateBeforeCall(SupportTicketCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling postSupportTicketComment(Async)");
        }
        

        com.squareup.okhttp.Call call = postSupportTicketCommentCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a support ticket comment
     * 
     * @param payload  (required)
     * @return CreateSupportTicketCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket-comment">Create a support ticket comment Documentation</a>
     */
    public CreateSupportTicketCommentResponse postSupportTicketComment(SupportTicketCommentPayload payload) throws ApiException {
        ApiResponse<CreateSupportTicketCommentResponse> resp = postSupportTicketCommentWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Create a support ticket comment
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;CreateSupportTicketCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket-comment">Create a support ticket comment Documentation</a>
     */
    public ApiResponse<CreateSupportTicketCommentResponse> postSupportTicketCommentWithHttpInfo(SupportTicketCommentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = postSupportTicketCommentValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<CreateSupportTicketCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a support ticket comment (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Create-a-support-ticket-comment">Create a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call postSupportTicketCommentAsync(SupportTicketCommentPayload payload, final ApiCallback<CreateSupportTicketCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postSupportTicketCommentValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateSupportTicketCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCampaign
     * @param campaignId UUID of a marketing campaign (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-marketing-campaign">Update a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call updateCampaignCall(UUID campaignId, ClientCampaignPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign/{campaign_id}"
            .replaceAll("\\{" + "campaign_id" + "\\}", apiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCampaignValidateBeforeCall(UUID campaignId, ClientCampaignPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateCampaign(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCampaignCall(campaignId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a marketing campaign
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @param payload  (required)
     * @return SpecificCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-marketing-campaign">Update a marketing campaign Documentation</a>
     */
    public SpecificCampaignResponse updateCampaign(UUID campaignId, ClientCampaignPayload payload) throws ApiException {
        ApiResponse<SpecificCampaignResponse> resp = updateCampaignWithHttpInfo(campaignId, payload);
        return resp.getData();
    }

    /**
     * Update a marketing campaign
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-marketing-campaign">Update a marketing campaign Documentation</a>
     */
    public ApiResponse<SpecificCampaignResponse> updateCampaignWithHttpInfo(UUID campaignId, ClientCampaignPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateCampaignValidateBeforeCall(campaignId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a marketing campaign (asynchronously)
     * 
     * @param campaignId UUID of a marketing campaign (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-marketing-campaign">Update a marketing campaign Documentation</a>
     */
    public com.squareup.okhttp.Call updateCampaignAsync(UUID campaignId, ClientCampaignPayload payload, final ApiCallback<SpecificCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCampaignValidateBeforeCall(campaignId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCampaignDataRecord
     * @param campaignDataId UUID of a campaign data record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-data-record">Update a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call updateCampaignDataRecordCall(UUID campaignDataId, CampaignDataPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_data/{campaign_data_id}"
            .replaceAll("\\{" + "campaign_data_id" + "\\}", apiClient.escapeString(campaignDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCampaignDataRecordValidateBeforeCall(UUID campaignDataId, CampaignDataPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignDataId' is set
        if (campaignDataId == null) {
            throw new ApiException("Missing the required parameter 'campaignDataId' when calling updateCampaignDataRecord(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateCampaignDataRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCampaignDataRecordCall(campaignDataId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a marketing campaign data record
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @param payload  (required)
     * @return SpecificCampaignDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-data-record">Update a marketing campaign data record Documentation</a>
     */
    public SpecificCampaignDataResponse updateCampaignDataRecord(UUID campaignDataId, CampaignDataPayload payload) throws ApiException {
        ApiResponse<SpecificCampaignDataResponse> resp = updateCampaignDataRecordWithHttpInfo(campaignDataId, payload);
        return resp.getData();
    }

    /**
     * Update a marketing campaign data record
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificCampaignDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-data-record">Update a marketing campaign data record Documentation</a>
     */
    public ApiResponse<SpecificCampaignDataResponse> updateCampaignDataRecordWithHttpInfo(UUID campaignDataId, CampaignDataPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateCampaignDataRecordValidateBeforeCall(campaignDataId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificCampaignDataResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a marketing campaign data record (asynchronously)
     * 
     * @param campaignDataId UUID of a campaign data record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-data-record">Update a marketing campaign data record Documentation</a>
     */
    public com.squareup.okhttp.Call updateCampaignDataRecordAsync(UUID campaignDataId, CampaignDataPayload payload, final ApiCallback<SpecificCampaignDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCampaignDataRecordValidateBeforeCall(campaignDataId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificCampaignDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCampaignPlan
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-plan">Update a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call updateCampaignPlanCall(UUID campaignPlanId, CampaignPlanPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/campaign_plan/{campaign_plan_id}"
            .replaceAll("\\{" + "campaign_plan_id" + "\\}", apiClient.escapeString(campaignPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCampaignPlanValidateBeforeCall(UUID campaignPlanId, CampaignPlanPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'campaignPlanId' is set
        if (campaignPlanId == null) {
            throw new ApiException("Missing the required parameter 'campaignPlanId' when calling updateCampaignPlan(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateCampaignPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCampaignPlanCall(campaignPlanId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a marketing campaign plan
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param payload  (required)
     * @return SpecificCampaignPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-plan">Update a marketing campaign plan Documentation</a>
     */
    public SpecificCampaignPlanResponse updateCampaignPlan(UUID campaignPlanId, CampaignPlanPayload payload) throws ApiException {
        ApiResponse<SpecificCampaignPlanResponse> resp = updateCampaignPlanWithHttpInfo(campaignPlanId, payload);
        return resp.getData();
    }

    /**
     * Update a marketing campaign plan
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificCampaignPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-plan">Update a marketing campaign plan Documentation</a>
     */
    public ApiResponse<SpecificCampaignPlanResponse> updateCampaignPlanWithHttpInfo(UUID campaignPlanId, CampaignPlanPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateCampaignPlanValidateBeforeCall(campaignPlanId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificCampaignPlanResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a marketing campaign plan (asynchronously)
     * 
     * @param campaignPlanId UUID of a campaign plan (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-campaign-plan">Update a marketing campaign plan Documentation</a>
     */
    public com.squareup.okhttp.Call updateCampaignPlanAsync(UUID campaignPlanId, CampaignPlanPayload payload, final ApiCallback<SpecificCampaignPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCampaignPlanValidateBeforeCall(campaignPlanId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificCampaignPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateChatLog
     * @param chatId UUID of a chat record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-chat-log">Update a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call updateChatLogCall(UUID chatId, ChatPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/chat/{chat_id}"
            .replaceAll("\\{" + "chat_id" + "\\}", apiClient.escapeString(chatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateChatLogValidateBeforeCall(UUID chatId, ChatPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'chatId' is set
        if (chatId == null) {
            throw new ApiException("Missing the required parameter 'chatId' when calling updateChatLog(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateChatLog(Async)");
        }
        

        com.squareup.okhttp.Call call = updateChatLogCall(chatId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a chat log
     * 
     * @param chatId UUID of a chat record (required)
     * @param payload  (required)
     * @return SpecificChatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-chat-log">Update a chat log Documentation</a>
     */
    public SpecificChatResponse updateChatLog(UUID chatId, ChatPayload payload) throws ApiException {
        ApiResponse<SpecificChatResponse> resp = updateChatLogWithHttpInfo(chatId, payload);
        return resp.getData();
    }

    /**
     * Update a chat log
     * 
     * @param chatId UUID of a chat record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificChatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-chat-log">Update a chat log Documentation</a>
     */
    public ApiResponse<SpecificChatResponse> updateChatLogWithHttpInfo(UUID chatId, ChatPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateChatLogValidateBeforeCall(chatId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificChatResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a chat log (asynchronously)
     * 
     * @param chatId UUID of a chat record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-chat-log">Update a chat log Documentation</a>
     */
    public com.squareup.okhttp.Call updateChatLogAsync(UUID chatId, ChatPayload payload, final ApiCallback<SpecificChatResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChatLogValidateBeforeCall(chatId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificChatResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientCampaign
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-client-assigned-to-a-campaign">Update a client assigned to a campaign Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientCampaignCall(UUID clientCampaignId, ClientCampaignPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/client_campaign/{client_campaign_id}"
            .replaceAll("\\{" + "client_campaign_id" + "\\}", apiClient.escapeString(clientCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientCampaignValidateBeforeCall(UUID clientCampaignId, ClientCampaignPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'clientCampaignId' is set
        if (clientCampaignId == null) {
            throw new ApiException("Missing the required parameter 'clientCampaignId' when calling updateClientCampaign(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateClientCampaign(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientCampaignCall(clientCampaignId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a client assigned to a campaign
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param payload  (required)
     * @return SpecificClientCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-client-assigned-to-a-campaign">Update a client assigned to a campaign Documentation</a>
     */
    public SpecificClientCampaignResponse updateClientCampaign(UUID clientCampaignId, ClientCampaignPayload payload) throws ApiException {
        ApiResponse<SpecificClientCampaignResponse> resp = updateClientCampaignWithHttpInfo(clientCampaignId, payload);
        return resp.getData();
    }

    /**
     * Update a client assigned to a campaign
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificClientCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-client-assigned-to-a-campaign">Update a client assigned to a campaign Documentation</a>
     */
    public ApiResponse<SpecificClientCampaignResponse> updateClientCampaignWithHttpInfo(UUID clientCampaignId, ClientCampaignPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateClientCampaignValidateBeforeCall(clientCampaignId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificClientCampaignResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a client assigned to a campaign (asynchronously)
     * 
     * @param clientCampaignId UUID of a client campaign record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-client-assigned-to-a-campaign">Update a client assigned to a campaign Documentation</a>
     */
    public com.squareup.okhttp.Call updateClientCampaignAsync(UUID clientCampaignId, ClientCampaignPayload payload, final ApiCallback<SpecificClientCampaignResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientCampaignValidateBeforeCall(clientCampaignId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificClientCampaignResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateConsultation
     * @param consultationId UUID of a consultation record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-consultation">Update a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call updateConsultationCall(UUID consultationId, ConsultationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/consultation/{consultation_id}"
            .replaceAll("\\{" + "consultation_id" + "\\}", apiClient.escapeString(consultationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateConsultationValidateBeforeCall(UUID consultationId, ConsultationPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'consultationId' is set
        if (consultationId == null) {
            throw new ApiException("Missing the required parameter 'consultationId' when calling updateConsultation(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateConsultation(Async)");
        }
        

        com.squareup.okhttp.Call call = updateConsultationCall(consultationId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a consultation
     * 
     * @param consultationId UUID of a consultation record (required)
     * @param payload  (required)
     * @return SpecificConsultationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-consultation">Update a consultation Documentation</a>
     */
    public SpecificConsultationResponse updateConsultation(UUID consultationId, ConsultationPayload payload) throws ApiException {
        ApiResponse<SpecificConsultationResponse> resp = updateConsultationWithHttpInfo(consultationId, payload);
        return resp.getData();
    }

    /**
     * Update a consultation
     * 
     * @param consultationId UUID of a consultation record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificConsultationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-consultation">Update a consultation Documentation</a>
     */
    public ApiResponse<SpecificConsultationResponse> updateConsultationWithHttpInfo(UUID consultationId, ConsultationPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateConsultationValidateBeforeCall(consultationId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificConsultationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a consultation (asynchronously)
     * 
     * @param consultationId UUID of a consultation record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-consultation">Update a consultation Documentation</a>
     */
    public com.squareup.okhttp.Call updateConsultationAsync(UUID consultationId, ConsultationPayload payload, final ApiCallback<SpecificConsultationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateConsultationValidateBeforeCall(consultationId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificConsultationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDocument
     * @param documentId UUID of a document (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-document">Update a document Documentation</a>
     */
    public com.squareup.okhttp.Call updateDocumentCall(UUID documentId, DocumentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/document/{document_id}"
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDocumentValidateBeforeCall(UUID documentId, DocumentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateDocument(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateDocument(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDocumentCall(documentId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a document
     * 
     * @param documentId UUID of a document (required)
     * @param payload  (required)
     * @return SpecificDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-document">Update a document Documentation</a>
     */
    public SpecificDocumentResponse updateDocument(UUID documentId, DocumentPayload payload) throws ApiException {
        ApiResponse<SpecificDocumentResponse> resp = updateDocumentWithHttpInfo(documentId, payload);
        return resp.getData();
    }

    /**
     * Update a document
     * 
     * @param documentId UUID of a document (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-document">Update a document Documentation</a>
     */
    public ApiResponse<SpecificDocumentResponse> updateDocumentWithHttpInfo(UUID documentId, DocumentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateDocumentValidateBeforeCall(documentId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificDocumentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a document (asynchronously)
     * 
     * @param documentId UUID of a document (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-document">Update a document Documentation</a>
     */
    public com.squareup.okhttp.Call updateDocumentAsync(UUID documentId, DocumentPayload payload, final ApiCallback<SpecificDocumentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDocumentValidateBeforeCall(documentId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificDocumentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFaq
     * @param faqId UUID of a FAQ (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-an-FAQ">Update a FAQ Documentation</a>
     */
    public com.squareup.okhttp.Call updateFaqCall(UUID faqId, FaqPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/faq/{faq_id}"
            .replaceAll("\\{" + "faq_id" + "\\}", apiClient.escapeString(faqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFaqValidateBeforeCall(UUID faqId, FaqPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'faqId' is set
        if (faqId == null) {
            throw new ApiException("Missing the required parameter 'faqId' when calling updateFaq(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateFaq(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFaqCall(faqId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a FAQ
     * 
     * @param faqId UUID of a FAQ (required)
     * @param payload  (required)
     * @return SpecificFaqResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-an-FAQ">Update a FAQ Documentation</a>
     */
    public SpecificFaqResponse updateFaq(UUID faqId, FaqPayload payload) throws ApiException {
        ApiResponse<SpecificFaqResponse> resp = updateFaqWithHttpInfo(faqId, payload);
        return resp.getData();
    }

    /**
     * Update a FAQ
     * 
     * @param faqId UUID of a FAQ (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificFaqResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-an-FAQ">Update a FAQ Documentation</a>
     */
    public ApiResponse<SpecificFaqResponse> updateFaqWithHttpInfo(UUID faqId, FaqPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateFaqValidateBeforeCall(faqId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificFaqResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a FAQ (asynchronously)
     * 
     * @param faqId UUID of a FAQ (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-an-FAQ">Update a FAQ Documentation</a>
     */
    public com.squareup.okhttp.Call updateFaqAsync(UUID faqId, FaqPayload payload, final ApiCallback<SpecificFaqResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFaqValidateBeforeCall(faqId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificFaqResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSalesInquiry
     * @param salesId UUID of a sales record (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Update a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call updateSalesInquiryCall(UUID salesId, SalesPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/sales/{sales_id}"
            .replaceAll("\\{" + "sales_id" + "\\}", apiClient.escapeString(salesId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSalesInquiryValidateBeforeCall(UUID salesId, SalesPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesId' is set
        if (salesId == null) {
            throw new ApiException("Missing the required parameter 'salesId' when calling updateSalesInquiry(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateSalesInquiry(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSalesInquiryCall(salesId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a sales inquiry
     * 
     * @param salesId UUID of a sales record (required)
     * @param payload  (required)
     * @return SpecificSalesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Update a sales inquiry Documentation</a>
     */
    public SpecificSalesResponse updateSalesInquiry(UUID salesId, SalesPayload payload) throws ApiException {
        ApiResponse<SpecificSalesResponse> resp = updateSalesInquiryWithHttpInfo(salesId, payload);
        return resp.getData();
    }

    /**
     * Update a sales inquiry
     * 
     * @param salesId UUID of a sales record (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificSalesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Update a sales inquiry Documentation</a>
     */
    public ApiResponse<SpecificSalesResponse> updateSalesInquiryWithHttpInfo(UUID salesId, SalesPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateSalesInquiryValidateBeforeCall(salesId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificSalesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a sales inquiry (asynchronously)
     * 
     * @param salesId UUID of a sales record (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-sales-inquiry">Update a sales inquiry Documentation</a>
     */
    public com.squareup.okhttp.Call updateSalesInquiryAsync(UUID salesId, SalesPayload payload, final ApiCallback<SpecificSalesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSalesInquiryValidateBeforeCall(salesId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSalesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSupportTicket
     * @param supportTicketId UUID of a support ticket (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket">Update a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call updateSupportTicketCall(UUID supportTicketId, SupportTicketPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket/{support_ticket_id}"
            .replaceAll("\\{" + "support_ticket_id" + "\\}", apiClient.escapeString(supportTicketId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSupportTicketValidateBeforeCall(UUID supportTicketId, SupportTicketPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supportTicketId' is set
        if (supportTicketId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketId' when calling updateSupportTicket(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateSupportTicket(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSupportTicketCall(supportTicketId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a support ticket
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @param payload  (required)
     * @return SpecificSupportTicketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket">Update a support ticket Documentation</a>
     */
    public SpecificSupportTicketResponse updateSupportTicket(UUID supportTicketId, SupportTicketPayload payload) throws ApiException {
        ApiResponse<SpecificSupportTicketResponse> resp = updateSupportTicketWithHttpInfo(supportTicketId, payload);
        return resp.getData();
    }

    /**
     * Update a support ticket
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificSupportTicketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket">Update a support ticket Documentation</a>
     */
    public ApiResponse<SpecificSupportTicketResponse> updateSupportTicketWithHttpInfo(UUID supportTicketId, SupportTicketPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateSupportTicketValidateBeforeCall(supportTicketId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a support ticket (asynchronously)
     * 
     * @param supportTicketId UUID of a support ticket (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket">Update a support ticket Documentation</a>
     */
    public com.squareup.okhttp.Call updateSupportTicketAsync(UUID supportTicketId, SupportTicketPayload payload, final ApiCallback<SpecificSupportTicketResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSupportTicketValidateBeforeCall(supportTicketId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSupportTicketComment
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket-comment">Update a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call updateSupportTicketCommentCall(UUID supportTicketCommentId, SupportTicketCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/electron/v1/support_ticket_comment/{support_ticket_comment_id}"
            .replaceAll("\\{" + "support_ticket_comment_id" + "\\}", apiClient.escapeString(supportTicketCommentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSupportTicketCommentValidateBeforeCall(UUID supportTicketCommentId, SupportTicketCommentPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supportTicketCommentId' is set
        if (supportTicketCommentId == null) {
            throw new ApiException("Missing the required parameter 'supportTicketCommentId' when calling updateSupportTicketComment(Async)");
        }
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling updateSupportTicketComment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSupportTicketCommentCall(supportTicketCommentId, payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a support ticket comment
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param payload  (required)
     * @return SpecificSupportTicketCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket-comment">Update a support ticket comment Documentation</a>
     */
    public SpecificSupportTicketCommentResponse updateSupportTicketComment(UUID supportTicketCommentId, SupportTicketCommentPayload payload) throws ApiException {
        ApiResponse<SpecificSupportTicketCommentResponse> resp = updateSupportTicketCommentWithHttpInfo(supportTicketCommentId, payload);
        return resp.getData();
    }

    /**
     * Update a support ticket comment
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param payload  (required)
     * @return ApiResponse&lt;SpecificSupportTicketCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket-comment">Update a support ticket comment Documentation</a>
     */
    public ApiResponse<SpecificSupportTicketCommentResponse> updateSupportTicketCommentWithHttpInfo(UUID supportTicketCommentId, SupportTicketCommentPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = updateSupportTicketCommentValidateBeforeCall(supportTicketCommentId, payload, null, null);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a support ticket comment (asynchronously)
     * 
     * @param supportTicketCommentId UUID of a support ticket comment (required)
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/electron/v1/#Update-a-support-ticket-comment">Update a support ticket comment Documentation</a>
     */
    public com.squareup.okhttp.Call updateSupportTicketCommentAsync(UUID supportTicketCommentId, SupportTicketCommentPayload payload, final ApiCallback<SpecificSupportTicketCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSupportTicketCommentValidateBeforeCall(supportTicketCommentId, payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpecificSupportTicketCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
