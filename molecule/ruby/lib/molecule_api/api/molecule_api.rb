=begin
#Hydrogen Molecule API

#The Hydrogen Molecule API

OpenAPI spec version: 1.0.0
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8-SNAPSHOT

=end

require 'uri'

module MoleculeApi
  class MoleculeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a token
    # @param token_id UUID of a token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_token(token_id, opts = {})
      delete_token_with_http_info(token_id, opts)
      nil
    end

    # Delete a token
    # @param token_id UUID of a token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_token_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.delete_token ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling MoleculeApi.delete_token"
      end
      # resource path
      local_var_path = '/molecule/v1/token/{token_id}/'.sub('{' + 'token_id' + '}', token_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#delete_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a webhook
    # @param webhook_id UUID of a webhook
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_webhook(webhook_id, opts = {})
      delete_webhook_with_http_info(webhook_id, opts)
      nil
    end

    # Delete a webhook
    # @param webhook_id UUID of a webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_webhook_with_http_info(webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.delete_webhook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling MoleculeApi.delete_webhook"
      end
      # resource path
      local_var_path = '/molecule/v1/webhook/{webhook_id}/'.sub('{' + 'webhook_id' + '}', webhook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#delete_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a currency balance
    # @param currency_balance_id UUID of a currency balance
    # @param [Hash] opts the optional parameters
    # @return [CurrencyBalanceSpecificResponse]
    def get_currency_balance(currency_balance_id, opts = {})
      data, _status_code, _headers = get_currency_balance_with_http_info(currency_balance_id, opts)
      data
    end

    # Retrieve a currency balance
    # @param currency_balance_id UUID of a currency balance
    # @param [Hash] opts the optional parameters
    # @return [Array<(CurrencyBalanceSpecificResponse, Fixnum, Hash)>] CurrencyBalanceSpecificResponse data, response status code and response headers
    def get_currency_balance_with_http_info(currency_balance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_currency_balance ...'
      end
      # verify the required parameter 'currency_balance_id' is set
      if @api_client.config.client_side_validation && currency_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'currency_balance_id' when calling MoleculeApi.get_currency_balance"
      end
      # resource path
      local_var_path = '/molecule/v1/currency_balance/{currency_balance_id}'.sub('{' + 'currency_balance_id' + '}', currency_balance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CurrencyBalanceSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_currency_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all currency balances recorded in your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [CurrencyBalanceGetResponse]
    def get_currency_balances(opts = {})
      data, _status_code, _headers = get_currency_balances_with_http_info(opts)
      data
    end

    # Get information for all currency balances recorded in your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(CurrencyBalanceGetResponse, Fixnum, Hash)>] CurrencyBalanceGetResponse data, response status code and response headers
    def get_currency_balances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_currency_balances ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_currency_balances, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_currency_balances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/currency_balance'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CurrencyBalanceGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_currency_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a currency transfer
    # @param currency_transfer_id UUID of a currency transfer
    # @param [Hash] opts the optional parameters
    # @return [CurrencyTransferSpecificResponse]
    def get_currency_transfer(currency_transfer_id, opts = {})
      data, _status_code, _headers = get_currency_transfer_with_http_info(currency_transfer_id, opts)
      data
    end

    # Retrieve a currency transfer
    # @param currency_transfer_id UUID of a currency transfer
    # @param [Hash] opts the optional parameters
    # @return [Array<(CurrencyTransferSpecificResponse, Fixnum, Hash)>] CurrencyTransferSpecificResponse data, response status code and response headers
    def get_currency_transfer_with_http_info(currency_transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_currency_transfer ...'
      end
      # verify the required parameter 'currency_transfer_id' is set
      if @api_client.config.client_side_validation && currency_transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'currency_transfer_id' when calling MoleculeApi.get_currency_transfer"
      end
      # resource path
      local_var_path = '/molecule/v1/currency_transfer/{currency_transfer_id}'.sub('{' + 'currency_transfer_id' + '}', currency_transfer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CurrencyTransferSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_currency_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all currency transfers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [CurrencyTransferGetResponse]
    def get_currency_transfers(opts = {})
      data, _status_code, _headers = get_currency_transfers_with_http_info(opts)
      data
    end

    # Get information for all currency transfers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(CurrencyTransferGetResponse, Fixnum, Hash)>] CurrencyTransferGetResponse data, response status code and response headers
    def get_currency_transfers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_currency_transfers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_currency_transfers, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_currency_transfers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/currency_transfer'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CurrencyTransferGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_currency_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a token
    # @param token_id UUID of a token
    # @param [Hash] opts the optional parameters
    # @return [TokenSpecificResponse]
    def get_token(token_id, opts = {})
      data, _status_code, _headers = get_token_with_http_info(token_id, opts)
      data
    end

    # Retrieve a token
    # @param token_id UUID of a token
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenSpecificResponse, Fixnum, Hash)>] TokenSpecificResponse data, response status code and response headers
    def get_token_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_token ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling MoleculeApi.get_token"
      end
      # resource path
      local_var_path = '/molecule/v1/token/{token_id}/'.sub('{' + 'token_id' + '}', token_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a token balance
    # @param token_balance_id UUID of a token balance
    # @param [Hash] opts the optional parameters
    # @return [TokenBalanceSpecificResponse]
    def get_token_balance(token_balance_id, opts = {})
      data, _status_code, _headers = get_token_balance_with_http_info(token_balance_id, opts)
      data
    end

    # Retrieve a token balance
    # @param token_balance_id UUID of a token balance
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenBalanceSpecificResponse, Fixnum, Hash)>] TokenBalanceSpecificResponse data, response status code and response headers
    def get_token_balance_with_http_info(token_balance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_token_balance ...'
      end
      # verify the required parameter 'token_balance_id' is set
      if @api_client.config.client_side_validation && token_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_balance_id' when calling MoleculeApi.get_token_balance"
      end
      # resource path
      local_var_path = '/molecule/v1/token_balance/{token_balance_id}'.sub('{' + 'token_balance_id' + '}', token_balance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenBalanceSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_token_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all token balances defined for your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [TokenBalanceGetResponse]
    def get_token_balances(opts = {})
      data, _status_code, _headers = get_token_balances_with_http_info(opts)
      data
    end

    # Get information for all token balances defined for your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(TokenBalanceGetResponse, Fixnum, Hash)>] TokenBalanceGetResponse data, response status code and response headers
    def get_token_balances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_token_balances ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_token_balances, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_token_balances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/token_balance'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenBalanceGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_token_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all token supplies defined for your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [TokenSupplyGetResponse]
    def get_token_supplies(opts = {})
      data, _status_code, _headers = get_token_supplies_with_http_info(opts)
      data
    end

    # Get information for all token supplies defined for your application.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(TokenSupplyGetResponse, Fixnum, Hash)>] TokenSupplyGetResponse data, response status code and response headers
    def get_token_supplies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_token_supplies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_token_supplies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_token_supplies, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/token_supply'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenSupplyGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_token_supplies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a token supply
    # @param token_supply_id UUID of a token supply
    # @param [Hash] opts the optional parameters
    # @return [TokenSupplySpecificResponse]
    def get_token_supply(token_supply_id, opts = {})
      data, _status_code, _headers = get_token_supply_with_http_info(token_supply_id, opts)
      data
    end

    # Retrieve a token supply
    # @param token_supply_id UUID of a token supply
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenSupplySpecificResponse, Fixnum, Hash)>] TokenSupplySpecificResponse data, response status code and response headers
    def get_token_supply_with_http_info(token_supply_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_token_supply ...'
      end
      # verify the required parameter 'token_supply_id' is set
      if @api_client.config.client_side_validation && token_supply_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_supply_id' when calling MoleculeApi.get_token_supply"
      end
      # resource path
      local_var_path = '/molecule/v1/token_supply/{token_supply_id}'.sub('{' + 'token_supply_id' + '}', token_supply_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenSupplySpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_token_supply\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a token transfer
    # @param token_transfer_id UUID of a token transfer
    # @param [Hash] opts the optional parameters
    # @return [TokenTransferSpecificResponse]
    def get_token_transfer(token_transfer_id, opts = {})
      data, _status_code, _headers = get_token_transfer_with_http_info(token_transfer_id, opts)
      data
    end

    # Retrieve a token transfer
    # @param token_transfer_id UUID of a token transfer
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenTransferSpecificResponse, Fixnum, Hash)>] TokenTransferSpecificResponse data, response status code and response headers
    def get_token_transfer_with_http_info(token_transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_token_transfer ...'
      end
      # verify the required parameter 'token_transfer_id' is set
      if @api_client.config.client_side_validation && token_transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_transfer_id' when calling MoleculeApi.get_token_transfer"
      end
      # resource path
      local_var_path = '/molecule/v1/token_transfer/{token_transfer_id}'.sub('{' + 'token_transfer_id' + '}', token_transfer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenTransferSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_token_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all token transfers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [TokenTransferGetResponse]
    def get_token_transfers(opts = {})
      data, _status_code, _headers = get_token_transfers_with_http_info(opts)
      data
    end

    # Get information for all token transfers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(TokenTransferGetResponse, Fixnum, Hash)>] TokenTransferGetResponse data, response status code and response headers
    def get_token_transfers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_token_transfers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_token_transfers, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_token_transfers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/token_transfer'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenTransferGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_token_transfers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all tokens defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @return [TokenGetResponse]
    def get_tokens(opts = {})
      data, _status_code, _headers = get_tokens_with_http_info(opts)
      data
    end

    # Get information for all tokens defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @return [Array<(TokenGetResponse, Fixnum, Hash)>] TokenGetResponse data, response status code and response headers
    def get_tokens_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_tokens ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_tokens, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_tokens, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/token'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve status information for a specific transaction
    # @param transaction_status_id UUID of a transaction status
    # @param [Hash] opts the optional parameters
    # @return [TransactionStatusSpecificResponse]
    def get_transaction_status(transaction_status_id, opts = {})
      data, _status_code, _headers = get_transaction_status_with_http_info(transaction_status_id, opts)
      data
    end

    # Retrieve status information for a specific transaction
    # @param transaction_status_id UUID of a transaction status
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionStatusSpecificResponse, Fixnum, Hash)>] TransactionStatusSpecificResponse data, response status code and response headers
    def get_transaction_status_with_http_info(transaction_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_transaction_status ...'
      end
      # verify the required parameter 'transaction_status_id' is set
      if @api_client.config.client_side_validation && transaction_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_status_id' when calling MoleculeApi.get_transaction_status"
      end
      # resource path
      local_var_path = '/molecule/v1/transaction_status/{transaction_status_id}'.sub('{' + 'transaction_status_id' + '}', transaction_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionStatusSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_transaction_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get status information for all transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [TransactionStatusGetResponse]
    def get_transaction_statuses(opts = {})
      data, _status_code, _headers = get_transaction_statuses_with_http_info(opts)
      data
    end

    # Get status information for all transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Certain fields within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(TransactionStatusGetResponse, Fixnum, Hash)>] TransactionStatusGetResponse data, response status code and response headers
    def get_transaction_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_transaction_statuses ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_transaction_statuses, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_transaction_statuses, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/transaction_status'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionStatusGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_transaction_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a wallet
    # @param wallet_id UUID of a wallet
    # @param [Hash] opts the optional parameters
    # @return [WalletSpecificResponse]
    def get_wallet(wallet_id, opts = {})
      data, _status_code, _headers = get_wallet_with_http_info(wallet_id, opts)
      data
    end

    # Retrieve a wallet
    # @param wallet_id UUID of a wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletSpecificResponse, Fixnum, Hash)>] WalletSpecificResponse data, response status code and response headers
    def get_wallet_with_http_info(wallet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_wallet ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling MoleculeApi.get_wallet"
      end
      # resource path
      local_var_path = '/molecule/v1/wallet/{wallet_id}/'.sub('{' + 'wallet_id' + '}', wallet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a wallet key
    # @param wallet_key_id UUID of a wallet key
    # @param [Hash] opts the optional parameters
    # @return [WalletKeySpecificResponse]
    def get_wallet_key(wallet_key_id, opts = {})
      data, _status_code, _headers = get_wallet_key_with_http_info(wallet_key_id, opts)
      data
    end

    # Retrieve a wallet key
    # @param wallet_key_id UUID of a wallet key
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletKeySpecificResponse, Fixnum, Hash)>] WalletKeySpecificResponse data, response status code and response headers
    def get_wallet_key_with_http_info(wallet_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_wallet_key ...'
      end
      # verify the required parameter 'wallet_key_id' is set
      if @api_client.config.client_side_validation && wallet_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_key_id' when calling MoleculeApi.get_wallet_key"
      end
      # resource path
      local_var_path = '/molecule/v1/wallet_key/{wallet_key_id}/'.sub('{' + 'wallet_key_id' + '}', wallet_key_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletKeySpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_wallet_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all wallet keys associated with wallets defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @return [WalletKeyGetResponse]
    def get_wallet_keys(opts = {})
      data, _status_code, _headers = get_wallet_keys_with_http_info(opts)
      data
    end

    # Get all wallet keys associated with wallets defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @return [Array<(WalletKeyGetResponse, Fixnum, Hash)>] WalletKeyGetResponse data, response status code and response headers
    def get_wallet_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_wallet_keys ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_wallet_keys, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_wallet_keys, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/wallet_key'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletKeyGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_wallet_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all wallets defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @return [WalletGetResponse]
    def get_wallets(opts = {})
      data, _status_code, _headers = get_wallets_with_http_info(opts)
      data
    end

    # Get information for all wallets defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @return [Array<(WalletGetResponse, Fixnum, Hash)>] WalletGetResponse data, response status code and response headers
    def get_wallets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_wallets ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_wallets, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_wallets, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/wallet'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_wallets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a webhook
    # @param webhook_id UUID of a webhook
    # @param [Hash] opts the optional parameters
    # @return [WebhookSpecificResponse]
    def get_webhook(webhook_id, opts = {})
      data, _status_code, _headers = get_webhook_with_http_info(webhook_id, opts)
      data
    end

    # Retrieve a webhook
    # @param webhook_id UUID of a webhook
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSpecificResponse, Fixnum, Hash)>] WebhookSpecificResponse data, response status code and response headers
    def get_webhook_with_http_info(webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_webhook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling MoleculeApi.get_webhook"
      end
      # resource path
      local_var_path = '/molecule/v1/webhook/{webhook_id}/'.sub('{' + 'webhook_id' + '}', webhook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all webhooks defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @return [WebhookGetResponse]
    def get_webhooks(opts = {})
      data, _status_code, _headers = get_webhooks_with_http_info(opts)
      data
    end

    # Get information for all webhooks defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @return [Array<(WebhookGetResponse, Fixnum, Hash)>] WebhookGetResponse data, response status code and response headers
    def get_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.get_webhooks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling MoleculeApi.get_webhooks, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling MoleculeApi.get_webhooks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/molecule/v1/webhook'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#get_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploy a token's crowdsale contract.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationResponse]
    def post_crowdsale_deploy(payload, opts = {})
      data, _status_code, _headers = post_crowdsale_deploy_with_http_info(payload, opts)
      data
    end

    # Deploy a token&#39;s crowdsale contract.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def post_crowdsale_deploy_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_crowdsale_deploy ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_crowdsale_deploy"
      end
      # resource path
      local_var_path = '/molecule/v1/crowdsale/deploy'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_crowdsale_deploy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer tokens to a token's crowdsale address.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationResponse]
    def post_crowdsale_fund(payload, opts = {})
      data, _status_code, _headers = post_crowdsale_fund_with_http_info(payload, opts)
      data
    end

    # Transfer tokens to a token&#39;s crowdsale address.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def post_crowdsale_fund_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_crowdsale_fund ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_crowdsale_fund"
      end
      # resource path
      local_var_path = '/molecule/v1/crowdsale/fund'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_crowdsale_fund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Purchase tokens from a crowdsale contract
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationResponse]
    def post_crowdsale_purchase(payload, opts = {})
      data, _status_code, _headers = post_crowdsale_purchase_with_http_info(payload, opts)
      data
    end

    # Purchase tokens from a crowdsale contract
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def post_crowdsale_purchase_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_crowdsale_purchase ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_crowdsale_purchase"
      end
      # resource path
      local_var_path = '/molecule/v1/crowdsale/purchase'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_crowdsale_purchase\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer currency between wallets
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationResponse]
    def post_currency_transfer(payload, opts = {})
      data, _status_code, _headers = post_currency_transfer_with_http_info(payload, opts)
      data
    end

    # Transfer currency between wallets
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def post_currency_transfer_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_currency_transfer ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_currency_transfer"
      end
      # resource path
      local_var_path = '/molecule/v1/currency_transfer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_currency_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a token under your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [TokenCreateResponse]
    def post_token(payload, opts = {})
      data, _status_code, _headers = post_token_with_http_info(payload, opts)
      data
    end

    # Create a token under your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenCreateResponse, Fixnum, Hash)>] TokenCreateResponse data, response status code and response headers
    def post_token_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_token ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_token"
      end
      # resource path
      local_var_path = '/molecule/v1/token'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deploy a security token contract to blockchain.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationResponse]
    def post_token_deploy(payload, opts = {})
      data, _status_code, _headers = post_token_deploy_with_http_info(payload, opts)
      data
    end

    # Deploy a security token contract to blockchain.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def post_token_deploy_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_token_deploy ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_token_deploy"
      end
      # resource path
      local_var_path = '/molecule/v1/token/deploy'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_token_deploy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Transfer tokens between wallets
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationResponse]
    def post_token_transfer(payload, opts = {})
      data, _status_code, _headers = post_token_transfer_with_http_info(payload, opts)
      data
    end

    # Transfer tokens between wallets
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def post_token_transfer_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_token_transfer ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_token_transfer"
      end
      # resource path
      local_var_path = '/molecule/v1/token_transfer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_token_transfer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add an investor to a token's whitelist
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [AsyncOperationResponse]
    def post_token_whitelist(payload, opts = {})
      data, _status_code, _headers = post_token_whitelist_with_http_info(payload, opts)
      data
    end

    # Add an investor to a token&#39;s whitelist
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncOperationResponse, Fixnum, Hash)>] AsyncOperationResponse data, response status code and response headers
    def post_token_whitelist_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_token_whitelist ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_token_whitelist"
      end
      # resource path
      local_var_path = '/molecule/v1/token/whitelist'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncOperationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_token_whitelist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a wallet under your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [WalletCreateResponse]
    def post_wallet(payload, opts = {})
      data, _status_code, _headers = post_wallet_with_http_info(payload, opts)
      data
    end

    # Create a wallet under your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletCreateResponse, Fixnum, Hash)>] WalletCreateResponse data, response status code and response headers
    def post_wallet_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_wallet ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_wallet"
      end
      # resource path
      local_var_path = '/molecule/v1/wallet'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Associate an existing key pair with a wallet defined for your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [WalletKeyCreateResponse]
    def post_wallet_key(payload, opts = {})
      data, _status_code, _headers = post_wallet_key_with_http_info(payload, opts)
      data
    end

    # Associate an existing key pair with a wallet defined for your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletKeyCreateResponse, Fixnum, Hash)>] WalletKeyCreateResponse data, response status code and response headers
    def post_wallet_key_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_wallet_key ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_wallet_key"
      end
      # resource path
      local_var_path = '/molecule/v1/wallet_key'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletKeyCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_wallet_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Generate a wallet key using the Key Service and associate with a wallet defined for your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [WalletKeyCreateResponse]
    def post_wallet_key_generator(payload, opts = {})
      data, _status_code, _headers = post_wallet_key_generator_with_http_info(payload, opts)
      data
    end

    # Generate a wallet key using the Key Service and associate with a wallet defined for your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletKeyCreateResponse, Fixnum, Hash)>] WalletKeyCreateResponse data, response status code and response headers
    def post_wallet_key_generator_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_wallet_key_generator ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_wallet_key_generator"
      end
      # resource path
      local_var_path = '/molecule/v1/wallet_key/generator'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletKeyCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_wallet_key_generator\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a webhook under your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [WebhookCreateResponse]
    def post_webhook(payload, opts = {})
      data, _status_code, _headers = post_webhook_with_http_info(payload, opts)
      data
    end

    # Create a webhook under your firm.
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookCreateResponse, Fixnum, Hash)>] WebhookCreateResponse data, response status code and response headers
    def post_webhook_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.post_webhook ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.post_webhook"
      end
      # resource path
      local_var_path = '/molecule/v1/webhook'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#post_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a token
    # @param token_id UUID of a token
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [TokenSpecificResponse]
    def update_token(token_id, payload, opts = {})
      data, _status_code, _headers = update_token_with_http_info(token_id, payload, opts)
      data
    end

    # Update a token
    # @param token_id UUID of a token
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenSpecificResponse, Fixnum, Hash)>] TokenSpecificResponse data, response status code and response headers
    def update_token_with_http_info(token_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.update_token ...'
      end
      # verify the required parameter 'token_id' is set
      if @api_client.config.client_side_validation && token_id.nil?
        fail ArgumentError, "Missing the required parameter 'token_id' when calling MoleculeApi.update_token"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.update_token"
      end
      # resource path
      local_var_path = '/molecule/v1/token/{token_id}/'.sub('{' + 'token_id' + '}', token_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#update_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a wallet
    # @param wallet_id UUID of a wallet
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [WalletSpecificResponse]
    def update_wallet(wallet_id, payload, opts = {})
      data, _status_code, _headers = update_wallet_with_http_info(wallet_id, payload, opts)
      data
    end

    # Update a wallet
    # @param wallet_id UUID of a wallet
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletSpecificResponse, Fixnum, Hash)>] WalletSpecificResponse data, response status code and response headers
    def update_wallet_with_http_info(wallet_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.update_wallet ...'
      end
      # verify the required parameter 'wallet_id' is set
      if @api_client.config.client_side_validation && wallet_id.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_id' when calling MoleculeApi.update_wallet"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.update_wallet"
      end
      # resource path
      local_var_path = '/molecule/v1/wallet/{wallet_id}/'.sub('{' + 'wallet_id' + '}', wallet_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WalletSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#update_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a webhook
    # @param webhook_id UUID of a webhook
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [WebhookSpecificResponse]
    def update_webhook(webhook_id, payload, opts = {})
      data, _status_code, _headers = update_webhook_with_http_info(webhook_id, payload, opts)
      data
    end

    # Update a webhook
    # @param webhook_id UUID of a webhook
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookSpecificResponse, Fixnum, Hash)>] WebhookSpecificResponse data, response status code and response headers
    def update_webhook_with_http_info(webhook_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MoleculeApi.update_webhook ...'
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling MoleculeApi.update_webhook"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling MoleculeApi.update_webhook"
      end
      # resource path
      local_var_path = '/molecule/v1/webhook/{webhook_id}/'.sub('{' + 'webhook_id' + '}', webhook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebhookSpecificResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MoleculeApi#update_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
