/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.AvailableDateDoubleVO;
import com.hydrogen.nucleus.model.Household;
import org.threeten.bp.LocalDate;
import com.hydrogen.nucleus.model.PageHousehold;
import com.hydrogen.nucleus.model.PagePortfolioHoldingAgg;
import com.hydrogen.nucleus.model.PagePortfolioTransaction;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HouseholdApi {
    private ApiClient apiClient;

    public HouseholdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HouseholdApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createHouseholdUsingPost
     * @param household household (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHouseholdUsingPostCall(Household household, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = household;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHouseholdUsingPostValidateBeforeCall(Household household, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'household' is set
        if (household == null) {
            throw new ApiException("Missing the required parameter 'household' when calling createHouseholdUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createHouseholdUsingPostCall(household, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Household
     * Create a new household, with your firm.
     * @param household household (required)
     * @return Household
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Household createHouseholdUsingPost(Household household) throws ApiException {
        ApiResponse<Household> resp = createHouseholdUsingPostWithHttpInfo(household);
        return resp.getData();
    }

    /**
     * Create a Household
     * Create a new household, with your firm.
     * @param household household (required)
     * @return ApiResponse&lt;Household&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Household> createHouseholdUsingPostWithHttpInfo(Household household) throws ApiException {
        com.squareup.okhttp.Call call = createHouseholdUsingPostValidateBeforeCall(household, null, null);
        Type localVarReturnType = new TypeToken<Household>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Household (asynchronously)
     * Create a new household, with your firm.
     * @param household household (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHouseholdUsingPostAsync(Household household, final ApiCallback<Household> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHouseholdUsingPostValidateBeforeCall(household, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Household>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHouseholdUsingDelete
     * @param householdId UUID household_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHouseholdUsingDeleteCall(UUID householdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household/{household_id}"
            .replaceAll("\\{" + "household_id" + "\\}", apiClient.escapeString(householdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHouseholdUsingDeleteValidateBeforeCall(UUID householdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'householdId' is set
        if (householdId == null) {
            throw new ApiException("Missing the required parameter 'householdId' when calling deleteHouseholdUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteHouseholdUsingDeleteCall(householdId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Household
     * Permanently delete a household
     * @param householdId UUID household_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteHouseholdUsingDelete(UUID householdId) throws ApiException {
        deleteHouseholdUsingDeleteWithHttpInfo(householdId);
    }

    /**
     * Delete a Household
     * Permanently delete a household
     * @param householdId UUID household_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteHouseholdUsingDeleteWithHttpInfo(UUID householdId) throws ApiException {
        com.squareup.okhttp.Call call = deleteHouseholdUsingDeleteValidateBeforeCall(householdId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Household (asynchronously)
     * Permanently delete a household
     * @param householdId UUID household_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHouseholdUsingDeleteAsync(UUID householdId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHouseholdUsingDeleteValidateBeforeCall(householdId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getHouseholdAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHouseholdAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHouseholdAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getHouseholdAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all household
     * Get details for all Household.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageHousehold
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageHousehold getHouseholdAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageHousehold> resp = getHouseholdAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all household
     * Get details for all Household.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageHousehold&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageHousehold> getHouseholdAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getHouseholdAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageHousehold>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all household (asynchronously)
     * Get details for all Household.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHouseholdAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageHousehold> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHouseholdAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageHousehold>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHouseholdClientAssetSizeUsingGet
     * @param householdId UUID household_id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHouseholdClientAssetSizeUsingGetCall(UUID householdId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household/{household_id}/asset_size"
            .replaceAll("\\{" + "household_id" + "\\}", apiClient.escapeString(householdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (excludeSubledger != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_subledger", excludeSubledger));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_type", sortType));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHouseholdClientAssetSizeUsingGetValidateBeforeCall(UUID householdId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'householdId' is set
        if (householdId == null) {
            throw new ApiException("Missing the required parameter 'householdId' when calling getHouseholdClientAssetSizeUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getHouseholdClientAssetSizeUsingGetCall(householdId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all household client asset sizes
     * Get a list of asset sizes per date for a client&#39;s household.
     * @param householdId UUID household_id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @return List&lt;AvailableDateDoubleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AvailableDateDoubleVO> getHouseholdClientAssetSizeUsingGet(UUID householdId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        ApiResponse<List<AvailableDateDoubleVO>> resp = getHouseholdClientAssetSizeUsingGetWithHttpInfo(householdId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
        return resp.getData();
    }

    /**
     * List all household client asset sizes
     * Get a list of asset sizes per date for a client&#39;s household.
     * @param householdId UUID household_id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @return ApiResponse&lt;List&lt;AvailableDateDoubleVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AvailableDateDoubleVO>> getHouseholdClientAssetSizeUsingGetWithHttpInfo(UUID householdId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getHouseholdClientAssetSizeUsingGetValidateBeforeCall(householdId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all household client asset sizes (asynchronously)
     * Get a list of asset sizes per date for a client&#39;s household.
     * @param householdId UUID household_id (required)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional, default to null)
     * @param excludeSubledger true or false (optional)
     * @param getLatest true or false (optional)
     * @param sortType  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in () (optional)
     * @param startDate start date (optional, default to null)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHouseholdClientAssetSizeUsingGetAsync(UUID householdId, String currencyConversion, LocalDate endDate, Boolean excludeSubledger, Boolean getLatest, String sortType, LocalDate startDate, final ApiCallback<List<AvailableDateDoubleVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHouseholdClientAssetSizeUsingGetValidateBeforeCall(householdId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AvailableDateDoubleVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHouseholdClientHoldingUsingGet
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHouseholdClientHoldingUsingGetCall(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household/{household_id}/holding"
            .replaceAll("\\{" + "household_id" + "\\}", apiClient.escapeString(householdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHouseholdClientHoldingUsingGetValidateBeforeCall(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'householdId' is set
        if (householdId == null) {
            throw new ApiException("Missing the required parameter 'householdId' when calling getHouseholdClientHoldingUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getHouseholdClientHoldingUsingGetCall(householdId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all household&#39;s clientIds holdings
     * Get the information for all the securities that are currently being held by a household&#39;s client ids registered with your firm.
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return PagePortfolioHoldingAgg
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioHoldingAgg getHouseholdClientHoldingUsingGet(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        ApiResponse<PagePortfolioHoldingAgg> resp = getHouseholdClientHoldingUsingGetWithHttpInfo(householdId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all household&#39;s clientIds holdings
     * Get the information for all the securities that are currently being held by a household&#39;s client ids registered with your firm.
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @return ApiResponse&lt;PagePortfolioHoldingAgg&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioHoldingAgg> getHouseholdClientHoldingUsingGetWithHttpInfo(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getHouseholdClientHoldingUsingGetValidateBeforeCall(householdId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingAgg>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all household&#39;s clientIds holdings (asynchronously)
     * Get the information for all the securities that are currently being held by a household&#39;s client ids registered with your firm.
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date - yyyy-mm-dd (optional)
     * @param filter filter (optional)
     * @param getLatest true or false (optional)
     * @param orderBy order_by (optional, default to date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date - yyyy-mm-dd (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHouseholdClientHoldingUsingGetAsync(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, Boolean getLatest, String orderBy, Integer page, Integer size, LocalDate startDate, final ApiCallback<PagePortfolioHoldingAgg> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHouseholdClientHoldingUsingGetValidateBeforeCall(householdId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioHoldingAgg>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHouseholdClientTransactionUsingGet
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHouseholdClientTransactionUsingGetCall(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household/{household_id}/transaction"
            .replaceAll("\\{" + "household_id" + "\\}", apiClient.escapeString(householdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (currencyConversion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency_conversion", currencyConversion));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHouseholdClientTransactionUsingGetValidateBeforeCall(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'householdId' is set
        if (householdId == null) {
            throw new ApiException("Missing the required parameter 'householdId' when calling getHouseholdClientTransactionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getHouseholdClientTransactionUsingGetCall(householdId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all household&#39;s client ids transactions
     * Get the information for all transactions under a household client ids registered with your firm.
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @return PagePortfolioTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagePortfolioTransaction getHouseholdClientTransactionUsingGet(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        ApiResponse<PagePortfolioTransaction> resp = getHouseholdClientTransactionUsingGetWithHttpInfo(householdId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all household&#39;s client ids transactions
     * Get the information for all transactions under a household client ids registered with your firm.
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @return ApiResponse&lt;PagePortfolioTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagePortfolioTransaction> getHouseholdClientTransactionUsingGetWithHttpInfo(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getHouseholdClientTransactionUsingGetValidateBeforeCall(householdId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all household&#39;s client ids transactions (asynchronously)
     * Get the information for all transactions under a household client ids registered with your firm.
     * @param householdId UUID household_id (required)
     * @param ascending ascending (optional, default to false)
     * @param currencyConversion USD (optional)
     * @param endDate end date (optional)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHouseholdClientTransactionUsingGetAsync(UUID householdId, Boolean ascending, String currencyConversion, LocalDate endDate, String filter, String orderBy, Integer page, Integer size, LocalDate startDate, final ApiCallback<PagePortfolioTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHouseholdClientTransactionUsingGetValidateBeforeCall(householdId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagePortfolioTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getHouseholdUsingGet
     * @param householdId UUID household_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getHouseholdUsingGetCall(UUID householdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household/{household_id}"
            .replaceAll("\\{" + "household_id" + "\\}", apiClient.escapeString(householdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getHouseholdUsingGetValidateBeforeCall(UUID householdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'householdId' is set
        if (householdId == null) {
            throw new ApiException("Missing the required parameter 'householdId' when calling getHouseholdUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getHouseholdUsingGetCall(householdId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a Household
     * Retrieve the information for a Household.
     * @param householdId UUID household_id (required)
     * @return Household
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Household getHouseholdUsingGet(UUID householdId) throws ApiException {
        ApiResponse<Household> resp = getHouseholdUsingGetWithHttpInfo(householdId);
        return resp.getData();
    }

    /**
     * Retrieve a Household
     * Retrieve the information for a Household.
     * @param householdId UUID household_id (required)
     * @return ApiResponse&lt;Household&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Household> getHouseholdUsingGetWithHttpInfo(UUID householdId) throws ApiException {
        com.squareup.okhttp.Call call = getHouseholdUsingGetValidateBeforeCall(householdId, null, null);
        Type localVarReturnType = new TypeToken<Household>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Household (asynchronously)
     * Retrieve the information for a Household.
     * @param householdId UUID household_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getHouseholdUsingGetAsync(UUID householdId, final ApiCallback<Household> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getHouseholdUsingGetValidateBeforeCall(householdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Household>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateHouseholdUsingPut
     * @param household household (required)
     * @param householdId UUID household_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHouseholdUsingPutCall(Object household, UUID householdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = household;

        // create path and map variables
        String localVarPath = "/nucleus/v1/household/{household_id}"
            .replaceAll("\\{" + "household_id" + "\\}", apiClient.escapeString(householdId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHouseholdUsingPutValidateBeforeCall(Object household, UUID householdId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'household' is set
        if (household == null) {
            throw new ApiException("Missing the required parameter 'household' when calling updateHouseholdUsingPut(Async)");
        }
        
        // verify the required parameter 'householdId' is set
        if (householdId == null) {
            throw new ApiException("Missing the required parameter 'householdId' when calling updateHouseholdUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHouseholdUsingPutCall(household, householdId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Household
     * Update the information for a Household.
     * @param household household (required)
     * @param householdId UUID household_id (required)
     * @return Household
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Household updateHouseholdUsingPut(Object household, UUID householdId) throws ApiException {
        ApiResponse<Household> resp = updateHouseholdUsingPutWithHttpInfo(household, householdId);
        return resp.getData();
    }

    /**
     * Update a Household
     * Update the information for a Household.
     * @param household household (required)
     * @param householdId UUID household_id (required)
     * @return ApiResponse&lt;Household&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Household> updateHouseholdUsingPutWithHttpInfo(Object household, UUID householdId) throws ApiException {
        com.squareup.okhttp.Call call = updateHouseholdUsingPutValidateBeforeCall(household, householdId, null, null);
        Type localVarReturnType = new TypeToken<Household>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Household (asynchronously)
     * Update the information for a Household.
     * @param household household (required)
     * @param householdId UUID household_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHouseholdUsingPutAsync(Object household, UUID householdId, final ApiCallback<Household> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHouseholdUsingPutValidateBeforeCall(household, householdId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Household>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
