/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Card Details Object
    /// </summary>
    [DataContract]
    public partial class CardDetailsVO :  IEquatable<CardDetailsVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardDetailsVO" /> class.
        /// </summary>
        /// <param name="balance">balance.</param>
        /// <param name="cardHolderName">cardHolderName.</param>
        /// <param name="cardId">cardId.</param>
        /// <param name="cardIssuance">cardIssuance.</param>
        /// <param name="cardName">cardName.</param>
        /// <param name="cardNetwork">cardNetwork.</param>
        /// <param name="cardType">cardType.</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="mask">mask.</param>
        /// <param name="prepaidAmount">prepaidAmount.</param>
        /// <param name="status">status.</param>
        public CardDetailsVO(CardBalanceVO balance = default(CardBalanceVO), string cardHolderName = default(string), Guid? cardId = default(Guid?), string cardIssuance = default(string), string cardName = default(string), string cardNetwork = default(string), string cardType = default(string), DateTime? expiryDate = default(DateTime?), string mask = default(string), float? prepaidAmount = default(float?), string status = default(string))
        {
            this.Balance = balance;
            this.CardHolderName = cardHolderName;
            this.CardId = cardId;
            this.CardIssuance = cardIssuance;
            this.CardName = cardName;
            this.CardNetwork = cardNetwork;
            this.CardType = cardType;
            this.ExpiryDate = expiryDate;
            this.Mask = mask;
            this.PrepaidAmount = prepaidAmount;
            this.Status = status;
        }
        
        /// <summary>
        /// balance
        /// </summary>
        /// <value>balance</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public CardBalanceVO Balance { get; set; }

        /// <summary>
        /// cardHolderName
        /// </summary>
        /// <value>cardHolderName</value>
        [DataMember(Name="card_holder_name", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// cardId
        /// </summary>
        /// <value>cardId</value>
        [DataMember(Name="card_id", EmitDefaultValue=false)]
        public Guid? CardId { get; set; }

        /// <summary>
        /// cardIssuance
        /// </summary>
        /// <value>cardIssuance</value>
        [DataMember(Name="card_issuance", EmitDefaultValue=false)]
        public string CardIssuance { get; set; }

        /// <summary>
        /// cardName
        /// </summary>
        /// <value>cardName</value>
        [DataMember(Name="card_name", EmitDefaultValue=false)]
        public string CardName { get; set; }

        /// <summary>
        /// cardNetwork
        /// </summary>
        /// <value>cardNetwork</value>
        [DataMember(Name="card_network", EmitDefaultValue=false)]
        public string CardNetwork { get; set; }

        /// <summary>
        /// cardType
        /// </summary>
        /// <value>cardType</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// expiryDate
        /// </summary>
        /// <value>expiryDate</value>
        [DataMember(Name="expiry_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// mask
        /// </summary>
        /// <value>mask</value>
        [DataMember(Name="mask", EmitDefaultValue=false)]
        public string Mask { get; set; }

        /// <summary>
        /// prepaidAmount
        /// </summary>
        /// <value>prepaidAmount</value>
        [DataMember(Name="prepaid_amount", EmitDefaultValue=false)]
        public float? PrepaidAmount { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardDetailsVO {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  CardIssuance: ").Append(CardIssuance).Append("\n");
            sb.Append("  CardName: ").Append(CardName).Append("\n");
            sb.Append("  CardNetwork: ").Append(CardNetwork).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  PrepaidAmount: ").Append(PrepaidAmount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardDetailsVO);
        }

        /// <summary>
        /// Returns true if CardDetailsVO instances are equal
        /// </summary>
        /// <param name="input">Instance of CardDetailsVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardDetailsVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.CardIssuance == input.CardIssuance ||
                    (this.CardIssuance != null &&
                    this.CardIssuance.Equals(input.CardIssuance))
                ) && 
                (
                    this.CardName == input.CardName ||
                    (this.CardName != null &&
                    this.CardName.Equals(input.CardName))
                ) && 
                (
                    this.CardNetwork == input.CardNetwork ||
                    (this.CardNetwork != null &&
                    this.CardNetwork.Equals(input.CardNetwork))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.PrepaidAmount == input.PrepaidAmount ||
                    (this.PrepaidAmount != null &&
                    this.PrepaidAmount.Equals(input.PrepaidAmount))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.CardIssuance != null)
                    hashCode = hashCode * 59 + this.CardIssuance.GetHashCode();
                if (this.CardName != null)
                    hashCode = hashCode * 59 + this.CardName.GetHashCode();
                if (this.CardNetwork != null)
                    hashCode = hashCode * 59 + this.CardNetwork.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.Mask != null)
                    hashCode = hashCode * 59 + this.Mask.GetHashCode();
                if (this.PrepaidAmount != null)
                    hashCode = hashCode * 59 + this.PrepaidAmount.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
