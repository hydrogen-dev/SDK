=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.21

=end

require 'date'

module NucleusApi
  # PortfolioTransaction Object
  class PortfolioTransaction
    # accountId
    attr_accessor :account_id

    # amount
    attr_accessor :amount

    # balance
    attr_accessor :balance

    # category
    attr_accessor :category

    attr_accessor :check

    attr_accessor :create_date

    # currency_code
    attr_accessor :currency_code

    # date
    attr_accessor :date

    # dateAvailable
    attr_accessor :date_available

    # description
    attr_accessor :description

    # fundingId
    attr_accessor :funding_id

    attr_accessor :id

    # is_cleansed
    attr_accessor :is_cleansed

    # is_disputed
    attr_accessor :is_disputed

    # isRead
    attr_accessor :is_read

    # is_recurring
    attr_accessor :is_recurring

    # location
    attr_accessor :location

    # memo
    attr_accessor :memo

    # merchant
    attr_accessor :merchant

    # merchant_category_code
    attr_accessor :merchant_category_code

    # merchantId
    attr_accessor :merchant_id

    # metadata
    attr_accessor :metadata

    # mid
    attr_accessor :mid

    # modelId
    attr_accessor :model_id

    # portfolioId
    attr_accessor :portfolio_id

    # price
    attr_accessor :price

    # quantity
    attr_accessor :quantity

    attr_accessor :secondary_id

    # securityId
    attr_accessor :security_id

    # status
    attr_accessor :status

    # subcategory
    attr_accessor :subcategory

    # transactionCategoryId
    attr_accessor :transaction_category_id

    # alertId
    attr_accessor :transaction_code_id

    attr_accessor :update_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'account_id' => :'account_id',
        :'amount' => :'amount',
        :'balance' => :'balance',
        :'category' => :'category',
        :'check' => :'check',
        :'create_date' => :'create_date',
        :'currency_code' => :'currency_code',
        :'date' => :'date',
        :'date_available' => :'date_available',
        :'description' => :'description',
        :'funding_id' => :'funding_id',
        :'id' => :'id',
        :'is_cleansed' => :'is_cleansed',
        :'is_disputed' => :'is_disputed',
        :'is_read' => :'is_read',
        :'is_recurring' => :'is_recurring',
        :'location' => :'location',
        :'memo' => :'memo',
        :'merchant' => :'merchant',
        :'merchant_category_code' => :'merchant_category_code',
        :'merchant_id' => :'merchant_id',
        :'metadata' => :'metadata',
        :'mid' => :'mid',
        :'model_id' => :'model_id',
        :'portfolio_id' => :'portfolio_id',
        :'price' => :'price',
        :'quantity' => :'quantity',
        :'secondary_id' => :'secondary_id',
        :'security_id' => :'security_id',
        :'status' => :'status',
        :'subcategory' => :'subcategory',
        :'transaction_category_id' => :'transaction_category_id',
        :'transaction_code_id' => :'transaction_code_id',
        :'update_date' => :'update_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'account_id' => :'String',
        :'amount' => :'Float',
        :'balance' => :'Float',
        :'category' => :'String',
        :'check' => :'Check',
        :'create_date' => :'DateTime',
        :'currency_code' => :'String',
        :'date' => :'DateTime',
        :'date_available' => :'DateTime',
        :'description' => :'String',
        :'funding_id' => :'String',
        :'id' => :'String',
        :'is_cleansed' => :'BOOLEAN',
        :'is_disputed' => :'BOOLEAN',
        :'is_read' => :'BOOLEAN',
        :'is_recurring' => :'BOOLEAN',
        :'location' => :'Location',
        :'memo' => :'String',
        :'merchant' => :'String',
        :'merchant_category_code' => :'String',
        :'merchant_id' => :'String',
        :'metadata' => :'Hash<String, String>',
        :'mid' => :'String',
        :'model_id' => :'String',
        :'portfolio_id' => :'String',
        :'price' => :'Float',
        :'quantity' => :'Float',
        :'secondary_id' => :'String',
        :'security_id' => :'String',
        :'status' => :'String',
        :'subcategory' => :'String',
        :'transaction_category_id' => :'String',
        :'transaction_code_id' => :'String',
        :'update_date' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'check')
        self.check = attributes[:'check']
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.has_key?(:'date_available')
        self.date_available = attributes[:'date_available']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'funding_id')
        self.funding_id = attributes[:'funding_id']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'is_cleansed')
        self.is_cleansed = attributes[:'is_cleansed']
      end

      if attributes.has_key?(:'is_disputed')
        self.is_disputed = attributes[:'is_disputed']
      end

      if attributes.has_key?(:'is_read')
        self.is_read = attributes[:'is_read']
      end

      if attributes.has_key?(:'is_recurring')
        self.is_recurring = attributes[:'is_recurring']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.has_key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.has_key?(:'merchant')
        self.merchant = attributes[:'merchant']
      end

      if attributes.has_key?(:'merchant_category_code')
        self.merchant_category_code = attributes[:'merchant_category_code']
      end

      if attributes.has_key?(:'merchant_id')
        self.merchant_id = attributes[:'merchant_id']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'mid')
        self.mid = attributes[:'mid']
      end

      if attributes.has_key?(:'model_id')
        self.model_id = attributes[:'model_id']
      end

      if attributes.has_key?(:'portfolio_id')
        self.portfolio_id = attributes[:'portfolio_id']
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'security_id')
        self.security_id = attributes[:'security_id']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'subcategory')
        self.subcategory = attributes[:'subcategory']
      end

      if attributes.has_key?(:'transaction_category_id')
        self.transaction_category_id = attributes[:'transaction_category_id']
      end

      if attributes.has_key?(:'transaction_code_id')
        self.transaction_code_id = attributes[:'transaction_code_id']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @model_id.nil?
        invalid_properties.push('invalid value for "model_id", model_id cannot be nil.')
      end

      if @portfolio_id.nil?
        invalid_properties.push('invalid value for "portfolio_id", portfolio_id cannot be nil.')
      end

      if @transaction_code_id.nil?
        invalid_properties.push('invalid value for "transaction_code_id", transaction_code_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account_id.nil?
      return false if @date.nil?
      return false if @model_id.nil?
      return false if @portfolio_id.nil?
      return false if @transaction_code_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          account_id == o.account_id &&
          amount == o.amount &&
          balance == o.balance &&
          category == o.category &&
          check == o.check &&
          create_date == o.create_date &&
          currency_code == o.currency_code &&
          date == o.date &&
          date_available == o.date_available &&
          description == o.description &&
          funding_id == o.funding_id &&
          id == o.id &&
          is_cleansed == o.is_cleansed &&
          is_disputed == o.is_disputed &&
          is_read == o.is_read &&
          is_recurring == o.is_recurring &&
          location == o.location &&
          memo == o.memo &&
          merchant == o.merchant &&
          merchant_category_code == o.merchant_category_code &&
          merchant_id == o.merchant_id &&
          metadata == o.metadata &&
          mid == o.mid &&
          model_id == o.model_id &&
          portfolio_id == o.portfolio_id &&
          price == o.price &&
          quantity == o.quantity &&
          secondary_id == o.secondary_id &&
          security_id == o.security_id &&
          status == o.status &&
          subcategory == o.subcategory &&
          transaction_category_id == o.transaction_category_id &&
          transaction_code_id == o.transaction_code_id &&
          update_date == o.update_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [account_id, amount, balance, category, check, create_date, currency_code, date, date_available, description, funding_id, id, is_cleansed, is_disputed, is_read, is_recurring, location, memo, merchant, merchant_category_code, merchant_id, metadata, mid, model_id, portfolio_id, price, quantity, secondary_id, security_id, status, subcategory, transaction_category_id, transaction_code_id, update_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NucleusApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
