/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// CardProgram Object
    /// </summary>
    [DataContract]
    public partial class CardProgram :  IEquatable<CardProgram>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProgram" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardProgram() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardProgram" /> class.
        /// </summary>
        /// <param name="cardNetwork">cardNetwork (required).</param>
        /// <param name="cardProcessor">cardProcessor.</param>
        /// <param name="cardType">cardType (required).</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="code">code.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="isActive">is_active.</param>
        /// <param name="isDelegatedAuthority">is_delegated_authority.</param>
        /// <param name="issuingBank">issuingBank (required).</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">name (required).</param>
        /// <param name="programManager">programManager.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="updateDate">updateDate.</param>
        public CardProgram(string cardNetwork = default(string), string cardProcessor = default(string), string cardType = default(string), Guid? clientId = default(Guid?), string code = default(string), DateTime? createDate = default(DateTime?), string description = default(string), Guid? id = default(Guid?), bool? isActive = default(bool?), bool? isDelegatedAuthority = default(bool?), string issuingBank = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string), string programManager = default(string), string secondaryId = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "cardNetwork" is required (not null)
            if (cardNetwork == null)
            {
                throw new InvalidDataException("cardNetwork is a required property for CardProgram and cannot be null");
            }
            else
            {
                this.CardNetwork = cardNetwork;
            }
            // to ensure "cardType" is required (not null)
            if (cardType == null)
            {
                throw new InvalidDataException("cardType is a required property for CardProgram and cannot be null");
            }
            else
            {
                this.CardType = cardType;
            }
            // to ensure "issuingBank" is required (not null)
            if (issuingBank == null)
            {
                throw new InvalidDataException("issuingBank is a required property for CardProgram and cannot be null");
            }
            else
            {
                this.IssuingBank = issuingBank;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CardProgram and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.CardProcessor = cardProcessor;
            this.ClientId = clientId;
            this.Code = code;
            this.CreateDate = createDate;
            this.Description = description;
            this.Id = id;
            this.IsActive = isActive;
            this.IsDelegatedAuthority = isDelegatedAuthority;
            this.Metadata = metadata;
            this.ProgramManager = programManager;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// cardNetwork
        /// </summary>
        /// <value>cardNetwork</value>
        [DataMember(Name="card_network", EmitDefaultValue=false)]
        public string CardNetwork { get; set; }

        /// <summary>
        /// cardProcessor
        /// </summary>
        /// <value>cardProcessor</value>
        [DataMember(Name="card_processor", EmitDefaultValue=false)]
        public string CardProcessor { get; set; }

        /// <summary>
        /// cardType
        /// </summary>
        /// <value>cardType</value>
        [DataMember(Name="card_type", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// code
        /// </summary>
        /// <value>code</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// is_active
        /// </summary>
        /// <value>is_active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// is_delegated_authority
        /// </summary>
        /// <value>is_delegated_authority</value>
        [DataMember(Name="is_delegated_authority", EmitDefaultValue=false)]
        public bool? IsDelegatedAuthority { get; set; }

        /// <summary>
        /// issuingBank
        /// </summary>
        /// <value>issuingBank</value>
        [DataMember(Name="issuing_bank", EmitDefaultValue=false)]
        public string IssuingBank { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// programManager
        /// </summary>
        /// <value>programManager</value>
        [DataMember(Name="program_manager", EmitDefaultValue=false)]
        public string ProgramManager { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardProgram {\n");
            sb.Append("  CardNetwork: ").Append(CardNetwork).Append("\n");
            sb.Append("  CardProcessor: ").Append(CardProcessor).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDelegatedAuthority: ").Append(IsDelegatedAuthority).Append("\n");
            sb.Append("  IssuingBank: ").Append(IssuingBank).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProgramManager: ").Append(ProgramManager).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardProgram);
        }

        /// <summary>
        /// Returns true if CardProgram instances are equal
        /// </summary>
        /// <param name="input">Instance of CardProgram to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardProgram input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardNetwork == input.CardNetwork ||
                    (this.CardNetwork != null &&
                    this.CardNetwork.Equals(input.CardNetwork))
                ) && 
                (
                    this.CardProcessor == input.CardProcessor ||
                    (this.CardProcessor != null &&
                    this.CardProcessor.Equals(input.CardProcessor))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsDelegatedAuthority == input.IsDelegatedAuthority ||
                    (this.IsDelegatedAuthority != null &&
                    this.IsDelegatedAuthority.Equals(input.IsDelegatedAuthority))
                ) && 
                (
                    this.IssuingBank == input.IssuingBank ||
                    (this.IssuingBank != null &&
                    this.IssuingBank.Equals(input.IssuingBank))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProgramManager == input.ProgramManager ||
                    (this.ProgramManager != null &&
                    this.ProgramManager.Equals(input.ProgramManager))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardNetwork != null)
                    hashCode = hashCode * 59 + this.CardNetwork.GetHashCode();
                if (this.CardProcessor != null)
                    hashCode = hashCode * 59 + this.CardProcessor.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsDelegatedAuthority != null)
                    hashCode = hashCode * 59 + this.IsDelegatedAuthority.GetHashCode();
                if (this.IssuingBank != null)
                    hashCode = hashCode * 59 + this.IssuingBank.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProgramManager != null)
                    hashCode = hashCode * 59 + this.ProgramManager.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
