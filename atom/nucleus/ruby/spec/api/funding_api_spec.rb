=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'spec_helper'
require 'json'

# Unit tests for NucleusApi::FundingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'FundingApi' do
  before do
    # run before each test
    @instance = NucleusApi::FundingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FundingApi' do
    it 'should create an instance of FundingApi' do
      expect(@instance).to be_instance_of(NucleusApi::FundingApi)
    end
  end

  # unit tests for create_bank_link_using_post
  # Create a bank link
  # Create a new bank link for an account.
  # @param bank_link_info_request bankLinkInfoRequest
  # @param [Hash] opts the optional parameters
  # @return [BankLink]
  describe 'create_bank_link_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_funding_transaction_using_post
  # Create a funding transaction request
  # Create a new funding transaction request for an account.
  # @param funding_transaction_request fundingTransactionRequest
  # @param [Hash] opts the optional parameters
  # @return [FundingTransaction]
  describe 'create_funding_transaction_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_funding_using_post
  # Create a funding request
  # Create a new funding request for an account. 
  # @param funding_request fundingRequest
  # @param [Hash] opts the optional parameters
  # @return [Funding]
  describe 'create_funding_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_transfer_using_post
  # Create a transfer requests
  # Create a new external account transfer for a client account.
  # @param external_account_transfer_request externalAccountTransferRequest
  # @param [Hash] opts the optional parameters
  # @return [ExternalAccountTransfer]
  describe 'create_transfer_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_bank_link_using_delete
  # Delete a bank link
  # Permanently delete a bank link defined for an account.
  # @param bank_link_id UUID bank_link_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_bank_link_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_funding_transaction_using_delete
  # Delete a funding transaction request
  # Permanently delete a funding transaction request for an account.
  # @param funding_transaction_id UUID funding_transaction_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_funding_transaction_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_funding_using_delete
  # Delete a funding request
  # Permanently delete a funding request defined for an account.
  # @param funding_id UUID funding_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_funding_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_transfer_using_delete
  # Delete a transfer request
  # Permanently delete a external account transfer from a client account.
  # @param transfer_id UUID external_account_transfer_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_transfer_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_link_all_using_get
  # List all bank links
  # Get all bank links defined for all clients defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :currency_conversion currency_conversion
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageBankLink]
  describe 'get_bank_link_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_link_using_get
  # Retrieve a bank link
  # Retrieve the information for a bank link for an account.
  # @param bank_link_id UUID bank_link_id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency_conversion USD
  # @return [BankLink]
  describe 'get_bank_link_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_all_using_get
  # List all funding requests 
  # Get the information for all funding requests defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :currency_conversion currency_conversion
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageFunding]
  describe 'get_funding_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_transaction_all_using_get
  # List all funding transaction requests
  # Get the information for all funding transaction requests for all clients.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :currency_conversion currency_conversion
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageFundingTransaction]
  describe 'get_funding_transaction_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_transaction_using_get
  # Retrieve a funding transaction request
  # Retrieve the information for a funding transaction request for an account.
  # @param funding_transaction_id UUID funding_transaction_id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency_conversion USD
  # @return [FundingTransaction]
  describe 'get_funding_transaction_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_using_get
  # Retrieve a funding request
  # Retrieve the information for a funding request for an account.
  # @param funding_id UUID funding_id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency_conversion USD
  # @return [Funding]
  describe 'get_funding_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transfer_all_using_get
  # List all transfer requests
  # Get the information for all external account transfers defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :currency_conversion currency_conversion
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageExternalAccountTransfer]
  describe 'get_transfer_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transfer_using_get
  # Retrieve a transfer request
  # Retrieve the information for a external account transfer for an account.
  # @param transfer_id UUID external_account_transfer_id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency_conversion USD
  # @return [ExternalAccountTransfer]
  describe 'get_transfer_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_bank_link_bulk_using_put
  # Update list of bank link
  # Update bank link list for an account.
  # @param bank_link_list bankLinkList
  # @param [Hash] opts the optional parameters
  # @return [Array<BankLink>]
  describe 'update_bank_link_bulk_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_bank_link_using_put
  # Update a bank link
  # Update the information for a bank link for an account.
  # @param bank_link bank_link
  # @param bank_link_id UUID bank_link_id
  # @param [Hash] opts the optional parameters
  # @return [BankLink]
  describe 'update_bank_link_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_funding_transaction_using_put
  # Update a funding transaction request
  # Update the information for a funding transaction request for an account.
  # @param funding_transaction fundingTransaction
  # @param funding_transaction_id UUID funding_transaction_id
  # @param [Hash] opts the optional parameters
  # @return [FundingTransaction]
  describe 'update_funding_transaction_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_funding_using_put
  # Update a funding request
  # Update the information for a funding request for an account.
  # @param funding funding
  # @param funding_id UUID funding_id
  # @param [Hash] opts the optional parameters
  # @return [Funding]
  describe 'update_funding_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_transfer_using_put
  # Update a transfer request
  # Update the information for a external account transfer for a client account. 
  # @param transfer transfer
  # @param transfer_id UUID external_account_transfer_id
  # @param [Hash] opts the optional parameters
  # @return [ExternalAccountTransfer]
  describe 'update_transfer_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
