/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// RatioTargets
    /// </summary>
    [DataContract]
    public partial class RatioTargets :  IEquatable<RatioTargets>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RatioTargets" /> class.
        /// </summary>
        /// <param name="liquidityRatioLiabilities">liquidityRatioLiabilities (default to 0.1F).</param>
        /// <param name="currentRatio">currentRatio (default to 0.5F).</param>
        /// <param name="assetAllocationRatio">assetAllocationRatio (default to 1.5F).</param>
        /// <param name="savingsRatioNet">savingsRatioNet (default to 0.1F).</param>
        /// <param name="savingsRatioGross">savingsRatioGross (default to 0.1F).</param>
        /// <param name="liquidityRatioExpenses">liquidityRatioExpenses (default to 2.5F).</param>
        public RatioTargets(float? liquidityRatioLiabilities = 0.1F, float? currentRatio = 0.5F, float? assetAllocationRatio = 1.5F, float? savingsRatioNet = 0.1F, float? savingsRatioGross = 0.1F, float? liquidityRatioExpenses = 2.5F)
        {
            // use default value if no "liquidityRatioLiabilities" provided
            if (liquidityRatioLiabilities == null)
            {
                this.LiquidityRatioLiabilities = 0.1F;
            }
            else
            {
                this.LiquidityRatioLiabilities = liquidityRatioLiabilities;
            }
            // use default value if no "currentRatio" provided
            if (currentRatio == null)
            {
                this.CurrentRatio = 0.5F;
            }
            else
            {
                this.CurrentRatio = currentRatio;
            }
            // use default value if no "assetAllocationRatio" provided
            if (assetAllocationRatio == null)
            {
                this.AssetAllocationRatio = 1.5F;
            }
            else
            {
                this.AssetAllocationRatio = assetAllocationRatio;
            }
            // use default value if no "savingsRatioNet" provided
            if (savingsRatioNet == null)
            {
                this.SavingsRatioNet = 0.1F;
            }
            else
            {
                this.SavingsRatioNet = savingsRatioNet;
            }
            // use default value if no "savingsRatioGross" provided
            if (savingsRatioGross == null)
            {
                this.SavingsRatioGross = 0.1F;
            }
            else
            {
                this.SavingsRatioGross = savingsRatioGross;
            }
            // use default value if no "liquidityRatioExpenses" provided
            if (liquidityRatioExpenses == null)
            {
                this.LiquidityRatioExpenses = 2.5F;
            }
            else
            {
                this.LiquidityRatioExpenses = liquidityRatioExpenses;
            }
        }
        
        /// <summary>
        /// Gets or Sets LiquidityRatioLiabilities
        /// </summary>
        [DataMember(Name="liquidity_ratio_liabilities", EmitDefaultValue=false)]
        public float? LiquidityRatioLiabilities { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRatio
        /// </summary>
        [DataMember(Name="current_ratio", EmitDefaultValue=false)]
        public float? CurrentRatio { get; set; }

        /// <summary>
        /// Gets or Sets AssetAllocationRatio
        /// </summary>
        [DataMember(Name="asset_allocation_ratio", EmitDefaultValue=false)]
        public float? AssetAllocationRatio { get; set; }

        /// <summary>
        /// Gets or Sets SavingsRatioNet
        /// </summary>
        [DataMember(Name="savings_ratio_net", EmitDefaultValue=false)]
        public float? SavingsRatioNet { get; set; }

        /// <summary>
        /// Gets or Sets SavingsRatioGross
        /// </summary>
        [DataMember(Name="savings_ratio_gross", EmitDefaultValue=false)]
        public float? SavingsRatioGross { get; set; }

        /// <summary>
        /// Gets or Sets LiquidityRatioExpenses
        /// </summary>
        [DataMember(Name="liquidity_ratio_expenses", EmitDefaultValue=false)]
        public float? LiquidityRatioExpenses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RatioTargets {\n");
            sb.Append("  LiquidityRatioLiabilities: ").Append(LiquidityRatioLiabilities).Append("\n");
            sb.Append("  CurrentRatio: ").Append(CurrentRatio).Append("\n");
            sb.Append("  AssetAllocationRatio: ").Append(AssetAllocationRatio).Append("\n");
            sb.Append("  SavingsRatioNet: ").Append(SavingsRatioNet).Append("\n");
            sb.Append("  SavingsRatioGross: ").Append(SavingsRatioGross).Append("\n");
            sb.Append("  LiquidityRatioExpenses: ").Append(LiquidityRatioExpenses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RatioTargets);
        }

        /// <summary>
        /// Returns true if RatioTargets instances are equal
        /// </summary>
        /// <param name="input">Instance of RatioTargets to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RatioTargets input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LiquidityRatioLiabilities == input.LiquidityRatioLiabilities ||
                    (this.LiquidityRatioLiabilities != null &&
                    this.LiquidityRatioLiabilities.Equals(input.LiquidityRatioLiabilities))
                ) && 
                (
                    this.CurrentRatio == input.CurrentRatio ||
                    (this.CurrentRatio != null &&
                    this.CurrentRatio.Equals(input.CurrentRatio))
                ) && 
                (
                    this.AssetAllocationRatio == input.AssetAllocationRatio ||
                    (this.AssetAllocationRatio != null &&
                    this.AssetAllocationRatio.Equals(input.AssetAllocationRatio))
                ) && 
                (
                    this.SavingsRatioNet == input.SavingsRatioNet ||
                    (this.SavingsRatioNet != null &&
                    this.SavingsRatioNet.Equals(input.SavingsRatioNet))
                ) && 
                (
                    this.SavingsRatioGross == input.SavingsRatioGross ||
                    (this.SavingsRatioGross != null &&
                    this.SavingsRatioGross.Equals(input.SavingsRatioGross))
                ) && 
                (
                    this.LiquidityRatioExpenses == input.LiquidityRatioExpenses ||
                    (this.LiquidityRatioExpenses != null &&
                    this.LiquidityRatioExpenses.Equals(input.LiquidityRatioExpenses))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LiquidityRatioLiabilities != null)
                    hashCode = hashCode * 59 + this.LiquidityRatioLiabilities.GetHashCode();
                if (this.CurrentRatio != null)
                    hashCode = hashCode * 59 + this.CurrentRatio.GetHashCode();
                if (this.AssetAllocationRatio != null)
                    hashCode = hashCode * 59 + this.AssetAllocationRatio.GetHashCode();
                if (this.SavingsRatioNet != null)
                    hashCode = hashCode * 59 + this.SavingsRatioNet.GetHashCode();
                if (this.SavingsRatioGross != null)
                    hashCode = hashCode * 59 + this.SavingsRatioGross.GetHashCode();
                if (this.LiquidityRatioExpenses != null)
                    hashCode = hashCode * 59 + this.LiquidityRatioExpenses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LiquidityRatioLiabilities (float?) minimum
            if(this.LiquidityRatioLiabilities < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidityRatioLiabilities, must be a value greater than or equal to 0.", new [] { "LiquidityRatioLiabilities" });
            }

            // CurrentRatio (float?) minimum
            if(this.CurrentRatio < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentRatio, must be a value greater than or equal to 0.", new [] { "CurrentRatio" });
            }

            // AssetAllocationRatio (float?) minimum
            if(this.AssetAllocationRatio < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetAllocationRatio, must be a value greater than or equal to 0.", new [] { "AssetAllocationRatio" });
            }

            // SavingsRatioNet (float?) minimum
            if(this.SavingsRatioNet < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SavingsRatioNet, must be a value greater than or equal to 0.", new [] { "SavingsRatioNet" });
            }

            // SavingsRatioGross (float?) minimum
            if(this.SavingsRatioGross < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SavingsRatioGross, must be a value greater than or equal to 0.", new [] { "SavingsRatioGross" });
            }

            // LiquidityRatioExpenses (float?) minimum
            if(this.LiquidityRatioExpenses < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LiquidityRatioExpenses, must be a value greater than or equal to 0.", new [] { "LiquidityRatioExpenses" });
            }

            yield break;
        }
    }

}
