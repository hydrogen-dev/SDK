/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiCallback;
import com.hydrogen.proton.ApiResponse;
import com.hydrogen.proton.Configuration;
import com.hydrogen.proton.model.DiversificationScoreRequest;
import com.hydrogen.proton.model.EmergencyFundCalculatorRequest;
import com.hydrogen.proton.model.FinancialHealthCheckRequest;
import com.hydrogen.proton.model.PortfolioOptimizationScoreRequest;
import com.hydrogen.proton.ApiClient;
import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.Pair;
import com.hydrogen.proton.ProgressRequestBody;
import com.hydrogen.proton.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FinancialHealthApi {
    private ApiClient apiClient;

    public FinancialHealthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FinancialHealthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for diversificationScore
     * @param diversificationScoreRequest Request payload for Diversification Score (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call diversificationScoreCall(DiversificationScoreRequest diversificationScoreRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = diversificationScoreRequest;

        // create path and map variables
        String localVarPath = "/diversification_score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call diversificationScoreValidateBeforeCall(DiversificationScoreRequest diversificationScoreRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'diversificationScoreRequest' is set
        if (diversificationScoreRequest == null) {
            throw new ApiException("Missing the required parameter 'diversificationScoreRequest' when calling diversificationScore(Async)");
        }
        

        com.squareup.okhttp.Call call = diversificationScoreCall(diversificationScoreRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Diversification Score
     * Assess how well a group of investments is diversified
     * @param diversificationScoreRequest Request payload for Diversification Score (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> diversificationScore(DiversificationScoreRequest diversificationScoreRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = diversificationScoreWithHttpInfo(diversificationScoreRequest);
        return resp.getData();
    }

    /**
     * Diversification Score
     * Assess how well a group of investments is diversified
     * @param diversificationScoreRequest Request payload for Diversification Score (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> diversificationScoreWithHttpInfo(DiversificationScoreRequest diversificationScoreRequest) throws ApiException {
        com.squareup.okhttp.Call call = diversificationScoreValidateBeforeCall(diversificationScoreRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Diversification Score (asynchronously)
     * Assess how well a group of investments is diversified
     * @param diversificationScoreRequest Request payload for Diversification Score (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call diversificationScoreAsync(DiversificationScoreRequest diversificationScoreRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = diversificationScoreValidateBeforeCall(diversificationScoreRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emergencyFundCalculator
     * @param emergencyFundCalculatorRequest Request payload for Emergency Fund Calculator (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call emergencyFundCalculatorCall(EmergencyFundCalculatorRequest emergencyFundCalculatorRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = emergencyFundCalculatorRequest;

        // create path and map variables
        String localVarPath = "/emergency_fund_calculator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emergencyFundCalculatorValidateBeforeCall(EmergencyFundCalculatorRequest emergencyFundCalculatorRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'emergencyFundCalculatorRequest' is set
        if (emergencyFundCalculatorRequest == null) {
            throw new ApiException("Missing the required parameter 'emergencyFundCalculatorRequest' when calling emergencyFundCalculator(Async)");
        }
        

        com.squareup.okhttp.Call call = emergencyFundCalculatorCall(emergencyFundCalculatorRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Emergency Fund Calculator
     * Calculate a target emergency fund amount and savings plan
     * @param emergencyFundCalculatorRequest Request payload for Emergency Fund Calculator (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> emergencyFundCalculator(EmergencyFundCalculatorRequest emergencyFundCalculatorRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = emergencyFundCalculatorWithHttpInfo(emergencyFundCalculatorRequest);
        return resp.getData();
    }

    /**
     * Emergency Fund Calculator
     * Calculate a target emergency fund amount and savings plan
     * @param emergencyFundCalculatorRequest Request payload for Emergency Fund Calculator (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> emergencyFundCalculatorWithHttpInfo(EmergencyFundCalculatorRequest emergencyFundCalculatorRequest) throws ApiException {
        com.squareup.okhttp.Call call = emergencyFundCalculatorValidateBeforeCall(emergencyFundCalculatorRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Emergency Fund Calculator (asynchronously)
     * Calculate a target emergency fund amount and savings plan
     * @param emergencyFundCalculatorRequest Request payload for Emergency Fund Calculator (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call emergencyFundCalculatorAsync(EmergencyFundCalculatorRequest emergencyFundCalculatorRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emergencyFundCalculatorValidateBeforeCall(emergencyFundCalculatorRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for financialHealthCheck
     * @param financialHealthCheckRequest Request payload for Financial Health Check (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call financialHealthCheckCall(FinancialHealthCheckRequest financialHealthCheckRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = financialHealthCheckRequest;

        // create path and map variables
        String localVarPath = "/financial_health_check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call financialHealthCheckValidateBeforeCall(FinancialHealthCheckRequest financialHealthCheckRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'financialHealthCheckRequest' is set
        if (financialHealthCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'financialHealthCheckRequest' when calling financialHealthCheck(Async)");
        }
        

        com.squareup.okhttp.Call call = financialHealthCheckCall(financialHealthCheckRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Financial Health Check
     * Calculate a series of financial ratios to assess financial health
     * @param financialHealthCheckRequest Request payload for Financial Health Check (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> financialHealthCheck(FinancialHealthCheckRequest financialHealthCheckRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = financialHealthCheckWithHttpInfo(financialHealthCheckRequest);
        return resp.getData();
    }

    /**
     * Financial Health Check
     * Calculate a series of financial ratios to assess financial health
     * @param financialHealthCheckRequest Request payload for Financial Health Check (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> financialHealthCheckWithHttpInfo(FinancialHealthCheckRequest financialHealthCheckRequest) throws ApiException {
        com.squareup.okhttp.Call call = financialHealthCheckValidateBeforeCall(financialHealthCheckRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Financial Health Check (asynchronously)
     * Calculate a series of financial ratios to assess financial health
     * @param financialHealthCheckRequest Request payload for Financial Health Check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call financialHealthCheckAsync(FinancialHealthCheckRequest financialHealthCheckRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = financialHealthCheckValidateBeforeCall(financialHealthCheckRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioOptimizationScore
     * @param portfolioOptimizationScoreRequest Request payload for Portfolio Optimization Score (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call portfolioOptimizationScoreCall(PortfolioOptimizationScoreRequest portfolioOptimizationScoreRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = portfolioOptimizationScoreRequest;

        // create path and map variables
        String localVarPath = "/portfolio_optimization_score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioOptimizationScoreValidateBeforeCall(PortfolioOptimizationScoreRequest portfolioOptimizationScoreRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioOptimizationScoreRequest' is set
        if (portfolioOptimizationScoreRequest == null) {
            throw new ApiException("Missing the required parameter 'portfolioOptimizationScoreRequest' when calling portfolioOptimizationScore(Async)");
        }
        

        com.squareup.okhttp.Call call = portfolioOptimizationScoreCall(portfolioOptimizationScoreRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Portfolio Optimization Score
     * Analyze a group of investments against the optimized result
     * @param portfolioOptimizationScoreRequest Request payload for Portfolio Optimization Score (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> portfolioOptimizationScore(PortfolioOptimizationScoreRequest portfolioOptimizationScoreRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = portfolioOptimizationScoreWithHttpInfo(portfolioOptimizationScoreRequest);
        return resp.getData();
    }

    /**
     * Portfolio Optimization Score
     * Analyze a group of investments against the optimized result
     * @param portfolioOptimizationScoreRequest Request payload for Portfolio Optimization Score (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> portfolioOptimizationScoreWithHttpInfo(PortfolioOptimizationScoreRequest portfolioOptimizationScoreRequest) throws ApiException {
        com.squareup.okhttp.Call call = portfolioOptimizationScoreValidateBeforeCall(portfolioOptimizationScoreRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Portfolio Optimization Score (asynchronously)
     * Analyze a group of investments against the optimized result
     * @param portfolioOptimizationScoreRequest Request payload for Portfolio Optimization Score (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call portfolioOptimizationScoreAsync(PortfolioOptimizationScoreRequest portfolioOptimizationScoreRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioOptimizationScoreValidateBeforeCall(portfolioOptimizationScoreRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
