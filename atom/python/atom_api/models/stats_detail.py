# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatsDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cumulative_return': 'float',
        'annualized_return': 'float',
        'annualized_volatility': 'float'
    }

    attribute_map = {
        'cumulative_return': 'cumulative_return',
        'annualized_return': 'annualized_return',
        'annualized_volatility': 'annualized_volatility'
    }

    def __init__(self, cumulative_return=None, annualized_return=None, annualized_volatility=None):  # noqa: E501
        """StatsDetail - a model defined in Swagger"""  # noqa: E501

        self._cumulative_return = None
        self._annualized_return = None
        self._annualized_volatility = None
        self.discriminator = None

        self.cumulative_return = cumulative_return
        self.annualized_return = annualized_return
        self.annualized_volatility = annualized_volatility

    @property
    def cumulative_return(self):
        """Gets the cumulative_return of this StatsDetail.  # noqa: E501

        The cumulative return.  # noqa: E501

        :return: The cumulative_return of this StatsDetail.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_return

    @cumulative_return.setter
    def cumulative_return(self, cumulative_return):
        """Sets the cumulative_return of this StatsDetail.

        The cumulative return.  # noqa: E501

        :param cumulative_return: The cumulative_return of this StatsDetail.  # noqa: E501
        :type: float
        """
        if cumulative_return is None:
            raise ValueError("Invalid value for `cumulative_return`, must not be `None`")  # noqa: E501

        self._cumulative_return = cumulative_return

    @property
    def annualized_return(self):
        """Gets the annualized_return of this StatsDetail.  # noqa: E501

        The annualized return.  # noqa: E501

        :return: The annualized_return of this StatsDetail.  # noqa: E501
        :rtype: float
        """
        return self._annualized_return

    @annualized_return.setter
    def annualized_return(self, annualized_return):
        """Sets the annualized_return of this StatsDetail.

        The annualized return.  # noqa: E501

        :param annualized_return: The annualized_return of this StatsDetail.  # noqa: E501
        :type: float
        """
        if annualized_return is None:
            raise ValueError("Invalid value for `annualized_return`, must not be `None`")  # noqa: E501

        self._annualized_return = annualized_return

    @property
    def annualized_volatility(self):
        """Gets the annualized_volatility of this StatsDetail.  # noqa: E501

        The annualized standard deviation of returns.  # noqa: E501

        :return: The annualized_volatility of this StatsDetail.  # noqa: E501
        :rtype: float
        """
        return self._annualized_volatility

    @annualized_volatility.setter
    def annualized_volatility(self, annualized_volatility):
        """Sets the annualized_volatility of this StatsDetail.

        The annualized standard deviation of returns.  # noqa: E501

        :param annualized_volatility: The annualized_volatility of this StatsDetail.  # noqa: E501
        :type: float
        """
        if annualized_volatility is None:
            raise ValueError("Invalid value for `annualized_volatility`, must not be `None`")  # noqa: E501
        if annualized_volatility is not None and annualized_volatility < 0:  # noqa: E501
            raise ValueError("Invalid value for `annualized_volatility`, must be a value greater than or equal to `0`")  # noqa: E501

        self._annualized_volatility = annualized_volatility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
