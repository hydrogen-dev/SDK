/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// FinancialStatementAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class FinancialStatementAnalysisRequest :  IEquatable<FinancialStatementAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines AccountingMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountingMethodEnum
        {
            
            /// <summary>
            /// Enum Accrual for value: accrual
            /// </summary>
            [EnumMember(Value = "accrual")]
            Accrual = 1,
            
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 2
        }

        /// <summary>
        /// Gets or Sets AccountingMethod
        /// </summary>
        [DataMember(Name="accounting_method", EmitDefaultValue=false)]
        public AccountingMethodEnum AccountingMethod { get; set; }
        /// <summary>
        /// Defines HistoryFrequencyInterval
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HistoryFrequencyIntervalEnum
        {
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,
            
            /// <summary>
            /// Enum Week for value: week
            /// </summary>
            [EnumMember(Value = "week")]
            Week = 2,
            
            /// <summary>
            /// Enum Month for value: month
            /// </summary>
            [EnumMember(Value = "month")]
            Month = 3,
            
            /// <summary>
            /// Enum Quarter for value: quarter
            /// </summary>
            [EnumMember(Value = "quarter")]
            Quarter = 4,
            
            /// <summary>
            /// Enum Year for value: year
            /// </summary>
            [EnumMember(Value = "year")]
            Year = 5
        }

        /// <summary>
        /// Gets or Sets HistoryFrequencyInterval
        /// </summary>
        [DataMember(Name="history_frequency_interval", EmitDefaultValue=false)]
        public HistoryFrequencyIntervalEnum? HistoryFrequencyInterval { get; set; }
        /// <summary>
        /// Defines StatementType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatementTypeEnum
        {
            
            /// <summary>
            /// Enum Incomestatement for value: income_statement
            /// </summary>
            [EnumMember(Value = "income_statement")]
            Incomestatement = 1,
            
            /// <summary>
            /// Enum Balancesheet for value: balance_sheet
            /// </summary>
            [EnumMember(Value = "balance_sheet")]
            Balancesheet = 2,
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 3
        }

        /// <summary>
        /// Gets or Sets StatementType
        /// </summary>
        [DataMember(Name="statement_type", EmitDefaultValue=false)]
        public StatementTypeEnum? StatementType { get; set; }
        /// <summary>
        /// Defines PeriodLength
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodLengthEnum
        {
            
            /// <summary>
            /// Enum Annual for value: annual
            /// </summary>
            [EnumMember(Value = "annual")]
            Annual = 1,
            
            /// <summary>
            /// Enum Quarterly for value: quarterly
            /// </summary>
            [EnumMember(Value = "quarterly")]
            Quarterly = 2,
            
            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 3,
            
            /// <summary>
            /// Enum Ytd for value: ytd
            /// </summary>
            [EnumMember(Value = "ytd")]
            Ytd = 4,
            
            /// <summary>
            /// Enum Qtd for value: qtd
            /// </summary>
            [EnumMember(Value = "qtd")]
            Qtd = 5,
            
            /// <summary>
            /// Enum Mtd for value: mtd
            /// </summary>
            [EnumMember(Value = "mtd")]
            Mtd = 6
        }

        /// <summary>
        /// Gets or Sets PeriodLength
        /// </summary>
        [DataMember(Name="period_length", EmitDefaultValue=false)]
        public PeriodLengthEnum? PeriodLength { get; set; }
        /// <summary>
        /// Defines StatNames
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatNamesEnum
        {
            
            /// <summary>
            /// Enum Cash for value: cash
            /// </summary>
            [EnumMember(Value = "cash")]
            Cash = 1,
            
            /// <summary>
            /// Enum Accountsreceivable for value: accounts_receivable
            /// </summary>
            [EnumMember(Value = "accounts_receivable")]
            Accountsreceivable = 2,
            
            /// <summary>
            /// Enum Totalassets for value: total_assets
            /// </summary>
            [EnumMember(Value = "total_assets")]
            Totalassets = 3,
            
            /// <summary>
            /// Enum Accountspayable for value: accounts_payable
            /// </summary>
            [EnumMember(Value = "accounts_payable")]
            Accountspayable = 4,
            
            /// <summary>
            /// Enum Totalliabilities for value: total_liabilities
            /// </summary>
            [EnumMember(Value = "total_liabilities")]
            Totalliabilities = 5,
            
            /// <summary>
            /// Enum Totalequity for value: total_equity
            /// </summary>
            [EnumMember(Value = "total_equity")]
            Totalequity = 6,
            
            /// <summary>
            /// Enum Totalrevenue for value: total_revenue
            /// </summary>
            [EnumMember(Value = "total_revenue")]
            Totalrevenue = 7,
            
            /// <summary>
            /// Enum Cogs for value: cogs
            /// </summary>
            [EnumMember(Value = "cogs")]
            Cogs = 8,
            
            /// <summary>
            /// Enum Totalexpenses for value: total_expenses
            /// </summary>
            [EnumMember(Value = "total_expenses")]
            Totalexpenses = 9,
            
            /// <summary>
            /// Enum Operatingincome for value: operating_income
            /// </summary>
            [EnumMember(Value = "operating_income")]
            Operatingincome = 10,
            
            /// <summary>
            /// Enum Grossprofit for value: gross_profit
            /// </summary>
            [EnumMember(Value = "gross_profit")]
            Grossprofit = 11,
            
            /// <summary>
            /// Enum Netincome for value: net_income
            /// </summary>
            [EnumMember(Value = "net_income")]
            Netincome = 12,
            
            /// <summary>
            /// Enum Ebitda for value: ebitda
            /// </summary>
            [EnumMember(Value = "ebitda")]
            Ebitda = 13
        }


        /// <summary>
        /// Gets or Sets StatNames
        /// </summary>
        [DataMember(Name="stat_names", EmitDefaultValue=false)]
        public List<StatNamesEnum> StatNames { get; set; }
        /// <summary>
        /// Defines PeriodType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodTypeEnum
        {
            
            /// <summary>
            /// Enum Calendar for value: calendar
            /// </summary>
            [EnumMember(Value = "calendar")]
            Calendar = 1,
            
            /// <summary>
            /// Enum Fiscal for value: fiscal
            /// </summary>
            [EnumMember(Value = "fiscal")]
            Fiscal = 2
        }

        /// <summary>
        /// Gets or Sets PeriodType
        /// </summary>
        [DataMember(Name="period_type", EmitDefaultValue=false)]
        public PeriodTypeEnum? PeriodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialStatementAnalysisRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinancialStatementAnalysisRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialStatementAnalysisRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="showHistory">showHistory (default to false).</param>
        /// <param name="accountingMethod">accountingMethod (required).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="historyFrequencyInterval">historyFrequencyInterval (default to HistoryFrequencyIntervalEnum.Month).</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="periodQuarter">periodQuarter.</param>
        /// <param name="statementType">statementType (default to StatementTypeEnum.All).</param>
        /// <param name="periodMonth">periodMonth.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="businessId">businessId.</param>
        /// <param name="periodYear">periodYear.</param>
        /// <param name="periodLength">periodLength (default to PeriodLengthEnum.Quarterly).</param>
        /// <param name="statNames">statNames.</param>
        /// <param name="periodType">periodType.</param>
        public FinancialStatementAnalysisRequest(string currencyCode = default(string), Guid? clientId = default(Guid?), bool? showHistory = false, AccountingMethodEnum accountingMethod = default(AccountingMethodEnum), DateTime? endDate = default(DateTime?), HistoryFrequencyIntervalEnum? historyFrequencyInterval = HistoryFrequencyIntervalEnum.Month, string currencyConversion = default(string), int? periodQuarter = default(int?), StatementTypeEnum? statementType = StatementTypeEnum.All, int? periodMonth = default(int?), DateTime? startDate = default(DateTime?), Guid? businessId = default(Guid?), int? periodYear = default(int?), PeriodLengthEnum? periodLength = PeriodLengthEnum.Quarterly, List<StatNamesEnum> statNames = default(List<StatNamesEnum>), PeriodTypeEnum? periodType = default(PeriodTypeEnum?))
        {
            // to ensure "accountingMethod" is required (not null)
            if (accountingMethod == null)
            {
                throw new InvalidDataException("accountingMethod is a required property for FinancialStatementAnalysisRequest and cannot be null");
            }
            else
            {
                this.AccountingMethod = accountingMethod;
            }
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "showHistory" provided
            if (showHistory == null)
            {
                this.ShowHistory = false;
            }
            else
            {
                this.ShowHistory = showHistory;
            }
            this.EndDate = endDate;
            // use default value if no "historyFrequencyInterval" provided
            if (historyFrequencyInterval == null)
            {
                this.HistoryFrequencyInterval = HistoryFrequencyIntervalEnum.Month;
            }
            else
            {
                this.HistoryFrequencyInterval = historyFrequencyInterval;
            }
            this.CurrencyConversion = currencyConversion;
            this.PeriodQuarter = periodQuarter;
            // use default value if no "statementType" provided
            if (statementType == null)
            {
                this.StatementType = StatementTypeEnum.All;
            }
            else
            {
                this.StatementType = statementType;
            }
            this.PeriodMonth = periodMonth;
            this.StartDate = startDate;
            this.BusinessId = businessId;
            this.PeriodYear = periodYear;
            // use default value if no "periodLength" provided
            if (periodLength == null)
            {
                this.PeriodLength = PeriodLengthEnum.Quarterly;
            }
            else
            {
                this.PeriodLength = periodLength;
            }
            this.StatNames = statNames;
            this.PeriodType = periodType;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ShowHistory
        /// </summary>
        [DataMember(Name="show_history", EmitDefaultValue=false)]
        public bool? ShowHistory { get; set; }


        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }


        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets PeriodQuarter
        /// </summary>
        [DataMember(Name="period_quarter", EmitDefaultValue=false)]
        public int? PeriodQuarter { get; set; }


        /// <summary>
        /// Gets or Sets PeriodMonth
        /// </summary>
        [DataMember(Name="period_month", EmitDefaultValue=false)]
        public int? PeriodMonth { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets BusinessId
        /// </summary>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// Gets or Sets PeriodYear
        /// </summary>
        [DataMember(Name="period_year", EmitDefaultValue=false)]
        public int? PeriodYear { get; set; }




        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FinancialStatementAnalysisRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ShowHistory: ").Append(ShowHistory).Append("\n");
            sb.Append("  AccountingMethod: ").Append(AccountingMethod).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  HistoryFrequencyInterval: ").Append(HistoryFrequencyInterval).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  PeriodQuarter: ").Append(PeriodQuarter).Append("\n");
            sb.Append("  StatementType: ").Append(StatementType).Append("\n");
            sb.Append("  PeriodMonth: ").Append(PeriodMonth).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  PeriodYear: ").Append(PeriodYear).Append("\n");
            sb.Append("  PeriodLength: ").Append(PeriodLength).Append("\n");
            sb.Append("  StatNames: ").Append(StatNames).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FinancialStatementAnalysisRequest);
        }

        /// <summary>
        /// Returns true if FinancialStatementAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of FinancialStatementAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FinancialStatementAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ShowHistory == input.ShowHistory ||
                    (this.ShowHistory != null &&
                    this.ShowHistory.Equals(input.ShowHistory))
                ) && 
                (
                    this.AccountingMethod == input.AccountingMethod ||
                    (this.AccountingMethod != null &&
                    this.AccountingMethod.Equals(input.AccountingMethod))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.HistoryFrequencyInterval == input.HistoryFrequencyInterval ||
                    (this.HistoryFrequencyInterval != null &&
                    this.HistoryFrequencyInterval.Equals(input.HistoryFrequencyInterval))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.PeriodQuarter == input.PeriodQuarter ||
                    (this.PeriodQuarter != null &&
                    this.PeriodQuarter.Equals(input.PeriodQuarter))
                ) && 
                (
                    this.StatementType == input.StatementType ||
                    (this.StatementType != null &&
                    this.StatementType.Equals(input.StatementType))
                ) && 
                (
                    this.PeriodMonth == input.PeriodMonth ||
                    (this.PeriodMonth != null &&
                    this.PeriodMonth.Equals(input.PeriodMonth))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.PeriodYear == input.PeriodYear ||
                    (this.PeriodYear != null &&
                    this.PeriodYear.Equals(input.PeriodYear))
                ) && 
                (
                    this.PeriodLength == input.PeriodLength ||
                    (this.PeriodLength != null &&
                    this.PeriodLength.Equals(input.PeriodLength))
                ) && 
                (
                    this.StatNames == input.StatNames ||
                    this.StatNames != null &&
                    this.StatNames.SequenceEqual(input.StatNames)
                ) && 
                (
                    this.PeriodType == input.PeriodType ||
                    (this.PeriodType != null &&
                    this.PeriodType.Equals(input.PeriodType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ShowHistory != null)
                    hashCode = hashCode * 59 + this.ShowHistory.GetHashCode();
                if (this.AccountingMethod != null)
                    hashCode = hashCode * 59 + this.AccountingMethod.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.HistoryFrequencyInterval != null)
                    hashCode = hashCode * 59 + this.HistoryFrequencyInterval.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.PeriodQuarter != null)
                    hashCode = hashCode * 59 + this.PeriodQuarter.GetHashCode();
                if (this.StatementType != null)
                    hashCode = hashCode * 59 + this.StatementType.GetHashCode();
                if (this.PeriodMonth != null)
                    hashCode = hashCode * 59 + this.PeriodMonth.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.PeriodYear != null)
                    hashCode = hashCode * 59 + this.PeriodYear.GetHashCode();
                if (this.PeriodLength != null)
                    hashCode = hashCode * 59 + this.PeriodLength.GetHashCode();
                if (this.StatNames != null)
                    hashCode = hashCode * 59 + this.StatNames.GetHashCode();
                if (this.PeriodType != null)
                    hashCode = hashCode * 59 + this.PeriodType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PeriodQuarter (int?) maximum
            if(this.PeriodQuarter > (int?)4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodQuarter, must be a value less than or equal to 4.", new [] { "PeriodQuarter" });
            }

            // PeriodQuarter (int?) minimum
            if(this.PeriodQuarter < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodQuarter, must be a value greater than or equal to 1.", new [] { "PeriodQuarter" });
            }

            // PeriodMonth (int?) maximum
            if(this.PeriodMonth > (int?)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodMonth, must be a value less than or equal to 12.", new [] { "PeriodMonth" });
            }

            // PeriodMonth (int?) minimum
            if(this.PeriodMonth < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PeriodMonth, must be a value greater than or equal to 1.", new [] { "PeriodMonth" });
            }

            yield break;
        }
    }

}
