/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.model.DecisionTree;
import com.hydrogen.nucleus.model.DecisionTreeCO;
import com.hydrogen.nucleus.model.DecisionTreeResultVO;
import com.hydrogen.nucleus.model.Node;
import com.hydrogen.nucleus.model.NodeRelationship;
import com.hydrogen.nucleus.model.PageDecisionTree;
import com.hydrogen.nucleus.model.PageNode;
import com.hydrogen.nucleus.model.PageNodeRelationship;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DecisionTreeApi
 */
@Ignore
public class DecisionTreeApiTest {

    private final DecisionTreeApi api = new DecisionTreeApi();

    
    /**
     * Decision tree result
     *
     * Decision tree result. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDecisionTreeResultUsingPostTest() throws ApiException {
        DecisionTreeCO decisionTreeCO = null;
        DecisionTreeResultVO response = api.createDecisionTreeResultUsingPost(decisionTreeCO);

        // TODO: test validations
    }
    
    /**
     * Create a decision tree
     *
     * Create a new decision tree for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDecisionTreeUsingPostTest() throws ApiException {
        DecisionTree decisionTree = null;
        DecisionTree response = api.createDecisionTreeUsingPost(decisionTree);

        // TODO: test validations
    }
    
    /**
     * Create a node relationship
     *
     * Create a new node relationship for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeRelationshipUsingPostTest() throws ApiException {
        NodeRelationship node = null;
        NodeRelationship response = api.createNodeRelationshipUsingPost(node);

        // TODO: test validations
    }
    
    /**
     * Create a node
     *
     * Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNodeUsingPostTest() throws ApiException {
        Node node = null;
        Node response = api.createNodeUsingPost(node);

        // TODO: test validations
    }
    
    /**
     * Delete a decision tree
     *
     * Permanently delete a decision tree.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDecisionTreeUsingDeleteTest() throws ApiException {
        UUID decisionTreeId = null;
        api.deleteDecisionTreeUsingDelete(decisionTreeId);

        // TODO: test validations
    }
    
    /**
     * Delete a node relationship
     *
     * Permanently delete a node relationship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeRelationshipUsingDeleteTest() throws ApiException {
        UUID nodeRelationshipId = null;
        api.deleteNodeRelationshipUsingDelete(nodeRelationshipId);

        // TODO: test validations
    }
    
    /**
     * Delete a node
     *
     * Permanently delete a node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNodeUsingDeleteTest() throws ApiException {
        UUID nodeId = null;
        api.deleteNodeUsingDelete(nodeId);

        // TODO: test validations
    }
    
    /**
     * List all decision tree
     *
     * Get the information for all decision trees defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDecisionTreeAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageDecisionTree response = api.getDecisionTreeAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a decision tree
     *
     * Retrieve the information for a decision tree.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDecisionTreeUsingGetTest() throws ApiException {
        UUID decisionTreeId = null;
        DecisionTree response = api.getDecisionTreeUsingGet(decisionTreeId);

        // TODO: test validations
    }
    
    /**
     * List all nodes
     *
     * List all nodes that are defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageNode response = api.getNodeAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * List all node relationships
     *
     * Get the information for all the node relationships defined for your firm.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeRelationshipAllUsingGetTest() throws ApiException {
        Boolean ascending = null;
        String filter = null;
        String orderBy = null;
        Integer page = null;
        Integer size = null;
        PageNodeRelationship response = api.getNodeRelationshipAllUsingGet(ascending, filter, orderBy, page, size);

        // TODO: test validations
    }
    
    /**
     * Retrieve a node relationship
     *
     * Retrieve the information for a node relationship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeRelationshipUsingGetTest() throws ApiException {
        UUID nodeRelationshipId = null;
        NodeRelationship response = api.getNodeRelationshipUsingGet(nodeRelationshipId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a node
     *
     * Retrieve the information for a node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeUsingGetTest() throws ApiException {
        UUID nodeId = null;
        Node response = api.getNodeUsingGet(nodeId);

        // TODO: test validations
    }
    
    /**
     * Update a decision tree
     *
     * Updated the information for a decision tree.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDecisionTreeUsingPutTest() throws ApiException {
        Object decisionTree = null;
        UUID decisionTreeId = null;
        DecisionTree response = api.updateDecisionTreeUsingPut(decisionTree, decisionTreeId);

        // TODO: test validations
    }
    
    /**
     * Update a node relationship
     *
     * Update the information for a node relationship.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeRelationshipUsingPutTest() throws ApiException {
        Object jsonNode = null;
        UUID nodeRelationshipId = null;
        NodeRelationship response = api.updateNodeRelationshipUsingPut(jsonNode, nodeRelationshipId);

        // TODO: test validations
    }
    
    /**
     * Update a node
     *
     * Updated the information for a node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNodeUsingPutTest() throws ApiException {
        Object jsonNode = null;
        UUID nodeId = null;
        Node response = api.updateNodeUsingPut(jsonNode, nodeId);

        // TODO: test validations
    }
    
}
