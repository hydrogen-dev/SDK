=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.20

=end

require 'uri'

module NucleusApi
  class GoalApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a goal track record
    # Create a goal track record for a goal under a client.
    # @param goal_track goalTrack
    # @param [Hash] opts the optional parameters
    # @return [GoalTrack]
    def create_goal_track_using_post(goal_track, opts = {})
      data, _status_code, _headers = create_goal_track_using_post_with_http_info(goal_track, opts)
      data
    end

    # Create a goal track record
    # Create a goal track record for a goal under a client.
    # @param goal_track goalTrack
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalTrack, Fixnum, Hash)>] GoalTrack data, response status code and response headers
    def create_goal_track_using_post_with_http_info(goal_track, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.create_goal_track_using_post ...'
      end
      # verify the required parameter 'goal_track' is set
      if @api_client.config.client_side_validation && goal_track.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track' when calling GoalApi.create_goal_track_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(goal_track)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#create_goal_track_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a goal
    # Create a new goal for your firm that clients can customize for themselves.
    # @param goal_request goalRequest
    # @param [Hash] opts the optional parameters
    # @return [Goal]
    def create_goal_using_post(goal_request, opts = {})
      data, _status_code, _headers = create_goal_using_post_with_http_info(goal_request, opts)
      data
    end

    # Create a goal
    # Create a new goal for your firm that clients can customize for themselves.
    # @param goal_request goalRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Goal, Fixnum, Hash)>] Goal data, response status code and response headers
    def create_goal_using_post_with_http_info(goal_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.create_goal_using_post ...'
      end
      # verify the required parameter 'goal_request' is set
      if @api_client.config.client_side_validation && goal_request.nil?
        fail ArgumentError, "Missing the required parameter 'goal_request' when calling GoalApi.create_goal_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(goal_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Goal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#create_goal_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a goal track record
    # Permanently delete an goal track record for a goal under a client.
    # @param goal_track_id UUID goal_track_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_goal_track_using_delete(goal_track_id, opts = {})
      delete_goal_track_using_delete_with_http_info(goal_track_id, opts)
      nil
    end

    # Delete a goal track record
    # Permanently delete an goal track record for a goal under a client.
    # @param goal_track_id UUID goal_track_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_goal_track_using_delete_with_http_info(goal_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.delete_goal_track_using_delete ...'
      end
      # verify the required parameter 'goal_track_id' is set
      if @api_client.config.client_side_validation && goal_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track_id' when calling GoalApi.delete_goal_track_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track/{goal_track_id}'.sub('{' + 'goal_track_id' + '}', goal_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#delete_goal_track_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a goal
    # Permanently delete a goal for your firm.
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_goal_using_delete(goal_id, opts = {})
      delete_goal_using_delete_with_http_info(goal_id, opts)
      nil
    end

    # Delete a goal
    # Permanently delete a goal for your firm.
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_goal_using_delete_with_http_info(goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.delete_goal_using_delete ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.delete_goal_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#delete_goal_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all goals
    # Get the details for all goals defined by your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageGoal]
    def get_goal_all_using_get(opts = {})
      data, _status_code, _headers = get_goal_all_using_get_with_http_info(opts)
      data
    end

    # List all goals
    # Get the details for all goals defined by your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageGoal, Fixnum, Hash)>] PageGoal data, response status code and response headers
    def get_goal_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/goal'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageGoal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List goal asset sizes
    # Get a list of asset sizes per date for a goal for a specified client.
    # @param client_id client_id
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date
    # @option opts [BOOLEAN] :get_latest get_latest (default to false)
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal (default to false)
    # @option opts [String] :sort_type sort_type
    # @option opts [Date] :start_date start date
    # @return [Array<AvailableDateDoubleVO>]
    def get_goal_asset_size_all_using_get(client_id, goal_id, opts = {})
      data, _status_code, _headers = get_goal_asset_size_all_using_get_with_http_info(client_id, goal_id, opts)
      data
    end

    # List goal asset sizes
    # Get a list of asset sizes per date for a goal for a specified client.
    # @param client_id client_id
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date
    # @option opts [BOOLEAN] :get_latest get_latest
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal
    # @option opts [String] :sort_type sort_type
    # @option opts [Date] :start_date start date
    # @return [Array<(Array<AvailableDateDoubleVO>, Fixnum, Hash)>] Array<AvailableDateDoubleVO> data, response status code and response headers
    def get_goal_asset_size_all_using_get_with_http_info(client_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal_asset_size_all_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling GoalApi.get_goal_asset_size_all_using_get"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.get_goal_asset_size_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}/asset_size'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_id'] = client_id
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'portfolio_goal'] = opts[:'portfolio_goal'] if !opts[:'portfolio_goal'].nil?
      query_params[:'sort_type'] = opts[:'sort_type'] if !opts[:'sort_type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AvailableDateDoubleVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal_asset_size_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List goal holdings
    # Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
    # @param client_id client_id
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal (default to false)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [Date] :start_date start date
    # @return [PagePortfolioHoldingAgg]
    def get_goal_holding_all_using_get(client_id, goal_id, opts = {})
      data, _status_code, _headers = get_goal_holding_all_using_get_with_http_info(client_id, goal_id, opts)
      data
    end

    # List goal holdings
    # Get the information for all the securities that are currently being held in portfolios associated with a particular goal.
    # @param client_id client_id
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal
    # @option opts [Integer] :size size
    # @option opts [Date] :start_date start date
    # @return [Array<(PagePortfolioHoldingAgg, Fixnum, Hash)>] PagePortfolioHoldingAgg data, response status code and response headers
    def get_goal_holding_all_using_get_with_http_info(client_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal_holding_all_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling GoalApi.get_goal_holding_all_using_get"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.get_goal_holding_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}/holding'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_id'] = client_id
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'portfolio_goal'] = opts[:'portfolio_goal'] if !opts[:'portfolio_goal'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioHoldingAgg')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal_holding_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all goal track records
    # Get information for all goal track records stored for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :end_date end date 
    # @option opts [String] :filter filter
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [String] :start_date start date 
    # @return [PageGoalTrack]
    def get_goal_track_all_using_get(opts = {})
      data, _status_code, _headers = get_goal_track_all_using_get_with_http_info(opts)
      data
    end

    # List all goal track records
    # Get information for all goal track records stored for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :end_date end date 
    # @option opts [String] :filter filter
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @option opts [String] :start_date start date 
    # @return [Array<(PageGoalTrack, Fixnum, Hash)>] PageGoalTrack data, response status code and response headers
    def get_goal_track_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal_track_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageGoalTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal_track_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a goal track record
    # Retrieve the information for a specific goal track record for a goal under a client.
    # @param goal_track_id UUID goal_track_id
    # @param [Hash] opts the optional parameters
    # @return [GoalTrack]
    def get_goal_track_using_get(goal_track_id, opts = {})
      data, _status_code, _headers = get_goal_track_using_get_with_http_info(goal_track_id, opts)
      data
    end

    # Retrieve a goal track record
    # Retrieve the information for a specific goal track record for a goal under a client.
    # @param goal_track_id UUID goal_track_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalTrack, Fixnum, Hash)>] GoalTrack data, response status code and response headers
    def get_goal_track_using_get_with_http_info(goal_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal_track_using_get ...'
      end
      # verify the required parameter 'goal_track_id' is set
      if @api_client.config.client_side_validation && goal_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track_id' when calling GoalApi.get_goal_track_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track/{goal_track_id}'.sub('{' + 'goal_track_id' + '}', goal_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal_track_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List goal transactions
    # Get the information for all transactions under portfolios associated with a particular goal.
    # @param client_id client_id
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal (default to false)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [Date] :start_date start date
    # @return [PagePortfolioTransaction]
    def get_goal_transaction_all_using_get(client_id, goal_id, opts = {})
      data, _status_code, _headers = get_goal_transaction_all_using_get_with_http_info(client_id, goal_id, opts)
      data
    end

    # List goal transactions
    # Get the information for all transactions under portfolios associated with a particular goal.
    # @param client_id client_id
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion Currency Code
    # @option opts [Date] :end_date end date
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [BOOLEAN] :portfolio_goal portfolio_goal
    # @option opts [Integer] :size size
    # @option opts [Date] :start_date start date
    # @return [Array<(PagePortfolioTransaction, Fixnum, Hash)>] PagePortfolioTransaction data, response status code and response headers
    def get_goal_transaction_all_using_get_with_http_info(client_id, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal_transaction_all_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling GoalApi.get_goal_transaction_all_using_get"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.get_goal_transaction_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}/transaction'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_id'] = client_id
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'portfolio_goal'] = opts[:'portfolio_goal'] if !opts[:'portfolio_goal'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal_transaction_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a goal
    # Retrieve the information for a goal defined for your firm.
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @return [Goal]
    def get_goal_using_get(goal_id, opts = {})
      data, _status_code, _headers = get_goal_using_get_with_http_info(goal_id, opts)
      data
    end

    # Retrieve a goal
    # Retrieve the information for a goal defined for your firm.
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Goal, Fixnum, Hash)>] Goal data, response status code and response headers
    def get_goal_using_get_with_http_info(goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.get_goal_using_get ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.get_goal_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Goal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#get_goal_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a goal track record
    # Update the information for a goal track record.
    # @param goal_track goal_track
    # @param goal_track_id UUID goal_track_id
    # @param [Hash] opts the optional parameters
    # @return [GoalTrack]
    def update_goal_track_using_put(goal_track, goal_track_id, opts = {})
      data, _status_code, _headers = update_goal_track_using_put_with_http_info(goal_track, goal_track_id, opts)
      data
    end

    # Update a goal track record
    # Update the information for a goal track record.
    # @param goal_track goal_track
    # @param goal_track_id UUID goal_track_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GoalTrack, Fixnum, Hash)>] GoalTrack data, response status code and response headers
    def update_goal_track_using_put_with_http_info(goal_track, goal_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.update_goal_track_using_put ...'
      end
      # verify the required parameter 'goal_track' is set
      if @api_client.config.client_side_validation && goal_track.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track' when calling GoalApi.update_goal_track_using_put"
      end
      # verify the required parameter 'goal_track_id' is set
      if @api_client.config.client_side_validation && goal_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track_id' when calling GoalApi.update_goal_track_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track/{goal_track_id}'.sub('{' + 'goal_track_id' + '}', goal_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(goal_track)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalTrack')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#update_goal_track_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a goal
    # Update a goal defined for your firm.
    # @param goal goal
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @return [Goal]
    def update_goal_using_put(goal, goal_id, opts = {})
      data, _status_code, _headers = update_goal_using_put_with_http_info(goal, goal_id, opts)
      data
    end

    # Update a goal
    # Update a goal defined for your firm.
    # @param goal goal
    # @param goal_id UUID goal_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Goal, Fixnum, Hash)>] Goal data, response status code and response headers
    def update_goal_using_put_with_http_info(goal, goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GoalApi.update_goal_using_put ...'
      end
      # verify the required parameter 'goal' is set
      if @api_client.config.client_side_validation && goal.nil?
        fail ArgumentError, "Missing the required parameter 'goal' when calling GoalApi.update_goal_using_put"
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling GoalApi.update_goal_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(goal)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Goal')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GoalApi#update_goal_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
