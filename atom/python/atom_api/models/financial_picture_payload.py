# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FinancialPicturePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'start_date': 'date',
        'end_date': 'date',
        'currency_code': 'str',
        'show_history': 'bool',
        'show_change': 'bool'
    }

    attribute_map = {
        'client_id': 'client_id',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'currency_code': 'currency_code',
        'show_history': 'show_history',
        'show_change': 'show_change'
    }

    def __init__(self, client_id=None, start_date=None, end_date=None, currency_code='USD', show_history=None, show_change=None):  # noqa: E501
        """FinancialPicturePayload - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._start_date = None
        self._end_date = None
        self._currency_code = None
        self._show_history = None
        self._show_change = None
        self.discriminator = None

        self.client_id = client_id
        self.start_date = start_date
        self.end_date = end_date
        self.currency_code = currency_code
        self.show_history = show_history
        self.show_change = show_change

    @property
    def client_id(self):
        """Gets the client_id of this FinancialPicturePayload.  # noqa: E501

        The ID of a client's financial picture  # noqa: E501

        :return: The client_id of this FinancialPicturePayload.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FinancialPicturePayload.

        The ID of a client's financial picture  # noqa: E501

        :param client_id: The client_id of this FinancialPicturePayload.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def start_date(self):
        """Gets the start_date of this FinancialPicturePayload.  # noqa: E501

        Start date of the financial picture analysis. Defaults to earliest date there is data.  # noqa: E501

        :return: The start_date of this FinancialPicturePayload.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this FinancialPicturePayload.

        Start date of the financial picture analysis. Defaults to earliest date there is data.  # noqa: E501

        :param start_date: The start_date of this FinancialPicturePayload.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this FinancialPicturePayload.  # noqa: E501

        End date of the financial picture analysis. Defaults to latest date there is data.  # noqa: E501

        :return: The end_date of this FinancialPicturePayload.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this FinancialPicturePayload.

        End date of the financial picture analysis. Defaults to latest date there is data.  # noqa: E501

        :param end_date: The end_date of this FinancialPicturePayload.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def currency_code(self):
        """Gets the currency_code of this FinancialPicturePayload.  # noqa: E501

        Currency code used conduct the analysis. Only aggregation account records with this currency code will be considered  # noqa: E501

        :return: The currency_code of this FinancialPicturePayload.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this FinancialPicturePayload.

        Currency code used conduct the analysis. Only aggregation account records with this currency code will be considered  # noqa: E501

        :param currency_code: The currency_code of this FinancialPicturePayload.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def show_history(self):
        """Gets the show_history of this FinancialPicturePayload.  # noqa: E501

        If true, return a daily history of the user’s financial picture within the specified date range  # noqa: E501

        :return: The show_history of this FinancialPicturePayload.  # noqa: E501
        :rtype: bool
        """
        return self._show_history

    @show_history.setter
    def show_history(self, show_history):
        """Sets the show_history of this FinancialPicturePayload.

        If true, return a daily history of the user’s financial picture within the specified date range  # noqa: E501

        :param show_history: The show_history of this FinancialPicturePayload.  # noqa: E501
        :type: bool
        """
        if show_history is None:
            raise ValueError("Invalid value for `show_history`, must not be `None`")  # noqa: E501

        self._show_history = show_history

    @property
    def show_change(self):
        """Gets the show_change of this FinancialPicturePayload.  # noqa: E501

        If true, return cumulative changes in the user’s total assets, total liabilities, and net worth over time, within the specified date range  # noqa: E501

        :return: The show_change of this FinancialPicturePayload.  # noqa: E501
        :rtype: bool
        """
        return self._show_change

    @show_change.setter
    def show_change(self, show_change):
        """Sets the show_change of this FinancialPicturePayload.

        If true, return cumulative changes in the user’s total assets, total liabilities, and net worth over time, within the specified date range  # noqa: E501

        :param show_change: The show_change of this FinancialPicturePayload.  # noqa: E501
        :type: bool
        """
        if show_change is None:
            raise ValueError("Invalid value for `show_change`, must not be `None`")  # noqa: E501

        self._show_change = show_change

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialPicturePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialPicturePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
