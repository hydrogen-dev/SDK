/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing RiskProfileApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RiskProfileApiTests
    {
        private RiskProfileApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RiskProfileApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RiskProfileApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RiskProfileApi
            //Assert.IsInstanceOfType(typeof(RiskProfileApi), instance, "instance is a RiskProfileApi");
        }

        
        /// <summary>
        /// Test CreateRiskProfileUsingPost
        /// </summary>
        [Test]
        public void CreateRiskProfileUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RiskProfile riskProfile = null;
            //var response = instance.CreateRiskProfileUsingPost(riskProfile);
            //Assert.IsInstanceOf<RiskProfile> (response, "response is RiskProfile");
        }
        
        /// <summary>
        /// Test DeleteRiskProfileUsingDelete
        /// </summary>
        [Test]
        public void DeleteRiskProfileUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? riskProfileId = null;
            //instance.DeleteRiskProfileUsingDelete(riskProfileId);
            
        }
        
        /// <summary>
        /// Test GetRiskProfileAllUsingGet
        /// </summary>
        [Test]
        public void GetRiskProfileAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetRiskProfileAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageRiskProfile> (response, "response is PageRiskProfile");
        }
        
        /// <summary>
        /// Test GetRiskProfileUsingGet
        /// </summary>
        [Test]
        public void GetRiskProfileUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? riskProfileId = null;
            //var response = instance.GetRiskProfileUsingGet(riskProfileId);
            //Assert.IsInstanceOf<RiskProfile> (response, "response is RiskProfile");
        }
        
        /// <summary>
        /// Test UpdateRiskProfileUsingPut
        /// </summary>
        [Test]
        public void UpdateRiskProfileUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object riskProfile = null;
            //Guid? riskProfileId = null;
            //var response = instance.UpdateRiskProfileUsingPut(riskProfile, riskProfileId);
            //Assert.IsInstanceOf<RiskProfile> (response, "response is RiskProfile");
        }
        
    }

}
