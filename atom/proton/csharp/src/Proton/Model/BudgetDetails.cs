/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// BudgetDetails
    /// </summary>
    [DataContract]
    public partial class BudgetDetails :  IEquatable<BudgetDetails>, IValidatableObject
    {
        /// <summary>
        /// Defines FrequencyUnit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyUnitEnum
        {
            
            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            [EnumMember(Value = "daily")]
            Daily = 1,
            
            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 2,
            
            /// <summary>
            /// Enum BiWeekly for value: bi-weekly
            /// </summary>
            [EnumMember(Value = "bi-weekly")]
            BiWeekly = 3,
            
            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 4,
            
            /// <summary>
            /// Enum Quarterly for value: quarterly
            /// </summary>
            [EnumMember(Value = "quarterly")]
            Quarterly = 5,
            
            /// <summary>
            /// Enum Annually for value: annually
            /// </summary>
            [EnumMember(Value = "annually")]
            Annually = 6
        }

        /// <summary>
        /// Gets or Sets FrequencyUnit
        /// </summary>
        [DataMember(Name="frequency_unit", EmitDefaultValue=false)]
        public FrequencyUnitEnum FrequencyUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BudgetDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BudgetDetails" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="frequency">frequency (default to 1).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="totalValue">totalValue.</param>
        /// <param name="budget">budget.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="aggregationAccounts">aggregationAccounts.</param>
        /// <param name="frequencyUnit">frequencyUnit (required).</param>
        public BudgetDetails(string currencyCode = default(string), Guid? clientId = default(Guid?), int? frequency = 1, DateTime? endDate = default(DateTime?), float? totalValue = default(float?), List<BudgetComponent> budget = default(List<BudgetComponent>), Guid? accountId = default(Guid?), DateTime? startDate = default(DateTime?), List<BudgetAggregationAccount> aggregationAccounts = default(List<BudgetAggregationAccount>), FrequencyUnitEnum frequencyUnit = default(FrequencyUnitEnum))
        {
            // to ensure "frequencyUnit" is required (not null)
            if (frequencyUnit == null)
            {
                throw new InvalidDataException("frequencyUnit is a required property for BudgetDetails and cannot be null");
            }
            else
            {
                this.FrequencyUnit = frequencyUnit;
            }
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "frequency" provided
            if (frequency == null)
            {
                this.Frequency = 1;
            }
            else
            {
                this.Frequency = frequency;
            }
            this.EndDate = endDate;
            this.TotalValue = totalValue;
            this.Budget = budget;
            this.AccountId = accountId;
            this.StartDate = startDate;
            this.AggregationAccounts = aggregationAccounts;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets TotalValue
        /// </summary>
        [DataMember(Name="total_value", EmitDefaultValue=false)]
        public float? TotalValue { get; set; }

        /// <summary>
        /// Gets or Sets Budget
        /// </summary>
        [DataMember(Name="budget", EmitDefaultValue=false)]
        public List<BudgetComponent> Budget { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccounts
        /// </summary>
        [DataMember(Name="aggregation_accounts", EmitDefaultValue=false)]
        public List<BudgetAggregationAccount> AggregationAccounts { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BudgetDetails {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  TotalValue: ").Append(TotalValue).Append("\n");
            sb.Append("  Budget: ").Append(Budget).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  AggregationAccounts: ").Append(AggregationAccounts).Append("\n");
            sb.Append("  FrequencyUnit: ").Append(FrequencyUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BudgetDetails);
        }

        /// <summary>
        /// Returns true if BudgetDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BudgetDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BudgetDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.TotalValue == input.TotalValue ||
                    (this.TotalValue != null &&
                    this.TotalValue.Equals(input.TotalValue))
                ) && 
                (
                    this.Budget == input.Budget ||
                    this.Budget != null &&
                    this.Budget.SequenceEqual(input.Budget)
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.AggregationAccounts == input.AggregationAccounts ||
                    this.AggregationAccounts != null &&
                    this.AggregationAccounts.SequenceEqual(input.AggregationAccounts)
                ) && 
                (
                    this.FrequencyUnit == input.FrequencyUnit ||
                    (this.FrequencyUnit != null &&
                    this.FrequencyUnit.Equals(input.FrequencyUnit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.TotalValue != null)
                    hashCode = hashCode * 59 + this.TotalValue.GetHashCode();
                if (this.Budget != null)
                    hashCode = hashCode * 59 + this.Budget.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.AggregationAccounts != null)
                    hashCode = hashCode * 59 + this.AggregationAccounts.GetHashCode();
                if (this.FrequencyUnit != null)
                    hashCode = hashCode * 59 + this.FrequencyUnit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Frequency (int?) minimum
            if(this.Frequency < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Frequency, must be a value greater than or equal to 1.", new [] { "Frequency" });
            }

            // TotalValue (float?) minimum
            if(this.TotalValue < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalValue, must be a value greater than or equal to 0.", new [] { "TotalValue" });
            }

            yield break;
        }
    }

}
