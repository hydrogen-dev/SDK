<?php
/**
 * FinancialPictureRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * FinancialPictureRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinancialPictureRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'financialPictureRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency_code' => 'string',
        'client_id' => 'string',
        'show_history' => 'bool',
        'end_date' => '\DateTime',
        'currency_conversion' => 'string',
        'start_date' => '\DateTime',
        'show_category_breakdown' => 'bool',
        'show_change' => 'bool',
        'household_id' => 'string',
        'create_log' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency_code' => null,
        'client_id' => 'uuid',
        'show_history' => null,
        'end_date' => 'date',
        'currency_conversion' => null,
        'start_date' => 'date',
        'show_category_breakdown' => null,
        'show_change' => null,
        'household_id' => 'uuid',
        'create_log' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency_code' => 'currency_code',
        'client_id' => 'client_id',
        'show_history' => 'show_history',
        'end_date' => 'end_date',
        'currency_conversion' => 'currency_conversion',
        'start_date' => 'start_date',
        'show_category_breakdown' => 'show_category_breakdown',
        'show_change' => 'show_change',
        'household_id' => 'household_id',
        'create_log' => 'create_log'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency_code' => 'setCurrencyCode',
        'client_id' => 'setClientId',
        'show_history' => 'setShowHistory',
        'end_date' => 'setEndDate',
        'currency_conversion' => 'setCurrencyConversion',
        'start_date' => 'setStartDate',
        'show_category_breakdown' => 'setShowCategoryBreakdown',
        'show_change' => 'setShowChange',
        'household_id' => 'setHouseholdId',
        'create_log' => 'setCreateLog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency_code' => 'getCurrencyCode',
        'client_id' => 'getClientId',
        'show_history' => 'getShowHistory',
        'end_date' => 'getEndDate',
        'currency_conversion' => 'getCurrencyConversion',
        'start_date' => 'getStartDate',
        'show_category_breakdown' => 'getShowCategoryBreakdown',
        'show_change' => 'getShowChange',
        'household_id' => 'getHouseholdId',
        'create_log' => 'getCreateLog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['show_history'] = isset($data['show_history']) ? $data['show_history'] : false;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['currency_conversion'] = isset($data['currency_conversion']) ? $data['currency_conversion'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['show_category_breakdown'] = isset($data['show_category_breakdown']) ? $data['show_category_breakdown'] : true;
        $this->container['show_change'] = isset($data['show_change']) ? $data['show_change'] : false;
        $this->container['household_id'] = isset($data['household_id']) ? $data['household_id'] : null;
        $this->container['create_log'] = isset($data['create_log']) ? $data['create_log'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets show_history
     *
     * @return bool
     */
    public function getShowHistory()
    {
        return $this->container['show_history'];
    }

    /**
     * Sets show_history
     *
     * @param bool $show_history show_history
     *
     * @return $this
     */
    public function setShowHistory($show_history)
    {
        $this->container['show_history'] = $show_history;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets currency_conversion
     *
     * @return string
     */
    public function getCurrencyConversion()
    {
        return $this->container['currency_conversion'];
    }

    /**
     * Sets currency_conversion
     *
     * @param string $currency_conversion currency_conversion
     *
     * @return $this
     */
    public function setCurrencyConversion($currency_conversion)
    {
        $this->container['currency_conversion'] = $currency_conversion;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets show_category_breakdown
     *
     * @return bool
     */
    public function getShowCategoryBreakdown()
    {
        return $this->container['show_category_breakdown'];
    }

    /**
     * Sets show_category_breakdown
     *
     * @param bool $show_category_breakdown show_category_breakdown
     *
     * @return $this
     */
    public function setShowCategoryBreakdown($show_category_breakdown)
    {
        $this->container['show_category_breakdown'] = $show_category_breakdown;

        return $this;
    }

    /**
     * Gets show_change
     *
     * @return bool
     */
    public function getShowChange()
    {
        return $this->container['show_change'];
    }

    /**
     * Sets show_change
     *
     * @param bool $show_change show_change
     *
     * @return $this
     */
    public function setShowChange($show_change)
    {
        $this->container['show_change'] = $show_change;

        return $this;
    }

    /**
     * Gets household_id
     *
     * @return string
     */
    public function getHouseholdId()
    {
        return $this->container['household_id'];
    }

    /**
     * Sets household_id
     *
     * @param string $household_id household_id
     *
     * @return $this
     */
    public function setHouseholdId($household_id)
    {
        $this->container['household_id'] = $household_id;

        return $this;
    }

    /**
     * Gets create_log
     *
     * @return bool
     */
    public function getCreateLog()
    {
        return $this->container['create_log'];
    }

    /**
     * Sets create_log
     *
     * @param bool $create_log create_log
     *
     * @return $this
     */
    public function setCreateLog($create_log)
    {
        $this->container['create_log'] = $create_log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


