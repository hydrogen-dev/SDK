/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AnnuityDepositSchedule;
import io.swagger.client.model.GuaranteedRateBenefitSubpayload;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;

/**
 * VariableAnnuityPayload
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-12T10:03:00.746-04:00")
public class VariableAnnuityPayload {
  @SerializedName("portfolio_tickers")
  private List<String> portfolioTickers = new ArrayList<String>();

  @SerializedName("portfolio_weights")
  private List<BigDecimal> portfolioWeights = new ArrayList<BigDecimal>();

  @SerializedName("accumulation_horizon")
  private Integer accumulationHorizon = null;

  @SerializedName("decumulation_horizon")
  private Integer decumulationHorizon = null;

  @SerializedName("initial_balance")
  private BigDecimal initialBalance = null;

  @SerializedName("frequency_interval")
  private String frequencyInterval = null;

  @SerializedName("deposit_schedule")
  private AnnuityDepositSchedule depositSchedule = null;

  @SerializedName("inflation_rate")
  private BigDecimal inflationRate = null;

  @SerializedName("tax_rate")
  private BigDecimal taxRate = null;

  @SerializedName("annuitization_rate")
  private BigDecimal annuitizationRate = null;

  @SerializedName("guaranteed_rate_benefit")
  private List<GuaranteedRateBenefitSubpayload> guaranteedRateBenefit = null;

  @SerializedName("guaranteed_accumulation_benefit")
  private BigDecimal guaranteedAccumulationBenefit = null;

  @SerializedName("n")
  private Integer n = null;

  /**
   * The type of Monte Carlo result to output. Must be one of mean, median, or custom. Defaults to median.
   */
  @JsonAdapter(ResultTypeEnum.Adapter.class)
  public enum ResultTypeEnum {
    MEAN("mean"),
    
    MEDIAN("median"),
    
    CUSTOM("custom");

    private String value;

    ResultTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultTypeEnum fromValue(String text) {
      for (ResultTypeEnum b : ResultTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ResultTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("result_type")
  private ResultTypeEnum resultType = ResultTypeEnum.MEDIAN;

  @SerializedName("p")
  private BigDecimal p = null;

  @SerializedName("remove_outliers")
  private Boolean removeOutliers = false;

  @SerializedName("start_date")
  private LocalDate startDate = null;

  @SerializedName("end_date")
  private LocalDate endDate = null;

  @SerializedName("trading_days_per_year")
  private Integer tradingDaysPerYear = null;

  @SerializedName("use_proxy_data")
  private Boolean useProxyData = false;

  public VariableAnnuityPayload portfolioTickers(List<String> portfolioTickers) {
    this.portfolioTickers = portfolioTickers;
    return this;
  }

  public VariableAnnuityPayload addPortfolioTickersItem(String portfolioTickersItem) {
    this.portfolioTickers.add(portfolioTickersItem);
    return this;
  }

   /**
   * Portfolio tickers, referencing securities defined in the Nucleus API.
   * @return portfolioTickers
  **/
  @ApiModelProperty(required = true, value = "Portfolio tickers, referencing securities defined in the Nucleus API.")
  public List<String> getPortfolioTickers() {
    return portfolioTickers;
  }

  public void setPortfolioTickers(List<String> portfolioTickers) {
    this.portfolioTickers = portfolioTickers;
  }

  public VariableAnnuityPayload portfolioWeights(List<BigDecimal> portfolioWeights) {
    this.portfolioWeights = portfolioWeights;
    return this;
  }

  public VariableAnnuityPayload addPortfolioWeightsItem(BigDecimal portfolioWeightsItem) {
    this.portfolioWeights.add(portfolioWeightsItem);
    return this;
  }

   /**
   * Portfolio weights, corresponding to portfolio_tickers. Must sum to 1.0.
   * @return portfolioWeights
  **/
  @ApiModelProperty(required = true, value = "Portfolio weights, corresponding to portfolio_tickers. Must sum to 1.0.")
  public List<BigDecimal> getPortfolioWeights() {
    return portfolioWeights;
  }

  public void setPortfolioWeights(List<BigDecimal> portfolioWeights) {
    this.portfolioWeights = portfolioWeights;
  }

  public VariableAnnuityPayload accumulationHorizon(Integer accumulationHorizon) {
    this.accumulationHorizon = accumulationHorizon;
    return this;
  }

   /**
   * The number of years until the payout phase begins.
   * @return accumulationHorizon
  **/
  @ApiModelProperty(required = true, value = "The number of years until the payout phase begins.")
  public Integer getAccumulationHorizon() {
    return accumulationHorizon;
  }

  public void setAccumulationHorizon(Integer accumulationHorizon) {
    this.accumulationHorizon = accumulationHorizon;
  }

  public VariableAnnuityPayload decumulationHorizon(Integer decumulationHorizon) {
    this.decumulationHorizon = decumulationHorizon;
    return this;
  }

   /**
   * The number of years in the payout or decumulation phase.
   * @return decumulationHorizon
  **/
  @ApiModelProperty(required = true, value = "The number of years in the payout or decumulation phase.")
  public Integer getDecumulationHorizon() {
    return decumulationHorizon;
  }

  public void setDecumulationHorizon(Integer decumulationHorizon) {
    this.decumulationHorizon = decumulationHorizon;
  }

  public VariableAnnuityPayload initialBalance(BigDecimal initialBalance) {
    this.initialBalance = initialBalance;
    return this;
  }

   /**
   * The starting balance in the annuity plan, prior to any ongoing contributions. Must be greater than or equal to 0.
   * minimum: 0
   * @return initialBalance
  **/
  @ApiModelProperty(required = true, value = "The starting balance in the annuity plan, prior to any ongoing contributions. Must be greater than or equal to 0.")
  public BigDecimal getInitialBalance() {
    return initialBalance;
  }

  public void setInitialBalance(BigDecimal initialBalance) {
    this.initialBalance = initialBalance;
  }

  public VariableAnnuityPayload frequencyInterval(String frequencyInterval) {
    this.frequencyInterval = frequencyInterval;
    return this;
  }

   /**
   * Unit of time associated with accumulation_horizon, decumulation_horizon, start, end, and annuity payments.
   * @return frequencyInterval
  **/
  @ApiModelProperty(value = "Unit of time associated with accumulation_horizon, decumulation_horizon, start, end, and annuity payments.")
  public String getFrequencyInterval() {
    return frequencyInterval;
  }

  public void setFrequencyInterval(String frequencyInterval) {
    this.frequencyInterval = frequencyInterval;
  }

  public VariableAnnuityPayload depositSchedule(AnnuityDepositSchedule depositSchedule) {
    this.depositSchedule = depositSchedule;
    return this;
  }

   /**
   * Get depositSchedule
   * @return depositSchedule
  **/
  @ApiModelProperty(value = "")
  public AnnuityDepositSchedule getDepositSchedule() {
    return depositSchedule;
  }

  public void setDepositSchedule(AnnuityDepositSchedule depositSchedule) {
    this.depositSchedule = depositSchedule;
  }

  public VariableAnnuityPayload inflationRate(BigDecimal inflationRate) {
    this.inflationRate = inflationRate;
    return this;
  }

   /**
   * The annualized rate of inflation. Defaults to 0.
   * minimum: -1
   * @return inflationRate
  **/
  @ApiModelProperty(value = "The annualized rate of inflation. Defaults to 0.")
  public BigDecimal getInflationRate() {
    return inflationRate;
  }

  public void setInflationRate(BigDecimal inflationRate) {
    this.inflationRate = inflationRate;
  }

  public VariableAnnuityPayload taxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
    return this;
  }

   /**
   * The tax rate applied to annuity payouts. Defaults to 0.
   * minimum: 0
   * maximum: 1
   * @return taxRate
  **/
  @ApiModelProperty(value = "The tax rate applied to annuity payouts. Defaults to 0.")
  public BigDecimal getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }

  public VariableAnnuityPayload annuitizationRate(BigDecimal annuitizationRate) {
    this.annuitizationRate = annuitizationRate;
    return this;
  }

   /**
   * The discount rate used to calculate annuity payout amounts during decumulation_horizon. Defaults to 0.
   * @return annuitizationRate
  **/
  @ApiModelProperty(value = "The discount rate used to calculate annuity payout amounts during decumulation_horizon. Defaults to 0.")
  public BigDecimal getAnnuitizationRate() {
    return annuitizationRate;
  }

  public void setAnnuitizationRate(BigDecimal annuitizationRate) {
    this.annuitizationRate = annuitizationRate;
  }

  public VariableAnnuityPayload guaranteedRateBenefit(List<GuaranteedRateBenefitSubpayload> guaranteedRateBenefit) {
    this.guaranteedRateBenefit = guaranteedRateBenefit;
    return this;
  }

  public VariableAnnuityPayload addGuaranteedRateBenefitItem(GuaranteedRateBenefitSubpayload guaranteedRateBenefitItem) {
    if (this.guaranteedRateBenefit == null) {
      this.guaranteedRateBenefit = new ArrayList<GuaranteedRateBenefitSubpayload>();
    }
    this.guaranteedRateBenefit.add(guaranteedRateBenefitItem);
    return this;
  }

   /**
   * Boundaries enforced on the plan&#39;s rate of return.
   * @return guaranteedRateBenefit
  **/
  @ApiModelProperty(value = "Boundaries enforced on the plan's rate of return.")
  public List<GuaranteedRateBenefitSubpayload> getGuaranteedRateBenefit() {
    return guaranteedRateBenefit;
  }

  public void setGuaranteedRateBenefit(List<GuaranteedRateBenefitSubpayload> guaranteedRateBenefit) {
    this.guaranteedRateBenefit = guaranteedRateBenefit;
  }

  public VariableAnnuityPayload guaranteedAccumulationBenefit(BigDecimal guaranteedAccumulationBenefit) {
    this.guaranteedAccumulationBenefit = guaranteedAccumulationBenefit;
    return this;
  }

   /**
   * A guaranteed lower bound for the plan balance at the end of accumulation_horizon.
   * minimum: 0
   * @return guaranteedAccumulationBenefit
  **/
  @ApiModelProperty(value = "A guaranteed lower bound for the plan balance at the end of accumulation_horizon.")
  public BigDecimal getGuaranteedAccumulationBenefit() {
    return guaranteedAccumulationBenefit;
  }

  public void setGuaranteedAccumulationBenefit(BigDecimal guaranteedAccumulationBenefit) {
    this.guaranteedAccumulationBenefit = guaranteedAccumulationBenefit;
  }

  public VariableAnnuityPayload n(Integer n) {
    this.n = n;
    return this;
  }

   /**
   * The number of Monte Carlo simulations to run. Defaults to 1000.
   * @return n
  **/
  @ApiModelProperty(value = "The number of Monte Carlo simulations to run. Defaults to 1000.")
  public Integer getN() {
    return n;
  }

  public void setN(Integer n) {
    this.n = n;
  }

  public VariableAnnuityPayload resultType(ResultTypeEnum resultType) {
    this.resultType = resultType;
    return this;
  }

   /**
   * The type of Monte Carlo result to output. Must be one of mean, median, or custom. Defaults to median.
   * @return resultType
  **/
  @ApiModelProperty(value = "The type of Monte Carlo result to output. Must be one of mean, median, or custom. Defaults to median.")
  public ResultTypeEnum getResultType() {
    return resultType;
  }

  public void setResultType(ResultTypeEnum resultType) {
    this.resultType = resultType;
  }

  public VariableAnnuityPayload p(BigDecimal p) {
    this.p = p;
    return this;
  }

   /**
   * A result percentile to output, applicable when result_type is custom. Must be between 0 and 100 inclusive. Defaults to 50.
   * minimum: 0
   * maximum: 100
   * @return p
  **/
  @ApiModelProperty(value = "A result percentile to output, applicable when result_type is custom. Must be between 0 and 100 inclusive. Defaults to 50.")
  public BigDecimal getP() {
    return p;
  }

  public void setP(BigDecimal p) {
    this.p = p;
  }

  public VariableAnnuityPayload removeOutliers(Boolean removeOutliers) {
    this.removeOutliers = removeOutliers;
    return this;
  }

   /**
   * If true, remove outlying results. If true, outlier analysis is performed on a median absolute deviation (MAD) basis, at the 2.5 threshold. Defaults to false.
   * @return removeOutliers
  **/
  @ApiModelProperty(value = "If true, remove outlying results. If true, outlier analysis is performed on a median absolute deviation (MAD) basis, at the 2.5 threshold. Defaults to false.")
  public Boolean isRemoveOutliers() {
    return removeOutliers;
  }

  public void setRemoveOutliers(Boolean removeOutliers) {
    this.removeOutliers = removeOutliers;
  }

  public VariableAnnuityPayload startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date used for ticker price history. Defaults to the earliest common date among portfolio_tickers prices.
   * @return startDate
  **/
  @ApiModelProperty(value = "Start date used for ticker price history. Defaults to the earliest common date among portfolio_tickers prices.")
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }

  public VariableAnnuityPayload endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End date used for ticker price history. Defaults to the latest common date among portfolio_tickers prices.
   * @return endDate
  **/
  @ApiModelProperty(value = "End date used for ticker price history. Defaults to the latest common date among portfolio_tickers prices.")
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }

  public VariableAnnuityPayload tradingDaysPerYear(Integer tradingDaysPerYear) {
    this.tradingDaysPerYear = tradingDaysPerYear;
    return this;
  }

   /**
   * The number of days per year for which a portfolio is subject to market fluctuation. Defaults to 252.
   * minimum: 1
   * maximum: 365
   * @return tradingDaysPerYear
  **/
  @ApiModelProperty(value = "The number of days per year for which a portfolio is subject to market fluctuation. Defaults to 252.")
  public Integer getTradingDaysPerYear() {
    return tradingDaysPerYear;
  }

  public void setTradingDaysPerYear(Integer tradingDaysPerYear) {
    this.tradingDaysPerYear = tradingDaysPerYear;
  }

  public VariableAnnuityPayload useProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
    return this;
  }

   /**
   * If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.
   * @return useProxyData
  **/
  @ApiModelProperty(value = "If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.")
  public Boolean isUseProxyData() {
    return useProxyData;
  }

  public void setUseProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariableAnnuityPayload variableAnnuityPayload = (VariableAnnuityPayload) o;
    return Objects.equals(this.portfolioTickers, variableAnnuityPayload.portfolioTickers) &&
        Objects.equals(this.portfolioWeights, variableAnnuityPayload.portfolioWeights) &&
        Objects.equals(this.accumulationHorizon, variableAnnuityPayload.accumulationHorizon) &&
        Objects.equals(this.decumulationHorizon, variableAnnuityPayload.decumulationHorizon) &&
        Objects.equals(this.initialBalance, variableAnnuityPayload.initialBalance) &&
        Objects.equals(this.frequencyInterval, variableAnnuityPayload.frequencyInterval) &&
        Objects.equals(this.depositSchedule, variableAnnuityPayload.depositSchedule) &&
        Objects.equals(this.inflationRate, variableAnnuityPayload.inflationRate) &&
        Objects.equals(this.taxRate, variableAnnuityPayload.taxRate) &&
        Objects.equals(this.annuitizationRate, variableAnnuityPayload.annuitizationRate) &&
        Objects.equals(this.guaranteedRateBenefit, variableAnnuityPayload.guaranteedRateBenefit) &&
        Objects.equals(this.guaranteedAccumulationBenefit, variableAnnuityPayload.guaranteedAccumulationBenefit) &&
        Objects.equals(this.n, variableAnnuityPayload.n) &&
        Objects.equals(this.resultType, variableAnnuityPayload.resultType) &&
        Objects.equals(this.p, variableAnnuityPayload.p) &&
        Objects.equals(this.removeOutliers, variableAnnuityPayload.removeOutliers) &&
        Objects.equals(this.startDate, variableAnnuityPayload.startDate) &&
        Objects.equals(this.endDate, variableAnnuityPayload.endDate) &&
        Objects.equals(this.tradingDaysPerYear, variableAnnuityPayload.tradingDaysPerYear) &&
        Objects.equals(this.useProxyData, variableAnnuityPayload.useProxyData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(portfolioTickers, portfolioWeights, accumulationHorizon, decumulationHorizon, initialBalance, frequencyInterval, depositSchedule, inflationRate, taxRate, annuitizationRate, guaranteedRateBenefit, guaranteedAccumulationBenefit, n, resultType, p, removeOutliers, startDate, endDate, tradingDaysPerYear, useProxyData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariableAnnuityPayload {\n");
    
    sb.append("    portfolioTickers: ").append(toIndentedString(portfolioTickers)).append("\n");
    sb.append("    portfolioWeights: ").append(toIndentedString(portfolioWeights)).append("\n");
    sb.append("    accumulationHorizon: ").append(toIndentedString(accumulationHorizon)).append("\n");
    sb.append("    decumulationHorizon: ").append(toIndentedString(decumulationHorizon)).append("\n");
    sb.append("    initialBalance: ").append(toIndentedString(initialBalance)).append("\n");
    sb.append("    frequencyInterval: ").append(toIndentedString(frequencyInterval)).append("\n");
    sb.append("    depositSchedule: ").append(toIndentedString(depositSchedule)).append("\n");
    sb.append("    inflationRate: ").append(toIndentedString(inflationRate)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    annuitizationRate: ").append(toIndentedString(annuitizationRate)).append("\n");
    sb.append("    guaranteedRateBenefit: ").append(toIndentedString(guaranteedRateBenefit)).append("\n");
    sb.append("    guaranteedAccumulationBenefit: ").append(toIndentedString(guaranteedAccumulationBenefit)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("    p: ").append(toIndentedString(p)).append("\n");
    sb.append("    removeOutliers: ").append(toIndentedString(removeOutliers)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    tradingDaysPerYear: ").append(toIndentedString(tradingDaysPerYear)).append("\n");
    sb.append("    useProxyData: ").append(toIndentedString(useProxyData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

