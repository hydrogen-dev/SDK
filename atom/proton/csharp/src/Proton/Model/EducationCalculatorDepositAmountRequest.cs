/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// EducationCalculatorDepositAmountRequest
    /// </summary>
    [DataContract]
    public partial class EducationCalculatorDepositAmountRequest :  IEquatable<EducationCalculatorDepositAmountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EducationCalculatorDepositAmountRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EducationCalculatorDepositAmountRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EducationCalculatorDepositAmountRequest" /> class.
        /// </summary>
        /// <param name="educationInflationRate">educationInflationRate (default to 0.05F).</param>
        /// <param name="decumulationHorizon">decumulationHorizon (required).</param>
        /// <param name="accumulationHorizon">accumulationHorizon (required).</param>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="taxRate">taxRate (default to 0.0F).</param>
        /// <param name="generalInflationRate">generalInflationRate (default to 0.0F).</param>
        /// <param name="totalAnnualCost">totalAnnualCost (required).</param>
        /// <param name="portfolioReturn">portfolioReturn (required).</param>
        /// <param name="depositSchedule">depositSchedule.</param>
        /// <param name="initialBalance">initialBalance (default to 0.0F).</param>
        /// <param name="percentOfCostsCovered">percentOfCostsCovered (default to 1.0F).</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        public EducationCalculatorDepositAmountRequest(float? educationInflationRate = 0.05F, int? decumulationHorizon = default(int?), int? accumulationHorizon = default(int?), List<Guid?> accountIds = default(List<Guid?>), float? taxRate = 0.0F, float? generalInflationRate = 0.0F, float? totalAnnualCost = default(float?), float? portfolioReturn = default(float?), CalculatorDepositSchedule depositSchedule = default(CalculatorDepositSchedule), float? initialBalance = 0.0F, float? percentOfCostsCovered = 1.0F, List<Guid?> aggregationAccountIds = default(List<Guid?>))
        {
            // to ensure "decumulationHorizon" is required (not null)
            if (decumulationHorizon == null)
            {
                throw new InvalidDataException("decumulationHorizon is a required property for EducationCalculatorDepositAmountRequest and cannot be null");
            }
            else
            {
                this.DecumulationHorizon = decumulationHorizon;
            }
            // to ensure "accumulationHorizon" is required (not null)
            if (accumulationHorizon == null)
            {
                throw new InvalidDataException("accumulationHorizon is a required property for EducationCalculatorDepositAmountRequest and cannot be null");
            }
            else
            {
                this.AccumulationHorizon = accumulationHorizon;
            }
            // to ensure "totalAnnualCost" is required (not null)
            if (totalAnnualCost == null)
            {
                throw new InvalidDataException("totalAnnualCost is a required property for EducationCalculatorDepositAmountRequest and cannot be null");
            }
            else
            {
                this.TotalAnnualCost = totalAnnualCost;
            }
            // to ensure "portfolioReturn" is required (not null)
            if (portfolioReturn == null)
            {
                throw new InvalidDataException("portfolioReturn is a required property for EducationCalculatorDepositAmountRequest and cannot be null");
            }
            else
            {
                this.PortfolioReturn = portfolioReturn;
            }
            // use default value if no "educationInflationRate" provided
            if (educationInflationRate == null)
            {
                this.EducationInflationRate = 0.05F;
            }
            else
            {
                this.EducationInflationRate = educationInflationRate;
            }
            this.AccountIds = accountIds;
            // use default value if no "taxRate" provided
            if (taxRate == null)
            {
                this.TaxRate = 0.0F;
            }
            else
            {
                this.TaxRate = taxRate;
            }
            // use default value if no "generalInflationRate" provided
            if (generalInflationRate == null)
            {
                this.GeneralInflationRate = 0.0F;
            }
            else
            {
                this.GeneralInflationRate = generalInflationRate;
            }
            this.DepositSchedule = depositSchedule;
            // use default value if no "initialBalance" provided
            if (initialBalance == null)
            {
                this.InitialBalance = 0.0F;
            }
            else
            {
                this.InitialBalance = initialBalance;
            }
            // use default value if no "percentOfCostsCovered" provided
            if (percentOfCostsCovered == null)
            {
                this.PercentOfCostsCovered = 1.0F;
            }
            else
            {
                this.PercentOfCostsCovered = percentOfCostsCovered;
            }
            this.AggregationAccountIds = aggregationAccountIds;
        }
        
        /// <summary>
        /// Gets or Sets EducationInflationRate
        /// </summary>
        [DataMember(Name="education_inflation_rate", EmitDefaultValue=false)]
        public float? EducationInflationRate { get; set; }

        /// <summary>
        /// Gets or Sets DecumulationHorizon
        /// </summary>
        [DataMember(Name="decumulation_horizon", EmitDefaultValue=false)]
        public int? DecumulationHorizon { get; set; }

        /// <summary>
        /// Gets or Sets AccumulationHorizon
        /// </summary>
        [DataMember(Name="accumulation_horizon", EmitDefaultValue=false)]
        public int? AccumulationHorizon { get; set; }

        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="tax_rate", EmitDefaultValue=false)]
        public float? TaxRate { get; set; }

        /// <summary>
        /// Gets or Sets GeneralInflationRate
        /// </summary>
        [DataMember(Name="general_inflation_rate", EmitDefaultValue=false)]
        public float? GeneralInflationRate { get; set; }

        /// <summary>
        /// Gets or Sets TotalAnnualCost
        /// </summary>
        [DataMember(Name="total_annual_cost", EmitDefaultValue=false)]
        public float? TotalAnnualCost { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioReturn
        /// </summary>
        [DataMember(Name="portfolio_return", EmitDefaultValue=false)]
        public float? PortfolioReturn { get; set; }

        /// <summary>
        /// Gets or Sets DepositSchedule
        /// </summary>
        [DataMember(Name="deposit_schedule", EmitDefaultValue=false)]
        public CalculatorDepositSchedule DepositSchedule { get; set; }

        /// <summary>
        /// Gets or Sets InitialBalance
        /// </summary>
        [DataMember(Name="initial_balance", EmitDefaultValue=false)]
        public float? InitialBalance { get; set; }

        /// <summary>
        /// Gets or Sets PercentOfCostsCovered
        /// </summary>
        [DataMember(Name="percent_of_costs_covered", EmitDefaultValue=false)]
        public float? PercentOfCostsCovered { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EducationCalculatorDepositAmountRequest {\n");
            sb.Append("  EducationInflationRate: ").Append(EducationInflationRate).Append("\n");
            sb.Append("  DecumulationHorizon: ").Append(DecumulationHorizon).Append("\n");
            sb.Append("  AccumulationHorizon: ").Append(AccumulationHorizon).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  GeneralInflationRate: ").Append(GeneralInflationRate).Append("\n");
            sb.Append("  TotalAnnualCost: ").Append(TotalAnnualCost).Append("\n");
            sb.Append("  PortfolioReturn: ").Append(PortfolioReturn).Append("\n");
            sb.Append("  DepositSchedule: ").Append(DepositSchedule).Append("\n");
            sb.Append("  InitialBalance: ").Append(InitialBalance).Append("\n");
            sb.Append("  PercentOfCostsCovered: ").Append(PercentOfCostsCovered).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EducationCalculatorDepositAmountRequest);
        }

        /// <summary>
        /// Returns true if EducationCalculatorDepositAmountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EducationCalculatorDepositAmountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EducationCalculatorDepositAmountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EducationInflationRate == input.EducationInflationRate ||
                    (this.EducationInflationRate != null &&
                    this.EducationInflationRate.Equals(input.EducationInflationRate))
                ) && 
                (
                    this.DecumulationHorizon == input.DecumulationHorizon ||
                    (this.DecumulationHorizon != null &&
                    this.DecumulationHorizon.Equals(input.DecumulationHorizon))
                ) && 
                (
                    this.AccumulationHorizon == input.AccumulationHorizon ||
                    (this.AccumulationHorizon != null &&
                    this.AccumulationHorizon.Equals(input.AccumulationHorizon))
                ) && 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.GeneralInflationRate == input.GeneralInflationRate ||
                    (this.GeneralInflationRate != null &&
                    this.GeneralInflationRate.Equals(input.GeneralInflationRate))
                ) && 
                (
                    this.TotalAnnualCost == input.TotalAnnualCost ||
                    (this.TotalAnnualCost != null &&
                    this.TotalAnnualCost.Equals(input.TotalAnnualCost))
                ) && 
                (
                    this.PortfolioReturn == input.PortfolioReturn ||
                    (this.PortfolioReturn != null &&
                    this.PortfolioReturn.Equals(input.PortfolioReturn))
                ) && 
                (
                    this.DepositSchedule == input.DepositSchedule ||
                    (this.DepositSchedule != null &&
                    this.DepositSchedule.Equals(input.DepositSchedule))
                ) && 
                (
                    this.InitialBalance == input.InitialBalance ||
                    (this.InitialBalance != null &&
                    this.InitialBalance.Equals(input.InitialBalance))
                ) && 
                (
                    this.PercentOfCostsCovered == input.PercentOfCostsCovered ||
                    (this.PercentOfCostsCovered != null &&
                    this.PercentOfCostsCovered.Equals(input.PercentOfCostsCovered))
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EducationInflationRate != null)
                    hashCode = hashCode * 59 + this.EducationInflationRate.GetHashCode();
                if (this.DecumulationHorizon != null)
                    hashCode = hashCode * 59 + this.DecumulationHorizon.GetHashCode();
                if (this.AccumulationHorizon != null)
                    hashCode = hashCode * 59 + this.AccumulationHorizon.GetHashCode();
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.GeneralInflationRate != null)
                    hashCode = hashCode * 59 + this.GeneralInflationRate.GetHashCode();
                if (this.TotalAnnualCost != null)
                    hashCode = hashCode * 59 + this.TotalAnnualCost.GetHashCode();
                if (this.PortfolioReturn != null)
                    hashCode = hashCode * 59 + this.PortfolioReturn.GetHashCode();
                if (this.DepositSchedule != null)
                    hashCode = hashCode * 59 + this.DepositSchedule.GetHashCode();
                if (this.InitialBalance != null)
                    hashCode = hashCode * 59 + this.InitialBalance.GetHashCode();
                if (this.PercentOfCostsCovered != null)
                    hashCode = hashCode * 59 + this.PercentOfCostsCovered.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EducationInflationRate (float?) minimum
            if(this.EducationInflationRate < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EducationInflationRate, must be a value greater than or equal to -1.", new [] { "EducationInflationRate" });
            }

            // DecumulationHorizon (int?) minimum
            if(this.DecumulationHorizon < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DecumulationHorizon, must be a value greater than or equal to 0.", new [] { "DecumulationHorizon" });
            }

            // AccumulationHorizon (int?) minimum
            if(this.AccumulationHorizon < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccumulationHorizon, must be a value greater than or equal to 0.", new [] { "AccumulationHorizon" });
            }

            // TaxRate (float?) maximum
            if(this.TaxRate > (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRate, must be a value less than or equal to 1.", new [] { "TaxRate" });
            }

            // TaxRate (float?) minimum
            if(this.TaxRate < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxRate, must be a value greater than or equal to 0.", new [] { "TaxRate" });
            }

            // GeneralInflationRate (float?) minimum
            if(this.GeneralInflationRate < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GeneralInflationRate, must be a value greater than or equal to -1.", new [] { "GeneralInflationRate" });
            }

            // TotalAnnualCost (float?) minimum
            if(this.TotalAnnualCost < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalAnnualCost, must be a value greater than or equal to 0.", new [] { "TotalAnnualCost" });
            }

            // PortfolioReturn (float?) minimum
            if(this.PortfolioReturn < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioReturn, must be a value greater than or equal to -1.", new [] { "PortfolioReturn" });
            }

            // InitialBalance (float?) minimum
            if(this.InitialBalance < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InitialBalance, must be a value greater than or equal to 0.", new [] { "InitialBalance" });
            }

            // PercentOfCostsCovered (float?) maximum
            if(this.PercentOfCostsCovered > (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentOfCostsCovered, must be a value less than or equal to 1.", new [] { "PercentOfCostsCovered" });
            }

            // PercentOfCostsCovered (float?) minimum
            if(this.PercentOfCostsCovered < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PercentOfCostsCovered, must be a value greater than or equal to 0.", new [] { "PercentOfCostsCovered" });
            }

            yield break;
        }
    }

}
