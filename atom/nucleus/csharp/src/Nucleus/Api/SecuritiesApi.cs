/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecuritiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a security exclusion
        /// </summary>
        /// <remarks>
        /// Create a new security exclusion for a specific account or portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>SecurityExclusion</returns>
        SecurityExclusion CreateSecurityExclusionUsingPost (SecurityExclusion securityExclusionRequest);

        /// <summary>
        /// Create a security exclusion
        /// </summary>
        /// <remarks>
        /// Create a new security exclusion for a specific account or portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>ApiResponse of SecurityExclusion</returns>
        ApiResponse<SecurityExclusion> CreateSecurityExclusionUsingPostWithHttpInfo (SecurityExclusion securityExclusionRequest);
        /// <summary>
        /// Create a security price
        /// </summary>
        /// <remarks>
        /// Create a new price for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>SecurityPrice</returns>
        SecurityPrice CreateSecurityPriceUsingPost (SecurityPrice securityPriceRequest);

        /// <summary>
        /// Create a security price
        /// </summary>
        /// <remarks>
        /// Create a new price for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>ApiResponse of SecurityPrice</returns>
        ApiResponse<SecurityPrice> CreateSecurityPriceUsingPostWithHttpInfo (SecurityPrice securityPriceRequest);
        /// <summary>
        /// Create a security
        /// </summary>
        /// <remarks>
        /// Create a new security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>Security</returns>
        Security CreateSecurityUsingPost (Security securitiesInfoRequest);

        /// <summary>
        /// Create a security
        /// </summary>
        /// <remarks>
        /// Create a new security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>ApiResponse of Security</returns>
        ApiResponse<Security> CreateSecurityUsingPostWithHttpInfo (Security securitiesInfoRequest);
        /// <summary>
        /// Delete a security exclusion
        /// </summary>
        /// <remarks>
        /// Permanently delete a security exclusion
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns></returns>
        void DeleteSecurityExclusionUsingDelete (Guid? securityExclusionId);

        /// <summary>
        /// Delete a security exclusion
        /// </summary>
        /// <remarks>
        /// Permanently delete a security exclusion
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSecurityExclusionUsingDeleteWithHttpInfo (Guid? securityExclusionId);
        /// <summary>
        /// Delete a security price
        /// </summary>
        /// <remarks>
        /// Permanently delete a security price from a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns></returns>
        void DeleteSecurityPriceUsingDelete (Guid? securityPriceId);

        /// <summary>
        /// Delete a security price
        /// </summary>
        /// <remarks>
        /// Permanently delete a security price from a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSecurityPriceUsingDeleteWithHttpInfo (Guid? securityPriceId);
        /// <summary>
        /// Delete a security
        /// </summary>
        /// <remarks>
        /// Permanently delete a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns></returns>
        void DeleteSecurityUsingDelete (Guid? securityId);

        /// <summary>
        /// Delete a security
        /// </summary>
        /// <remarks>
        /// Permanently delete a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSecurityUsingDeleteWithHttpInfo (Guid? securityId);
        /// <summary>
        /// List all securities
        /// </summary>
        /// <remarks>
        /// Get details for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageSecurity</returns>
        PageSecurity GetSecurityAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all securities
        /// </summary>
        /// <remarks>
        /// Get details for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageSecurity</returns>
        ApiResponse<PageSecurity> GetSecurityAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all security exclusions
        /// </summary>
        /// <remarks>
        /// Get details for all security exclusions defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageSecurityExclusion</returns>
        PageSecurityExclusion GetSecurityExclusionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all security exclusions
        /// </summary>
        /// <remarks>
        /// Get details for all security exclusions defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageSecurityExclusion</returns>
        ApiResponse<PageSecurityExclusion> GetSecurityExclusionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a security exclusion
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>SecurityExclusion</returns>
        SecurityExclusion GetSecurityExclusionUsingGet (Guid? securityExclusionId);

        /// <summary>
        /// Retrieve a security exclusion
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>ApiResponse of SecurityExclusion</returns>
        ApiResponse<SecurityExclusion> GetSecurityExclusionUsingGetWithHttpInfo (Guid? securityExclusionId);
        /// <summary>
        /// List all security prices
        /// </summary>
        /// <remarks>
        /// Get prices for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageSecurityPrice</returns>
        PageSecurityPrice GetSecurityPriceAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all security prices
        /// </summary>
        /// <remarks>
        /// Get prices for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageSecurityPrice</returns>
        ApiResponse<PageSecurityPrice> GetSecurityPriceAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a security price
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>SecurityPrice</returns>
        SecurityPrice GetSecurityPriceUsingGet (Guid? securityPriceId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a security price
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of SecurityPrice</returns>
        ApiResponse<SecurityPrice> GetSecurityPriceUsingGetWithHttpInfo (Guid? securityPriceId, string currencyConversion = null);
        /// <summary>
        /// Retrieve a security
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Security</returns>
        Security GetSecurityUsingGet (Guid? securityId);

        /// <summary>
        /// Retrieve a security
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>ApiResponse of Security</returns>
        ApiResponse<Security> GetSecurityUsingGetWithHttpInfo (Guid? securityId);
        /// <summary>
        /// Update a security exclusion
        /// </summary>
        /// <remarks>
        /// Update the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>SecurityExclusion</returns>
        SecurityExclusion UpdateSecurityExclusionUsingPut (Object securityExclusion, Guid? securityExclusionId);

        /// <summary>
        /// Update a security exclusion
        /// </summary>
        /// <remarks>
        /// Update the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>ApiResponse of SecurityExclusion</returns>
        ApiResponse<SecurityExclusion> UpdateSecurityExclusionUsingPutWithHttpInfo (Object securityExclusion, Guid? securityExclusionId);
        /// <summary>
        /// Update a security price
        /// </summary>
        /// <remarks>
        /// Update a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>SecurityPrice</returns>
        SecurityPrice UpdateSecurityPriceUsingPut (Object securityPrice, Guid? securityPriceId);

        /// <summary>
        /// Update a security price
        /// </summary>
        /// <remarks>
        /// Update a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>ApiResponse of SecurityPrice</returns>
        ApiResponse<SecurityPrice> UpdateSecurityPriceUsingPutWithHttpInfo (Object securityPrice, Guid? securityPriceId);
        /// <summary>
        /// Update a security
        /// </summary>
        /// <remarks>
        /// Update a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Security</returns>
        Security UpdateSecurityUsingPut (Object security, Guid? securityId);

        /// <summary>
        /// Update a security
        /// </summary>
        /// <remarks>
        /// Update a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>ApiResponse of Security</returns>
        ApiResponse<Security> UpdateSecurityUsingPutWithHttpInfo (Object security, Guid? securityId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a security exclusion
        /// </summary>
        /// <remarks>
        /// Create a new security exclusion for a specific account or portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>Task of SecurityExclusion</returns>
        System.Threading.Tasks.Task<SecurityExclusion> CreateSecurityExclusionUsingPostAsync (SecurityExclusion securityExclusionRequest);

        /// <summary>
        /// Create a security exclusion
        /// </summary>
        /// <remarks>
        /// Create a new security exclusion for a specific account or portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>Task of ApiResponse (SecurityExclusion)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityExclusion>> CreateSecurityExclusionUsingPostAsyncWithHttpInfo (SecurityExclusion securityExclusionRequest);
        /// <summary>
        /// Create a security price
        /// </summary>
        /// <remarks>
        /// Create a new price for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>Task of SecurityPrice</returns>
        System.Threading.Tasks.Task<SecurityPrice> CreateSecurityPriceUsingPostAsync (SecurityPrice securityPriceRequest);

        /// <summary>
        /// Create a security price
        /// </summary>
        /// <remarks>
        /// Create a new price for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>Task of ApiResponse (SecurityPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityPrice>> CreateSecurityPriceUsingPostAsyncWithHttpInfo (SecurityPrice securityPriceRequest);
        /// <summary>
        /// Create a security
        /// </summary>
        /// <remarks>
        /// Create a new security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>Task of Security</returns>
        System.Threading.Tasks.Task<Security> CreateSecurityUsingPostAsync (Security securitiesInfoRequest);

        /// <summary>
        /// Create a security
        /// </summary>
        /// <remarks>
        /// Create a new security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>Task of ApiResponse (Security)</returns>
        System.Threading.Tasks.Task<ApiResponse<Security>> CreateSecurityUsingPostAsyncWithHttpInfo (Security securitiesInfoRequest);
        /// <summary>
        /// Delete a security exclusion
        /// </summary>
        /// <remarks>
        /// Permanently delete a security exclusion
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSecurityExclusionUsingDeleteAsync (Guid? securityExclusionId);

        /// <summary>
        /// Delete a security exclusion
        /// </summary>
        /// <remarks>
        /// Permanently delete a security exclusion
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityExclusionUsingDeleteAsyncWithHttpInfo (Guid? securityExclusionId);
        /// <summary>
        /// Delete a security price
        /// </summary>
        /// <remarks>
        /// Permanently delete a security price from a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSecurityPriceUsingDeleteAsync (Guid? securityPriceId);

        /// <summary>
        /// Delete a security price
        /// </summary>
        /// <remarks>
        /// Permanently delete a security price from a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityPriceUsingDeleteAsyncWithHttpInfo (Guid? securityPriceId);
        /// <summary>
        /// Delete a security
        /// </summary>
        /// <remarks>
        /// Permanently delete a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSecurityUsingDeleteAsync (Guid? securityId);

        /// <summary>
        /// Delete a security
        /// </summary>
        /// <remarks>
        /// Permanently delete a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityUsingDeleteAsyncWithHttpInfo (Guid? securityId);
        /// <summary>
        /// List all securities
        /// </summary>
        /// <remarks>
        /// Get details for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageSecurity</returns>
        System.Threading.Tasks.Task<PageSecurity> GetSecurityAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all securities
        /// </summary>
        /// <remarks>
        /// Get details for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageSecurity)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSecurity>> GetSecurityAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all security exclusions
        /// </summary>
        /// <remarks>
        /// Get details for all security exclusions defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageSecurityExclusion</returns>
        System.Threading.Tasks.Task<PageSecurityExclusion> GetSecurityExclusionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all security exclusions
        /// </summary>
        /// <remarks>
        /// Get details for all security exclusions defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageSecurityExclusion)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSecurityExclusion>> GetSecurityExclusionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a security exclusion
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of SecurityExclusion</returns>
        System.Threading.Tasks.Task<SecurityExclusion> GetSecurityExclusionUsingGetAsync (Guid? securityExclusionId);

        /// <summary>
        /// Retrieve a security exclusion
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of ApiResponse (SecurityExclusion)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityExclusion>> GetSecurityExclusionUsingGetAsyncWithHttpInfo (Guid? securityExclusionId);
        /// <summary>
        /// List all security prices
        /// </summary>
        /// <remarks>
        /// Get prices for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageSecurityPrice</returns>
        System.Threading.Tasks.Task<PageSecurityPrice> GetSecurityPriceAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all security prices
        /// </summary>
        /// <remarks>
        /// Get prices for all securities defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageSecurityPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageSecurityPrice>> GetSecurityPriceAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a security price
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of SecurityPrice</returns>
        System.Threading.Tasks.Task<SecurityPrice> GetSecurityPriceUsingGetAsync (Guid? securityPriceId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a security price
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (SecurityPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityPrice>> GetSecurityPriceUsingGetAsyncWithHttpInfo (Guid? securityPriceId, string currencyConversion = null);
        /// <summary>
        /// Retrieve a security
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of Security</returns>
        System.Threading.Tasks.Task<Security> GetSecurityUsingGetAsync (Guid? securityId);

        /// <summary>
        /// Retrieve a security
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a security defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of ApiResponse (Security)</returns>
        System.Threading.Tasks.Task<ApiResponse<Security>> GetSecurityUsingGetAsyncWithHttpInfo (Guid? securityId);
        /// <summary>
        /// Update a security exclusion
        /// </summary>
        /// <remarks>
        /// Update the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of SecurityExclusion</returns>
        System.Threading.Tasks.Task<SecurityExclusion> UpdateSecurityExclusionUsingPutAsync (Object securityExclusion, Guid? securityExclusionId);

        /// <summary>
        /// Update a security exclusion
        /// </summary>
        /// <remarks>
        /// Update the information for a security exclusion.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of ApiResponse (SecurityExclusion)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityExclusion>> UpdateSecurityExclusionUsingPutAsyncWithHttpInfo (Object securityExclusion, Guid? securityExclusionId);
        /// <summary>
        /// Update a security price
        /// </summary>
        /// <remarks>
        /// Update a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of SecurityPrice</returns>
        System.Threading.Tasks.Task<SecurityPrice> UpdateSecurityPriceUsingPutAsync (Object securityPrice, Guid? securityPriceId);

        /// <summary>
        /// Update a security price
        /// </summary>
        /// <remarks>
        /// Update a security price for a security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of ApiResponse (SecurityPrice)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityPrice>> UpdateSecurityPriceUsingPutAsyncWithHttpInfo (Object securityPrice, Guid? securityPriceId);
        /// <summary>
        /// Update a security
        /// </summary>
        /// <remarks>
        /// Update a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of Security</returns>
        System.Threading.Tasks.Task<Security> UpdateSecurityUsingPutAsync (Object security, Guid? securityId);

        /// <summary>
        /// Update a security
        /// </summary>
        /// <remarks>
        /// Update a security for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of ApiResponse (Security)</returns>
        System.Threading.Tasks.Task<ApiResponse<Security>> UpdateSecurityUsingPutAsyncWithHttpInfo (Object security, Guid? securityId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecuritiesApi : ISecuritiesApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecuritiesApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecuritiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecuritiesApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a security exclusion Create a new security exclusion for a specific account or portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>SecurityExclusion</returns>
        public SecurityExclusion CreateSecurityExclusionUsingPost (SecurityExclusion securityExclusionRequest)
        {
             ApiResponse<SecurityExclusion> localVarResponse = CreateSecurityExclusionUsingPostWithHttpInfo(securityExclusionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a security exclusion Create a new security exclusion for a specific account or portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>ApiResponse of SecurityExclusion</returns>
        public ApiResponse< SecurityExclusion > CreateSecurityExclusionUsingPostWithHttpInfo (SecurityExclusion securityExclusionRequest)
        {
            // verify the required parameter 'securityExclusionRequest' is set
            if (securityExclusionRequest == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionRequest' when calling SecuritiesApi->CreateSecurityExclusionUsingPost");

            var localVarPath = "/nucleus/v1/security_exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionRequest != null && securityExclusionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityExclusionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityExclusionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityExclusionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExclusion)));
        }

        /// <summary>
        /// Create a security exclusion Create a new security exclusion for a specific account or portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>Task of SecurityExclusion</returns>
        public async System.Threading.Tasks.Task<SecurityExclusion> CreateSecurityExclusionUsingPostAsync (SecurityExclusion securityExclusionRequest)
        {
             ApiResponse<SecurityExclusion> localVarResponse = await CreateSecurityExclusionUsingPostAsyncWithHttpInfo(securityExclusionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a security exclusion Create a new security exclusion for a specific account or portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionRequest">securityExclusionRequest</param>
        /// <returns>Task of ApiResponse (SecurityExclusion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityExclusion>> CreateSecurityExclusionUsingPostAsyncWithHttpInfo (SecurityExclusion securityExclusionRequest)
        {
            // verify the required parameter 'securityExclusionRequest' is set
            if (securityExclusionRequest == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionRequest' when calling SecuritiesApi->CreateSecurityExclusionUsingPost");

            var localVarPath = "/nucleus/v1/security_exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionRequest != null && securityExclusionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityExclusionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityExclusionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityExclusionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExclusion)));
        }

        /// <summary>
        /// Create a security price Create a new price for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>SecurityPrice</returns>
        public SecurityPrice CreateSecurityPriceUsingPost (SecurityPrice securityPriceRequest)
        {
             ApiResponse<SecurityPrice> localVarResponse = CreateSecurityPriceUsingPostWithHttpInfo(securityPriceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a security price Create a new price for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>ApiResponse of SecurityPrice</returns>
        public ApiResponse< SecurityPrice > CreateSecurityPriceUsingPostWithHttpInfo (SecurityPrice securityPriceRequest)
        {
            // verify the required parameter 'securityPriceRequest' is set
            if (securityPriceRequest == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceRequest' when calling SecuritiesApi->CreateSecurityPriceUsingPost");

            var localVarPath = "/nucleus/v1/security_price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceRequest != null && securityPriceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityPriceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityPriceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityPriceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityPrice)));
        }

        /// <summary>
        /// Create a security price Create a new price for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>Task of SecurityPrice</returns>
        public async System.Threading.Tasks.Task<SecurityPrice> CreateSecurityPriceUsingPostAsync (SecurityPrice securityPriceRequest)
        {
             ApiResponse<SecurityPrice> localVarResponse = await CreateSecurityPriceUsingPostAsyncWithHttpInfo(securityPriceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a security price Create a new price for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceRequest">securityPriceRequest</param>
        /// <returns>Task of ApiResponse (SecurityPrice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityPrice>> CreateSecurityPriceUsingPostAsyncWithHttpInfo (SecurityPrice securityPriceRequest)
        {
            // verify the required parameter 'securityPriceRequest' is set
            if (securityPriceRequest == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceRequest' when calling SecuritiesApi->CreateSecurityPriceUsingPost");

            var localVarPath = "/nucleus/v1/security_price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceRequest != null && securityPriceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityPriceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityPriceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityPriceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityPrice)));
        }

        /// <summary>
        /// Create a security Create a new security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>Security</returns>
        public Security CreateSecurityUsingPost (Security securitiesInfoRequest)
        {
             ApiResponse<Security> localVarResponse = CreateSecurityUsingPostWithHttpInfo(securitiesInfoRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a security Create a new security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>ApiResponse of Security</returns>
        public ApiResponse< Security > CreateSecurityUsingPostWithHttpInfo (Security securitiesInfoRequest)
        {
            // verify the required parameter 'securitiesInfoRequest' is set
            if (securitiesInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'securitiesInfoRequest' when calling SecuritiesApi->CreateSecurityUsingPost");

            var localVarPath = "/nucleus/v1/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securitiesInfoRequest != null && securitiesInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securitiesInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securitiesInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Security>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Security) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Security)));
        }

        /// <summary>
        /// Create a security Create a new security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>Task of Security</returns>
        public async System.Threading.Tasks.Task<Security> CreateSecurityUsingPostAsync (Security securitiesInfoRequest)
        {
             ApiResponse<Security> localVarResponse = await CreateSecurityUsingPostAsyncWithHttpInfo(securitiesInfoRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a security Create a new security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securitiesInfoRequest">securitiesInfoRequest</param>
        /// <returns>Task of ApiResponse (Security)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Security>> CreateSecurityUsingPostAsyncWithHttpInfo (Security securitiesInfoRequest)
        {
            // verify the required parameter 'securitiesInfoRequest' is set
            if (securitiesInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'securitiesInfoRequest' when calling SecuritiesApi->CreateSecurityUsingPost");

            var localVarPath = "/nucleus/v1/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securitiesInfoRequest != null && securitiesInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securitiesInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securitiesInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSecurityUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Security>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Security) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Security)));
        }

        /// <summary>
        /// Delete a security exclusion Permanently delete a security exclusion
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns></returns>
        public void DeleteSecurityExclusionUsingDelete (Guid? securityExclusionId)
        {
             DeleteSecurityExclusionUsingDeleteWithHttpInfo(securityExclusionId);
        }

        /// <summary>
        /// Delete a security exclusion Permanently delete a security exclusion
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSecurityExclusionUsingDeleteWithHttpInfo (Guid? securityExclusionId)
        {
            // verify the required parameter 'securityExclusionId' is set
            if (securityExclusionId == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionId' when calling SecuritiesApi->DeleteSecurityExclusionUsingDelete");

            var localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionId != null) localVarPathParams.Add("security_exclusion_id", this.Configuration.ApiClient.ParameterToString(securityExclusionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityExclusionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a security exclusion Permanently delete a security exclusion
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSecurityExclusionUsingDeleteAsync (Guid? securityExclusionId)
        {
             await DeleteSecurityExclusionUsingDeleteAsyncWithHttpInfo(securityExclusionId);

        }

        /// <summary>
        /// Delete a security exclusion Permanently delete a security exclusion
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityExclusionUsingDeleteAsyncWithHttpInfo (Guid? securityExclusionId)
        {
            // verify the required parameter 'securityExclusionId' is set
            if (securityExclusionId == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionId' when calling SecuritiesApi->DeleteSecurityExclusionUsingDelete");

            var localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionId != null) localVarPathParams.Add("security_exclusion_id", this.Configuration.ApiClient.ParameterToString(securityExclusionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityExclusionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a security price Permanently delete a security price from a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns></returns>
        public void DeleteSecurityPriceUsingDelete (Guid? securityPriceId)
        {
             DeleteSecurityPriceUsingDeleteWithHttpInfo(securityPriceId);
        }

        /// <summary>
        /// Delete a security price Permanently delete a security price from a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSecurityPriceUsingDeleteWithHttpInfo (Guid? securityPriceId)
        {
            // verify the required parameter 'securityPriceId' is set
            if (securityPriceId == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceId' when calling SecuritiesApi->DeleteSecurityPriceUsingDelete");

            var localVarPath = "/nucleus/v1/security_price/{security_price_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceId != null) localVarPathParams.Add("security_price_id", this.Configuration.ApiClient.ParameterToString(securityPriceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityPriceUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a security price Permanently delete a security price from a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSecurityPriceUsingDeleteAsync (Guid? securityPriceId)
        {
             await DeleteSecurityPriceUsingDeleteAsyncWithHttpInfo(securityPriceId);

        }

        /// <summary>
        /// Delete a security price Permanently delete a security price from a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityPriceUsingDeleteAsyncWithHttpInfo (Guid? securityPriceId)
        {
            // verify the required parameter 'securityPriceId' is set
            if (securityPriceId == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceId' when calling SecuritiesApi->DeleteSecurityPriceUsingDelete");

            var localVarPath = "/nucleus/v1/security_price/{security_price_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceId != null) localVarPathParams.Add("security_price_id", this.Configuration.ApiClient.ParameterToString(securityPriceId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityPriceUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a security Permanently delete a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns></returns>
        public void DeleteSecurityUsingDelete (Guid? securityId)
        {
             DeleteSecurityUsingDeleteWithHttpInfo(securityId);
        }

        /// <summary>
        /// Delete a security Permanently delete a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSecurityUsingDeleteWithHttpInfo (Guid? securityId)
        {
            // verify the required parameter 'securityId' is set
            if (securityId == null)
                throw new ApiException(400, "Missing required parameter 'securityId' when calling SecuritiesApi->DeleteSecurityUsingDelete");

            var localVarPath = "/nucleus/v1/security/{security_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityId != null) localVarPathParams.Add("security_id", this.Configuration.ApiClient.ParameterToString(securityId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a security Permanently delete a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSecurityUsingDeleteAsync (Guid? securityId)
        {
             await DeleteSecurityUsingDeleteAsyncWithHttpInfo(securityId);

        }

        /// <summary>
        /// Delete a security Permanently delete a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSecurityUsingDeleteAsyncWithHttpInfo (Guid? securityId)
        {
            // verify the required parameter 'securityId' is set
            if (securityId == null)
                throw new ApiException(400, "Missing required parameter 'securityId' when calling SecuritiesApi->DeleteSecurityUsingDelete");

            var localVarPath = "/nucleus/v1/security/{security_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityId != null) localVarPathParams.Add("security_id", this.Configuration.ApiClient.ParameterToString(securityId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSecurityUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all securities Get details for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageSecurity</returns>
        public PageSecurity GetSecurityAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageSecurity> localVarResponse = GetSecurityAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all securities Get details for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageSecurity</returns>
        public ApiResponse< PageSecurity > GetSecurityAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSecurity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSecurity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSecurity)));
        }

        /// <summary>
        /// List all securities Get details for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageSecurity</returns>
        public async System.Threading.Tasks.Task<PageSecurity> GetSecurityAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageSecurity> localVarResponse = await GetSecurityAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all securities Get details for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageSecurity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSecurity>> GetSecurityAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/security";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSecurity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSecurity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSecurity)));
        }

        /// <summary>
        /// List all security exclusions Get details for all security exclusions defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageSecurityExclusion</returns>
        public PageSecurityExclusion GetSecurityExclusionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageSecurityExclusion> localVarResponse = GetSecurityExclusionAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all security exclusions Get details for all security exclusions defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageSecurityExclusion</returns>
        public ApiResponse< PageSecurityExclusion > GetSecurityExclusionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/security_exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityExclusionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSecurityExclusion)));
        }

        /// <summary>
        /// List all security exclusions Get details for all security exclusions defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageSecurityExclusion</returns>
        public async System.Threading.Tasks.Task<PageSecurityExclusion> GetSecurityExclusionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageSecurityExclusion> localVarResponse = await GetSecurityExclusionAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all security exclusions Get details for all security exclusions defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageSecurityExclusion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSecurityExclusion>> GetSecurityExclusionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/security_exclusion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityExclusionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSecurityExclusion)));
        }

        /// <summary>
        /// Retrieve a security exclusion Retrieve the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>SecurityExclusion</returns>
        public SecurityExclusion GetSecurityExclusionUsingGet (Guid? securityExclusionId)
        {
             ApiResponse<SecurityExclusion> localVarResponse = GetSecurityExclusionUsingGetWithHttpInfo(securityExclusionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a security exclusion Retrieve the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>ApiResponse of SecurityExclusion</returns>
        public ApiResponse< SecurityExclusion > GetSecurityExclusionUsingGetWithHttpInfo (Guid? securityExclusionId)
        {
            // verify the required parameter 'securityExclusionId' is set
            if (securityExclusionId == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionId' when calling SecuritiesApi->GetSecurityExclusionUsingGet");

            var localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionId != null) localVarPathParams.Add("security_exclusion_id", this.Configuration.ApiClient.ParameterToString(securityExclusionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityExclusionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExclusion)));
        }

        /// <summary>
        /// Retrieve a security exclusion Retrieve the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of SecurityExclusion</returns>
        public async System.Threading.Tasks.Task<SecurityExclusion> GetSecurityExclusionUsingGetAsync (Guid? securityExclusionId)
        {
             ApiResponse<SecurityExclusion> localVarResponse = await GetSecurityExclusionUsingGetAsyncWithHttpInfo(securityExclusionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a security exclusion Retrieve the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of ApiResponse (SecurityExclusion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityExclusion>> GetSecurityExclusionUsingGetAsyncWithHttpInfo (Guid? securityExclusionId)
        {
            // verify the required parameter 'securityExclusionId' is set
            if (securityExclusionId == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionId' when calling SecuritiesApi->GetSecurityExclusionUsingGet");

            var localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionId != null) localVarPathParams.Add("security_exclusion_id", this.Configuration.ApiClient.ParameterToString(securityExclusionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityExclusionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExclusion)));
        }

        /// <summary>
        /// List all security prices Get prices for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageSecurityPrice</returns>
        public PageSecurityPrice GetSecurityPriceAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageSecurityPrice> localVarResponse = GetSecurityPriceAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all security prices Get prices for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageSecurityPrice</returns>
        public ApiResponse< PageSecurityPrice > GetSecurityPriceAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/security_price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityPriceAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSecurityPrice)));
        }

        /// <summary>
        /// List all security prices Get prices for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageSecurityPrice</returns>
        public async System.Threading.Tasks.Task<PageSecurityPrice> GetSecurityPriceAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageSecurityPrice> localVarResponse = await GetSecurityPriceAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all security prices Get prices for all securities defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageSecurityPrice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageSecurityPrice>> GetSecurityPriceAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/security_price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityPriceAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageSecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageSecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageSecurityPrice)));
        }

        /// <summary>
        /// Retrieve a security price Retrieve the information for a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>SecurityPrice</returns>
        public SecurityPrice GetSecurityPriceUsingGet (Guid? securityPriceId, string currencyConversion = null)
        {
             ApiResponse<SecurityPrice> localVarResponse = GetSecurityPriceUsingGetWithHttpInfo(securityPriceId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a security price Retrieve the information for a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of SecurityPrice</returns>
        public ApiResponse< SecurityPrice > GetSecurityPriceUsingGetWithHttpInfo (Guid? securityPriceId, string currencyConversion = null)
        {
            // verify the required parameter 'securityPriceId' is set
            if (securityPriceId == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceId' when calling SecuritiesApi->GetSecurityPriceUsingGet");

            var localVarPath = "/nucleus/v1/security_price/{security_price_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceId != null) localVarPathParams.Add("security_price_id", this.Configuration.ApiClient.ParameterToString(securityPriceId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityPriceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityPrice)));
        }

        /// <summary>
        /// Retrieve a security price Retrieve the information for a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of SecurityPrice</returns>
        public async System.Threading.Tasks.Task<SecurityPrice> GetSecurityPriceUsingGetAsync (Guid? securityPriceId, string currencyConversion = null)
        {
             ApiResponse<SecurityPrice> localVarResponse = await GetSecurityPriceUsingGetAsyncWithHttpInfo(securityPriceId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a security price Retrieve the information for a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (SecurityPrice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityPrice>> GetSecurityPriceUsingGetAsyncWithHttpInfo (Guid? securityPriceId, string currencyConversion = null)
        {
            // verify the required parameter 'securityPriceId' is set
            if (securityPriceId == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceId' when calling SecuritiesApi->GetSecurityPriceUsingGet");

            var localVarPath = "/nucleus/v1/security_price/{security_price_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceId != null) localVarPathParams.Add("security_price_id", this.Configuration.ApiClient.ParameterToString(securityPriceId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityPriceUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityPrice)));
        }

        /// <summary>
        /// Retrieve a security Retrieve the information for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Security</returns>
        public Security GetSecurityUsingGet (Guid? securityId)
        {
             ApiResponse<Security> localVarResponse = GetSecurityUsingGetWithHttpInfo(securityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a security Retrieve the information for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>ApiResponse of Security</returns>
        public ApiResponse< Security > GetSecurityUsingGetWithHttpInfo (Guid? securityId)
        {
            // verify the required parameter 'securityId' is set
            if (securityId == null)
                throw new ApiException(400, "Missing required parameter 'securityId' when calling SecuritiesApi->GetSecurityUsingGet");

            var localVarPath = "/nucleus/v1/security/{security_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityId != null) localVarPathParams.Add("security_id", this.Configuration.ApiClient.ParameterToString(securityId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Security>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Security) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Security)));
        }

        /// <summary>
        /// Retrieve a security Retrieve the information for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of Security</returns>
        public async System.Threading.Tasks.Task<Security> GetSecurityUsingGetAsync (Guid? securityId)
        {
             ApiResponse<Security> localVarResponse = await GetSecurityUsingGetAsyncWithHttpInfo(securityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a security Retrieve the information for a security defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of ApiResponse (Security)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Security>> GetSecurityUsingGetAsyncWithHttpInfo (Guid? securityId)
        {
            // verify the required parameter 'securityId' is set
            if (securityId == null)
                throw new ApiException(400, "Missing required parameter 'securityId' when calling SecuritiesApi->GetSecurityUsingGet");

            var localVarPath = "/nucleus/v1/security/{security_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityId != null) localVarPathParams.Add("security_id", this.Configuration.ApiClient.ParameterToString(securityId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSecurityUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Security>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Security) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Security)));
        }

        /// <summary>
        /// Update a security exclusion Update the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>SecurityExclusion</returns>
        public SecurityExclusion UpdateSecurityExclusionUsingPut (Object securityExclusion, Guid? securityExclusionId)
        {
             ApiResponse<SecurityExclusion> localVarResponse = UpdateSecurityExclusionUsingPutWithHttpInfo(securityExclusion, securityExclusionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a security exclusion Update the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>ApiResponse of SecurityExclusion</returns>
        public ApiResponse< SecurityExclusion > UpdateSecurityExclusionUsingPutWithHttpInfo (Object securityExclusion, Guid? securityExclusionId)
        {
            // verify the required parameter 'securityExclusion' is set
            if (securityExclusion == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusion' when calling SecuritiesApi->UpdateSecurityExclusionUsingPut");
            // verify the required parameter 'securityExclusionId' is set
            if (securityExclusionId == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionId' when calling SecuritiesApi->UpdateSecurityExclusionUsingPut");

            var localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionId != null) localVarPathParams.Add("security_exclusion_id", this.Configuration.ApiClient.ParameterToString(securityExclusionId)); // path parameter
            if (securityExclusion != null && securityExclusion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityExclusion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityExclusion; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityExclusionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExclusion)));
        }

        /// <summary>
        /// Update a security exclusion Update the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of SecurityExclusion</returns>
        public async System.Threading.Tasks.Task<SecurityExclusion> UpdateSecurityExclusionUsingPutAsync (Object securityExclusion, Guid? securityExclusionId)
        {
             ApiResponse<SecurityExclusion> localVarResponse = await UpdateSecurityExclusionUsingPutAsyncWithHttpInfo(securityExclusion, securityExclusionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a security exclusion Update the information for a security exclusion.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityExclusion">security_exclusion</param>
        /// <param name="securityExclusionId">UUID security_exclusion_id</param>
        /// <returns>Task of ApiResponse (SecurityExclusion)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityExclusion>> UpdateSecurityExclusionUsingPutAsyncWithHttpInfo (Object securityExclusion, Guid? securityExclusionId)
        {
            // verify the required parameter 'securityExclusion' is set
            if (securityExclusion == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusion' when calling SecuritiesApi->UpdateSecurityExclusionUsingPut");
            // verify the required parameter 'securityExclusionId' is set
            if (securityExclusionId == null)
                throw new ApiException(400, "Missing required parameter 'securityExclusionId' when calling SecuritiesApi->UpdateSecurityExclusionUsingPut");

            var localVarPath = "/nucleus/v1/security_exclusion/{security_exclusion_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityExclusionId != null) localVarPathParams.Add("security_exclusion_id", this.Configuration.ApiClient.ParameterToString(securityExclusionId)); // path parameter
            if (securityExclusion != null && securityExclusion.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityExclusion); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityExclusion; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityExclusionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityExclusion>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityExclusion) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityExclusion)));
        }

        /// <summary>
        /// Update a security price Update a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>SecurityPrice</returns>
        public SecurityPrice UpdateSecurityPriceUsingPut (Object securityPrice, Guid? securityPriceId)
        {
             ApiResponse<SecurityPrice> localVarResponse = UpdateSecurityPriceUsingPutWithHttpInfo(securityPrice, securityPriceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a security price Update a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>ApiResponse of SecurityPrice</returns>
        public ApiResponse< SecurityPrice > UpdateSecurityPriceUsingPutWithHttpInfo (Object securityPrice, Guid? securityPriceId)
        {
            // verify the required parameter 'securityPrice' is set
            if (securityPrice == null)
                throw new ApiException(400, "Missing required parameter 'securityPrice' when calling SecuritiesApi->UpdateSecurityPriceUsingPut");
            // verify the required parameter 'securityPriceId' is set
            if (securityPriceId == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceId' when calling SecuritiesApi->UpdateSecurityPriceUsingPut");

            var localVarPath = "/nucleus/v1/security_price/{security_price_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceId != null) localVarPathParams.Add("security_price_id", this.Configuration.ApiClient.ParameterToString(securityPriceId)); // path parameter
            if (securityPrice != null && securityPrice.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityPrice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityPrice; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityPriceUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityPrice)));
        }

        /// <summary>
        /// Update a security price Update a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of SecurityPrice</returns>
        public async System.Threading.Tasks.Task<SecurityPrice> UpdateSecurityPriceUsingPutAsync (Object securityPrice, Guid? securityPriceId)
        {
             ApiResponse<SecurityPrice> localVarResponse = await UpdateSecurityPriceUsingPutAsyncWithHttpInfo(securityPrice, securityPriceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a security price Update a security price for a security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="securityPrice">security_price</param>
        /// <param name="securityPriceId">UUID security_price_id</param>
        /// <returns>Task of ApiResponse (SecurityPrice)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityPrice>> UpdateSecurityPriceUsingPutAsyncWithHttpInfo (Object securityPrice, Guid? securityPriceId)
        {
            // verify the required parameter 'securityPrice' is set
            if (securityPrice == null)
                throw new ApiException(400, "Missing required parameter 'securityPrice' when calling SecuritiesApi->UpdateSecurityPriceUsingPut");
            // verify the required parameter 'securityPriceId' is set
            if (securityPriceId == null)
                throw new ApiException(400, "Missing required parameter 'securityPriceId' when calling SecuritiesApi->UpdateSecurityPriceUsingPut");

            var localVarPath = "/nucleus/v1/security_price/{security_price_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityPriceId != null) localVarPathParams.Add("security_price_id", this.Configuration.ApiClient.ParameterToString(securityPriceId)); // path parameter
            if (securityPrice != null && securityPrice.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(securityPrice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = securityPrice; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityPriceUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityPrice>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityPrice) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityPrice)));
        }

        /// <summary>
        /// Update a security Update a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Security</returns>
        public Security UpdateSecurityUsingPut (Object security, Guid? securityId)
        {
             ApiResponse<Security> localVarResponse = UpdateSecurityUsingPutWithHttpInfo(security, securityId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a security Update a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>ApiResponse of Security</returns>
        public ApiResponse< Security > UpdateSecurityUsingPutWithHttpInfo (Object security, Guid? securityId)
        {
            // verify the required parameter 'security' is set
            if (security == null)
                throw new ApiException(400, "Missing required parameter 'security' when calling SecuritiesApi->UpdateSecurityUsingPut");
            // verify the required parameter 'securityId' is set
            if (securityId == null)
                throw new ApiException(400, "Missing required parameter 'securityId' when calling SecuritiesApi->UpdateSecurityUsingPut");

            var localVarPath = "/nucleus/v1/security/{security_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityId != null) localVarPathParams.Add("security_id", this.Configuration.ApiClient.ParameterToString(securityId)); // path parameter
            if (security != null && security.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(security); // http body (model) parameter
            }
            else
            {
                localVarPostBody = security; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Security>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Security) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Security)));
        }

        /// <summary>
        /// Update a security Update a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of Security</returns>
        public async System.Threading.Tasks.Task<Security> UpdateSecurityUsingPutAsync (Object security, Guid? securityId)
        {
             ApiResponse<Security> localVarResponse = await UpdateSecurityUsingPutAsyncWithHttpInfo(security, securityId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a security Update a security for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="security">security</param>
        /// <param name="securityId">UUID security_id</param>
        /// <returns>Task of ApiResponse (Security)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Security>> UpdateSecurityUsingPutAsyncWithHttpInfo (Object security, Guid? securityId)
        {
            // verify the required parameter 'security' is set
            if (security == null)
                throw new ApiException(400, "Missing required parameter 'security' when calling SecuritiesApi->UpdateSecurityUsingPut");
            // verify the required parameter 'securityId' is set
            if (securityId == null)
                throw new ApiException(400, "Missing required parameter 'securityId' when calling SecuritiesApi->UpdateSecurityUsingPut");

            var localVarPath = "/nucleus/v1/security/{security_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (securityId != null) localVarPathParams.Add("security_id", this.Configuration.ApiClient.ParameterToString(securityId)); // path parameter
            if (security != null && security.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(security); // http body (model) parameter
            }
            else
            {
                localVarPostBody = security; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSecurityUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Security>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Security) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Security)));
        }

    }
}
