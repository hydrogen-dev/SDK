/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.Address = factory(root.atom_api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Address model module.
   * @module model/Address
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>Address</code>.
   * Address details for the client
   * @alias module:model/Address
   * @class
   * @param addressLine1 {String} Primary information for the street address, such as the street and building number
   * @param state {String} State, province, or sub-country region for the address
   * @param country {String} Country for the address using the ISO ALPHA-2 Code
   * @param type {String} Type of address such as “home”, “work”, “billing”, “mailing”, etc. This is used to differentiate between multiple addresses provided
   */
  var exports = function(addressLine1, state, country, type) {
    var _this = this;

    _this['address_line1'] = addressLine1;


    _this['state'] = state;

    _this['country'] = country;
    _this['type'] = type;
  };

  /**
   * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Address} obj Optional instance to populate.
   * @return {module:model/Address} The populated <code>Address</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('address_line1')) {
        obj['address_line1'] = ApiClient.convertToType(data['address_line1'], 'String');
      }
      if (data.hasOwnProperty('address_line2')) {
        obj['address_line2'] = ApiClient.convertToType(data['address_line2'], 'String');
      }
      if (data.hasOwnProperty('city')) {
        obj['city'] = ApiClient.convertToType(data['city'], 'String');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('postalcode')) {
        obj['postalcode'] = ApiClient.convertToType(data['postalcode'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * Primary information for the street address, such as the street and building number
   * @member {String} address_line1
   */
  exports.prototype['address_line1'] = undefined;
  /**
   * Secondary information for the street address, such as a suite or apartment number
   * @member {String} address_line2
   */
  exports.prototype['address_line2'] = undefined;
  /**
   * City for the address
   * @member {String} city
   */
  exports.prototype['city'] = undefined;
  /**
   * State, province, or sub-country region for the address
   * @member {String} state
   */
  exports.prototype['state'] = undefined;
  /**
   * Alphanumeric postal code or zip code for the address
   * @member {String} postalcode
   */
  exports.prototype['postalcode'] = undefined;
  /**
   * Country for the address using the ISO ALPHA-2 Code
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Type of address such as “home”, “work”, “billing”, “mailing”, etc. This is used to differentiate between multiple addresses provided
   * @member {String} type
   */
  exports.prototype['type'] = undefined;



  return exports;
}));


