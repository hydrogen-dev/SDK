# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CurrencyBalanceSpecificResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'balance': 'float',
        'wallet_id': 'str',
        'currency_id': 'str',
        'create_date': 'str',
        'update_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'balance': 'balance',
        'wallet_id': 'wallet_id',
        'currency_id': 'currency_id',
        'create_date': 'create_date',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, balance=None, wallet_id=None, currency_id=None, create_date=None, update_date=None):  # noqa: E501
        """CurrencyBalanceSpecificResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._balance = None
        self._wallet_id = None
        self._currency_id = None
        self._create_date = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if balance is not None:
            self.balance = balance
        if wallet_id is not None:
            self.wallet_id = wallet_id
        if currency_id is not None:
            self.currency_id = currency_id
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this CurrencyBalanceSpecificResponse.  # noqa: E501

        ID of the currency balance  # noqa: E501

        :return: The id of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrencyBalanceSpecificResponse.

        ID of the currency balance  # noqa: E501

        :param id: The id of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def balance(self):
        """Gets the balance of this CurrencyBalanceSpecificResponse.  # noqa: E501

        Currency balance of the wallet  # noqa: E501

        :return: The balance of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CurrencyBalanceSpecificResponse.

        Currency balance of the wallet  # noqa: E501

        :param balance: The balance of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def wallet_id(self):
        """Gets the wallet_id of this CurrencyBalanceSpecificResponse.  # noqa: E501

        The ID of the associated wallet  # noqa: E501

        :return: The wallet_id of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this CurrencyBalanceSpecificResponse.

        The ID of the associated wallet  # noqa: E501

        :param wallet_id: The wallet_id of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :type: str
        """

        self._wallet_id = wallet_id

    @property
    def currency_id(self):
        """Gets the currency_id of this CurrencyBalanceSpecificResponse.  # noqa: E501

        The ID of the currency.  # noqa: E501

        :return: The currency_id of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this CurrencyBalanceSpecificResponse.

        The ID of the currency.  # noqa: E501

        :param currency_id: The currency_id of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :type: str
        """

        self._currency_id = currency_id

    @property
    def create_date(self):
        """Gets the create_date of this CurrencyBalanceSpecificResponse.  # noqa: E501

        Datetime the currency balance record was created  # noqa: E501

        :return: The create_date of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CurrencyBalanceSpecificResponse.

        Datetime the currency balance record was created  # noqa: E501

        :param create_date: The create_date of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this CurrencyBalanceSpecificResponse.  # noqa: E501

        Datetime the currency balance record was updated  # noqa: E501

        :return: The update_date of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this CurrencyBalanceSpecificResponse.

        Datetime the currency balance record was updated  # noqa: E501

        :param update_date: The update_date of this CurrencyBalanceSpecificResponse.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyBalanceSpecificResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyBalanceSpecificResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
