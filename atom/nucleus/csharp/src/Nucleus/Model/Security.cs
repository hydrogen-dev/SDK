/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Security
    /// </summary>
    [DataContract]
    public partial class Security :  IEquatable<Security>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Security" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Security() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Security" /> class.
        /// </summary>
        /// <param name="assetClass">Security asset class.</param>
        /// <param name="brokers">brokers.</param>
        /// <param name="category">Security category.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="currencyCode">currency_code.</param>
        /// <param name="cusip">cusip.</param>
        /// <param name="description">description.</param>
        /// <param name="exchange">Security exchange.</param>
        /// <param name="id">id.</param>
        /// <param name="image">image.</param>
        /// <param name="industry">Security industry.</param>
        /// <param name="isActive">Security is active.</param>
        /// <param name="isin">isin.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">Security name (required).</param>
        /// <param name="proxyId">proxy_id.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="sector">Security sector.</param>
        /// <param name="securityClass">Security class.</param>
        /// <param name="securityComposition">securityComposition.</param>
        /// <param name="securityCountry">securityCountry.</param>
        /// <param name="ticker">Security ticker (required).</param>
        /// <param name="totalExpenseRatio">total_expense_ratio.</param>
        /// <param name="type">Security type.</param>
        /// <param name="updateDate">updateDate.</param>
        public Security(string assetClass = default(string), List<Brokers> brokers = default(List<Brokers>), string category = default(string), DateTime? createDate = default(DateTime?), string currencyCode = default(string), string cusip = default(string), string description = default(string), string exchange = default(string), Guid? id = default(Guid?), string image = default(string), string industry = default(string), bool? isActive = default(bool?), string isin = default(string), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string), Guid? proxyId = default(Guid?), string secondaryId = default(string), string sector = default(string), string securityClass = default(string), List<SecuritiesComposition> securityComposition = default(List<SecuritiesComposition>), List<SecuritiesCountry> securityCountry = default(List<SecuritiesCountry>), string ticker = default(string), float? totalExpenseRatio = default(float?), string type = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Security and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "ticker" is required (not null)
            if (ticker == null)
            {
                throw new InvalidDataException("ticker is a required property for Security and cannot be null");
            }
            else
            {
                this.Ticker = ticker;
            }
            this.AssetClass = assetClass;
            this.Brokers = brokers;
            this.Category = category;
            this.CreateDate = createDate;
            this.CurrencyCode = currencyCode;
            this.Cusip = cusip;
            this.Description = description;
            this.Exchange = exchange;
            this.Id = id;
            this.Image = image;
            this.Industry = industry;
            this.IsActive = isActive;
            this.Isin = isin;
            this.Metadata = metadata;
            this.ProxyId = proxyId;
            this.SecondaryId = secondaryId;
            this.Sector = sector;
            this.SecurityClass = securityClass;
            this.SecurityComposition = securityComposition;
            this.SecurityCountry = securityCountry;
            this.TotalExpenseRatio = totalExpenseRatio;
            this.Type = type;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// Security asset class
        /// </summary>
        /// <value>Security asset class</value>
        [DataMember(Name="asset_class", EmitDefaultValue=false)]
        public string AssetClass { get; set; }

        /// <summary>
        /// brokers
        /// </summary>
        /// <value>brokers</value>
        [DataMember(Name="brokers", EmitDefaultValue=false)]
        public List<Brokers> Brokers { get; set; }

        /// <summary>
        /// Security category
        /// </summary>
        /// <value>Security category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// currency_code
        /// </summary>
        /// <value>currency_code</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// cusip
        /// </summary>
        /// <value>cusip</value>
        [DataMember(Name="cusip", EmitDefaultValue=false)]
        public string Cusip { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Security exchange
        /// </summary>
        /// <value>Security exchange</value>
        [DataMember(Name="exchange", EmitDefaultValue=false)]
        public string Exchange { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// image
        /// </summary>
        /// <value>image</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Security industry
        /// </summary>
        /// <value>Security industry</value>
        [DataMember(Name="industry", EmitDefaultValue=false)]
        public string Industry { get; set; }

        /// <summary>
        /// Security is active
        /// </summary>
        /// <value>Security is active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// isin
        /// </summary>
        /// <value>isin</value>
        [DataMember(Name="isin", EmitDefaultValue=false)]
        public string Isin { get; set; }

        /// <summary>
        /// metadata
        /// </summary>
        /// <value>metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Security name
        /// </summary>
        /// <value>Security name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// proxy_id
        /// </summary>
        /// <value>proxy_id</value>
        [DataMember(Name="proxy_id", EmitDefaultValue=false)]
        public Guid? ProxyId { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Security sector
        /// </summary>
        /// <value>Security sector</value>
        [DataMember(Name="sector", EmitDefaultValue=false)]
        public string Sector { get; set; }

        /// <summary>
        /// Security class
        /// </summary>
        /// <value>Security class</value>
        [DataMember(Name="security_class", EmitDefaultValue=false)]
        public string SecurityClass { get; set; }

        /// <summary>
        /// Gets or Sets SecurityComposition
        /// </summary>
        [DataMember(Name="security_composition", EmitDefaultValue=false)]
        public List<SecuritiesComposition> SecurityComposition { get; set; }

        /// <summary>
        /// Gets or Sets SecurityCountry
        /// </summary>
        [DataMember(Name="security_country", EmitDefaultValue=false)]
        public List<SecuritiesCountry> SecurityCountry { get; set; }

        /// <summary>
        /// Security ticker
        /// </summary>
        /// <value>Security ticker</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// total_expense_ratio
        /// </summary>
        /// <value>total_expense_ratio</value>
        [DataMember(Name="total_expense_ratio", EmitDefaultValue=false)]
        public float? TotalExpenseRatio { get; set; }

        /// <summary>
        /// Security type
        /// </summary>
        /// <value>Security type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Security {\n");
            sb.Append("  AssetClass: ").Append(AssetClass).Append("\n");
            sb.Append("  Brokers: ").Append(Brokers).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Cusip: ").Append(Cusip).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Industry: ").Append(Industry).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProxyId: ").Append(ProxyId).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Sector: ").Append(Sector).Append("\n");
            sb.Append("  SecurityClass: ").Append(SecurityClass).Append("\n");
            sb.Append("  SecurityComposition: ").Append(SecurityComposition).Append("\n");
            sb.Append("  SecurityCountry: ").Append(SecurityCountry).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  TotalExpenseRatio: ").Append(TotalExpenseRatio).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Security);
        }

        /// <summary>
        /// Returns true if Security instances are equal
        /// </summary>
        /// <param name="input">Instance of Security to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Security input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetClass == input.AssetClass ||
                    (this.AssetClass != null &&
                    this.AssetClass.Equals(input.AssetClass))
                ) && 
                (
                    this.Brokers == input.Brokers ||
                    this.Brokers != null &&
                    this.Brokers.SequenceEqual(input.Brokers)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Cusip == input.Cusip ||
                    (this.Cusip != null &&
                    this.Cusip.Equals(input.Cusip))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Industry == input.Industry ||
                    (this.Industry != null &&
                    this.Industry.Equals(input.Industry))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.Isin == input.Isin ||
                    (this.Isin != null &&
                    this.Isin.Equals(input.Isin))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProxyId == input.ProxyId ||
                    (this.ProxyId != null &&
                    this.ProxyId.Equals(input.ProxyId))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Sector == input.Sector ||
                    (this.Sector != null &&
                    this.Sector.Equals(input.Sector))
                ) && 
                (
                    this.SecurityClass == input.SecurityClass ||
                    (this.SecurityClass != null &&
                    this.SecurityClass.Equals(input.SecurityClass))
                ) && 
                (
                    this.SecurityComposition == input.SecurityComposition ||
                    this.SecurityComposition != null &&
                    this.SecurityComposition.SequenceEqual(input.SecurityComposition)
                ) && 
                (
                    this.SecurityCountry == input.SecurityCountry ||
                    this.SecurityCountry != null &&
                    this.SecurityCountry.SequenceEqual(input.SecurityCountry)
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.TotalExpenseRatio == input.TotalExpenseRatio ||
                    (this.TotalExpenseRatio != null &&
                    this.TotalExpenseRatio.Equals(input.TotalExpenseRatio))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetClass != null)
                    hashCode = hashCode * 59 + this.AssetClass.GetHashCode();
                if (this.Brokers != null)
                    hashCode = hashCode * 59 + this.Brokers.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Cusip != null)
                    hashCode = hashCode * 59 + this.Cusip.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Exchange != null)
                    hashCode = hashCode * 59 + this.Exchange.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Industry != null)
                    hashCode = hashCode * 59 + this.Industry.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Isin != null)
                    hashCode = hashCode * 59 + this.Isin.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProxyId != null)
                    hashCode = hashCode * 59 + this.ProxyId.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Sector != null)
                    hashCode = hashCode * 59 + this.Sector.GetHashCode();
                if (this.SecurityClass != null)
                    hashCode = hashCode * 59 + this.SecurityClass.GetHashCode();
                if (this.SecurityComposition != null)
                    hashCode = hashCode * 59 + this.SecurityComposition.GetHashCode();
                if (this.SecurityCountry != null)
                    hashCode = hashCode * 59 + this.SecurityCountry.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.TotalExpenseRatio != null)
                    hashCode = hashCode * 59 + this.TotalExpenseRatio.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
