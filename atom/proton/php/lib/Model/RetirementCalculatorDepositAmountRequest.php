<?php
/**
 * RetirementCalculatorDepositAmountRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * RetirementCalculatorDepositAmountRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RetirementCalculatorDepositAmountRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'retirementCalculatorDepositAmountRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'retirement_savings' => 'float',
        'current_age' => 'int',
        'account_ids' => 'string[]',
        'retirement_income' => 'float',
        'retirement_tax' => 'float',
        'death_age' => 'int',
        'retirement_age' => 'int',
        'percent_of_expenses_covered' => 'float',
        'portfolio_return' => 'float',
        'retirement_expenses' => 'float',
        'deposit_schedule' => '\com\hydrogen\proton\Model\CalculatorDepositSchedule',
        'inflation_rate' => 'float',
        'aggregation_account_ids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'retirement_savings' => 'float',
        'current_age' => 'int32',
        'account_ids' => 'uuid',
        'retirement_income' => 'float',
        'retirement_tax' => 'float',
        'death_age' => 'int32',
        'retirement_age' => 'int32',
        'percent_of_expenses_covered' => 'float',
        'portfolio_return' => 'float',
        'retirement_expenses' => 'float',
        'deposit_schedule' => null,
        'inflation_rate' => 'float',
        'aggregation_account_ids' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retirement_savings' => 'retirement_savings',
        'current_age' => 'current_age',
        'account_ids' => 'account_ids',
        'retirement_income' => 'retirement_income',
        'retirement_tax' => 'retirement_tax',
        'death_age' => 'death_age',
        'retirement_age' => 'retirement_age',
        'percent_of_expenses_covered' => 'percent_of_expenses_covered',
        'portfolio_return' => 'portfolio_return',
        'retirement_expenses' => 'retirement_expenses',
        'deposit_schedule' => 'deposit_schedule',
        'inflation_rate' => 'inflation_rate',
        'aggregation_account_ids' => 'aggregation_account_ids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retirement_savings' => 'setRetirementSavings',
        'current_age' => 'setCurrentAge',
        'account_ids' => 'setAccountIds',
        'retirement_income' => 'setRetirementIncome',
        'retirement_tax' => 'setRetirementTax',
        'death_age' => 'setDeathAge',
        'retirement_age' => 'setRetirementAge',
        'percent_of_expenses_covered' => 'setPercentOfExpensesCovered',
        'portfolio_return' => 'setPortfolioReturn',
        'retirement_expenses' => 'setRetirementExpenses',
        'deposit_schedule' => 'setDepositSchedule',
        'inflation_rate' => 'setInflationRate',
        'aggregation_account_ids' => 'setAggregationAccountIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retirement_savings' => 'getRetirementSavings',
        'current_age' => 'getCurrentAge',
        'account_ids' => 'getAccountIds',
        'retirement_income' => 'getRetirementIncome',
        'retirement_tax' => 'getRetirementTax',
        'death_age' => 'getDeathAge',
        'retirement_age' => 'getRetirementAge',
        'percent_of_expenses_covered' => 'getPercentOfExpensesCovered',
        'portfolio_return' => 'getPortfolioReturn',
        'retirement_expenses' => 'getRetirementExpenses',
        'deposit_schedule' => 'getDepositSchedule',
        'inflation_rate' => 'getInflationRate',
        'aggregation_account_ids' => 'getAggregationAccountIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['retirement_savings'] = isset($data['retirement_savings']) ? $data['retirement_savings'] : 0.0;
        $this->container['current_age'] = isset($data['current_age']) ? $data['current_age'] : null;
        $this->container['account_ids'] = isset($data['account_ids']) ? $data['account_ids'] : null;
        $this->container['retirement_income'] = isset($data['retirement_income']) ? $data['retirement_income'] : 0.0;
        $this->container['retirement_tax'] = isset($data['retirement_tax']) ? $data['retirement_tax'] : 0.0;
        $this->container['death_age'] = isset($data['death_age']) ? $data['death_age'] : null;
        $this->container['retirement_age'] = isset($data['retirement_age']) ? $data['retirement_age'] : 65;
        $this->container['percent_of_expenses_covered'] = isset($data['percent_of_expenses_covered']) ? $data['percent_of_expenses_covered'] : 1.0;
        $this->container['portfolio_return'] = isset($data['portfolio_return']) ? $data['portfolio_return'] : null;
        $this->container['retirement_expenses'] = isset($data['retirement_expenses']) ? $data['retirement_expenses'] : null;
        $this->container['deposit_schedule'] = isset($data['deposit_schedule']) ? $data['deposit_schedule'] : null;
        $this->container['inflation_rate'] = isset($data['inflation_rate']) ? $data['inflation_rate'] : 0.0;
        $this->container['aggregation_account_ids'] = isset($data['aggregation_account_ids']) ? $data['aggregation_account_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['retirement_savings']) && ($this->container['retirement_savings'] < 0)) {
            $invalidProperties[] = "invalid value for 'retirement_savings', must be bigger than or equal to 0.";
        }

        if ($this->container['current_age'] === null) {
            $invalidProperties[] = "'current_age' can't be null";
        }
        if (($this->container['current_age'] < 0)) {
            $invalidProperties[] = "invalid value for 'current_age', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['retirement_income']) && ($this->container['retirement_income'] < 0)) {
            $invalidProperties[] = "invalid value for 'retirement_income', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['retirement_tax']) && ($this->container['retirement_tax'] > 1)) {
            $invalidProperties[] = "invalid value for 'retirement_tax', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['retirement_tax']) && ($this->container['retirement_tax'] < 0)) {
            $invalidProperties[] = "invalid value for 'retirement_tax', must be bigger than or equal to 0.";
        }

        if ($this->container['death_age'] === null) {
            $invalidProperties[] = "'death_age' can't be null";
        }
        if (($this->container['death_age'] < 0)) {
            $invalidProperties[] = "invalid value for 'death_age', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['retirement_age']) && ($this->container['retirement_age'] < 0)) {
            $invalidProperties[] = "invalid value for 'retirement_age', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['percent_of_expenses_covered']) && ($this->container['percent_of_expenses_covered'] > 1)) {
            $invalidProperties[] = "invalid value for 'percent_of_expenses_covered', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['percent_of_expenses_covered']) && ($this->container['percent_of_expenses_covered'] < 0)) {
            $invalidProperties[] = "invalid value for 'percent_of_expenses_covered', must be bigger than or equal to 0.";
        }

        if ($this->container['portfolio_return'] === null) {
            $invalidProperties[] = "'portfolio_return' can't be null";
        }
        if (($this->container['portfolio_return'] < -1)) {
            $invalidProperties[] = "invalid value for 'portfolio_return', must be bigger than or equal to -1.";
        }

        if ($this->container['retirement_expenses'] === null) {
            $invalidProperties[] = "'retirement_expenses' can't be null";
        }
        if (($this->container['retirement_expenses'] < 0)) {
            $invalidProperties[] = "invalid value for 'retirement_expenses', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['inflation_rate']) && ($this->container['inflation_rate'] < -1)) {
            $invalidProperties[] = "invalid value for 'inflation_rate', must be bigger than or equal to -1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retirement_savings
     *
     * @return float
     */
    public function getRetirementSavings()
    {
        return $this->container['retirement_savings'];
    }

    /**
     * Sets retirement_savings
     *
     * @param float $retirement_savings retirement_savings
     *
     * @return $this
     */
    public function setRetirementSavings($retirement_savings)
    {

        if (!is_null($retirement_savings) && ($retirement_savings < 0)) {
            throw new \InvalidArgumentException('invalid value for $retirement_savings when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['retirement_savings'] = $retirement_savings;

        return $this;
    }

    /**
     * Gets current_age
     *
     * @return int
     */
    public function getCurrentAge()
    {
        return $this->container['current_age'];
    }

    /**
     * Sets current_age
     *
     * @param int $current_age current_age
     *
     * @return $this
     */
    public function setCurrentAge($current_age)
    {

        if (($current_age < 0)) {
            throw new \InvalidArgumentException('invalid value for $current_age when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['current_age'] = $current_age;

        return $this;
    }

    /**
     * Gets account_ids
     *
     * @return string[]
     */
    public function getAccountIds()
    {
        return $this->container['account_ids'];
    }

    /**
     * Sets account_ids
     *
     * @param string[] $account_ids account_ids
     *
     * @return $this
     */
    public function setAccountIds($account_ids)
    {
        $this->container['account_ids'] = $account_ids;

        return $this;
    }

    /**
     * Gets retirement_income
     *
     * @return float
     */
    public function getRetirementIncome()
    {
        return $this->container['retirement_income'];
    }

    /**
     * Sets retirement_income
     *
     * @param float $retirement_income retirement_income
     *
     * @return $this
     */
    public function setRetirementIncome($retirement_income)
    {

        if (!is_null($retirement_income) && ($retirement_income < 0)) {
            throw new \InvalidArgumentException('invalid value for $retirement_income when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['retirement_income'] = $retirement_income;

        return $this;
    }

    /**
     * Gets retirement_tax
     *
     * @return float
     */
    public function getRetirementTax()
    {
        return $this->container['retirement_tax'];
    }

    /**
     * Sets retirement_tax
     *
     * @param float $retirement_tax retirement_tax
     *
     * @return $this
     */
    public function setRetirementTax($retirement_tax)
    {

        if (!is_null($retirement_tax) && ($retirement_tax > 1)) {
            throw new \InvalidArgumentException('invalid value for $retirement_tax when calling RetirementCalculatorDepositAmountRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($retirement_tax) && ($retirement_tax < 0)) {
            throw new \InvalidArgumentException('invalid value for $retirement_tax when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['retirement_tax'] = $retirement_tax;

        return $this;
    }

    /**
     * Gets death_age
     *
     * @return int
     */
    public function getDeathAge()
    {
        return $this->container['death_age'];
    }

    /**
     * Sets death_age
     *
     * @param int $death_age death_age
     *
     * @return $this
     */
    public function setDeathAge($death_age)
    {

        if (($death_age < 0)) {
            throw new \InvalidArgumentException('invalid value for $death_age when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['death_age'] = $death_age;

        return $this;
    }

    /**
     * Gets retirement_age
     *
     * @return int
     */
    public function getRetirementAge()
    {
        return $this->container['retirement_age'];
    }

    /**
     * Sets retirement_age
     *
     * @param int $retirement_age retirement_age
     *
     * @return $this
     */
    public function setRetirementAge($retirement_age)
    {

        if (!is_null($retirement_age) && ($retirement_age < 0)) {
            throw new \InvalidArgumentException('invalid value for $retirement_age when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['retirement_age'] = $retirement_age;

        return $this;
    }

    /**
     * Gets percent_of_expenses_covered
     *
     * @return float
     */
    public function getPercentOfExpensesCovered()
    {
        return $this->container['percent_of_expenses_covered'];
    }

    /**
     * Sets percent_of_expenses_covered
     *
     * @param float $percent_of_expenses_covered percent_of_expenses_covered
     *
     * @return $this
     */
    public function setPercentOfExpensesCovered($percent_of_expenses_covered)
    {

        if (!is_null($percent_of_expenses_covered) && ($percent_of_expenses_covered > 1)) {
            throw new \InvalidArgumentException('invalid value for $percent_of_expenses_covered when calling RetirementCalculatorDepositAmountRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($percent_of_expenses_covered) && ($percent_of_expenses_covered < 0)) {
            throw new \InvalidArgumentException('invalid value for $percent_of_expenses_covered when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['percent_of_expenses_covered'] = $percent_of_expenses_covered;

        return $this;
    }

    /**
     * Gets portfolio_return
     *
     * @return float
     */
    public function getPortfolioReturn()
    {
        return $this->container['portfolio_return'];
    }

    /**
     * Sets portfolio_return
     *
     * @param float $portfolio_return portfolio_return
     *
     * @return $this
     */
    public function setPortfolioReturn($portfolio_return)
    {

        if (($portfolio_return < -1)) {
            throw new \InvalidArgumentException('invalid value for $portfolio_return when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to -1.');
        }

        $this->container['portfolio_return'] = $portfolio_return;

        return $this;
    }

    /**
     * Gets retirement_expenses
     *
     * @return float
     */
    public function getRetirementExpenses()
    {
        return $this->container['retirement_expenses'];
    }

    /**
     * Sets retirement_expenses
     *
     * @param float $retirement_expenses retirement_expenses
     *
     * @return $this
     */
    public function setRetirementExpenses($retirement_expenses)
    {

        if (($retirement_expenses < 0)) {
            throw new \InvalidArgumentException('invalid value for $retirement_expenses when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to 0.');
        }

        $this->container['retirement_expenses'] = $retirement_expenses;

        return $this;
    }

    /**
     * Gets deposit_schedule
     *
     * @return \com\hydrogen\proton\Model\CalculatorDepositSchedule
     */
    public function getDepositSchedule()
    {
        return $this->container['deposit_schedule'];
    }

    /**
     * Sets deposit_schedule
     *
     * @param \com\hydrogen\proton\Model\CalculatorDepositSchedule $deposit_schedule deposit_schedule
     *
     * @return $this
     */
    public function setDepositSchedule($deposit_schedule)
    {
        $this->container['deposit_schedule'] = $deposit_schedule;

        return $this;
    }

    /**
     * Gets inflation_rate
     *
     * @return float
     */
    public function getInflationRate()
    {
        return $this->container['inflation_rate'];
    }

    /**
     * Sets inflation_rate
     *
     * @param float $inflation_rate inflation_rate
     *
     * @return $this
     */
    public function setInflationRate($inflation_rate)
    {

        if (!is_null($inflation_rate) && ($inflation_rate < -1)) {
            throw new \InvalidArgumentException('invalid value for $inflation_rate when calling RetirementCalculatorDepositAmountRequest., must be bigger than or equal to -1.');
        }

        $this->container['inflation_rate'] = $inflation_rate;

        return $this;
    }

    /**
     * Gets aggregation_account_ids
     *
     * @return string[]
     */
    public function getAggregationAccountIds()
    {
        return $this->container['aggregation_account_ids'];
    }

    /**
     * Sets aggregation_account_ids
     *
     * @param string[] $aggregation_account_ids aggregation_account_ids
     *
     * @return $this
     */
    public function setAggregationAccountIds($aggregation_account_ids)
    {
        $this->container['aggregation_account_ids'] = $aggregation_account_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


