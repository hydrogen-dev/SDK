<?php
/**
 * Question
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * Question Class Doc Comment
 *
 * @category Class
 * @description Question Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Question implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Question';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'answers' => '\com\hydrogen\nucleus\Model\Answer[]',
        'category' => 'string',
        'create_date' => '\DateTime',
        'description' => 'string',
        'document' => 'string',
        'id' => 'string',
        'image' => 'string',
        'is_account' => 'bool',
        'metadata' => 'map[string,string]',
        'order_index' => 'string',
        'question_type' => 'string',
        'questionnaire' => '\com\hydrogen\nucleus\Model\Questionnaire',
        'questionnaire_id' => 'string',
        'secondary_id' => 'string',
        'subcategory' => 'string',
        'title' => 'string',
        'tooltip' => 'string',
        'update_date' => '\DateTime',
        'weight' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'answers' => null,
        'category' => null,
        'create_date' => 'date-time',
        'description' => null,
        'document' => null,
        'id' => 'uuid',
        'image' => null,
        'is_account' => null,
        'metadata' => null,
        'order_index' => null,
        'question_type' => null,
        'questionnaire' => null,
        'questionnaire_id' => 'uuid',
        'secondary_id' => null,
        'subcategory' => null,
        'title' => null,
        'tooltip' => null,
        'update_date' => 'date-time',
        'weight' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'answers' => 'answers',
        'category' => 'category',
        'create_date' => 'create_date',
        'description' => 'description',
        'document' => 'document',
        'id' => 'id',
        'image' => 'image',
        'is_account' => 'is_account',
        'metadata' => 'metadata',
        'order_index' => 'order_index',
        'question_type' => 'question_type',
        'questionnaire' => 'questionnaire',
        'questionnaire_id' => 'questionnaire_id',
        'secondary_id' => 'secondary_id',
        'subcategory' => 'subcategory',
        'title' => 'title',
        'tooltip' => 'tooltip',
        'update_date' => 'update_date',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'answers' => 'setAnswers',
        'category' => 'setCategory',
        'create_date' => 'setCreateDate',
        'description' => 'setDescription',
        'document' => 'setDocument',
        'id' => 'setId',
        'image' => 'setImage',
        'is_account' => 'setIsAccount',
        'metadata' => 'setMetadata',
        'order_index' => 'setOrderIndex',
        'question_type' => 'setQuestionType',
        'questionnaire' => 'setQuestionnaire',
        'questionnaire_id' => 'setQuestionnaireId',
        'secondary_id' => 'setSecondaryId',
        'subcategory' => 'setSubcategory',
        'title' => 'setTitle',
        'tooltip' => 'setTooltip',
        'update_date' => 'setUpdateDate',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'answers' => 'getAnswers',
        'category' => 'getCategory',
        'create_date' => 'getCreateDate',
        'description' => 'getDescription',
        'document' => 'getDocument',
        'id' => 'getId',
        'image' => 'getImage',
        'is_account' => 'getIsAccount',
        'metadata' => 'getMetadata',
        'order_index' => 'getOrderIndex',
        'question_type' => 'getQuestionType',
        'questionnaire' => 'getQuestionnaire',
        'questionnaire_id' => 'getQuestionnaireId',
        'secondary_id' => 'getSecondaryId',
        'subcategory' => 'getSubcategory',
        'title' => 'getTitle',
        'tooltip' => 'getTooltip',
        'update_date' => 'getUpdateDate',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['answers'] = isset($data['answers']) ? $data['answers'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['is_account'] = isset($data['is_account']) ? $data['is_account'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['order_index'] = isset($data['order_index']) ? $data['order_index'] : null;
        $this->container['question_type'] = isset($data['question_type']) ? $data['question_type'] : null;
        $this->container['questionnaire'] = isset($data['questionnaire']) ? $data['questionnaire'] : null;
        $this->container['questionnaire_id'] = isset($data['questionnaire_id']) ? $data['questionnaire_id'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['subcategory'] = isset($data['subcategory']) ? $data['subcategory'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['tooltip'] = isset($data['tooltip']) ? $data['tooltip'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets answers
     *
     * @return \com\hydrogen\nucleus\Model\Answer[]
     */
    public function getAnswers()
    {
        return $this->container['answers'];
    }

    /**
     * Sets answers
     *
     * @param \com\hydrogen\nucleus\Model\Answer[] $answers answers
     *
     * @return $this
     */
    public function setAnswers($answers)
    {
        $this->container['answers'] = $answers;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document
     *
     * @return string
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param string $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets is_account
     *
     * @return bool
     */
    public function getIsAccount()
    {
        return $this->container['is_account'];
    }

    /**
     * Sets is_account
     *
     * @param bool $is_account is_account
     *
     * @return $this
     */
    public function setIsAccount($is_account)
    {
        $this->container['is_account'] = $is_account;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets order_index
     *
     * @return string
     */
    public function getOrderIndex()
    {
        return $this->container['order_index'];
    }

    /**
     * Sets order_index
     *
     * @param string $order_index order_index
     *
     * @return $this
     */
    public function setOrderIndex($order_index)
    {
        $this->container['order_index'] = $order_index;

        return $this;
    }

    /**
     * Gets question_type
     *
     * @return string
     */
    public function getQuestionType()
    {
        return $this->container['question_type'];
    }

    /**
     * Sets question_type
     *
     * @param string $question_type question_type
     *
     * @return $this
     */
    public function setQuestionType($question_type)
    {
        $this->container['question_type'] = $question_type;

        return $this;
    }

    /**
     * Gets questionnaire
     *
     * @return \com\hydrogen\nucleus\Model\Questionnaire
     */
    public function getQuestionnaire()
    {
        return $this->container['questionnaire'];
    }

    /**
     * Sets questionnaire
     *
     * @param \com\hydrogen\nucleus\Model\Questionnaire $questionnaire questionnaire
     *
     * @return $this
     */
    public function setQuestionnaire($questionnaire)
    {
        $this->container['questionnaire'] = $questionnaire;

        return $this;
    }

    /**
     * Gets questionnaire_id
     *
     * @return string
     */
    public function getQuestionnaireId()
    {
        return $this->container['questionnaire_id'];
    }

    /**
     * Sets questionnaire_id
     *
     * @param string $questionnaire_id questionnaireId
     *
     * @return $this
     */
    public function setQuestionnaireId($questionnaire_id)
    {
        $this->container['questionnaire_id'] = $questionnaire_id;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets subcategory
     *
     * @return string
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     *
     * @param string $subcategory subcategory
     *
     * @return $this
     */
    public function setSubcategory($subcategory)
    {
        $this->container['subcategory'] = $subcategory;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets tooltip
     *
     * @return string
     */
    public function getTooltip()
    {
        return $this->container['tooltip'];
    }

    /**
     * Sets tooltip
     *
     * @param string $tooltip tooltip
     *
     * @return $this
     */
    public function setTooltip($tooltip)
    {
        $this->container['tooltip'] = $tooltip;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


