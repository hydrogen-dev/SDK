/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPortfolioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>PortfolioAssetSizeLog</returns>
        PortfolioAssetSizeLog CreatePortfolioAssetSizeUsingPost (PortfolioAssetSizeLog portfolioAssetSizeLogRequest);

        /// <summary>
        /// Create a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>ApiResponse of PortfolioAssetSizeLog</returns>
        ApiResponse<PortfolioAssetSizeLog> CreatePortfolioAssetSizeUsingPostWithHttpInfo (PortfolioAssetSizeLog portfolioAssetSizeLogRequest);
        /// <summary>
        /// Create a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a portfolio defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>PortfolioComment</returns>
        PortfolioComment CreatePortfolioCommentUsingPost (PortfolioComment portfolioComment);

        /// <summary>
        /// Create a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a portfolio defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>ApiResponse of PortfolioComment</returns>
        ApiResponse<PortfolioComment> CreatePortfolioCommentUsingPostWithHttpInfo (PortfolioComment portfolioComment);
        /// <summary>
        /// Create an portfolio goal
        /// </summary>
        /// <remarks>
        /// Create an portfolio goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>PortfolioGoal</returns>
        PortfolioGoal CreatePortfolioGoalUsingPost (PortfolioGoal portfolioGoal);

        /// <summary>
        /// Create an portfolio goal
        /// </summary>
        /// <remarks>
        /// Create an portfolio goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>ApiResponse of PortfolioGoal</returns>
        ApiResponse<PortfolioGoal> CreatePortfolioGoalUsingPostWithHttpInfo (PortfolioGoal portfolioGoal);
        /// <summary>
        /// Create a portfolio holding
        /// </summary>
        /// <remarks>
        /// Create a new holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>PortfolioHoldingLog</returns>
        PortfolioHoldingLog CreatePortfolioHoldingUsingPost (PortfolioHoldingLog portfolioHoldinLogRequest);

        /// <summary>
        /// Create a portfolio holding
        /// </summary>
        /// <remarks>
        /// Create a new holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>ApiResponse of PortfolioHoldingLog</returns>
        ApiResponse<PortfolioHoldingLog> CreatePortfolioHoldingUsingPostWithHttpInfo (PortfolioHoldingLog portfolioHoldinLogRequest);
        /// <summary>
        /// Create a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>PortfolioTransaction</returns>
        PortfolioTransaction CreatePortfolioTransactionUsingPost (PortfolioTransaction portfolioTransactionRequest);

        /// <summary>
        /// Create a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>ApiResponse of PortfolioTransaction</returns>
        ApiResponse<PortfolioTransaction> CreatePortfolioTransactionUsingPostWithHttpInfo (PortfolioTransaction portfolioTransactionRequest);
        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Create a new portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>Portfolio</returns>
        Portfolio CreatePortfolioUsingPost (Portfolio portfolioRequest);

        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Create a new portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>ApiResponse of Portfolio</returns>
        ApiResponse<Portfolio> CreatePortfolioUsingPostWithHttpInfo (Portfolio portfolioRequest);
        /// <summary>
        /// Delete a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns></returns>
        void DeletePortfolioAssetSizeUsingDelete (Guid? portfolioAssetSizeId);

        /// <summary>
        /// Delete a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePortfolioAssetSizeUsingDeleteWithHttpInfo (Guid? portfolioAssetSizeId);
        /// <summary>
        /// Delete a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns></returns>
        void DeletePortfolioCommentUsingDelete (Guid? portfolioCommentId);

        /// <summary>
        /// Delete a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePortfolioCommentUsingDeleteWithHttpInfo (Guid? portfolioCommentId);
        /// <summary>
        /// Delete an portfolio goal
        /// </summary>
        /// <remarks>
        /// Permanently delete an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns></returns>
        void DeletePortfolioGoalUsingDelete (Guid? portfolioGoalId);

        /// <summary>
        /// Delete an portfolio goal
        /// </summary>
        /// <remarks>
        /// Permanently delete an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePortfolioGoalUsingDeleteWithHttpInfo (Guid? portfolioGoalId);
        /// <summary>
        /// Delete a portfolio holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns></returns>
        void DeletePortfolioHoldingUsingDelete (Guid? portfolioHoldingId);

        /// <summary>
        /// Delete a portfolio holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePortfolioHoldingUsingDeleteWithHttpInfo (Guid? portfolioHoldingId);
        /// <summary>
        /// Delete a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns></returns>
        void DeletePortfolioTransactionUsingDelete (Guid? portfolioTransactionId);

        /// <summary>
        /// Delete a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePortfolioTransactionUsingDeleteWithHttpInfo (Guid? portfolioTransactionId);
        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns></returns>
        void DeletePortfolioUsingDelete (Guid? portfolioId);

        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePortfolioUsingDeleteWithHttpInfo (Guid? portfolioId);
        /// <summary>
        /// getAllPortfolioTransactionByPost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetAllPortfolioTransactionByPostUsingPOST (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// getAllPortfolioTransactionByPost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetAllPortfolioTransactionByPostUsingPOSTWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an portfolio aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a securities associated with a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>Object</returns>
        Object GetPortfolioAggregatedDataUsingGet (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null);

        /// <summary>
        /// Retrieve an portfolio aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a securities associated with a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetPortfolioAggregatedDataUsingGetWithHttpInfo (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null);
        /// <summary>
        /// List all portfolios
        /// </summary>
        /// <remarks>
        /// Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolio</returns>
        PagePortfolio GetPortfolioAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolios
        /// </summary>
        /// <remarks>
        /// Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolio</returns>
        ApiResponse<PagePortfolio> GetPortfolioAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioAssetSizeLog</returns>
        PagePortfolioAssetSizeLog GetPortfolioAssetSizeAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioAssetSizeLog</returns>
        ApiResponse<PagePortfolioAssetSizeLog> GetPortfolioAssetSizeAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>PortfolioAssetSizeLog</returns>
        PortfolioAssetSizeLog GetPortfolioAssetSizeUsingGet (Guid? portfolioAssetSizeId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>ApiResponse of PortfolioAssetSizeLog</returns>
        ApiResponse<PortfolioAssetSizeLog> GetPortfolioAssetSizeUsingGetWithHttpInfo (Guid? portfolioAssetSizeId, string currencyConversion = null);
        /// <summary>
        /// List all portfolio commentary
        /// </summary>
        /// <remarks>
        /// List all comments for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioComment</returns>
        PagePortfolioComment GetPortfolioCommentAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio commentary
        /// </summary>
        /// <remarks>
        /// List all comments for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioComment</returns>
        ApiResponse<PagePortfolioComment> GetPortfolioCommentAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>PortfolioComment</returns>
        PortfolioComment GetPortfolioCommentUsingGet (Guid? portfolioCommentId);

        /// <summary>
        /// Retrieve a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>ApiResponse of PortfolioComment</returns>
        ApiResponse<PortfolioComment> GetPortfolioCommentUsingGetWithHttpInfo (Guid? portfolioCommentId);
        /// <summary>
        /// List all portfolio goals
        /// </summary>
        /// <remarks>
        /// Get information for all portfolio-goal mappings defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioGoal</returns>
        PagePortfolioGoal GetPortfolioGoalAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio goals
        /// </summary>
        /// <remarks>
        /// Get information for all portfolio-goal mappings defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioGoal</returns>
        ApiResponse<PagePortfolioGoal> GetPortfolioGoalAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an portfolio goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>PortfolioGoal</returns>
        PortfolioGoal GetPortfolioGoalUsingGet (Guid? portfolioGoalId);

        /// <summary>
        /// Retrieve an portfolio goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>ApiResponse of PortfolioGoal</returns>
        ApiResponse<PortfolioGoal> GetPortfolioGoalUsingGetWithHttpInfo (Guid? portfolioGoalId);
        /// <summary>
        /// List all portfolio holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all holding records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioHoldingLog</returns>
        PagePortfolioHoldingLog GetPortfolioHoldingAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all holding records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingLog</returns>
        ApiResponse<PagePortfolioHoldingLog> GetPortfolioHoldingAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>PortfolioHoldingLog</returns>
        PortfolioHoldingLog GetPortfolioHoldingUsingGet (Guid? portfolioHoldingId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a portfolio holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of PortfolioHoldingLog</returns>
        ApiResponse<PortfolioHoldingLog> GetPortfolioHoldingUsingGetWithHttpInfo (Guid? portfolioHoldingId, string currencyConversion = null);
        /// <summary>
        /// List all portfolio transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetPortfolioTransactionAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetPortfolioTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>PortfolioTransaction</returns>
        PortfolioTransaction GetPortfolioTransactionUsingGet (Guid? portfolioTransactionId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of PortfolioTransaction</returns>
        ApiResponse<PortfolioTransaction> GetPortfolioTransactionUsingGetWithHttpInfo (Guid? portfolioTransactionId, string currencyConversion = null);
        /// <summary>
        /// Retrieve a portfolio
        /// </summary>
        /// <remarks>
        /// Retrieve a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Portfolio</returns>
        Portfolio GetPortfolioUsingGet (Guid? portfolioId);

        /// <summary>
        /// Retrieve a portfolio
        /// </summary>
        /// <remarks>
        /// Retrieve a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>ApiResponse of Portfolio</returns>
        ApiResponse<Portfolio> GetPortfolioUsingGetWithHttpInfo (Guid? portfolioId);
        /// <summary>
        /// Update a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>PortfolioAssetSizeLog</returns>
        PortfolioAssetSizeLog UpdatePortfolioAssetSizeUsingPut (Object portfolioAssetSize, Guid? portfolioAssetSizeId);

        /// <summary>
        /// Update a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>ApiResponse of PortfolioAssetSizeLog</returns>
        ApiResponse<PortfolioAssetSizeLog> UpdatePortfolioAssetSizeUsingPutWithHttpInfo (Object portfolioAssetSize, Guid? portfolioAssetSizeId);
        /// <summary>
        /// Update a portfolio comment
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>PortfolioComment</returns>
        PortfolioComment UpdatePortfolioCommentUsingPut (Object portfolioComment, Guid? portfolioCommentId);

        /// <summary>
        /// Update a portfolio comment
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>ApiResponse of PortfolioComment</returns>
        ApiResponse<PortfolioComment> UpdatePortfolioCommentUsingPutWithHttpInfo (Object portfolioComment, Guid? portfolioCommentId);
        /// <summary>
        /// Update an portfolio goal
        /// </summary>
        /// <remarks>
        /// Update the information for an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>PortfolioGoal</returns>
        PortfolioGoal UpdatePortfolioGoalUsingPut (Object portfolioGoal, Guid? portfolioGoalId);

        /// <summary>
        /// Update an portfolio goal
        /// </summary>
        /// <remarks>
        /// Update the information for an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>ApiResponse of PortfolioGoal</returns>
        ApiResponse<PortfolioGoal> UpdatePortfolioGoalUsingPutWithHttpInfo (Object portfolioGoal, Guid? portfolioGoalId);
        /// <summary>
        /// Update a portfolio holding
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>PortfolioHoldingLog</returns>
        PortfolioHoldingLog UpdatePortfolioHoldingUsingPut (Object portfolioHolding, Guid? portfolioHoldingId);

        /// <summary>
        /// Update a portfolio holding
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>ApiResponse of PortfolioHoldingLog</returns>
        ApiResponse<PortfolioHoldingLog> UpdatePortfolioHoldingUsingPutWithHttpInfo (Object portfolioHolding, Guid? portfolioHoldingId);
        /// <summary>
        /// Update a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>PortfolioTransaction</returns>
        PortfolioTransaction UpdatePortfolioTransactionUsingPut (Object portfolioTransaction, Guid? portfolioTransactionId);

        /// <summary>
        /// Update a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>ApiResponse of PortfolioTransaction</returns>
        ApiResponse<PortfolioTransaction> UpdatePortfolioTransactionUsingPutWithHttpInfo (Object portfolioTransaction, Guid? portfolioTransactionId);
        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// Update a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Portfolio</returns>
        Portfolio UpdatePortfolioUsingPut (Object portfolio, Guid? portfolioId);

        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// Update a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>ApiResponse of Portfolio</returns>
        ApiResponse<Portfolio> UpdatePortfolioUsingPutWithHttpInfo (Object portfolio, Guid? portfolioId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>Task of PortfolioAssetSizeLog</returns>
        System.Threading.Tasks.Task<PortfolioAssetSizeLog> CreatePortfolioAssetSizeUsingPostAsync (PortfolioAssetSizeLog portfolioAssetSizeLogRequest);

        /// <summary>
        /// Create a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Create a new asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>Task of ApiResponse (PortfolioAssetSizeLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioAssetSizeLog>> CreatePortfolioAssetSizeUsingPostAsyncWithHttpInfo (PortfolioAssetSizeLog portfolioAssetSizeLogRequest);
        /// <summary>
        /// Create a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a portfolio defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>Task of PortfolioComment</returns>
        System.Threading.Tasks.Task<PortfolioComment> CreatePortfolioCommentUsingPostAsync (PortfolioComment portfolioComment);

        /// <summary>
        /// Create a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Create a new comment for a portfolio defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>Task of ApiResponse (PortfolioComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioComment>> CreatePortfolioCommentUsingPostAsyncWithHttpInfo (PortfolioComment portfolioComment);
        /// <summary>
        /// Create an portfolio goal
        /// </summary>
        /// <remarks>
        /// Create an portfolio goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>Task of PortfolioGoal</returns>
        System.Threading.Tasks.Task<PortfolioGoal> CreatePortfolioGoalUsingPostAsync (PortfolioGoal portfolioGoal);

        /// <summary>
        /// Create an portfolio goal
        /// </summary>
        /// <remarks>
        /// Create an portfolio goal.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>Task of ApiResponse (PortfolioGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioGoal>> CreatePortfolioGoalUsingPostAsyncWithHttpInfo (PortfolioGoal portfolioGoal);
        /// <summary>
        /// Create a portfolio holding
        /// </summary>
        /// <remarks>
        /// Create a new holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>Task of PortfolioHoldingLog</returns>
        System.Threading.Tasks.Task<PortfolioHoldingLog> CreatePortfolioHoldingUsingPostAsync (PortfolioHoldingLog portfolioHoldinLogRequest);

        /// <summary>
        /// Create a portfolio holding
        /// </summary>
        /// <remarks>
        /// Create a new holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>Task of ApiResponse (PortfolioHoldingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioHoldingLog>> CreatePortfolioHoldingUsingPostAsyncWithHttpInfo (PortfolioHoldingLog portfolioHoldinLogRequest);
        /// <summary>
        /// Create a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>Task of PortfolioTransaction</returns>
        System.Threading.Tasks.Task<PortfolioTransaction> CreatePortfolioTransactionUsingPostAsync (PortfolioTransaction portfolioTransactionRequest);

        /// <summary>
        /// Create a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Create a new transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>Task of ApiResponse (PortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioTransaction>> CreatePortfolioTransactionUsingPostAsyncWithHttpInfo (PortfolioTransaction portfolioTransactionRequest);
        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Create a new portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>Task of Portfolio</returns>
        System.Threading.Tasks.Task<Portfolio> CreatePortfolioUsingPostAsync (Portfolio portfolioRequest);

        /// <summary>
        /// Create a portfolio
        /// </summary>
        /// <remarks>
        /// Create a new portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portfolio>> CreatePortfolioUsingPostAsyncWithHttpInfo (Portfolio portfolioRequest);
        /// <summary>
        /// Delete a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePortfolioAssetSizeUsingDeleteAsync (Guid? portfolioAssetSizeId);

        /// <summary>
        /// Delete a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioAssetSizeUsingDeleteAsyncWithHttpInfo (Guid? portfolioAssetSizeId);
        /// <summary>
        /// Delete a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePortfolioCommentUsingDeleteAsync (Guid? portfolioCommentId);

        /// <summary>
        /// Delete a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioCommentUsingDeleteAsyncWithHttpInfo (Guid? portfolioCommentId);
        /// <summary>
        /// Delete an portfolio goal
        /// </summary>
        /// <remarks>
        /// Permanently delete an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePortfolioGoalUsingDeleteAsync (Guid? portfolioGoalId);

        /// <summary>
        /// Delete an portfolio goal
        /// </summary>
        /// <remarks>
        /// Permanently delete an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioGoalUsingDeleteAsyncWithHttpInfo (Guid? portfolioGoalId);
        /// <summary>
        /// Delete a portfolio holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePortfolioHoldingUsingDeleteAsync (Guid? portfolioHoldingId);

        /// <summary>
        /// Delete a portfolio holding
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioHoldingUsingDeleteAsyncWithHttpInfo (Guid? portfolioHoldingId);
        /// <summary>
        /// Delete a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePortfolioTransactionUsingDeleteAsync (Guid? portfolioTransactionId);

        /// <summary>
        /// Delete a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioTransactionUsingDeleteAsyncWithHttpInfo (Guid? portfolioTransactionId);
        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePortfolioUsingDeleteAsync (Guid? portfolioId);

        /// <summary>
        /// Delete a portfolio
        /// </summary>
        /// <remarks>
        /// Permanently delete a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioUsingDeleteAsyncWithHttpInfo (Guid? portfolioId);
        /// <summary>
        /// getAllPortfolioTransactionByPost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetAllPortfolioTransactionByPostUsingPOSTAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// getAllPortfolioTransactionByPost
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetAllPortfolioTransactionByPostUsingPOSTAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an portfolio aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a securities associated with a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetPortfolioAggregatedDataUsingGetAsync (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null);

        /// <summary>
        /// Retrieve an portfolio aggregate data
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a securities associated with a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetPortfolioAggregatedDataUsingGetAsyncWithHttpInfo (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null);
        /// <summary>
        /// List all portfolios
        /// </summary>
        /// <remarks>
        /// Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolio</returns>
        System.Threading.Tasks.Task<PagePortfolio> GetPortfolioAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolios
        /// </summary>
        /// <remarks>
        /// Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolio)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolio>> GetPortfolioAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioAssetSizeLog</returns>
        System.Threading.Tasks.Task<PagePortfolioAssetSizeLog> GetPortfolioAssetSizeAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioAssetSizeLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioAssetSizeLog>> GetPortfolioAssetSizeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>Task of PortfolioAssetSizeLog</returns>
        System.Threading.Tasks.Task<PortfolioAssetSizeLog> GetPortfolioAssetSizeUsingGetAsync (Guid? portfolioAssetSizeId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioAssetSizeLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioAssetSizeLog>> GetPortfolioAssetSizeUsingGetAsyncWithHttpInfo (Guid? portfolioAssetSizeId, string currencyConversion = null);
        /// <summary>
        /// List all portfolio commentary
        /// </summary>
        /// <remarks>
        /// List all comments for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioComment</returns>
        System.Threading.Tasks.Task<PagePortfolioComment> GetPortfolioCommentAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio commentary
        /// </summary>
        /// <remarks>
        /// List all comments for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioComment>> GetPortfolioCommentAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of PortfolioComment</returns>
        System.Threading.Tasks.Task<PortfolioComment> GetPortfolioCommentUsingGetAsync (Guid? portfolioCommentId);

        /// <summary>
        /// Retrieve a portfolio commentary
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of ApiResponse (PortfolioComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioComment>> GetPortfolioCommentUsingGetAsyncWithHttpInfo (Guid? portfolioCommentId);
        /// <summary>
        /// List all portfolio goals
        /// </summary>
        /// <remarks>
        /// Get information for all portfolio-goal mappings defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioGoal</returns>
        System.Threading.Tasks.Task<PagePortfolioGoal> GetPortfolioGoalAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio goals
        /// </summary>
        /// <remarks>
        /// Get information for all portfolio-goal mappings defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioGoal>> GetPortfolioGoalAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an portfolio goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of PortfolioGoal</returns>
        System.Threading.Tasks.Task<PortfolioGoal> GetPortfolioGoalUsingGetAsync (Guid? portfolioGoalId);

        /// <summary>
        /// Retrieve an portfolio goal
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of ApiResponse (PortfolioGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioGoal>> GetPortfolioGoalUsingGetAsyncWithHttpInfo (Guid? portfolioGoalId);
        /// <summary>
        /// List all portfolio holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all holding records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioHoldingLog</returns>
        System.Threading.Tasks.Task<PagePortfolioHoldingLog> GetPortfolioHoldingAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all holding records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingLog>> GetPortfolioHoldingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of PortfolioHoldingLog</returns>
        System.Threading.Tasks.Task<PortfolioHoldingLog> GetPortfolioHoldingUsingGetAsync (Guid? portfolioHoldingId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a portfolio holding
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioHoldingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioHoldingLog>> GetPortfolioHoldingUsingGetAsyncWithHttpInfo (Guid? portfolioHoldingId, string currencyConversion = null);
        /// <summary>
        /// List all portfolio transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetPortfolioTransactionAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all portfolio transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transaction records for all portfolios defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetPortfolioTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of PortfolioTransaction</returns>
        System.Threading.Tasks.Task<PortfolioTransaction> GetPortfolioTransactionUsingGetAsync (Guid? portfolioTransactionId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioTransaction>> GetPortfolioTransactionUsingGetAsyncWithHttpInfo (Guid? portfolioTransactionId, string currencyConversion = null);
        /// <summary>
        /// Retrieve a portfolio
        /// </summary>
        /// <remarks>
        /// Retrieve a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of Portfolio</returns>
        System.Threading.Tasks.Task<Portfolio> GetPortfolioUsingGetAsync (Guid? portfolioId);

        /// <summary>
        /// Retrieve a portfolio
        /// </summary>
        /// <remarks>
        /// Retrieve a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portfolio>> GetPortfolioUsingGetAsyncWithHttpInfo (Guid? portfolioId);
        /// <summary>
        /// Update a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of PortfolioAssetSizeLog</returns>
        System.Threading.Tasks.Task<PortfolioAssetSizeLog> UpdatePortfolioAssetSizeUsingPutAsync (Object portfolioAssetSize, Guid? portfolioAssetSizeId);

        /// <summary>
        /// Update a portfolio asset size
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio asset size record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of ApiResponse (PortfolioAssetSizeLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioAssetSizeLog>> UpdatePortfolioAssetSizeUsingPutAsyncWithHttpInfo (Object portfolioAssetSize, Guid? portfolioAssetSizeId);
        /// <summary>
        /// Update a portfolio comment
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of PortfolioComment</returns>
        System.Threading.Tasks.Task<PortfolioComment> UpdatePortfolioCommentUsingPutAsync (Object portfolioComment, Guid? portfolioCommentId);

        /// <summary>
        /// Update a portfolio comment
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio comment for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of ApiResponse (PortfolioComment)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioComment>> UpdatePortfolioCommentUsingPutAsyncWithHttpInfo (Object portfolioComment, Guid? portfolioCommentId);
        /// <summary>
        /// Update an portfolio goal
        /// </summary>
        /// <remarks>
        /// Update the information for an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of PortfolioGoal</returns>
        System.Threading.Tasks.Task<PortfolioGoal> UpdatePortfolioGoalUsingPutAsync (Object portfolioGoal, Guid? portfolioGoalId);

        /// <summary>
        /// Update an portfolio goal
        /// </summary>
        /// <remarks>
        /// Update the information for an portfolio-goal mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of ApiResponse (PortfolioGoal)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioGoal>> UpdatePortfolioGoalUsingPutAsyncWithHttpInfo (Object portfolioGoal, Guid? portfolioGoalId);
        /// <summary>
        /// Update a portfolio holding
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of PortfolioHoldingLog</returns>
        System.Threading.Tasks.Task<PortfolioHoldingLog> UpdatePortfolioHoldingUsingPutAsync (Object portfolioHolding, Guid? portfolioHoldingId);

        /// <summary>
        /// Update a portfolio holding
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio holding record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of ApiResponse (PortfolioHoldingLog)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioHoldingLog>> UpdatePortfolioHoldingUsingPutAsyncWithHttpInfo (Object portfolioHolding, Guid? portfolioHoldingId);
        /// <summary>
        /// Update a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of PortfolioTransaction</returns>
        System.Threading.Tasks.Task<PortfolioTransaction> UpdatePortfolioTransactionUsingPutAsync (Object portfolioTransaction, Guid? portfolioTransactionId);

        /// <summary>
        /// Update a portfolio transaction
        /// </summary>
        /// <remarks>
        /// Update the information for a portfolio transaction record for a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of ApiResponse (PortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortfolioTransaction>> UpdatePortfolioTransactionUsingPutAsyncWithHttpInfo (Object portfolioTransaction, Guid? portfolioTransactionId);
        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// Update a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of Portfolio</returns>
        System.Threading.Tasks.Task<Portfolio> UpdatePortfolioUsingPutAsync (Object portfolio, Guid? portfolioId);

        /// <summary>
        /// Update a portfolio
        /// </summary>
        /// <remarks>
        /// Update a portfolio for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        System.Threading.Tasks.Task<ApiResponse<Portfolio>> UpdatePortfolioUsingPutAsyncWithHttpInfo (Object portfolio, Guid? portfolioId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PortfolioApi : IPortfolioApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PortfolioApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PortfolioApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a portfolio asset size Create a new asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>PortfolioAssetSizeLog</returns>
        public PortfolioAssetSizeLog CreatePortfolioAssetSizeUsingPost (PortfolioAssetSizeLog portfolioAssetSizeLogRequest)
        {
             ApiResponse<PortfolioAssetSizeLog> localVarResponse = CreatePortfolioAssetSizeUsingPostWithHttpInfo(portfolioAssetSizeLogRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio asset size Create a new asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>ApiResponse of PortfolioAssetSizeLog</returns>
        public ApiResponse< PortfolioAssetSizeLog > CreatePortfolioAssetSizeUsingPostWithHttpInfo (PortfolioAssetSizeLog portfolioAssetSizeLogRequest)
        {
            // verify the required parameter 'portfolioAssetSizeLogRequest' is set
            if (portfolioAssetSizeLogRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeLogRequest' when calling PortfolioApi->CreatePortfolioAssetSizeUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeLogRequest != null && portfolioAssetSizeLogRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioAssetSizeLogRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioAssetSizeLogRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioAssetSizeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioAssetSizeLog)));
        }

        /// <summary>
        /// Create a portfolio asset size Create a new asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>Task of PortfolioAssetSizeLog</returns>
        public async System.Threading.Tasks.Task<PortfolioAssetSizeLog> CreatePortfolioAssetSizeUsingPostAsync (PortfolioAssetSizeLog portfolioAssetSizeLogRequest)
        {
             ApiResponse<PortfolioAssetSizeLog> localVarResponse = await CreatePortfolioAssetSizeUsingPostAsyncWithHttpInfo(portfolioAssetSizeLogRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a portfolio asset size Create a new asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeLogRequest">portfolioAssetSizeLogRequest</param>
        /// <returns>Task of ApiResponse (PortfolioAssetSizeLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioAssetSizeLog>> CreatePortfolioAssetSizeUsingPostAsyncWithHttpInfo (PortfolioAssetSizeLog portfolioAssetSizeLogRequest)
        {
            // verify the required parameter 'portfolioAssetSizeLogRequest' is set
            if (portfolioAssetSizeLogRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeLogRequest' when calling PortfolioApi->CreatePortfolioAssetSizeUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeLogRequest != null && portfolioAssetSizeLogRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioAssetSizeLogRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioAssetSizeLogRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioAssetSizeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioAssetSizeLog)));
        }

        /// <summary>
        /// Create a portfolio commentary Create a new comment for a portfolio defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>PortfolioComment</returns>
        public PortfolioComment CreatePortfolioCommentUsingPost (PortfolioComment portfolioComment)
        {
             ApiResponse<PortfolioComment> localVarResponse = CreatePortfolioCommentUsingPostWithHttpInfo(portfolioComment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio commentary Create a new comment for a portfolio defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>ApiResponse of PortfolioComment</returns>
        public ApiResponse< PortfolioComment > CreatePortfolioCommentUsingPostWithHttpInfo (PortfolioComment portfolioComment)
        {
            // verify the required parameter 'portfolioComment' is set
            if (portfolioComment == null)
                throw new ApiException(400, "Missing required parameter 'portfolioComment' when calling PortfolioApi->CreatePortfolioCommentUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioComment != null && portfolioComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioComment; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioCommentUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioComment)));
        }

        /// <summary>
        /// Create a portfolio commentary Create a new comment for a portfolio defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>Task of PortfolioComment</returns>
        public async System.Threading.Tasks.Task<PortfolioComment> CreatePortfolioCommentUsingPostAsync (PortfolioComment portfolioComment)
        {
             ApiResponse<PortfolioComment> localVarResponse = await CreatePortfolioCommentUsingPostAsyncWithHttpInfo(portfolioComment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a portfolio commentary Create a new comment for a portfolio defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolioComment</param>
        /// <returns>Task of ApiResponse (PortfolioComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioComment>> CreatePortfolioCommentUsingPostAsyncWithHttpInfo (PortfolioComment portfolioComment)
        {
            // verify the required parameter 'portfolioComment' is set
            if (portfolioComment == null)
                throw new ApiException(400, "Missing required parameter 'portfolioComment' when calling PortfolioApi->CreatePortfolioCommentUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioComment != null && portfolioComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioComment; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioCommentUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioComment)));
        }

        /// <summary>
        /// Create an portfolio goal Create an portfolio goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>PortfolioGoal</returns>
        public PortfolioGoal CreatePortfolioGoalUsingPost (PortfolioGoal portfolioGoal)
        {
             ApiResponse<PortfolioGoal> localVarResponse = CreatePortfolioGoalUsingPostWithHttpInfo(portfolioGoal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an portfolio goal Create an portfolio goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>ApiResponse of PortfolioGoal</returns>
        public ApiResponse< PortfolioGoal > CreatePortfolioGoalUsingPostWithHttpInfo (PortfolioGoal portfolioGoal)
        {
            // verify the required parameter 'portfolioGoal' is set
            if (portfolioGoal == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoal' when calling PortfolioApi->CreatePortfolioGoalUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoal != null && portfolioGoal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioGoal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioGoal; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioGoalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioGoal)));
        }

        /// <summary>
        /// Create an portfolio goal Create an portfolio goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>Task of PortfolioGoal</returns>
        public async System.Threading.Tasks.Task<PortfolioGoal> CreatePortfolioGoalUsingPostAsync (PortfolioGoal portfolioGoal)
        {
             ApiResponse<PortfolioGoal> localVarResponse = await CreatePortfolioGoalUsingPostAsyncWithHttpInfo(portfolioGoal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an portfolio goal Create an portfolio goal.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolioGoal</param>
        /// <returns>Task of ApiResponse (PortfolioGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioGoal>> CreatePortfolioGoalUsingPostAsyncWithHttpInfo (PortfolioGoal portfolioGoal)
        {
            // verify the required parameter 'portfolioGoal' is set
            if (portfolioGoal == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoal' when calling PortfolioApi->CreatePortfolioGoalUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoal != null && portfolioGoal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioGoal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioGoal; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioGoalUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioGoal)));
        }

        /// <summary>
        /// Create a portfolio holding Create a new holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>PortfolioHoldingLog</returns>
        public PortfolioHoldingLog CreatePortfolioHoldingUsingPost (PortfolioHoldingLog portfolioHoldinLogRequest)
        {
             ApiResponse<PortfolioHoldingLog> localVarResponse = CreatePortfolioHoldingUsingPostWithHttpInfo(portfolioHoldinLogRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio holding Create a new holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>ApiResponse of PortfolioHoldingLog</returns>
        public ApiResponse< PortfolioHoldingLog > CreatePortfolioHoldingUsingPostWithHttpInfo (PortfolioHoldingLog portfolioHoldinLogRequest)
        {
            // verify the required parameter 'portfolioHoldinLogRequest' is set
            if (portfolioHoldinLogRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldinLogRequest' when calling PortfolioApi->CreatePortfolioHoldingUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldinLogRequest != null && portfolioHoldinLogRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioHoldinLogRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioHoldinLogRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioHoldingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioHoldingLog)));
        }

        /// <summary>
        /// Create a portfolio holding Create a new holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>Task of PortfolioHoldingLog</returns>
        public async System.Threading.Tasks.Task<PortfolioHoldingLog> CreatePortfolioHoldingUsingPostAsync (PortfolioHoldingLog portfolioHoldinLogRequest)
        {
             ApiResponse<PortfolioHoldingLog> localVarResponse = await CreatePortfolioHoldingUsingPostAsyncWithHttpInfo(portfolioHoldinLogRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a portfolio holding Create a new holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldinLogRequest">portfolioHoldinLogRequest</param>
        /// <returns>Task of ApiResponse (PortfolioHoldingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioHoldingLog>> CreatePortfolioHoldingUsingPostAsyncWithHttpInfo (PortfolioHoldingLog portfolioHoldinLogRequest)
        {
            // verify the required parameter 'portfolioHoldinLogRequest' is set
            if (portfolioHoldinLogRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldinLogRequest' when calling PortfolioApi->CreatePortfolioHoldingUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldinLogRequest != null && portfolioHoldinLogRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioHoldinLogRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioHoldinLogRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioHoldingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioHoldingLog)));
        }

        /// <summary>
        /// Create a portfolio transaction Create a new transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>PortfolioTransaction</returns>
        public PortfolioTransaction CreatePortfolioTransactionUsingPost (PortfolioTransaction portfolioTransactionRequest)
        {
             ApiResponse<PortfolioTransaction> localVarResponse = CreatePortfolioTransactionUsingPostWithHttpInfo(portfolioTransactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio transaction Create a new transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>ApiResponse of PortfolioTransaction</returns>
        public ApiResponse< PortfolioTransaction > CreatePortfolioTransactionUsingPostWithHttpInfo (PortfolioTransaction portfolioTransactionRequest)
        {
            // verify the required parameter 'portfolioTransactionRequest' is set
            if (portfolioTransactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionRequest' when calling PortfolioApi->CreatePortfolioTransactionUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionRequest != null && portfolioTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioTransactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioTransaction)));
        }

        /// <summary>
        /// Create a portfolio transaction Create a new transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>Task of PortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PortfolioTransaction> CreatePortfolioTransactionUsingPostAsync (PortfolioTransaction portfolioTransactionRequest)
        {
             ApiResponse<PortfolioTransaction> localVarResponse = await CreatePortfolioTransactionUsingPostAsyncWithHttpInfo(portfolioTransactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a portfolio transaction Create a new transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionRequest">portfolioTransactionRequest</param>
        /// <returns>Task of ApiResponse (PortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioTransaction>> CreatePortfolioTransactionUsingPostAsyncWithHttpInfo (PortfolioTransaction portfolioTransactionRequest)
        {
            // verify the required parameter 'portfolioTransactionRequest' is set
            if (portfolioTransactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionRequest' when calling PortfolioApi->CreatePortfolioTransactionUsingPost");

            var localVarPath = "/nucleus/v1/portfolio_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionRequest != null && portfolioTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioTransactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioTransaction)));
        }

        /// <summary>
        /// Create a portfolio Create a new portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>Portfolio</returns>
        public Portfolio CreatePortfolioUsingPost (Portfolio portfolioRequest)
        {
             ApiResponse<Portfolio> localVarResponse = CreatePortfolioUsingPostWithHttpInfo(portfolioRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a portfolio Create a new portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>ApiResponse of Portfolio</returns>
        public ApiResponse< Portfolio > CreatePortfolioUsingPostWithHttpInfo (Portfolio portfolioRequest)
        {
            // verify the required parameter 'portfolioRequest' is set
            if (portfolioRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioRequest' when calling PortfolioApi->CreatePortfolioUsingPost");

            var localVarPath = "/nucleus/v1/portfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioRequest != null && portfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        /// Create a portfolio Create a new portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>Task of Portfolio</returns>
        public async System.Threading.Tasks.Task<Portfolio> CreatePortfolioUsingPostAsync (Portfolio portfolioRequest)
        {
             ApiResponse<Portfolio> localVarResponse = await CreatePortfolioUsingPostAsyncWithHttpInfo(portfolioRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a portfolio Create a new portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioRequest">portfolioRequest</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portfolio>> CreatePortfolioUsingPostAsyncWithHttpInfo (Portfolio portfolioRequest)
        {
            // verify the required parameter 'portfolioRequest' is set
            if (portfolioRequest == null)
                throw new ApiException(400, "Missing required parameter 'portfolioRequest' when calling PortfolioApi->CreatePortfolioUsingPost");

            var localVarPath = "/nucleus/v1/portfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioRequest != null && portfolioRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        /// Delete a portfolio asset size Permanently delete a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns></returns>
        public void DeletePortfolioAssetSizeUsingDelete (Guid? portfolioAssetSizeId)
        {
             DeletePortfolioAssetSizeUsingDeleteWithHttpInfo(portfolioAssetSizeId);
        }

        /// <summary>
        /// Delete a portfolio asset size Permanently delete a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePortfolioAssetSizeUsingDeleteWithHttpInfo (Guid? portfolioAssetSizeId)
        {
            // verify the required parameter 'portfolioAssetSizeId' is set
            if (portfolioAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeId' when calling PortfolioApi->DeletePortfolioAssetSizeUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeId != null) localVarPathParams.Add("portfolio_asset_size_id", this.Configuration.ApiClient.ParameterToString(portfolioAssetSizeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioAssetSizeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio asset size Permanently delete a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePortfolioAssetSizeUsingDeleteAsync (Guid? portfolioAssetSizeId)
        {
             await DeletePortfolioAssetSizeUsingDeleteAsyncWithHttpInfo(portfolioAssetSizeId);

        }

        /// <summary>
        /// Delete a portfolio asset size Permanently delete a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioAssetSizeUsingDeleteAsyncWithHttpInfo (Guid? portfolioAssetSizeId)
        {
            // verify the required parameter 'portfolioAssetSizeId' is set
            if (portfolioAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeId' when calling PortfolioApi->DeletePortfolioAssetSizeUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeId != null) localVarPathParams.Add("portfolio_asset_size_id", this.Configuration.ApiClient.ParameterToString(portfolioAssetSizeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioAssetSizeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio commentary Permanently delete a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns></returns>
        public void DeletePortfolioCommentUsingDelete (Guid? portfolioCommentId)
        {
             DeletePortfolioCommentUsingDeleteWithHttpInfo(portfolioCommentId);
        }

        /// <summary>
        /// Delete a portfolio commentary Permanently delete a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePortfolioCommentUsingDeleteWithHttpInfo (Guid? portfolioCommentId)
        {
            // verify the required parameter 'portfolioCommentId' is set
            if (portfolioCommentId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioCommentId' when calling PortfolioApi->DeletePortfolioCommentUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioCommentId != null) localVarPathParams.Add("portfolio_comment_id", this.Configuration.ApiClient.ParameterToString(portfolioCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioCommentUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio commentary Permanently delete a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePortfolioCommentUsingDeleteAsync (Guid? portfolioCommentId)
        {
             await DeletePortfolioCommentUsingDeleteAsyncWithHttpInfo(portfolioCommentId);

        }

        /// <summary>
        /// Delete a portfolio commentary Permanently delete a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioCommentUsingDeleteAsyncWithHttpInfo (Guid? portfolioCommentId)
        {
            // verify the required parameter 'portfolioCommentId' is set
            if (portfolioCommentId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioCommentId' when calling PortfolioApi->DeletePortfolioCommentUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioCommentId != null) localVarPathParams.Add("portfolio_comment_id", this.Configuration.ApiClient.ParameterToString(portfolioCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioCommentUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an portfolio goal Permanently delete an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns></returns>
        public void DeletePortfolioGoalUsingDelete (Guid? portfolioGoalId)
        {
             DeletePortfolioGoalUsingDeleteWithHttpInfo(portfolioGoalId);
        }

        /// <summary>
        /// Delete an portfolio goal Permanently delete an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePortfolioGoalUsingDeleteWithHttpInfo (Guid? portfolioGoalId)
        {
            // verify the required parameter 'portfolioGoalId' is set
            if (portfolioGoalId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoalId' when calling PortfolioApi->DeletePortfolioGoalUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoalId != null) localVarPathParams.Add("portfolio_goal_id", this.Configuration.ApiClient.ParameterToString(portfolioGoalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioGoalUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an portfolio goal Permanently delete an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePortfolioGoalUsingDeleteAsync (Guid? portfolioGoalId)
        {
             await DeletePortfolioGoalUsingDeleteAsyncWithHttpInfo(portfolioGoalId);

        }

        /// <summary>
        /// Delete an portfolio goal Permanently delete an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioGoalUsingDeleteAsyncWithHttpInfo (Guid? portfolioGoalId)
        {
            // verify the required parameter 'portfolioGoalId' is set
            if (portfolioGoalId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoalId' when calling PortfolioApi->DeletePortfolioGoalUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoalId != null) localVarPathParams.Add("portfolio_goal_id", this.Configuration.ApiClient.ParameterToString(portfolioGoalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioGoalUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio holding Permanently delete a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns></returns>
        public void DeletePortfolioHoldingUsingDelete (Guid? portfolioHoldingId)
        {
             DeletePortfolioHoldingUsingDeleteWithHttpInfo(portfolioHoldingId);
        }

        /// <summary>
        /// Delete a portfolio holding Permanently delete a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePortfolioHoldingUsingDeleteWithHttpInfo (Guid? portfolioHoldingId)
        {
            // verify the required parameter 'portfolioHoldingId' is set
            if (portfolioHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldingId' when calling PortfolioApi->DeletePortfolioHoldingUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldingId != null) localVarPathParams.Add("portfolio_holding_id", this.Configuration.ApiClient.ParameterToString(portfolioHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioHoldingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio holding Permanently delete a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePortfolioHoldingUsingDeleteAsync (Guid? portfolioHoldingId)
        {
             await DeletePortfolioHoldingUsingDeleteAsyncWithHttpInfo(portfolioHoldingId);

        }

        /// <summary>
        /// Delete a portfolio holding Permanently delete a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioHoldingUsingDeleteAsyncWithHttpInfo (Guid? portfolioHoldingId)
        {
            // verify the required parameter 'portfolioHoldingId' is set
            if (portfolioHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldingId' when calling PortfolioApi->DeletePortfolioHoldingUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldingId != null) localVarPathParams.Add("portfolio_holding_id", this.Configuration.ApiClient.ParameterToString(portfolioHoldingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioHoldingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio transaction Permanently delete a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns></returns>
        public void DeletePortfolioTransactionUsingDelete (Guid? portfolioTransactionId)
        {
             DeletePortfolioTransactionUsingDeleteWithHttpInfo(portfolioTransactionId);
        }

        /// <summary>
        /// Delete a portfolio transaction Permanently delete a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePortfolioTransactionUsingDeleteWithHttpInfo (Guid? portfolioTransactionId)
        {
            // verify the required parameter 'portfolioTransactionId' is set
            if (portfolioTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionId' when calling PortfolioApi->DeletePortfolioTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionId != null) localVarPathParams.Add("portfolio_transaction_id", this.Configuration.ApiClient.ParameterToString(portfolioTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio transaction Permanently delete a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePortfolioTransactionUsingDeleteAsync (Guid? portfolioTransactionId)
        {
             await DeletePortfolioTransactionUsingDeleteAsyncWithHttpInfo(portfolioTransactionId);

        }

        /// <summary>
        /// Delete a portfolio transaction Permanently delete a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioTransactionUsingDeleteAsyncWithHttpInfo (Guid? portfolioTransactionId)
        {
            // verify the required parameter 'portfolioTransactionId' is set
            if (portfolioTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionId' when calling PortfolioApi->DeletePortfolioTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionId != null) localVarPathParams.Add("portfolio_transaction_id", this.Configuration.ApiClient.ParameterToString(portfolioTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio Permanently delete a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns></returns>
        public void DeletePortfolioUsingDelete (Guid? portfolioId)
        {
             DeletePortfolioUsingDeleteWithHttpInfo(portfolioId);
        }

        /// <summary>
        /// Delete a portfolio Permanently delete a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePortfolioUsingDeleteWithHttpInfo (Guid? portfolioId)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->DeletePortfolioUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a portfolio Permanently delete a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePortfolioUsingDeleteAsync (Guid? portfolioId)
        {
             await DeletePortfolioUsingDeleteAsyncWithHttpInfo(portfolioId);

        }

        /// <summary>
        /// Delete a portfolio Permanently delete a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePortfolioUsingDeleteAsyncWithHttpInfo (Guid? portfolioId)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->DeletePortfolioUsingDelete");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePortfolioUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// getAllPortfolioTransactionByPost 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetAllPortfolioTransactionByPostUsingPOST (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetAllPortfolioTransactionByPostUsingPOSTWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// getAllPortfolioTransactionByPost 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetAllPortfolioTransactionByPostUsingPOSTWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_transaction_by_post";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPortfolioTransactionByPostUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// getAllPortfolioTransactionByPost 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetAllPortfolioTransactionByPostUsingPOSTAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetAllPortfolioTransactionByPostUsingPOSTAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// getAllPortfolioTransactionByPost 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetAllPortfolioTransactionByPostUsingPOSTAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_transaction_by_post";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllPortfolioTransactionByPostUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// Retrieve an portfolio aggregate data Retrieve the information for a securities associated with a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>Object</returns>
        public Object GetPortfolioAggregatedDataUsingGet (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null)
        {
             ApiResponse<Object> localVarResponse = GetPortfolioAggregatedDataUsingGetWithHttpInfo(portfolioId, showAssetClass, showCategory, showIndustry, showSector, showSecurityClass);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an portfolio aggregate data Retrieve the information for a securities associated with a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetPortfolioAggregatedDataUsingGetWithHttpInfo (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->GetPortfolioAggregatedDataUsingGet");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/aggregate_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (showAssetClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_asset_class", showAssetClass)); // query parameter
            if (showCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_category", showCategory)); // query parameter
            if (showIndustry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_industry", showIndustry)); // query parameter
            if (showSector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_sector", showSector)); // query parameter
            if (showSecurityClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_security_class", showSecurityClass)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAggregatedDataUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Retrieve an portfolio aggregate data Retrieve the information for a securities associated with a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetPortfolioAggregatedDataUsingGetAsync (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null)
        {
             ApiResponse<Object> localVarResponse = await GetPortfolioAggregatedDataUsingGetAsyncWithHttpInfo(portfolioId, showAssetClass, showCategory, showIndustry, showSector, showSecurityClass);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an portfolio aggregate data Retrieve the information for a securities associated with a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">Portfolio Id</param>
        /// <param name="showAssetClass">true or false (optional, default to true)</param>
        /// <param name="showCategory">true or false (optional, default to true)</param>
        /// <param name="showIndustry">true or false (optional, default to true)</param>
        /// <param name="showSector">true or false (optional, default to true)</param>
        /// <param name="showSecurityClass">true or false (optional, default to true)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetPortfolioAggregatedDataUsingGetAsyncWithHttpInfo (Guid? portfolioId, bool? showAssetClass = null, bool? showCategory = null, bool? showIndustry = null, bool? showSector = null, bool? showSecurityClass = null)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->GetPortfolioAggregatedDataUsingGet");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/aggregate_data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (showAssetClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_asset_class", showAssetClass)); // query parameter
            if (showCategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_category", showCategory)); // query parameter
            if (showIndustry != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_industry", showIndustry)); // query parameter
            if (showSector != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_sector", showSector)); // query parameter
            if (showSecurityClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_security_class", showSecurityClass)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAggregatedDataUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List all portfolios Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolio</returns>
        public PagePortfolio GetPortfolioAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolio> localVarResponse = GetPortfolioAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all portfolios Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolio</returns>
        public ApiResponse< PagePortfolio > GetPortfolioAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolio)));
        }

        /// <summary>
        /// List all portfolios Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolio</returns>
        public async System.Threading.Tasks.Task<PagePortfolio> GetPortfolioAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolio> localVarResponse = await GetPortfolioAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all portfolios Get the information for all portfolios assigned to all of your firm’s accounts. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolio)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolio>> GetPortfolioAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolio)));
        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioAssetSizeLog</returns>
        public PagePortfolioAssetSizeLog GetPortfolioAssetSizeAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioAssetSizeLog> localVarResponse = GetPortfolioAssetSizeAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioAssetSizeLog</returns>
        public ApiResponse< PagePortfolioAssetSizeLog > GetPortfolioAssetSizeAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioAssetSizeLog)));
        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioAssetSizeLog</returns>
        public async System.Threading.Tasks.Task<PagePortfolioAssetSizeLog> GetPortfolioAssetSizeAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioAssetSizeLog> localVarResponse = await GetPortfolioAssetSizeAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioAssetSizeLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioAssetSizeLog>> GetPortfolioAssetSizeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAssetSizeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioAssetSizeLog)));
        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>PortfolioAssetSizeLog</returns>
        public PortfolioAssetSizeLog GetPortfolioAssetSizeUsingGet (Guid? portfolioAssetSizeId, string currencyConversion = null)
        {
             ApiResponse<PortfolioAssetSizeLog> localVarResponse = GetPortfolioAssetSizeUsingGetWithHttpInfo(portfolioAssetSizeId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>ApiResponse of PortfolioAssetSizeLog</returns>
        public ApiResponse< PortfolioAssetSizeLog > GetPortfolioAssetSizeUsingGetWithHttpInfo (Guid? portfolioAssetSizeId, string currencyConversion = null)
        {
            // verify the required parameter 'portfolioAssetSizeId' is set
            if (portfolioAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeId' when calling PortfolioApi->GetPortfolioAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeId != null) localVarPathParams.Add("portfolio_asset_size_id", this.Configuration.ApiClient.ParameterToString(portfolioAssetSizeId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioAssetSizeLog)));
        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>Task of PortfolioAssetSizeLog</returns>
        public async System.Threading.Tasks.Task<PortfolioAssetSizeLog> GetPortfolioAssetSizeUsingGetAsync (Guid? portfolioAssetSizeId, string currencyConversion = null)
        {
             ApiResponse<PortfolioAssetSizeLog> localVarResponse = await GetPortfolioAssetSizeUsingGetAsyncWithHttpInfo(portfolioAssetSizeId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a portfolio asset size Retrieve the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSizeId">portfolio_asset_size_id</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioAssetSizeLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioAssetSizeLog>> GetPortfolioAssetSizeUsingGetAsyncWithHttpInfo (Guid? portfolioAssetSizeId, string currencyConversion = null)
        {
            // verify the required parameter 'portfolioAssetSizeId' is set
            if (portfolioAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeId' when calling PortfolioApi->GetPortfolioAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeId != null) localVarPathParams.Add("portfolio_asset_size_id", this.Configuration.ApiClient.ParameterToString(portfolioAssetSizeId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioAssetSizeLog)));
        }

        /// <summary>
        /// List all portfolio commentary List all comments for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioComment</returns>
        public PagePortfolioComment GetPortfolioCommentAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioComment> localVarResponse = GetPortfolioCommentAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all portfolio commentary List all comments for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioComment</returns>
        public ApiResponse< PagePortfolioComment > GetPortfolioCommentAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioCommentAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioComment)));
        }

        /// <summary>
        /// List all portfolio commentary List all comments for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioComment</returns>
        public async System.Threading.Tasks.Task<PagePortfolioComment> GetPortfolioCommentAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioComment> localVarResponse = await GetPortfolioCommentAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all portfolio commentary List all comments for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioComment>> GetPortfolioCommentAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_comment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioCommentAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioComment)));
        }

        /// <summary>
        /// Retrieve a portfolio commentary Retrieve the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>PortfolioComment</returns>
        public PortfolioComment GetPortfolioCommentUsingGet (Guid? portfolioCommentId)
        {
             ApiResponse<PortfolioComment> localVarResponse = GetPortfolioCommentUsingGetWithHttpInfo(portfolioCommentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a portfolio commentary Retrieve the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>ApiResponse of PortfolioComment</returns>
        public ApiResponse< PortfolioComment > GetPortfolioCommentUsingGetWithHttpInfo (Guid? portfolioCommentId)
        {
            // verify the required parameter 'portfolioCommentId' is set
            if (portfolioCommentId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioCommentId' when calling PortfolioApi->GetPortfolioCommentUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioCommentId != null) localVarPathParams.Add("portfolio_comment_id", this.Configuration.ApiClient.ParameterToString(portfolioCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioCommentUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioComment)));
        }

        /// <summary>
        /// Retrieve a portfolio commentary Retrieve the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of PortfolioComment</returns>
        public async System.Threading.Tasks.Task<PortfolioComment> GetPortfolioCommentUsingGetAsync (Guid? portfolioCommentId)
        {
             ApiResponse<PortfolioComment> localVarResponse = await GetPortfolioCommentUsingGetAsyncWithHttpInfo(portfolioCommentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a portfolio commentary Retrieve the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of ApiResponse (PortfolioComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioComment>> GetPortfolioCommentUsingGetAsyncWithHttpInfo (Guid? portfolioCommentId)
        {
            // verify the required parameter 'portfolioCommentId' is set
            if (portfolioCommentId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioCommentId' when calling PortfolioApi->GetPortfolioCommentUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioCommentId != null) localVarPathParams.Add("portfolio_comment_id", this.Configuration.ApiClient.ParameterToString(portfolioCommentId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioCommentUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioComment)));
        }

        /// <summary>
        /// List all portfolio goals Get information for all portfolio-goal mappings defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioGoal</returns>
        public PagePortfolioGoal GetPortfolioGoalAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioGoal> localVarResponse = GetPortfolioGoalAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all portfolio goals Get information for all portfolio-goal mappings defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioGoal</returns>
        public ApiResponse< PagePortfolioGoal > GetPortfolioGoalAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioGoalAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioGoal)));
        }

        /// <summary>
        /// List all portfolio goals Get information for all portfolio-goal mappings defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioGoal</returns>
        public async System.Threading.Tasks.Task<PagePortfolioGoal> GetPortfolioGoalAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioGoal> localVarResponse = await GetPortfolioGoalAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all portfolio goals Get information for all portfolio-goal mappings defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioGoal>> GetPortfolioGoalAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_goal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioGoalAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioGoal)));
        }

        /// <summary>
        /// Retrieve an portfolio goal Retrieve the information for a specific portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>PortfolioGoal</returns>
        public PortfolioGoal GetPortfolioGoalUsingGet (Guid? portfolioGoalId)
        {
             ApiResponse<PortfolioGoal> localVarResponse = GetPortfolioGoalUsingGetWithHttpInfo(portfolioGoalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an portfolio goal Retrieve the information for a specific portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>ApiResponse of PortfolioGoal</returns>
        public ApiResponse< PortfolioGoal > GetPortfolioGoalUsingGetWithHttpInfo (Guid? portfolioGoalId)
        {
            // verify the required parameter 'portfolioGoalId' is set
            if (portfolioGoalId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoalId' when calling PortfolioApi->GetPortfolioGoalUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoalId != null) localVarPathParams.Add("portfolio_goal_id", this.Configuration.ApiClient.ParameterToString(portfolioGoalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioGoalUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioGoal)));
        }

        /// <summary>
        /// Retrieve an portfolio goal Retrieve the information for a specific portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of PortfolioGoal</returns>
        public async System.Threading.Tasks.Task<PortfolioGoal> GetPortfolioGoalUsingGetAsync (Guid? portfolioGoalId)
        {
             ApiResponse<PortfolioGoal> localVarResponse = await GetPortfolioGoalUsingGetAsyncWithHttpInfo(portfolioGoalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an portfolio goal Retrieve the information for a specific portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of ApiResponse (PortfolioGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioGoal>> GetPortfolioGoalUsingGetAsyncWithHttpInfo (Guid? portfolioGoalId)
        {
            // verify the required parameter 'portfolioGoalId' is set
            if (portfolioGoalId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoalId' when calling PortfolioApi->GetPortfolioGoalUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoalId != null) localVarPathParams.Add("portfolio_goal_id", this.Configuration.ApiClient.ParameterToString(portfolioGoalId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioGoalUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioGoal)));
        }

        /// <summary>
        /// List all portfolio holdings Get the information for all holding records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioHoldingLog</returns>
        public PagePortfolioHoldingLog GetPortfolioHoldingAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioHoldingLog> localVarResponse = GetPortfolioHoldingAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all portfolio holdings Get the information for all holding records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingLog</returns>
        public ApiResponse< PagePortfolioHoldingLog > GetPortfolioHoldingAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingLog)));
        }

        /// <summary>
        /// List all portfolio holdings Get the information for all holding records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioHoldingLog</returns>
        public async System.Threading.Tasks.Task<PagePortfolioHoldingLog> GetPortfolioHoldingAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioHoldingLog> localVarResponse = await GetPortfolioHoldingAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all portfolio holdings Get the information for all holding records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingLog>> GetPortfolioHoldingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioHoldingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingLog)));
        }

        /// <summary>
        /// Retrieve a portfolio holding Retrieve the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>PortfolioHoldingLog</returns>
        public PortfolioHoldingLog GetPortfolioHoldingUsingGet (Guid? portfolioHoldingId, string currencyConversion = null)
        {
             ApiResponse<PortfolioHoldingLog> localVarResponse = GetPortfolioHoldingUsingGetWithHttpInfo(portfolioHoldingId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a portfolio holding Retrieve the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of PortfolioHoldingLog</returns>
        public ApiResponse< PortfolioHoldingLog > GetPortfolioHoldingUsingGetWithHttpInfo (Guid? portfolioHoldingId, string currencyConversion = null)
        {
            // verify the required parameter 'portfolioHoldingId' is set
            if (portfolioHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldingId' when calling PortfolioApi->GetPortfolioHoldingUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldingId != null) localVarPathParams.Add("portfolio_holding_id", this.Configuration.ApiClient.ParameterToString(portfolioHoldingId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioHoldingLog)));
        }

        /// <summary>
        /// Retrieve a portfolio holding Retrieve the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of PortfolioHoldingLog</returns>
        public async System.Threading.Tasks.Task<PortfolioHoldingLog> GetPortfolioHoldingUsingGetAsync (Guid? portfolioHoldingId, string currencyConversion = null)
        {
             ApiResponse<PortfolioHoldingLog> localVarResponse = await GetPortfolioHoldingUsingGetAsyncWithHttpInfo(portfolioHoldingId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a portfolio holding Retrieve the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioHoldingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioHoldingLog>> GetPortfolioHoldingUsingGetAsyncWithHttpInfo (Guid? portfolioHoldingId, string currencyConversion = null)
        {
            // verify the required parameter 'portfolioHoldingId' is set
            if (portfolioHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldingId' when calling PortfolioApi->GetPortfolioHoldingUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldingId != null) localVarPathParams.Add("portfolio_holding_id", this.Configuration.ApiClient.ParameterToString(portfolioHoldingId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioHoldingLog)));
        }

        /// <summary>
        /// List all portfolio transactions Get the information for all transaction records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetPortfolioTransactionAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetPortfolioTransactionAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all portfolio transactions Get the information for all transaction records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetPortfolioTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all portfolio transactions Get the information for all transaction records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetPortfolioTransactionAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetPortfolioTransactionAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all portfolio transactions Get the information for all transaction records for all portfolios defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetPortfolioTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/portfolio_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// Retrieve a portfolio transaction Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>PortfolioTransaction</returns>
        public PortfolioTransaction GetPortfolioTransactionUsingGet (Guid? portfolioTransactionId, string currencyConversion = null)
        {
             ApiResponse<PortfolioTransaction> localVarResponse = GetPortfolioTransactionUsingGetWithHttpInfo(portfolioTransactionId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a portfolio transaction Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of PortfolioTransaction</returns>
        public ApiResponse< PortfolioTransaction > GetPortfolioTransactionUsingGetWithHttpInfo (Guid? portfolioTransactionId, string currencyConversion = null)
        {
            // verify the required parameter 'portfolioTransactionId' is set
            if (portfolioTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionId' when calling PortfolioApi->GetPortfolioTransactionUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionId != null) localVarPathParams.Add("portfolio_transaction_id", this.Configuration.ApiClient.ParameterToString(portfolioTransactionId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioTransaction)));
        }

        /// <summary>
        /// Retrieve a portfolio transaction Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of PortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PortfolioTransaction> GetPortfolioTransactionUsingGetAsync (Guid? portfolioTransactionId, string currencyConversion = null)
        {
             ApiResponse<PortfolioTransaction> localVarResponse = await GetPortfolioTransactionUsingGetAsyncWithHttpInfo(portfolioTransactionId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a portfolio transaction Retrieve the information for a portfolio transaction record for a portfolio. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (PortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioTransaction>> GetPortfolioTransactionUsingGetAsyncWithHttpInfo (Guid? portfolioTransactionId, string currencyConversion = null)
        {
            // verify the required parameter 'portfolioTransactionId' is set
            if (portfolioTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionId' when calling PortfolioApi->GetPortfolioTransactionUsingGet");

            var localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionId != null) localVarPathParams.Add("portfolio_transaction_id", this.Configuration.ApiClient.ParameterToString(portfolioTransactionId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioTransaction)));
        }

        /// <summary>
        /// Retrieve a portfolio Retrieve a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Portfolio</returns>
        public Portfolio GetPortfolioUsingGet (Guid? portfolioId)
        {
             ApiResponse<Portfolio> localVarResponse = GetPortfolioUsingGetWithHttpInfo(portfolioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a portfolio Retrieve a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>ApiResponse of Portfolio</returns>
        public ApiResponse< Portfolio > GetPortfolioUsingGetWithHttpInfo (Guid? portfolioId)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->GetPortfolioUsingGet");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        /// Retrieve a portfolio Retrieve a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of Portfolio</returns>
        public async System.Threading.Tasks.Task<Portfolio> GetPortfolioUsingGetAsync (Guid? portfolioId)
        {
             ApiResponse<Portfolio> localVarResponse = await GetPortfolioUsingGetAsyncWithHttpInfo(portfolioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a portfolio Retrieve a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portfolio>> GetPortfolioUsingGetAsyncWithHttpInfo (Guid? portfolioId)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->GetPortfolioUsingGet");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        /// Update a portfolio asset size Update the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>PortfolioAssetSizeLog</returns>
        public PortfolioAssetSizeLog UpdatePortfolioAssetSizeUsingPut (Object portfolioAssetSize, Guid? portfolioAssetSizeId)
        {
             ApiResponse<PortfolioAssetSizeLog> localVarResponse = UpdatePortfolioAssetSizeUsingPutWithHttpInfo(portfolioAssetSize, portfolioAssetSizeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a portfolio asset size Update the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>ApiResponse of PortfolioAssetSizeLog</returns>
        public ApiResponse< PortfolioAssetSizeLog > UpdatePortfolioAssetSizeUsingPutWithHttpInfo (Object portfolioAssetSize, Guid? portfolioAssetSizeId)
        {
            // verify the required parameter 'portfolioAssetSize' is set
            if (portfolioAssetSize == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSize' when calling PortfolioApi->UpdatePortfolioAssetSizeUsingPut");
            // verify the required parameter 'portfolioAssetSizeId' is set
            if (portfolioAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeId' when calling PortfolioApi->UpdatePortfolioAssetSizeUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeId != null) localVarPathParams.Add("portfolio_asset_size_id", this.Configuration.ApiClient.ParameterToString(portfolioAssetSizeId)); // path parameter
            if (portfolioAssetSize != null && portfolioAssetSize.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioAssetSize); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioAssetSize; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioAssetSizeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioAssetSizeLog)));
        }

        /// <summary>
        /// Update a portfolio asset size Update the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of PortfolioAssetSizeLog</returns>
        public async System.Threading.Tasks.Task<PortfolioAssetSizeLog> UpdatePortfolioAssetSizeUsingPutAsync (Object portfolioAssetSize, Guid? portfolioAssetSizeId)
        {
             ApiResponse<PortfolioAssetSizeLog> localVarResponse = await UpdatePortfolioAssetSizeUsingPutAsyncWithHttpInfo(portfolioAssetSize, portfolioAssetSizeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a portfolio asset size Update the information for a portfolio asset size record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioAssetSize">portfolio_asset_size</param>
        /// <param name="portfolioAssetSizeId">UUID portfolio_asset_size_id</param>
        /// <returns>Task of ApiResponse (PortfolioAssetSizeLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioAssetSizeLog>> UpdatePortfolioAssetSizeUsingPutAsyncWithHttpInfo (Object portfolioAssetSize, Guid? portfolioAssetSizeId)
        {
            // verify the required parameter 'portfolioAssetSize' is set
            if (portfolioAssetSize == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSize' when calling PortfolioApi->UpdatePortfolioAssetSizeUsingPut");
            // verify the required parameter 'portfolioAssetSizeId' is set
            if (portfolioAssetSizeId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioAssetSizeId' when calling PortfolioApi->UpdatePortfolioAssetSizeUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioAssetSizeId != null) localVarPathParams.Add("portfolio_asset_size_id", this.Configuration.ApiClient.ParameterToString(portfolioAssetSizeId)); // path parameter
            if (portfolioAssetSize != null && portfolioAssetSize.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioAssetSize); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioAssetSize; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioAssetSizeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioAssetSizeLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioAssetSizeLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioAssetSizeLog)));
        }

        /// <summary>
        /// Update a portfolio comment Update the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>PortfolioComment</returns>
        public PortfolioComment UpdatePortfolioCommentUsingPut (Object portfolioComment, Guid? portfolioCommentId)
        {
             ApiResponse<PortfolioComment> localVarResponse = UpdatePortfolioCommentUsingPutWithHttpInfo(portfolioComment, portfolioCommentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a portfolio comment Update the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>ApiResponse of PortfolioComment</returns>
        public ApiResponse< PortfolioComment > UpdatePortfolioCommentUsingPutWithHttpInfo (Object portfolioComment, Guid? portfolioCommentId)
        {
            // verify the required parameter 'portfolioComment' is set
            if (portfolioComment == null)
                throw new ApiException(400, "Missing required parameter 'portfolioComment' when calling PortfolioApi->UpdatePortfolioCommentUsingPut");
            // verify the required parameter 'portfolioCommentId' is set
            if (portfolioCommentId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioCommentId' when calling PortfolioApi->UpdatePortfolioCommentUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioCommentId != null) localVarPathParams.Add("portfolio_comment_id", this.Configuration.ApiClient.ParameterToString(portfolioCommentId)); // path parameter
            if (portfolioComment != null && portfolioComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioComment; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioCommentUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioComment)));
        }

        /// <summary>
        /// Update a portfolio comment Update the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of PortfolioComment</returns>
        public async System.Threading.Tasks.Task<PortfolioComment> UpdatePortfolioCommentUsingPutAsync (Object portfolioComment, Guid? portfolioCommentId)
        {
             ApiResponse<PortfolioComment> localVarResponse = await UpdatePortfolioCommentUsingPutAsyncWithHttpInfo(portfolioComment, portfolioCommentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a portfolio comment Update the information for a portfolio comment for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioComment">portfolio_comment</param>
        /// <param name="portfolioCommentId">UUID portfolio_comment_id</param>
        /// <returns>Task of ApiResponse (PortfolioComment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioComment>> UpdatePortfolioCommentUsingPutAsyncWithHttpInfo (Object portfolioComment, Guid? portfolioCommentId)
        {
            // verify the required parameter 'portfolioComment' is set
            if (portfolioComment == null)
                throw new ApiException(400, "Missing required parameter 'portfolioComment' when calling PortfolioApi->UpdatePortfolioCommentUsingPut");
            // verify the required parameter 'portfolioCommentId' is set
            if (portfolioCommentId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioCommentId' when calling PortfolioApi->UpdatePortfolioCommentUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_comment/{portfolio_comment_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioCommentId != null) localVarPathParams.Add("portfolio_comment_id", this.Configuration.ApiClient.ParameterToString(portfolioCommentId)); // path parameter
            if (portfolioComment != null && portfolioComment.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioComment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioComment; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioCommentUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioComment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioComment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioComment)));
        }

        /// <summary>
        /// Update an portfolio goal Update the information for an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>PortfolioGoal</returns>
        public PortfolioGoal UpdatePortfolioGoalUsingPut (Object portfolioGoal, Guid? portfolioGoalId)
        {
             ApiResponse<PortfolioGoal> localVarResponse = UpdatePortfolioGoalUsingPutWithHttpInfo(portfolioGoal, portfolioGoalId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an portfolio goal Update the information for an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>ApiResponse of PortfolioGoal</returns>
        public ApiResponse< PortfolioGoal > UpdatePortfolioGoalUsingPutWithHttpInfo (Object portfolioGoal, Guid? portfolioGoalId)
        {
            // verify the required parameter 'portfolioGoal' is set
            if (portfolioGoal == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoal' when calling PortfolioApi->UpdatePortfolioGoalUsingPut");
            // verify the required parameter 'portfolioGoalId' is set
            if (portfolioGoalId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoalId' when calling PortfolioApi->UpdatePortfolioGoalUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoalId != null) localVarPathParams.Add("portfolio_goal_id", this.Configuration.ApiClient.ParameterToString(portfolioGoalId)); // path parameter
            if (portfolioGoal != null && portfolioGoal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioGoal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioGoal; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioGoalUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioGoal)));
        }

        /// <summary>
        /// Update an portfolio goal Update the information for an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of PortfolioGoal</returns>
        public async System.Threading.Tasks.Task<PortfolioGoal> UpdatePortfolioGoalUsingPutAsync (Object portfolioGoal, Guid? portfolioGoalId)
        {
             ApiResponse<PortfolioGoal> localVarResponse = await UpdatePortfolioGoalUsingPutAsyncWithHttpInfo(portfolioGoal, portfolioGoalId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an portfolio goal Update the information for an portfolio-goal mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioGoal">portfolio_goal</param>
        /// <param name="portfolioGoalId">UUID portfolio_goal_id</param>
        /// <returns>Task of ApiResponse (PortfolioGoal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioGoal>> UpdatePortfolioGoalUsingPutAsyncWithHttpInfo (Object portfolioGoal, Guid? portfolioGoalId)
        {
            // verify the required parameter 'portfolioGoal' is set
            if (portfolioGoal == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoal' when calling PortfolioApi->UpdatePortfolioGoalUsingPut");
            // verify the required parameter 'portfolioGoalId' is set
            if (portfolioGoalId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioGoalId' when calling PortfolioApi->UpdatePortfolioGoalUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_goal/{portfolio_goal_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioGoalId != null) localVarPathParams.Add("portfolio_goal_id", this.Configuration.ApiClient.ParameterToString(portfolioGoalId)); // path parameter
            if (portfolioGoal != null && portfolioGoal.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioGoal); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioGoal; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioGoalUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioGoal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioGoal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioGoal)));
        }

        /// <summary>
        /// Update a portfolio holding Update the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>PortfolioHoldingLog</returns>
        public PortfolioHoldingLog UpdatePortfolioHoldingUsingPut (Object portfolioHolding, Guid? portfolioHoldingId)
        {
             ApiResponse<PortfolioHoldingLog> localVarResponse = UpdatePortfolioHoldingUsingPutWithHttpInfo(portfolioHolding, portfolioHoldingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a portfolio holding Update the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>ApiResponse of PortfolioHoldingLog</returns>
        public ApiResponse< PortfolioHoldingLog > UpdatePortfolioHoldingUsingPutWithHttpInfo (Object portfolioHolding, Guid? portfolioHoldingId)
        {
            // verify the required parameter 'portfolioHolding' is set
            if (portfolioHolding == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHolding' when calling PortfolioApi->UpdatePortfolioHoldingUsingPut");
            // verify the required parameter 'portfolioHoldingId' is set
            if (portfolioHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldingId' when calling PortfolioApi->UpdatePortfolioHoldingUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldingId != null) localVarPathParams.Add("portfolio_holding_id", this.Configuration.ApiClient.ParameterToString(portfolioHoldingId)); // path parameter
            if (portfolioHolding != null && portfolioHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioHoldingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioHoldingLog)));
        }

        /// <summary>
        /// Update a portfolio holding Update the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of PortfolioHoldingLog</returns>
        public async System.Threading.Tasks.Task<PortfolioHoldingLog> UpdatePortfolioHoldingUsingPutAsync (Object portfolioHolding, Guid? portfolioHoldingId)
        {
             ApiResponse<PortfolioHoldingLog> localVarResponse = await UpdatePortfolioHoldingUsingPutAsyncWithHttpInfo(portfolioHolding, portfolioHoldingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a portfolio holding Update the information for a portfolio holding record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioHolding">portfolio_holding</param>
        /// <param name="portfolioHoldingId">UUID portfolio_holding_id</param>
        /// <returns>Task of ApiResponse (PortfolioHoldingLog)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioHoldingLog>> UpdatePortfolioHoldingUsingPutAsyncWithHttpInfo (Object portfolioHolding, Guid? portfolioHoldingId)
        {
            // verify the required parameter 'portfolioHolding' is set
            if (portfolioHolding == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHolding' when calling PortfolioApi->UpdatePortfolioHoldingUsingPut");
            // verify the required parameter 'portfolioHoldingId' is set
            if (portfolioHoldingId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioHoldingId' when calling PortfolioApi->UpdatePortfolioHoldingUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_holding/{portfolio_holding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioHoldingId != null) localVarPathParams.Add("portfolio_holding_id", this.Configuration.ApiClient.ParameterToString(portfolioHoldingId)); // path parameter
            if (portfolioHolding != null && portfolioHolding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioHolding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioHolding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioHoldingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioHoldingLog>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioHoldingLog) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioHoldingLog)));
        }

        /// <summary>
        /// Update a portfolio transaction Update the information for a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>PortfolioTransaction</returns>
        public PortfolioTransaction UpdatePortfolioTransactionUsingPut (Object portfolioTransaction, Guid? portfolioTransactionId)
        {
             ApiResponse<PortfolioTransaction> localVarResponse = UpdatePortfolioTransactionUsingPutWithHttpInfo(portfolioTransaction, portfolioTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a portfolio transaction Update the information for a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>ApiResponse of PortfolioTransaction</returns>
        public ApiResponse< PortfolioTransaction > UpdatePortfolioTransactionUsingPutWithHttpInfo (Object portfolioTransaction, Guid? portfolioTransactionId)
        {
            // verify the required parameter 'portfolioTransaction' is set
            if (portfolioTransaction == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransaction' when calling PortfolioApi->UpdatePortfolioTransactionUsingPut");
            // verify the required parameter 'portfolioTransactionId' is set
            if (portfolioTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionId' when calling PortfolioApi->UpdatePortfolioTransactionUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionId != null) localVarPathParams.Add("portfolio_transaction_id", this.Configuration.ApiClient.ParameterToString(portfolioTransactionId)); // path parameter
            if (portfolioTransaction != null && portfolioTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioTransaction)));
        }

        /// <summary>
        /// Update a portfolio transaction Update the information for a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of PortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PortfolioTransaction> UpdatePortfolioTransactionUsingPutAsync (Object portfolioTransaction, Guid? portfolioTransactionId)
        {
             ApiResponse<PortfolioTransaction> localVarResponse = await UpdatePortfolioTransactionUsingPutAsyncWithHttpInfo(portfolioTransaction, portfolioTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a portfolio transaction Update the information for a portfolio transaction record for a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioTransaction">portfolio_transaction</param>
        /// <param name="portfolioTransactionId">UUID portfolio_transaction_id</param>
        /// <returns>Task of ApiResponse (PortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PortfolioTransaction>> UpdatePortfolioTransactionUsingPutAsyncWithHttpInfo (Object portfolioTransaction, Guid? portfolioTransactionId)
        {
            // verify the required parameter 'portfolioTransaction' is set
            if (portfolioTransaction == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransaction' when calling PortfolioApi->UpdatePortfolioTransactionUsingPut");
            // verify the required parameter 'portfolioTransactionId' is set
            if (portfolioTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioTransactionId' when calling PortfolioApi->UpdatePortfolioTransactionUsingPut");

            var localVarPath = "/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioTransactionId != null) localVarPathParams.Add("portfolio_transaction_id", this.Configuration.ApiClient.ParameterToString(portfolioTransactionId)); // path parameter
            if (portfolioTransaction != null && portfolioTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolioTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolioTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PortfolioTransaction)));
        }

        /// <summary>
        /// Update a portfolio Update a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Portfolio</returns>
        public Portfolio UpdatePortfolioUsingPut (Object portfolio, Guid? portfolioId)
        {
             ApiResponse<Portfolio> localVarResponse = UpdatePortfolioUsingPutWithHttpInfo(portfolio, portfolioId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a portfolio Update a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>ApiResponse of Portfolio</returns>
        public ApiResponse< Portfolio > UpdatePortfolioUsingPutWithHttpInfo (Object portfolio, Guid? portfolioId)
        {
            // verify the required parameter 'portfolio' is set
            if (portfolio == null)
                throw new ApiException(400, "Missing required parameter 'portfolio' when calling PortfolioApi->UpdatePortfolioUsingPut");
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->UpdatePortfolioUsingPut");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (portfolio != null && portfolio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolio; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

        /// <summary>
        /// Update a portfolio Update a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of Portfolio</returns>
        public async System.Threading.Tasks.Task<Portfolio> UpdatePortfolioUsingPutAsync (Object portfolio, Guid? portfolioId)
        {
             ApiResponse<Portfolio> localVarResponse = await UpdatePortfolioUsingPutAsyncWithHttpInfo(portfolio, portfolioId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a portfolio Update a portfolio for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolio">portfolio</param>
        /// <param name="portfolioId">UUID portfolio_id</param>
        /// <returns>Task of ApiResponse (Portfolio)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Portfolio>> UpdatePortfolioUsingPutAsyncWithHttpInfo (Object portfolio, Guid? portfolioId)
        {
            // verify the required parameter 'portfolio' is set
            if (portfolio == null)
                throw new ApiException(400, "Missing required parameter 'portfolio' when calling PortfolioApi->UpdatePortfolioUsingPut");
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling PortfolioApi->UpdatePortfolioUsingPut");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (portfolio != null && portfolio.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(portfolio); // http body (model) parameter
            }
            else
            {
                localVarPostBody = portfolio; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePortfolioUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Portfolio>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Portfolio) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Portfolio)));
        }

    }
}
