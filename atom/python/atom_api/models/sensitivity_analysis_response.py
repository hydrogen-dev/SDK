# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SensitivityAnalysisResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_impact': 'float',
        't_statistic': 'float',
        'margin_of_error': 'float'
    }

    attribute_map = {
        'portfolio_impact': 'portfolio_impact',
        't_statistic': 't_statistic',
        'margin_of_error': 'margin_of_error'
    }

    def __init__(self, portfolio_impact=None, t_statistic=None, margin_of_error=None):  # noqa: E501
        """SensitivityAnalysisResponse - a model defined in Swagger"""  # noqa: E501

        self._portfolio_impact = None
        self._t_statistic = None
        self._margin_of_error = None
        self.discriminator = None

        self.portfolio_impact = portfolio_impact
        self.t_statistic = t_statistic
        self.margin_of_error = margin_of_error

    @property
    def portfolio_impact(self):
        """Gets the portfolio_impact of this SensitivityAnalysisResponse.  # noqa: E501

        Expected impact of sensitivity_factor on the portfolio's return. The associated unit of time is the base unit indicated by frequency_interval (for example, week = 1 week).  # noqa: E501

        :return: The portfolio_impact of this SensitivityAnalysisResponse.  # noqa: E501
        :rtype: float
        """
        return self._portfolio_impact

    @portfolio_impact.setter
    def portfolio_impact(self, portfolio_impact):
        """Sets the portfolio_impact of this SensitivityAnalysisResponse.

        Expected impact of sensitivity_factor on the portfolio's return. The associated unit of time is the base unit indicated by frequency_interval (for example, week = 1 week).  # noqa: E501

        :param portfolio_impact: The portfolio_impact of this SensitivityAnalysisResponse.  # noqa: E501
        :type: float
        """
        if portfolio_impact is None:
            raise ValueError("Invalid value for `portfolio_impact`, must not be `None`")  # noqa: E501

        self._portfolio_impact = portfolio_impact

    @property
    def t_statistic(self):
        """Gets the t_statistic of this SensitivityAnalysisResponse.  # noqa: E501

        Raw t-statistic from the regression analysis, typically used to determine statistical significance of the regression coefficient.  # noqa: E501

        :return: The t_statistic of this SensitivityAnalysisResponse.  # noqa: E501
        :rtype: float
        """
        return self._t_statistic

    @t_statistic.setter
    def t_statistic(self, t_statistic):
        """Sets the t_statistic of this SensitivityAnalysisResponse.

        Raw t-statistic from the regression analysis, typically used to determine statistical significance of the regression coefficient.  # noqa: E501

        :param t_statistic: The t_statistic of this SensitivityAnalysisResponse.  # noqa: E501
        :type: float
        """
        if t_statistic is None:
            raise ValueError("Invalid value for `t_statistic`, must not be `None`")  # noqa: E501

        self._t_statistic = t_statistic

    @property
    def margin_of_error(self):
        """Gets the margin_of_error of this SensitivityAnalysisResponse.  # noqa: E501

        Estimated margin of error pertaining to portfolio_impact at a 95% confidence level.  # noqa: E501

        :return: The margin_of_error of this SensitivityAnalysisResponse.  # noqa: E501
        :rtype: float
        """
        return self._margin_of_error

    @margin_of_error.setter
    def margin_of_error(self, margin_of_error):
        """Sets the margin_of_error of this SensitivityAnalysisResponse.

        Estimated margin of error pertaining to portfolio_impact at a 95% confidence level.  # noqa: E501

        :param margin_of_error: The margin_of_error of this SensitivityAnalysisResponse.  # noqa: E501
        :type: float
        """
        if margin_of_error is None:
            raise ValueError("Invalid value for `margin_of_error`, must not be `None`")  # noqa: E501

        self._margin_of_error = margin_of_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensitivityAnalysisResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensitivityAnalysisResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
