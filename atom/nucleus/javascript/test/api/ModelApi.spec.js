/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenNucleusApi);
  }
}(this, function(expect, HydrogenNucleusApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenNucleusApi.ModelApi();
  });

  describe('(package)', function() {
    describe('ModelApi', function() {
      describe('createModelAssetSizeUsingPost', function() {
        it('should call createModelAssetSizeUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createModelAssetSizeUsingPost call and complete the assertions
          /*
          var req = new HydrogenNucleusApi.ModelAssetSize();
          req.assetSize = 0.9;
          req.currencyCode = "USD";
          req._date = 2018-01-09'T'12:00:00;
          req.isReconciled = true;
          req.modelId = "62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d";

          instance.createModelAssetSizeUsingPost(req, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelAssetSize);
            expect(data.assetSize).to.be.a('number');
            expect(data.assetSize).to.be(0.9);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("USD");
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isReconciled).to.be.a('boolean');
            expect(data.isReconciled).to.be(true);
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createModelChangeUsingPost', function() {
        it('should call createModelChangeUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createModelChangeUsingPost call and complete the assertions
          /*
          var changeRequest = new HydrogenNucleusApi.OrderReconcileRequest();
          changeRequest.accountId = """00000000-0000-0000-0000-000000000000";
          changeRequest.nonFractional = false;
          changeRequest.orderTrackIds = ["""00000000-0000-0000-0000-000000000000"];
          changeRequest.portfolioId = """00000000-0000-0000-0000-000000000000";
          changeRequest.tenantId = """00000000-0000-0000-0000-000000000000";
          var modelId = "modelId_example";

          instance.createModelChangeUsingPost(changeRequest, modelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HydrogenNucleusApi.ModelTransaction);
              expect(data.createDate).to.be.a(Date);
              expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
              expect(data._date).to.be.a(Date);
              expect(data._date).to.be(2018-01-09'T'12:00:00);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
              expect(data.modelId).to.be.a('string');
              expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
              expect(data.price).to.be.a('number');
              expect(data.price).to.be(100.0);
              expect(data.secondaryId).to.be.a('string');
              expect(data.secondaryId).to.be("7289243787238");
              expect(data.securityId).to.be.a('string');
              expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
              expect(data.shares).to.be.a('number');
              expect(data.shares).to.be(100.0);
              expect(data.transactionCodeId).to.be.a('string');
              expect(data.transactionCodeId).to.be("f5af397b-7d22-433f-b01e-8202184a6386");
              expect(data.updateDate).to.be.a(Date);
              expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createModelCommentUsingPost', function() {
        it('should call createModelCommentUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createModelCommentUsingPost call and complete the assertions
          /*
          var modelCommentRequest = new HydrogenNucleusApi.ModelComment();
          modelCommentRequest.comment = "sample";
          modelCommentRequest._date = 2018-01-09'T'12:00:00;
          modelCommentRequest.metadata = {key: ""};
          modelCommentRequest.modelId = "62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d";

          instance.createModelCommentUsingPost(modelCommentRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelComment);
            expect(data.comment).to.be.a('string');
            expect(data.comment).to.be("sample");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createModelHoldingUsingPost', function() {
        it('should call createModelHoldingUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createModelHoldingUsingPost call and complete the assertions
          /*
          var modelHoldingRequest = new HydrogenNucleusApi.ModelHolding();
          modelHoldingRequest.currentWeight = 0.88;
          modelHoldingRequest._date = 2018-01-09'T'12:00:00;
          modelHoldingRequest.driftFactor = 0.9;
          modelHoldingRequest.isCash = true;
          modelHoldingRequest.isInitialHolding = true;
          modelHoldingRequest.isSafeSecurity = true;
          modelHoldingRequest.modelDescription = "";
          modelHoldingRequest.modelId = "62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d";
          modelHoldingRequest.modelName = "";
          modelHoldingRequest.modelWeight = 0.0;
          modelHoldingRequest.secPrice = 0.0;
          modelHoldingRequest.securityId = "29c3f995-bd45-4346-aea2-fd4476568d4c";
          modelHoldingRequest.strategicWeight = 0.89;

          instance.createModelHoldingUsingPost(modelHoldingRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelHolding);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currentWeight).to.be.a('number');
            expect(data.currentWeight).to.be(0.88);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.driftFactor).to.be.a('number');
            expect(data.driftFactor).to.be(0.9);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isCash).to.be.a('boolean');
            expect(data.isCash).to.be(true);
            expect(data.isInitialHolding).to.be.a('boolean');
            expect(data.isInitialHolding).to.be(true);
            expect(data.isSafeSecurity).to.be.a('boolean');
            expect(data.isSafeSecurity).to.be(true);
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.modelDescription).to.be.a('string');
            expect(data.modelDescription).to.be("");
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.modelName).to.be.a('string');
            expect(data.modelName).to.be("");
            expect(data.modelWeight).to.be.a('number');
            expect(data.modelWeight).to.be(0.0);
            expect(data.secPrice).to.be.a('number');
            expect(data.secPrice).to.be(0.0);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.securityId).to.be.a('string');
            expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
            expect(data.strategicWeight).to.be.a('number');
            expect(data.strategicWeight).to.be(0.89);
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createModelTransactionUsingPost', function() {
        it('should call createModelTransactionUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createModelTransactionUsingPost call and complete the assertions
          /*
          var modelTransactionRequest = new HydrogenNucleusApi.ModelTransaction();
          modelTransactionRequest._date = 2018-01-09'T'12:00:00;
          modelTransactionRequest.modelId = "62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d";
          modelTransactionRequest.price = 100.0;
          modelTransactionRequest.securityId = "29c3f995-bd45-4346-aea2-fd4476568d4c";
          modelTransactionRequest.shares = 100.0;
          modelTransactionRequest.transactionCodeId = "f5af397b-7d22-433f-b01e-8202184a6386";

          instance.createModelTransactionUsingPost(modelTransactionRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelTransaction);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(100.0);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.securityId).to.be.a('string');
            expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
            expect(data.shares).to.be.a('number');
            expect(data.shares).to.be(100.0);
            expect(data.transactionCodeId).to.be.a('string');
            expect(data.transactionCodeId).to.be("f5af397b-7d22-433f-b01e-8202184a6386");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createModelUsingPost', function() {
        it('should call createModelUsingPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createModelUsingPost call and complete the assertions
          /*
          var modelInfoRequest = new HydrogenNucleusApi.Model();
          modelInfoRequest.benchmarkId = "f3c384dd-5895-4da8-a356-61f266269082";
          modelInfoRequest.cashSec = "1";
          modelInfoRequest.category = "tech";
          modelInfoRequest.clientId = "2035f52d-2c5b-4e07-8904-cb037bad7aff";
          modelInfoRequest.currencyCode = "USD";
          modelInfoRequest.defaultDriftFactor = 0.55;
          modelInfoRequest.description = "consists of tech ETFs";
          modelInfoRequest.downside = true;
          modelInfoRequest.driftRebal = true;
          modelInfoRequest.isActive = true;
          modelInfoRequest.metadata = {key: ""};
          modelInfoRequest.name = "Tech model";
          modelInfoRequest.nodeMap = [new HydrogenNucleusApi.AllocationNodeMap()];
          modelInfoRequest.nodeMap[0].nodeId = "6e14259a-9a68-4593-9e6d-8fcd0d05cf44";
          modelInfoRequest.periodRebal = true;
          modelInfoRequest.rebalancePeriod = 12;
          modelInfoRequest.safeSec = "1";
          modelInfoRequest.secRotation = true;
          modelInfoRequest.taxEfficiencyId = 1;

          instance.createModelUsingPost(modelInfoRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.Model);
            expect(data.benchmarkId).to.be.a('string');
            expect(data.benchmarkId).to.be("f3c384dd-5895-4da8-a356-61f266269082");
            expect(data.cashSec).to.be.a('string');
            expect(data.cashSec).to.be("1");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("tech");
            expect(data.clientId).to.be.a('string');
            expect(data.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("USD");
            expect(data.defaultDriftFactor).to.be.a('number');
            expect(data.defaultDriftFactor).to.be(0.55);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("consists of tech ETFs");
            expect(data.downside).to.be.a('boolean');
            expect(data.downside).to.be(true);
            expect(data.driftRebal).to.be.a('boolean');
            expect(data.driftRebal).to.be(true);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(true);
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Tech model");
            {
              let dataCtr = data.nodeMap;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.AllocationNodeMap);
                expect(data.nodeId).to.be.a('string');
                expect(data.nodeId).to.be("6e14259a-9a68-4593-9e6d-8fcd0d05cf44");

                      }
            }
            expect(data.periodRebal).to.be.a('boolean');
            expect(data.periodRebal).to.be(true);
            expect(data.rebalancePeriod).to.be.a('number');
            expect(data.rebalancePeriod).to.be(12);
            expect(data.safeSec).to.be.a('string');
            expect(data.safeSec).to.be("1");
            expect(data.secRotation).to.be.a('boolean');
            expect(data.secRotation).to.be(true);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.taxEfficiencyId).to.be.a('number');
            expect(data.taxEfficiencyId).to.be(1);
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteModelAssetSizeUsingDelete', function() {
        it('should call deleteModelAssetSizeUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteModelAssetSizeUsingDelete call
          /*
          var modelAssetSizeId = "modelAssetSizeId_example";

          instance.deleteModelAssetSizeUsingDelete(modelAssetSizeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteModelCommentUsingDelete', function() {
        it('should call deleteModelCommentUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteModelCommentUsingDelete call
          /*
          var modelCommentId = "modelCommentId_example";

          instance.deleteModelCommentUsingDelete(modelCommentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteModelHoldingUsingDelete', function() {
        it('should call deleteModelHoldingUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteModelHoldingUsingDelete call
          /*
          var modelHoldingId = "modelHoldingId_example";

          instance.deleteModelHoldingUsingDelete(modelHoldingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteModelTransactionUsingDelete', function() {
        it('should call deleteModelTransactionUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteModelTransactionUsingDelete call
          /*
          var modelTransactionId = "modelTransactionId_example";

          instance.deleteModelTransactionUsingDelete(modelTransactionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteModelUsingDelete', function() {
        it('should call deleteModelUsingDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteModelUsingDelete call
          /*
          var modelId = "modelId_example";

          instance.deleteModelUsingDelete(modelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelAllUsingGet', function() {
        it('should call getModelAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelAllUsingGet call and complete the assertions
          /*
          var opts = {};
          opts.ascending = false;
          opts.filter = "filter_example";
          opts.orderBy = "update_date";
          opts.page = 0;
          opts.size = 25;

          instance.getModelAllUsingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.PageModel);
            {
              let dataCtr = data.content;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.Model);
                expect(data.benchmarkId).to.be.a('string');
                expect(data.benchmarkId).to.be("f3c384dd-5895-4da8-a356-61f266269082");
                expect(data.cashSec).to.be.a('string');
                expect(data.cashSec).to.be("1");
                expect(data.category).to.be.a('string');
                expect(data.category).to.be("tech");
                expect(data.clientId).to.be.a('string');
                expect(data.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
                expect(data.currencyCode).to.be.a('string');
                expect(data.currencyCode).to.be("USD");
                expect(data.defaultDriftFactor).to.be.a('number');
                expect(data.defaultDriftFactor).to.be(0.55);
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("consists of tech ETFs");
                expect(data.downside).to.be.a('boolean');
                expect(data.downside).to.be(true);
                expect(data.driftRebal).to.be.a('boolean');
                expect(data.driftRebal).to.be(true);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
                expect(data.isActive).to.be.a('boolean');
                expect(data.isActive).to.be(true);
                {
                  let dataCtr = data.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Tech model");
                {
                  let dataCtr = data.nodeMap;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(HydrogenNucleusApi.AllocationNodeMap);
                    expect(data.nodeId).to.be.a('string');
                    expect(data.nodeId).to.be("6e14259a-9a68-4593-9e6d-8fcd0d05cf44");
    
                          }
                }
                expect(data.periodRebal).to.be.a('boolean');
                expect(data.periodRebal).to.be(true);
                expect(data.rebalancePeriod).to.be.a('number');
                expect(data.rebalancePeriod).to.be(12);
                expect(data.safeSec).to.be.a('string');
                expect(data.safeSec).to.be("1");
                expect(data.secRotation).to.be.a('boolean');
                expect(data.secRotation).to.be(true);
                expect(data.secondaryId).to.be.a('string');
                expect(data.secondaryId).to.be("7289243787238");
                expect(data.taxEfficiencyId).to.be.a('number');
                expect(data.taxEfficiencyId).to.be(1);
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

                      }
            }
            expect(data.first).to.be.a('boolean');
            expect(data.first).to.be(false);
            expect(data.last).to.be.a('boolean');
            expect(data.last).to.be(false);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.numberOfElements).to.be.a('number');
            expect(data.numberOfElements).to.be(0);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            {
              let dataCtr = data.sort;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.Sort);
                expect(data.ascending).to.be.a('boolean');
                expect(data.ascending).to.be(true);
                expect(data.descending).to.be.a('boolean');
                expect(data.descending).to.be(false);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("DESC");
                expect(data.ignoreCase).to.be.a('boolean');
                expect(data.ignoreCase).to.be(false);
                expect(data.nullHandling).to.be.a('string');
                expect(data.nullHandling).to.be("NATIVE");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("updateDate");

                      }
            }
            expect(data.totalElements).to.be.a('number');
            expect(data.totalElements).to.be("0");
            expect(data.totalPages).to.be.a('number');
            expect(data.totalPages).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelAssetSizeAllUsingGet', function() {
        it('should call getModelAssetSizeAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelAssetSizeAllUsingGet call and complete the assertions
          /*
          var opts = {};
          opts.ascending = false;
          opts.currencyConversion = "currencyConversion_example";
          opts.filter = "filter_example";
          opts.orderBy = "update_date";
          opts.page = 0;
          opts.size = 25;

          instance.getModelAssetSizeAllUsingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.PageModelAssetSize);
            {
              let dataCtr = data.content;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.ModelAssetSize);
                expect(data.assetSize).to.be.a('number');
                expect(data.assetSize).to.be(0.9);
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
                expect(data.currencyCode).to.be.a('string');
                expect(data.currencyCode).to.be("USD");
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2018-01-09'T'12:00:00);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
                expect(data.isReconciled).to.be.a('boolean');
                expect(data.isReconciled).to.be(true);
                expect(data.modelId).to.be.a('string');
                expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
                expect(data.secondaryId).to.be.a('string');
                expect(data.secondaryId).to.be("7289243787238");
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

                      }
            }
            expect(data.first).to.be.a('boolean');
            expect(data.first).to.be(false);
            expect(data.last).to.be.a('boolean');
            expect(data.last).to.be(false);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.numberOfElements).to.be.a('number');
            expect(data.numberOfElements).to.be(0);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            {
              let dataCtr = data.sort;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.Sort);
                expect(data.ascending).to.be.a('boolean');
                expect(data.ascending).to.be(true);
                expect(data.descending).to.be.a('boolean');
                expect(data.descending).to.be(false);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("DESC");
                expect(data.ignoreCase).to.be.a('boolean');
                expect(data.ignoreCase).to.be(false);
                expect(data.nullHandling).to.be.a('string');
                expect(data.nullHandling).to.be("NATIVE");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("updateDate");

                      }
            }
            expect(data.totalElements).to.be.a('number');
            expect(data.totalElements).to.be("0");
            expect(data.totalPages).to.be.a('number');
            expect(data.totalPages).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelAssetSizeUsingGet', function() {
        it('should call getModelAssetSizeUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelAssetSizeUsingGet call and complete the assertions
          /*
          var modelAssetSizeId = "modelAssetSizeId_example";
          var opts = {};
          opts.currencyConversion = "currencyConversion_example";

          instance.getModelAssetSizeUsingGet(modelAssetSizeId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelAssetSize);
            expect(data.assetSize).to.be.a('number');
            expect(data.assetSize).to.be(0.9);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("USD");
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isReconciled).to.be.a('boolean');
            expect(data.isReconciled).to.be(true);
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelCommentAllUsingGet', function() {
        it('should call getModelCommentAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelCommentAllUsingGet call and complete the assertions
          /*
          var opts = {};
          opts.ascending = false;
          opts.filter = "filter_example";
          opts.orderBy = "update_date";
          opts.page = 0;
          opts.size = 25;

          instance.getModelCommentAllUsingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.PageModelComment);
            {
              let dataCtr = data.content;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.ModelComment);
                expect(data.comment).to.be.a('string');
                expect(data.comment).to.be("sample");
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2018-01-09'T'12:00:00);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
                {
                  let dataCtr = data.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.modelId).to.be.a('string');
                expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
                expect(data.secondaryId).to.be.a('string');
                expect(data.secondaryId).to.be("7289243787238");
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

                      }
            }
            expect(data.first).to.be.a('boolean');
            expect(data.first).to.be(false);
            expect(data.last).to.be.a('boolean');
            expect(data.last).to.be(false);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.numberOfElements).to.be.a('number');
            expect(data.numberOfElements).to.be(0);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            {
              let dataCtr = data.sort;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.Sort);
                expect(data.ascending).to.be.a('boolean');
                expect(data.ascending).to.be(true);
                expect(data.descending).to.be.a('boolean');
                expect(data.descending).to.be(false);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("DESC");
                expect(data.ignoreCase).to.be.a('boolean');
                expect(data.ignoreCase).to.be(false);
                expect(data.nullHandling).to.be.a('string');
                expect(data.nullHandling).to.be("NATIVE");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("updateDate");

                      }
            }
            expect(data.totalElements).to.be.a('number');
            expect(data.totalElements).to.be("0");
            expect(data.totalPages).to.be.a('number');
            expect(data.totalPages).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelCommentUsingGet', function() {
        it('should call getModelCommentUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelCommentUsingGet call and complete the assertions
          /*
          var modelCommentId = "modelCommentId_example";

          instance.getModelCommentUsingGet(modelCommentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelComment);
            expect(data.comment).to.be.a('string');
            expect(data.comment).to.be("sample");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelHoldingAllUsingGet', function() {
        it('should call getModelHoldingAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelHoldingAllUsingGet call and complete the assertions
          /*
          var opts = {};
          opts.ascending = false;
          opts.filter = "filter_example";
          opts.orderBy = "update_date";
          opts.page = 0;
          opts.size = 25;

          instance.getModelHoldingAllUsingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.PageModelHolding);
            {
              let dataCtr = data.content;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.ModelHolding);
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
                expect(data.currentWeight).to.be.a('number');
                expect(data.currentWeight).to.be(0.88);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2018-01-09'T'12:00:00);
                expect(data.driftFactor).to.be.a('number');
                expect(data.driftFactor).to.be(0.9);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
                expect(data.isCash).to.be.a('boolean');
                expect(data.isCash).to.be(true);
                expect(data.isInitialHolding).to.be.a('boolean');
                expect(data.isInitialHolding).to.be(true);
                expect(data.isSafeSecurity).to.be.a('boolean');
                expect(data.isSafeSecurity).to.be(true);
                {
                  let dataCtr = data.metadata;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.modelDescription).to.be.a('string');
                expect(data.modelDescription).to.be("");
                expect(data.modelId).to.be.a('string');
                expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
                expect(data.modelName).to.be.a('string');
                expect(data.modelName).to.be("");
                expect(data.modelWeight).to.be.a('number');
                expect(data.modelWeight).to.be(0.0);
                expect(data.secPrice).to.be.a('number');
                expect(data.secPrice).to.be(0.0);
                expect(data.secondaryId).to.be.a('string');
                expect(data.secondaryId).to.be("7289243787238");
                expect(data.securityId).to.be.a('string');
                expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
                expect(data.strategicWeight).to.be.a('number');
                expect(data.strategicWeight).to.be(0.89);
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

                      }
            }
            expect(data.first).to.be.a('boolean');
            expect(data.first).to.be(false);
            expect(data.last).to.be.a('boolean');
            expect(data.last).to.be(false);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.numberOfElements).to.be.a('number');
            expect(data.numberOfElements).to.be(0);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            {
              let dataCtr = data.sort;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.Sort);
                expect(data.ascending).to.be.a('boolean');
                expect(data.ascending).to.be(true);
                expect(data.descending).to.be.a('boolean');
                expect(data.descending).to.be(false);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("DESC");
                expect(data.ignoreCase).to.be.a('boolean');
                expect(data.ignoreCase).to.be(false);
                expect(data.nullHandling).to.be.a('string');
                expect(data.nullHandling).to.be("NATIVE");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("updateDate");

                      }
            }
            expect(data.totalElements).to.be.a('number');
            expect(data.totalElements).to.be("0");
            expect(data.totalPages).to.be.a('number');
            expect(data.totalPages).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelHoldingUsingGet', function() {
        it('should call getModelHoldingUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelHoldingUsingGet call and complete the assertions
          /*
          var modelHoldingId = "modelHoldingId_example";

          instance.getModelHoldingUsingGet(modelHoldingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelHolding);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currentWeight).to.be.a('number');
            expect(data.currentWeight).to.be(0.88);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.driftFactor).to.be.a('number');
            expect(data.driftFactor).to.be(0.9);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isCash).to.be.a('boolean');
            expect(data.isCash).to.be(true);
            expect(data.isInitialHolding).to.be.a('boolean');
            expect(data.isInitialHolding).to.be(true);
            expect(data.isSafeSecurity).to.be.a('boolean');
            expect(data.isSafeSecurity).to.be(true);
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.modelDescription).to.be.a('string');
            expect(data.modelDescription).to.be("");
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.modelName).to.be.a('string');
            expect(data.modelName).to.be("");
            expect(data.modelWeight).to.be.a('number');
            expect(data.modelWeight).to.be(0.0);
            expect(data.secPrice).to.be.a('number');
            expect(data.secPrice).to.be(0.0);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.securityId).to.be.a('string');
            expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
            expect(data.strategicWeight).to.be.a('number');
            expect(data.strategicWeight).to.be(0.89);
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelTransactionAllUsingGet', function() {
        it('should call getModelTransactionAllUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelTransactionAllUsingGet call and complete the assertions
          /*
          var opts = {};
          opts.ascending = false;
          opts.filter = "filter_example";
          opts.orderBy = "update_date";
          opts.page = 0;
          opts.size = 25;

          instance.getModelTransactionAllUsingGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.PageModelTransaction);
            {
              let dataCtr = data.content;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.ModelTransaction);
                expect(data.createDate).to.be.a(Date);
                expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
                expect(data._date).to.be.a(Date);
                expect(data._date).to.be(2018-01-09'T'12:00:00);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
                expect(data.modelId).to.be.a('string');
                expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
                expect(data.price).to.be.a('number');
                expect(data.price).to.be(100.0);
                expect(data.secondaryId).to.be.a('string');
                expect(data.secondaryId).to.be("7289243787238");
                expect(data.securityId).to.be.a('string');
                expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
                expect(data.shares).to.be.a('number');
                expect(data.shares).to.be(100.0);
                expect(data.transactionCodeId).to.be.a('string');
                expect(data.transactionCodeId).to.be("f5af397b-7d22-433f-b01e-8202184a6386");
                expect(data.updateDate).to.be.a(Date);
                expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

                      }
            }
            expect(data.first).to.be.a('boolean');
            expect(data.first).to.be(false);
            expect(data.last).to.be.a('boolean');
            expect(data.last).to.be(false);
            expect(data._number).to.be.a('number');
            expect(data._number).to.be(0);
            expect(data.numberOfElements).to.be.a('number');
            expect(data.numberOfElements).to.be(0);
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            {
              let dataCtr = data.sort;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.Sort);
                expect(data.ascending).to.be.a('boolean');
                expect(data.ascending).to.be(true);
                expect(data.descending).to.be.a('boolean');
                expect(data.descending).to.be(false);
                expect(data.direction).to.be.a('string');
                expect(data.direction).to.be("DESC");
                expect(data.ignoreCase).to.be.a('boolean');
                expect(data.ignoreCase).to.be(false);
                expect(data.nullHandling).to.be.a('string');
                expect(data.nullHandling).to.be("NATIVE");
                expect(data.property).to.be.a('string');
                expect(data.property).to.be("updateDate");

                      }
            }
            expect(data.totalElements).to.be.a('number');
            expect(data.totalElements).to.be("0");
            expect(data.totalPages).to.be.a('number');
            expect(data.totalPages).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelTransactionUsingGet', function() {
        it('should call getModelTransactionUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelTransactionUsingGet call and complete the assertions
          /*
          var modelTransactionId = "modelTransactionId_example";

          instance.getModelTransactionUsingGet(modelTransactionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelTransaction);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(100.0);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.securityId).to.be.a('string');
            expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
            expect(data.shares).to.be.a('number');
            expect(data.shares).to.be(100.0);
            expect(data.transactionCodeId).to.be.a('string');
            expect(data.transactionCodeId).to.be("f5af397b-7d22-433f-b01e-8202184a6386");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModelUsingGet', function() {
        it('should call getModelUsingGet successfully', function(done) {
          // TODO: uncomment, update parameter values for getModelUsingGet call and complete the assertions
          /*
          var modelId = "modelId_example";

          instance.getModelUsingGet(modelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.Model);
            expect(data.benchmarkId).to.be.a('string');
            expect(data.benchmarkId).to.be("f3c384dd-5895-4da8-a356-61f266269082");
            expect(data.cashSec).to.be.a('string');
            expect(data.cashSec).to.be("1");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("tech");
            expect(data.clientId).to.be.a('string');
            expect(data.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("USD");
            expect(data.defaultDriftFactor).to.be.a('number');
            expect(data.defaultDriftFactor).to.be(0.55);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("consists of tech ETFs");
            expect(data.downside).to.be.a('boolean');
            expect(data.downside).to.be(true);
            expect(data.driftRebal).to.be.a('boolean');
            expect(data.driftRebal).to.be(true);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(true);
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Tech model");
            {
              let dataCtr = data.nodeMap;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.AllocationNodeMap);
                expect(data.nodeId).to.be.a('string');
                expect(data.nodeId).to.be("6e14259a-9a68-4593-9e6d-8fcd0d05cf44");

                      }
            }
            expect(data.periodRebal).to.be.a('boolean');
            expect(data.periodRebal).to.be(true);
            expect(data.rebalancePeriod).to.be.a('number');
            expect(data.rebalancePeriod).to.be(12);
            expect(data.safeSec).to.be.a('string');
            expect(data.safeSec).to.be("1");
            expect(data.secRotation).to.be.a('boolean');
            expect(data.secRotation).to.be(true);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.taxEfficiencyId).to.be.a('number');
            expect(data.taxEfficiencyId).to.be(1);
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateModelAssetSizeUsingPut', function() {
        it('should call updateModelAssetSizeUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateModelAssetSizeUsingPut call and complete the assertions
          /*
          var modelAssetSize = null;
          var modelAssetSizeId = "modelAssetSizeId_example";

          instance.updateModelAssetSizeUsingPut(modelAssetSize, modelAssetSizeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelAssetSize);
            expect(data.assetSize).to.be.a('number');
            expect(data.assetSize).to.be(0.9);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("USD");
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isReconciled).to.be.a('boolean');
            expect(data.isReconciled).to.be(true);
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateModelCommentUsingPut', function() {
        it('should call updateModelCommentUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateModelCommentUsingPut call and complete the assertions
          /*
          var modelComment = null;
          var modelCommentId = "modelCommentId_example";

          instance.updateModelCommentUsingPut(modelComment, modelCommentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelComment);
            expect(data.comment).to.be.a('string');
            expect(data.comment).to.be("sample");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateModelHoldingUsingPut', function() {
        it('should call updateModelHoldingUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateModelHoldingUsingPut call and complete the assertions
          /*
          var modelHolding = null;
          var modelHoldingId = "modelHoldingId_example";

          instance.updateModelHoldingUsingPut(modelHolding, modelHoldingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelHolding);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currentWeight).to.be.a('number');
            expect(data.currentWeight).to.be(0.88);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.driftFactor).to.be.a('number');
            expect(data.driftFactor).to.be(0.9);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isCash).to.be.a('boolean');
            expect(data.isCash).to.be(true);
            expect(data.isInitialHolding).to.be.a('boolean');
            expect(data.isInitialHolding).to.be(true);
            expect(data.isSafeSecurity).to.be.a('boolean');
            expect(data.isSafeSecurity).to.be(true);
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.modelDescription).to.be.a('string');
            expect(data.modelDescription).to.be("");
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.modelName).to.be.a('string');
            expect(data.modelName).to.be("");
            expect(data.modelWeight).to.be.a('number');
            expect(data.modelWeight).to.be(0.0);
            expect(data.secPrice).to.be.a('number');
            expect(data.secPrice).to.be(0.0);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.securityId).to.be.a('string');
            expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
            expect(data.strategicWeight).to.be.a('number');
            expect(data.strategicWeight).to.be(0.89);
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateModelTransactionUsingPut', function() {
        it('should call updateModelTransactionUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateModelTransactionUsingPut call and complete the assertions
          /*
          var modelTransaction = null;
          var modelTransactionId = "modelTransactionId_example";

          instance.updateModelTransactionUsingPut(modelTransaction, modelTransactionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.ModelTransaction);
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data._date).to.be.a(Date);
            expect(data._date).to.be(2018-01-09'T'12:00:00);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.modelId).to.be.a('string');
            expect(data.modelId).to.be("62fd0a9f-4bac-4b1d-94d2-2c5ea2adca3d");
            expect(data.price).to.be.a('number');
            expect(data.price).to.be(100.0);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.securityId).to.be.a('string');
            expect(data.securityId).to.be("29c3f995-bd45-4346-aea2-fd4476568d4c");
            expect(data.shares).to.be.a('number');
            expect(data.shares).to.be(100.0);
            expect(data.transactionCodeId).to.be.a('string');
            expect(data.transactionCodeId).to.be("f5af397b-7d22-433f-b01e-8202184a6386");
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateModelUsingPut', function() {
        it('should call updateModelUsingPut successfully', function(done) {
          // TODO: uncomment, update parameter values for updateModelUsingPut call and complete the assertions
          /*
          var model = null;
          var modelId = "modelId_example";

          instance.updateModelUsingPut(model, modelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(HydrogenNucleusApi.Model);
            expect(data.benchmarkId).to.be.a('string');
            expect(data.benchmarkId).to.be("f3c384dd-5895-4da8-a356-61f266269082");
            expect(data.cashSec).to.be.a('string');
            expect(data.cashSec).to.be("1");
            expect(data.category).to.be.a('string');
            expect(data.category).to.be("tech");
            expect(data.clientId).to.be.a('string');
            expect(data.clientId).to.be("2035f52d-2c5b-4e07-8904-cb037bad7aff");
            expect(data.createDate).to.be.a(Date);
            expect(data.createDate).to.be(2018-06-28T18:17:23.579+0000);
            expect(data.currencyCode).to.be.a('string');
            expect(data.currencyCode).to.be("USD");
            expect(data.defaultDriftFactor).to.be.a('number');
            expect(data.defaultDriftFactor).to.be(0.55);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("consists of tech ETFs");
            expect(data.downside).to.be.a('boolean');
            expect(data.downside).to.be(true);
            expect(data.driftRebal).to.be.a('boolean');
            expect(data.driftRebal).to.be(true);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("000183ac-2288-4564-a76b-119f4694be98");
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(true);
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Tech model");
            {
              let dataCtr = data.nodeMap;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(HydrogenNucleusApi.AllocationNodeMap);
                expect(data.nodeId).to.be.a('string');
                expect(data.nodeId).to.be("6e14259a-9a68-4593-9e6d-8fcd0d05cf44");

                      }
            }
            expect(data.periodRebal).to.be.a('boolean');
            expect(data.periodRebal).to.be(true);
            expect(data.rebalancePeriod).to.be.a('number');
            expect(data.rebalancePeriod).to.be(12);
            expect(data.safeSec).to.be.a('string');
            expect(data.safeSec).to.be("1");
            expect(data.secRotation).to.be.a('boolean');
            expect(data.secRotation).to.be(true);
            expect(data.secondaryId).to.be.a('string');
            expect(data.secondaryId).to.be("7289243787238");
            expect(data.taxEfficiencyId).to.be.a('number');
            expect(data.taxEfficiencyId).to.be(1);
            expect(data.updateDate).to.be.a(Date);
            expect(data.updateDate).to.be(2018-06-28T18:17:23.579+0000);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
