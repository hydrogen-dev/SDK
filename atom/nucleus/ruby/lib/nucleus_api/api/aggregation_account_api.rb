=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NucleusApi
  class AggregationAccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a bulk aggregation account balance
    # Create a balance records under an aggregation accounts.
    # @param aggregation_account_balance aggregationAccountBalance
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountBalance>]
    def create_aggregation_account_balance_bulk_using_post(aggregation_account_balance, opts = {})
      data, _status_code, _headers = create_aggregation_account_balance_bulk_using_post_with_http_info(aggregation_account_balance, opts)
      data
    end

    # Create a bulk aggregation account balance
    # Create a balance records under an aggregation accounts.
    # @param aggregation_account_balance aggregationAccountBalance
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountBalance>, Fixnum, Hash)>] Array<AggregationAccountBalance> data, response status code and response headers
    def create_aggregation_account_balance_bulk_using_post_with_http_info(aggregation_account_balance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_balance_bulk_using_post ...'
      end
      # verify the required parameter 'aggregation_account_balance' is set
      if @api_client.config.client_side_validation && aggregation_account_balance.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance' when calling AggregationAccountApi.create_aggregation_account_balance_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/bulk_aggregation_account_balance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_balance)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountBalance>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_balance_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account balance
    # Create a balance record under an aggregation account.
    # @param aggregation_account_balance aggregationAccountBalance
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountBalance]
    def create_aggregation_account_balance_using_post(aggregation_account_balance, opts = {})
      data, _status_code, _headers = create_aggregation_account_balance_using_post_with_http_info(aggregation_account_balance, opts)
      data
    end

    # Create an aggregation account balance
    # Create a balance record under an aggregation account.
    # @param aggregation_account_balance aggregationAccountBalance
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountBalance, Fixnum, Hash)>] AggregationAccountBalance data, response status code and response headers
    def create_aggregation_account_balance_using_post_with_http_info(aggregation_account_balance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_balance_using_post ...'
      end
      # verify the required parameter 'aggregation_account_balance' is set
      if @api_client.config.client_side_validation && aggregation_account_balance.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance' when calling AggregationAccountApi.create_aggregation_account_balance_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_balance)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountBalance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_balance_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a bulk aggregation account
    # Create a bulk aggregation account under a client.
    # @param aggregation_account_list aggregationAccountList
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccount>]
    def create_aggregation_account_bulk_using_post(aggregation_account_list, opts = {})
      data, _status_code, _headers = create_aggregation_account_bulk_using_post_with_http_info(aggregation_account_list, opts)
      data
    end

    # Create a bulk aggregation account
    # Create a bulk aggregation account under a client.
    # @param aggregation_account_list aggregationAccountList
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccount>, Fixnum, Hash)>] Array<AggregationAccount> data, response status code and response headers
    def create_aggregation_account_bulk_using_post_with_http_info(aggregation_account_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_bulk_using_post ...'
      end
      # verify the required parameter 'aggregation_account_list' is set
      if @api_client.config.client_side_validation && aggregation_account_list.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_list' when calling AggregationAccountApi.create_aggregation_account_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/bulk_aggregation_account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_list)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a bulk aggregation account holding
    # Create a bulk aggregation account holding.
    # @param aggregation_transaction aggregationTransaction
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountHolding>]
    def create_aggregation_account_holding_bulk_using_post(aggregation_transaction, opts = {})
      data, _status_code, _headers = create_aggregation_account_holding_bulk_using_post_with_http_info(aggregation_transaction, opts)
      data
    end

    # Create a bulk aggregation account holding
    # Create a bulk aggregation account holding.
    # @param aggregation_transaction aggregationTransaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountHolding>, Fixnum, Hash)>] Array<AggregationAccountHolding> data, response status code and response headers
    def create_aggregation_account_holding_bulk_using_post_with_http_info(aggregation_transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_holding_bulk_using_post ...'
      end
      # verify the required parameter 'aggregation_transaction' is set
      if @api_client.config.client_side_validation && aggregation_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_transaction' when calling AggregationAccountApi.create_aggregation_account_holding_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/bulk_aggregation_account_holding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_transaction)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountHolding>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_holding_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account holding
    # Create a holding record under an aggregation account.
    # @param aggregation_account_holding aggregationAccountHolding
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountHolding]
    def create_aggregation_account_holding_using_post(aggregation_account_holding, opts = {})
      data, _status_code, _headers = create_aggregation_account_holding_using_post_with_http_info(aggregation_account_holding, opts)
      data
    end

    # Create an aggregation account holding
    # Create a holding record under an aggregation account.
    # @param aggregation_account_holding aggregationAccountHolding
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountHolding, Fixnum, Hash)>] AggregationAccountHolding data, response status code and response headers
    def create_aggregation_account_holding_using_post_with_http_info(aggregation_account_holding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_holding_using_post ...'
      end
      # verify the required parameter 'aggregation_account_holding' is set
      if @api_client.config.client_side_validation && aggregation_account_holding.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding' when calling AggregationAccountApi.create_aggregation_account_holding_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_holding)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountHolding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_holding_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a bulk aggregation account transaction
    # Create a bulk transaction record under an aggregation account.
    # @param aggregation_account_transactions aggregationAccountTransactions
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountTransaction>]
    def create_aggregation_account_transaction_bulk_using_post(aggregation_account_transactions, opts = {})
      data, _status_code, _headers = create_aggregation_account_transaction_bulk_using_post_with_http_info(aggregation_account_transactions, opts)
      data
    end

    # Create a bulk aggregation account transaction
    # Create a bulk transaction record under an aggregation account.
    # @param aggregation_account_transactions aggregationAccountTransactions
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountTransaction>, Fixnum, Hash)>] Array<AggregationAccountTransaction> data, response status code and response headers
    def create_aggregation_account_transaction_bulk_using_post_with_http_info(aggregation_account_transactions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_transaction_bulk_using_post ...'
      end
      # verify the required parameter 'aggregation_account_transactions' is set
      if @api_client.config.client_side_validation && aggregation_account_transactions.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transactions' when calling AggregationAccountApi.create_aggregation_account_transaction_bulk_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/bulk_aggregation_account_transaction'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_transactions)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountTransaction>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_transaction_bulk_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account transaction
    # Create a transaction record under an aggregation account.
    # @param aggregation_account_transaction aggregationAccountTransaction
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountTransaction]
    def create_aggregation_account_transaction_using_post(aggregation_account_transaction, opts = {})
      data, _status_code, _headers = create_aggregation_account_transaction_using_post_with_http_info(aggregation_account_transaction, opts)
      data
    end

    # Create an aggregation account transaction
    # Create a transaction record under an aggregation account.
    # @param aggregation_account_transaction aggregationAccountTransaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountTransaction, Fixnum, Hash)>] AggregationAccountTransaction data, response status code and response headers
    def create_aggregation_account_transaction_using_post_with_http_info(aggregation_account_transaction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_transaction_using_post ...'
      end
      # verify the required parameter 'aggregation_account_transaction' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction' when calling AggregationAccountApi.create_aggregation_account_transaction_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_transaction)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_transaction_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account
    # Create an aggregation account under a client.
    # @param aggregation_account aggregationAccount
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccount]
    def create_aggregation_account_using_post(aggregation_account, opts = {})
      data, _status_code, _headers = create_aggregation_account_using_post_with_http_info(aggregation_account, opts)
      data
    end

    # Create an aggregation account
    # Create an aggregation account under a client.
    # @param aggregation_account aggregationAccount
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccount, Fixnum, Hash)>] AggregationAccount data, response status code and response headers
    def create_aggregation_account_using_post_with_http_info(aggregation_account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.create_aggregation_account_using_post ...'
      end
      # verify the required parameter 'aggregation_account' is set
      if @api_client.config.client_side_validation && aggregation_account.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account' when calling AggregationAccountApi.create_aggregation_account_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#create_aggregation_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account balance
    # Permanently delete a balance record for an aggregation account.
    # @param aggregation_account_balance_id UUID aggregation_account_balance_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account_balance_using_delete(aggregation_account_balance_id, opts = {})
      delete_aggregation_account_balance_using_delete_with_http_info(aggregation_account_balance_id, opts)
      nil
    end

    # Delete an aggregation account balance
    # Permanently delete a balance record for an aggregation account.
    # @param aggregation_account_balance_id UUID aggregation_account_balance_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_balance_using_delete_with_http_info(aggregation_account_balance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.delete_aggregation_account_balance_using_delete ...'
      end
      # verify the required parameter 'aggregation_account_balance_id' is set
      if @api_client.config.client_side_validation && aggregation_account_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance_id' when calling AggregationAccountApi.delete_aggregation_account_balance_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}'.sub('{' + 'aggregation_account_balance_id' + '}', aggregation_account_balance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#delete_aggregation_account_balance_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account holding
    # Permanently delete a holding record for an aggregation account.
    # @param aggregation_account_holding_id UUID aggregation_account_holding_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account_holding_using_delete(aggregation_account_holding_id, opts = {})
      delete_aggregation_account_holding_using_delete_with_http_info(aggregation_account_holding_id, opts)
      nil
    end

    # Delete an aggregation account holding
    # Permanently delete a holding record for an aggregation account.
    # @param aggregation_account_holding_id UUID aggregation_account_holding_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_holding_using_delete_with_http_info(aggregation_account_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.delete_aggregation_account_holding_using_delete ...'
      end
      # verify the required parameter 'aggregation_account_holding_id' is set
      if @api_client.config.client_side_validation && aggregation_account_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding_id' when calling AggregationAccountApi.delete_aggregation_account_holding_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}'.sub('{' + 'aggregation_account_holding_id' + '}', aggregation_account_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#delete_aggregation_account_holding_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account transaction
    # Permanently delete a transaction record for an aggregation account.
    # @param aggregation_account_transaction_id UUID aggregation_account_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account_transaction_using_delete(aggregation_account_transaction_id, opts = {})
      delete_aggregation_account_transaction_using_delete_with_http_info(aggregation_account_transaction_id, opts)
      nil
    end

    # Delete an aggregation account transaction
    # Permanently delete a transaction record for an aggregation account.
    # @param aggregation_account_transaction_id UUID aggregation_account_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_transaction_using_delete_with_http_info(aggregation_account_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.delete_aggregation_account_transaction_using_delete ...'
      end
      # verify the required parameter 'aggregation_account_transaction_id' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction_id' when calling AggregationAccountApi.delete_aggregation_account_transaction_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}'.sub('{' + 'aggregation_account_transaction_id' + '}', aggregation_account_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#delete_aggregation_account_transaction_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account
    # Permanently delete an aggregation account under a client.
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account_using_delete(aggregation_account_id, opts = {})
      delete_aggregation_account_using_delete_with_http_info(aggregation_account_id, opts)
      nil
    end

    # Delete an aggregation account
    # Permanently delete an aggregation account under a client.
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_using_delete_with_http_info(aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.delete_aggregation_account_using_delete ...'
      end
      # verify the required parameter 'aggregation_account_id' is set
      if @api_client.config.client_side_validation && aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id' when calling AggregationAccountApi.delete_aggregation_account_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account/{aggregation_account_id}'.sub('{' + 'aggregation_account_id' + '}', aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#delete_aggregation_account_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account aggregate data
    # Retrieve the information for a specific aggregation account associated with a client.
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Object]
    def get_aggregation_account_aggregate_data_using_get(aggregation_account_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_aggregate_data_using_get_with_http_info(aggregation_account_id, opts)
      data
    end

    # Retrieve an aggregation account aggregate data
    # Retrieve the information for a specific aggregation account associated with a client.
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_aggregation_account_aggregate_data_using_get_with_http_info(aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_aggregate_data_using_get ...'
      end
      # verify the required parameter 'aggregation_account_id' is set
      if @api_client.config.client_side_validation && aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id' when calling AggregationAccountApi.get_aggregation_account_aggregate_data_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account/{aggregation_account_id}/aggregate_data'.sub('{' + 'aggregation_account_id' + '}', aggregation_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_aggregate_data_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation accounts
    # Get information for all aggregation accounts for all clients defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAggregationAccount]
    def get_aggregation_account_all_using_get(opts = {})
      data, _status_code, _headers = get_aggregation_account_all_using_get_with_http_info(opts)
      data
    end

    # List all aggregation accounts
    # Get information for all aggregation accounts for all clients defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAggregationAccount, Fixnum, Hash)>] PageAggregationAccount data, response status code and response headers
    def get_aggregation_account_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAggregationAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation account balances
    # Get all of the balance records for all aggregation accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAggregationAccountBalance]
    def get_aggregation_account_balance_all_using_get(opts = {})
      data, _status_code, _headers = get_aggregation_account_balance_all_using_get_with_http_info(opts)
      data
    end

    # List all aggregation account balances
    # Get all of the balance records for all aggregation accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAggregationAccountBalance, Fixnum, Hash)>] PageAggregationAccountBalance data, response status code and response headers
    def get_aggregation_account_balance_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_balance_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAggregationAccountBalance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_balance_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account balance
    # Retrieve the information for a specific balance record for an aggregation account.
    # @param aggregation_account_balance_id UUID aggregation_account_balance_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [AggregationAccountBalance]
    def get_aggregation_account_balance_using_get(aggregation_account_balance_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_balance_using_get_with_http_info(aggregation_account_balance_id, opts)
      data
    end

    # Retrieve an aggregation account balance
    # Retrieve the information for a specific balance record for an aggregation account.
    # @param aggregation_account_balance_id UUID aggregation_account_balance_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(AggregationAccountBalance, Fixnum, Hash)>] AggregationAccountBalance data, response status code and response headers
    def get_aggregation_account_balance_using_get_with_http_info(aggregation_account_balance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_balance_using_get ...'
      end
      # verify the required parameter 'aggregation_account_balance_id' is set
      if @api_client.config.client_side_validation && aggregation_account_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance_id' when calling AggregationAccountApi.get_aggregation_account_balance_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}'.sub('{' + 'aggregation_account_balance_id' + '}', aggregation_account_balance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountBalance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_balance_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation account holdings
    # Get all of the holding records for all aggregation accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAggregationAccountHolding]
    def get_aggregation_account_holding_all_using_get(opts = {})
      data, _status_code, _headers = get_aggregation_account_holding_all_using_get_with_http_info(opts)
      data
    end

    # List all aggregation account holdings
    # Get all of the holding records for all aggregation accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAggregationAccountHolding, Fixnum, Hash)>] PageAggregationAccountHolding data, response status code and response headers
    def get_aggregation_account_holding_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_holding_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAggregationAccountHolding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_holding_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account holding
    # Retrieve the information for a specific holding record for an aggregation account.
    # @param aggregation_account_holding_id UUID aggregation_account_holding_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [AggregationAccountHolding]
    def get_aggregation_account_holding_using_get(aggregation_account_holding_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_holding_using_get_with_http_info(aggregation_account_holding_id, opts)
      data
    end

    # Retrieve an aggregation account holding
    # Retrieve the information for a specific holding record for an aggregation account.
    # @param aggregation_account_holding_id UUID aggregation_account_holding_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(AggregationAccountHolding, Fixnum, Hash)>] AggregationAccountHolding data, response status code and response headers
    def get_aggregation_account_holding_using_get_with_http_info(aggregation_account_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_holding_using_get ...'
      end
      # verify the required parameter 'aggregation_account_holding_id' is set
      if @api_client.config.client_side_validation && aggregation_account_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding_id' when calling AggregationAccountApi.get_aggregation_account_holding_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}'.sub('{' + 'aggregation_account_holding_id' + '}', aggregation_account_holding_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountHolding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_holding_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account aggregate data
    # Retrieve the information for a specific aggregation account with aggregate data for a business.
    # @param business_id UUID business_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Object]
    def get_aggregation_account_overview_by_business_id_using_get(business_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_overview_by_business_id_using_get_with_http_info(business_id, opts)
      data
    end

    # Retrieve an aggregation account aggregate data
    # Retrieve the information for a specific aggregation account with aggregate data for a business.
    # @param business_id UUID business_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_aggregation_account_overview_by_business_id_using_get_with_http_info(business_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_overview_by_business_id_using_get ...'
      end
      # verify the required parameter 'business_id' is set
      if @api_client.config.client_side_validation && business_id.nil?
        fail ArgumentError, "Missing the required parameter 'business_id' when calling AggregationAccountApi.get_aggregation_account_overview_by_business_id_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/business/{business_id}/aggregation_account_overview'.sub('{' + 'business_id' + '}', business_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_overview_by_business_id_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account aggregate data
    # Retrieve the information for a specific aggregation account with aggregate data for a client.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Object]
    def get_aggregation_account_overview_using_get(client_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_overview_using_get_with_http_info(client_id, opts)
      data
    end

    # Retrieve an aggregation account aggregate data
    # Retrieve the information for a specific aggregation account with aggregate data for a client.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_aggregation_account_overview_using_get_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_overview_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AggregationAccountApi.get_aggregation_account_overview_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/aggregation_account_overview'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_overview_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation account transactions
    # Get all of the transaction records for all aggregation accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAggregationAccountTransaction]
    def get_aggregation_account_transaction_all_using_get(opts = {})
      data, _status_code, _headers = get_aggregation_account_transaction_all_using_get_with_http_info(opts)
      data
    end

    # List all aggregation account transactions
    # Get all of the transaction records for all aggregation accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAggregationAccountTransaction, Fixnum, Hash)>] PageAggregationAccountTransaction data, response status code and response headers
    def get_aggregation_account_transaction_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_transaction_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAggregationAccountTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_transaction_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account transaction
    # Retrieve the information for a specific transaction record for an aggregation account.
    # @param aggregation_account_transaction_id UUID aggregation_account_transaction_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [AggregationAccountTransaction]
    def get_aggregation_account_transaction_using_get(aggregation_account_transaction_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_transaction_using_get_with_http_info(aggregation_account_transaction_id, opts)
      data
    end

    # Retrieve an aggregation account transaction
    # Retrieve the information for a specific transaction record for an aggregation account.
    # @param aggregation_account_transaction_id UUID aggregation_account_transaction_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @return [Array<(AggregationAccountTransaction, Fixnum, Hash)>] AggregationAccountTransaction data, response status code and response headers
    def get_aggregation_account_transaction_using_get_with_http_info(aggregation_account_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_transaction_using_get ...'
      end
      # verify the required parameter 'aggregation_account_transaction_id' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction_id' when calling AggregationAccountApi.get_aggregation_account_transaction_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}'.sub('{' + 'aggregation_account_transaction_id' + '}', aggregation_account_transaction_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_transaction_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account
    # Retrieve the information for a specific aggregation account associated with a client.
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccount]
    def get_aggregation_account_using_get(aggregation_account_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_using_get_with_http_info(aggregation_account_id, opts)
      data
    end

    # Retrieve an aggregation account
    # Retrieve the information for a specific aggregation account associated with a client.
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccount, Fixnum, Hash)>] AggregationAccount data, response status code and response headers
    def get_aggregation_account_using_get_with_http_info(aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.get_aggregation_account_using_get ...'
      end
      # verify the required parameter 'aggregation_account_id' is set
      if @api_client.config.client_side_validation && aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id' when calling AggregationAccountApi.get_aggregation_account_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account/{aggregation_account_id}'.sub('{' + 'aggregation_account_id' + '}', aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#get_aggregation_account_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account balance
    # Update a balance record for an aggregation account.
    # @param aggregation_account_balance aggregation_account_balance
    # @param aggregation_account_balance_id UUID aggregation_account_balance_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountBalance]
    def update_aggregation_account_balance_using_put(aggregation_account_balance, aggregation_account_balance_id, opts = {})
      data, _status_code, _headers = update_aggregation_account_balance_using_put_with_http_info(aggregation_account_balance, aggregation_account_balance_id, opts)
      data
    end

    # Update an aggregation account balance
    # Update a balance record for an aggregation account.
    # @param aggregation_account_balance aggregation_account_balance
    # @param aggregation_account_balance_id UUID aggregation_account_balance_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountBalance, Fixnum, Hash)>] AggregationAccountBalance data, response status code and response headers
    def update_aggregation_account_balance_using_put_with_http_info(aggregation_account_balance, aggregation_account_balance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.update_aggregation_account_balance_using_put ...'
      end
      # verify the required parameter 'aggregation_account_balance' is set
      if @api_client.config.client_side_validation && aggregation_account_balance.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance' when calling AggregationAccountApi.update_aggregation_account_balance_using_put"
      end
      # verify the required parameter 'aggregation_account_balance_id' is set
      if @api_client.config.client_side_validation && aggregation_account_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance_id' when calling AggregationAccountApi.update_aggregation_account_balance_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}'.sub('{' + 'aggregation_account_balance_id' + '}', aggregation_account_balance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_balance)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountBalance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#update_aggregation_account_balance_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a bulk aggregation account
    # Update a bulk aggregation account under a client.
    # @param aggregation_account_list aggregationAccountList
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccount>]
    def update_aggregation_account_bulk_using_put(aggregation_account_list, opts = {})
      data, _status_code, _headers = update_aggregation_account_bulk_using_put_with_http_info(aggregation_account_list, opts)
      data
    end

    # Update a bulk aggregation account
    # Update a bulk aggregation account under a client.
    # @param aggregation_account_list aggregationAccountList
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccount>, Fixnum, Hash)>] Array<AggregationAccount> data, response status code and response headers
    def update_aggregation_account_bulk_using_put_with_http_info(aggregation_account_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.update_aggregation_account_bulk_using_put ...'
      end
      # verify the required parameter 'aggregation_account_list' is set
      if @api_client.config.client_side_validation && aggregation_account_list.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_list' when calling AggregationAccountApi.update_aggregation_account_bulk_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/bulk_aggregation_account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_list)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#update_aggregation_account_bulk_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an bulk aggregation account holding
    # Update a bulk holding record for an aggregation account.
    # @param aggregation_account_holding aggregationAccountHolding
    # @param [Hash] opts the optional parameters
    # @return [Array<AggregationAccountHolding>]
    def update_aggregation_account_holding_bulk_using_put(aggregation_account_holding, opts = {})
      data, _status_code, _headers = update_aggregation_account_holding_bulk_using_put_with_http_info(aggregation_account_holding, opts)
      data
    end

    # Update an bulk aggregation account holding
    # Update a bulk holding record for an aggregation account.
    # @param aggregation_account_holding aggregationAccountHolding
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AggregationAccountHolding>, Fixnum, Hash)>] Array<AggregationAccountHolding> data, response status code and response headers
    def update_aggregation_account_holding_bulk_using_put_with_http_info(aggregation_account_holding, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.update_aggregation_account_holding_bulk_using_put ...'
      end
      # verify the required parameter 'aggregation_account_holding' is set
      if @api_client.config.client_side_validation && aggregation_account_holding.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding' when calling AggregationAccountApi.update_aggregation_account_holding_bulk_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/bulk_aggregation_account_holding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_holding)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AggregationAccountHolding>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#update_aggregation_account_holding_bulk_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account holding
    # Update a holding record for an aggregation account.
    # @param aggregation_account_holding aggregation_account_holding
    # @param aggregation_account_holding_id UUID aggregation_account_holding_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountHolding]
    def update_aggregation_account_holding_using_put(aggregation_account_holding, aggregation_account_holding_id, opts = {})
      data, _status_code, _headers = update_aggregation_account_holding_using_put_with_http_info(aggregation_account_holding, aggregation_account_holding_id, opts)
      data
    end

    # Update an aggregation account holding
    # Update a holding record for an aggregation account.
    # @param aggregation_account_holding aggregation_account_holding
    # @param aggregation_account_holding_id UUID aggregation_account_holding_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountHolding, Fixnum, Hash)>] AggregationAccountHolding data, response status code and response headers
    def update_aggregation_account_holding_using_put_with_http_info(aggregation_account_holding, aggregation_account_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.update_aggregation_account_holding_using_put ...'
      end
      # verify the required parameter 'aggregation_account_holding' is set
      if @api_client.config.client_side_validation && aggregation_account_holding.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding' when calling AggregationAccountApi.update_aggregation_account_holding_using_put"
      end
      # verify the required parameter 'aggregation_account_holding_id' is set
      if @api_client.config.client_side_validation && aggregation_account_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding_id' when calling AggregationAccountApi.update_aggregation_account_holding_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}'.sub('{' + 'aggregation_account_holding_id' + '}', aggregation_account_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_holding)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountHolding')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#update_aggregation_account_holding_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account transaction
    # Update a transaction record for an aggregation account.
    # @param aggregation_account_transaction aggregation_account_transaction
    # @param aggregation_account_transaction_id UUID aggregation_account_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccountTransaction]
    def update_aggregation_account_transaction_using_put(aggregation_account_transaction, aggregation_account_transaction_id, opts = {})
      data, _status_code, _headers = update_aggregation_account_transaction_using_put_with_http_info(aggregation_account_transaction, aggregation_account_transaction_id, opts)
      data
    end

    # Update an aggregation account transaction
    # Update a transaction record for an aggregation account.
    # @param aggregation_account_transaction aggregation_account_transaction
    # @param aggregation_account_transaction_id UUID aggregation_account_transaction_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccountTransaction, Fixnum, Hash)>] AggregationAccountTransaction data, response status code and response headers
    def update_aggregation_account_transaction_using_put_with_http_info(aggregation_account_transaction, aggregation_account_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.update_aggregation_account_transaction_using_put ...'
      end
      # verify the required parameter 'aggregation_account_transaction' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction' when calling AggregationAccountApi.update_aggregation_account_transaction_using_put"
      end
      # verify the required parameter 'aggregation_account_transaction_id' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction_id' when calling AggregationAccountApi.update_aggregation_account_transaction_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}'.sub('{' + 'aggregation_account_transaction_id' + '}', aggregation_account_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account_transaction)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccountTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#update_aggregation_account_transaction_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account
    # Update the information for an aggregation account.
    # @param aggregation_account aggregation_account
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [AggregationAccount]
    def update_aggregation_account_using_put(aggregation_account, aggregation_account_id, opts = {})
      data, _status_code, _headers = update_aggregation_account_using_put_with_http_info(aggregation_account, aggregation_account_id, opts)
      data
    end

    # Update an aggregation account
    # Update the information for an aggregation account.
    # @param aggregation_account aggregation_account
    # @param aggregation_account_id UUID aggregation_account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregationAccount, Fixnum, Hash)>] AggregationAccount data, response status code and response headers
    def update_aggregation_account_using_put_with_http_info(aggregation_account, aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AggregationAccountApi.update_aggregation_account_using_put ...'
      end
      # verify the required parameter 'aggregation_account' is set
      if @api_client.config.client_side_validation && aggregation_account.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account' when calling AggregationAccountApi.update_aggregation_account_using_put"
      end
      # verify the required parameter 'aggregation_account_id' is set
      if @api_client.config.client_side_validation && aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id' when calling AggregationAccountApi.update_aggregation_account_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account/{aggregation_account_id}'.sub('{' + 'aggregation_account_id' + '}', aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(aggregation_account)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AggregationAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AggregationAccountApi#update_aggregation_account_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
