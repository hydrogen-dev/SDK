/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Document Object
    /// </summary>
    [DataContract]
    public partial class Document :  IEquatable<Document>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Document() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Document" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="businessId">businessId.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="countryOfIssue">country_of_issue.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="docFile">doc_file.</param>
        /// <param name="docImageBack">doc_image_back.</param>
        /// <param name="docImageFront">doc_image_front.</param>
        /// <param name="docName">doc_name (required).</param>
        /// <param name="docNumber">doc_number.</param>
        /// <param name="docSize">doc_size.</param>
        /// <param name="docType">doc_type.</param>
        /// <param name="expiryDate">expiry_date.</param>
        /// <param name="id">id.</param>
        /// <param name="isActive">is_active.</param>
        /// <param name="isSensitive">is_sensitive.</param>
        /// <param name="isVerified">is_verified.</param>
        /// <param name="issueDate">issue_date.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="stateOfIssue">state_of_issue.</param>
        /// <param name="updateDate">updateDate.</param>
        /// <param name="urlPath">url_path.</param>
        public Document(Guid? accountId = default(Guid?), Guid? businessId = default(Guid?), Guid? clientId = default(Guid?), string countryOfIssue = default(string), DateTime? createDate = default(DateTime?), string docFile = default(string), string docImageBack = default(string), string docImageFront = default(string), string docName = default(string), string docNumber = default(string), long? docSize = default(long?), string docType = default(string), DateTime? expiryDate = default(DateTime?), Guid? id = default(Guid?), bool? isActive = default(bool?), bool? isSensitive = default(bool?), bool? isVerified = default(bool?), DateTime? issueDate = default(DateTime?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string secondaryId = default(string), string stateOfIssue = default(string), DateTime? updateDate = default(DateTime?), string urlPath = default(string))
        {
            // to ensure "docName" is required (not null)
            if (docName == null)
            {
                throw new InvalidDataException("docName is a required property for Document and cannot be null");
            }
            else
            {
                this.DocName = docName;
            }
            this.AccountId = accountId;
            this.BusinessId = businessId;
            this.ClientId = clientId;
            this.CountryOfIssue = countryOfIssue;
            this.CreateDate = createDate;
            this.DocFile = docFile;
            this.DocImageBack = docImageBack;
            this.DocImageFront = docImageFront;
            this.DocNumber = docNumber;
            this.DocSize = docSize;
            this.DocType = docType;
            this.ExpiryDate = expiryDate;
            this.Id = id;
            this.IsActive = isActive;
            this.IsSensitive = isSensitive;
            this.IsVerified = isVerified;
            this.IssueDate = issueDate;
            this.Metadata = metadata;
            this.SecondaryId = secondaryId;
            this.StateOfIssue = stateOfIssue;
            this.UpdateDate = updateDate;
            this.UrlPath = urlPath;
        }
        
        /// <summary>
        /// accountId
        /// </summary>
        /// <value>accountId</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// businessId
        /// </summary>
        /// <value>businessId</value>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// country_of_issue
        /// </summary>
        /// <value>country_of_issue</value>
        [DataMember(Name="country_of_issue", EmitDefaultValue=false)]
        public string CountryOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// doc_file
        /// </summary>
        /// <value>doc_file</value>
        [DataMember(Name="doc_file", EmitDefaultValue=false)]
        public string DocFile { get; set; }

        /// <summary>
        /// doc_image_back
        /// </summary>
        /// <value>doc_image_back</value>
        [DataMember(Name="doc_image_back", EmitDefaultValue=false)]
        public string DocImageBack { get; set; }

        /// <summary>
        /// doc_image_front
        /// </summary>
        /// <value>doc_image_front</value>
        [DataMember(Name="doc_image_front", EmitDefaultValue=false)]
        public string DocImageFront { get; set; }

        /// <summary>
        /// doc_name
        /// </summary>
        /// <value>doc_name</value>
        [DataMember(Name="doc_name", EmitDefaultValue=false)]
        public string DocName { get; set; }

        /// <summary>
        /// doc_number
        /// </summary>
        /// <value>doc_number</value>
        [DataMember(Name="doc_number", EmitDefaultValue=false)]
        public string DocNumber { get; set; }

        /// <summary>
        /// doc_size
        /// </summary>
        /// <value>doc_size</value>
        [DataMember(Name="doc_size", EmitDefaultValue=false)]
        public long? DocSize { get; set; }

        /// <summary>
        /// doc_type
        /// </summary>
        /// <value>doc_type</value>
        [DataMember(Name="doc_type", EmitDefaultValue=false)]
        public string DocType { get; set; }

        /// <summary>
        /// expiry_date
        /// </summary>
        /// <value>expiry_date</value>
        [DataMember(Name="expiry_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// is_active
        /// </summary>
        /// <value>is_active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// is_sensitive
        /// </summary>
        /// <value>is_sensitive</value>
        [DataMember(Name="is_sensitive", EmitDefaultValue=false)]
        public bool? IsSensitive { get; set; }

        /// <summary>
        /// is_verified
        /// </summary>
        /// <value>is_verified</value>
        [DataMember(Name="is_verified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// issue_date
        /// </summary>
        /// <value>issue_date</value>
        [DataMember(Name="issue_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// metadata
        /// </summary>
        /// <value>metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// state_of_issue
        /// </summary>
        /// <value>state_of_issue</value>
        [DataMember(Name="state_of_issue", EmitDefaultValue=false)]
        public string StateOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// url_path
        /// </summary>
        /// <value>url_path</value>
        [DataMember(Name="url_path", EmitDefaultValue=false)]
        public string UrlPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CountryOfIssue: ").Append(CountryOfIssue).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  DocFile: ").Append(DocFile).Append("\n");
            sb.Append("  DocImageBack: ").Append(DocImageBack).Append("\n");
            sb.Append("  DocImageFront: ").Append(DocImageFront).Append("\n");
            sb.Append("  DocName: ").Append(DocName).Append("\n");
            sb.Append("  DocNumber: ").Append(DocNumber).Append("\n");
            sb.Append("  DocSize: ").Append(DocSize).Append("\n");
            sb.Append("  DocType: ").Append(DocType).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsSensitive: ").Append(IsSensitive).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  StateOfIssue: ").Append(StateOfIssue).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("  UrlPath: ").Append(UrlPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Document);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="input">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CountryOfIssue == input.CountryOfIssue ||
                    (this.CountryOfIssue != null &&
                    this.CountryOfIssue.Equals(input.CountryOfIssue))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.DocFile == input.DocFile ||
                    (this.DocFile != null &&
                    this.DocFile.Equals(input.DocFile))
                ) && 
                (
                    this.DocImageBack == input.DocImageBack ||
                    (this.DocImageBack != null &&
                    this.DocImageBack.Equals(input.DocImageBack))
                ) && 
                (
                    this.DocImageFront == input.DocImageFront ||
                    (this.DocImageFront != null &&
                    this.DocImageFront.Equals(input.DocImageFront))
                ) && 
                (
                    this.DocName == input.DocName ||
                    (this.DocName != null &&
                    this.DocName.Equals(input.DocName))
                ) && 
                (
                    this.DocNumber == input.DocNumber ||
                    (this.DocNumber != null &&
                    this.DocNumber.Equals(input.DocNumber))
                ) && 
                (
                    this.DocSize == input.DocSize ||
                    (this.DocSize != null &&
                    this.DocSize.Equals(input.DocSize))
                ) && 
                (
                    this.DocType == input.DocType ||
                    (this.DocType != null &&
                    this.DocType.Equals(input.DocType))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsSensitive == input.IsSensitive ||
                    (this.IsSensitive != null &&
                    this.IsSensitive.Equals(input.IsSensitive))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.IssueDate == input.IssueDate ||
                    (this.IssueDate != null &&
                    this.IssueDate.Equals(input.IssueDate))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.StateOfIssue == input.StateOfIssue ||
                    (this.StateOfIssue != null &&
                    this.StateOfIssue.Equals(input.StateOfIssue))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                ) && 
                (
                    this.UrlPath == input.UrlPath ||
                    (this.UrlPath != null &&
                    this.UrlPath.Equals(input.UrlPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.CountryOfIssue != null)
                    hashCode = hashCode * 59 + this.CountryOfIssue.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.DocFile != null)
                    hashCode = hashCode * 59 + this.DocFile.GetHashCode();
                if (this.DocImageBack != null)
                    hashCode = hashCode * 59 + this.DocImageBack.GetHashCode();
                if (this.DocImageFront != null)
                    hashCode = hashCode * 59 + this.DocImageFront.GetHashCode();
                if (this.DocName != null)
                    hashCode = hashCode * 59 + this.DocName.GetHashCode();
                if (this.DocNumber != null)
                    hashCode = hashCode * 59 + this.DocNumber.GetHashCode();
                if (this.DocSize != null)
                    hashCode = hashCode * 59 + this.DocSize.GetHashCode();
                if (this.DocType != null)
                    hashCode = hashCode * 59 + this.DocType.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsSensitive != null)
                    hashCode = hashCode * 59 + this.IsSensitive.GetHashCode();
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.IssueDate != null)
                    hashCode = hashCode * 59 + this.IssueDate.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.StateOfIssue != null)
                    hashCode = hashCode * 59 + this.StateOfIssue.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                if (this.UrlPath != null)
                    hashCode = hashCode * 59 + this.UrlPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
