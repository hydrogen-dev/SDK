/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk orders for an account
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> CreateAccountOrderBulkUsingPost (Guid? accountId, TokenDateRequest req);

        /// <summary>
        /// Bulk orders for an account
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> CreateAccountOrderBulkUsingPostWithHttpInfo (Guid? accountId, TokenDateRequest req);
        /// <summary>
        /// Create buy-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreateAccountOrderBuyOnlyUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create buy-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreateAccountOrderBuyOnlyUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreateAccountOrderRebalanceUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreateAccountOrderRebalanceUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create account reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>OrderReconcileReturnObject</returns>
        OrderReconcileReturnObject CreateAccountOrderReconciliation (Guid? accountId, OrderReconcileRequest req);

        /// <summary>
        /// Create account reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of OrderReconcileReturnObject</returns>
        ApiResponse<OrderReconcileReturnObject> CreateAccountOrderReconciliationWithHttpInfo (Guid? accountId, OrderReconcileRequest req);
        /// <summary>
        /// Sell all account order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreateAccountOrderSellAllUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Sell all account order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreateAccountOrderSellAllUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create sell-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreateAccountOrderSellOnlyUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create sell-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreateAccountOrderSellOnlyUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Bulk orders for a client
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for a client
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> CreateClientOrderBulkUsingPost (Guid? clientId, TokenDateRequest req);

        /// <summary>
        /// Bulk orders for a client
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for a client
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> CreateClientOrderBulkUsingPostWithHttpInfo (Guid? clientId, TokenDateRequest req);
        /// <summary>
        /// Bulk orders for your firm
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> CreateOrderBulkUsingPost (TokenDateRequest req);

        /// <summary>
        /// Bulk orders for your firm
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> CreateOrderBulkUsingPostWithHttpInfo (TokenDateRequest req);
        /// <summary>
        /// Create an order status
        /// </summary>
        /// <remarks>
        /// Create an order status for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>OrderStatus</returns>
        OrderStatus CreateOrderStatusUsingPost (OrderStatus orderStatusRequest);

        /// <summary>
        /// Create an order status
        /// </summary>
        /// <remarks>
        /// Create an order status for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>ApiResponse of OrderStatus</returns>
        ApiResponse<OrderStatus> CreateOrderStatusUsingPostWithHttpInfo (OrderStatus orderStatusRequest);
        /// <summary>
        /// Create an order tracking record
        /// </summary>
        /// <remarks>
        /// Create a new order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>OrderTrack</returns>
        OrderTrack CreateOrderTrackUsingPost (OrderTrack orderTrackRequest);

        /// <summary>
        /// Create an order tracking record
        /// </summary>
        /// <remarks>
        /// Create a new order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>ApiResponse of OrderTrack</returns>
        ApiResponse<OrderTrack> CreateOrderTrackUsingPostWithHttpInfo (OrderTrack orderTrackRequest);
        /// <summary>
        /// Create an order record
        /// </summary>
        /// <remarks>
        /// Create an order record defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>Order</returns>
        Order CreateOrderUsingPost (Order orderInfoRequest);

        /// <summary>
        /// Create an order record
        /// </summary>
        /// <remarks>
        /// Create an order record defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> CreateOrderUsingPostWithHttpInfo (Order orderInfoRequest);
        /// <summary>
        /// Create buy-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreatePortfolioOrderBuyOnlyUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create buy-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreatePortfolioOrderBuyOnlyUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreatePortfolioOrderRebalanceUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreatePortfolioOrderRebalanceUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create portfolio reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>OrderReconcileReturnObject</returns>
        OrderReconcileReturnObject CreatePortfolioOrderReconciliation (Guid? portfolioId, OrderReconcileRequest req);

        /// <summary>
        /// Create portfolio reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of OrderReconcileReturnObject</returns>
        ApiResponse<OrderReconcileReturnObject> CreatePortfolioOrderReconciliationWithHttpInfo (Guid? portfolioId, OrderReconcileRequest req);
        /// <summary>
        /// Sell all portfolio order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreatePortfolioOrderSellAllUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Sell all portfolio order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreatePortfolioOrderSellAllUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create sell-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        List<OrderVoClone> CreatePortfolioOrderSellOnlyUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create sell-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        ApiResponse<List<OrderVoClone>> CreatePortfolioOrderSellOnlyUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Delete an order status
        /// </summary>
        /// <remarks>
        /// Permanently delete an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns></returns>
        void DeleteOrderStatusUsingDelete (Guid? orderStatusId);

        /// <summary>
        /// Delete an order status
        /// </summary>
        /// <remarks>
        /// Permanently delete an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderStatusUsingDeleteWithHttpInfo (Guid? orderStatusId);
        /// <summary>
        /// Delete an order tracking record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns></returns>
        void DeleteOrderTrackUsingDelete (Guid? orderTrackId);

        /// <summary>
        /// Delete an order tracking record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderTrackUsingDeleteWithHttpInfo (Guid? orderTrackId);
        /// <summary>
        /// Delete an order record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns></returns>
        void DeleteOrderUsingDelete (Guid? orderId);

        /// <summary>
        /// Delete an order record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderUsingDeleteWithHttpInfo (Guid? orderId);
        /// <summary>
        /// List all order records
        /// </summary>
        /// <remarks>
        /// Get the information for all order records defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrder</returns>
        PageOrder GetOrderAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all order records
        /// </summary>
        /// <remarks>
        /// Get the information for all order records defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrder</returns>
        ApiResponse<PageOrder> GetOrderAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all bulk orders
        /// </summary>
        /// <remarks>
        /// Get the information for all bulk order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrderBulk</returns>
        PageOrderBulk GetOrderBulkAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all bulk orders
        /// </summary>
        /// <remarks>
        /// Get the information for all bulk order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrderBulk</returns>
        ApiResponse<PageOrderBulk> GetOrderBulkAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all order statuses
        /// </summary>
        /// <remarks>
        /// Get the information for all order statuses defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrderStatus</returns>
        PageOrderStatus GetOrderStatusAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all order statuses
        /// </summary>
        /// <remarks>
        /// Get the information for all order statuses defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrderStatus</returns>
        ApiResponse<PageOrderStatus> GetOrderStatusAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an order status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>OrderStatus</returns>
        OrderStatus GetOrderStatusUsingGet (Guid? orderStatusId);

        /// <summary>
        /// Retrieve an order status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>ApiResponse of OrderStatus</returns>
        ApiResponse<OrderStatus> GetOrderStatusUsingGetWithHttpInfo (Guid? orderStatusId);
        /// <summary>
        /// List all order tracking records
        /// </summary>
        /// <remarks>
        /// Get the information for all order tracking record for all order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrderTrack</returns>
        PageOrderTrack GetOrderTrackAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all order tracking records
        /// </summary>
        /// <remarks>
        /// Get the information for all order tracking record for all order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrderTrack</returns>
        ApiResponse<PageOrderTrack> GetOrderTrackAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an order tracking record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>OrderTrack</returns>
        OrderTrack GetOrderTrackUsingGet (Guid? orderTrackId);

        /// <summary>
        /// Retrieve an order tracking record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>ApiResponse of OrderTrack</returns>
        ApiResponse<OrderTrack> GetOrderTrackUsingGetWithHttpInfo (Guid? orderTrackId);
        /// <summary>
        /// Retrieve an order record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Order</returns>
        Order GetOrderUsingGet (Guid? orderId);

        /// <summary>
        /// Retrieve an order record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> GetOrderUsingGetWithHttpInfo (Guid? orderId);
        /// <summary>
        /// Update an order status
        /// </summary>
        /// <remarks>
        /// Update the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>OrderStatus</returns>
        OrderStatus UpdateOrderStatusUsingPut (Object orderStatus, Guid? orderStatusId);

        /// <summary>
        /// Update an order status
        /// </summary>
        /// <remarks>
        /// Update the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>ApiResponse of OrderStatus</returns>
        ApiResponse<OrderStatus> UpdateOrderStatusUsingPutWithHttpInfo (Object orderStatus, Guid? orderStatusId);
        /// <summary>
        /// Update an order tracking record
        /// </summary>
        /// <remarks>
        /// Update the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>OrderTrack</returns>
        OrderTrack UpdateOrderTrackUsingPut (Object orderTrack, Guid? orderTrackId);

        /// <summary>
        /// Update an order tracking record
        /// </summary>
        /// <remarks>
        /// Update the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>ApiResponse of OrderTrack</returns>
        ApiResponse<OrderTrack> UpdateOrderTrackUsingPutWithHttpInfo (Object orderTrack, Guid? orderTrackId);
        /// <summary>
        /// Update an order record
        /// </summary>
        /// <remarks>
        /// Update the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Order</returns>
        Order UpdateOrderUsingPut (Object order, Guid? orderId);

        /// <summary>
        /// Update an order record
        /// </summary>
        /// <remarks>
        /// Update the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> UpdateOrderUsingPutWithHttpInfo (Object order, Guid? orderId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bulk orders for an account
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> CreateAccountOrderBulkUsingPostAsync (Guid? accountId, TokenDateRequest req);

        /// <summary>
        /// Bulk orders for an account
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> CreateAccountOrderBulkUsingPostAsyncWithHttpInfo (Guid? accountId, TokenDateRequest req);
        /// <summary>
        /// Create buy-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderBuyOnlyUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create buy-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderBuyOnlyUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderRebalanceUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderRebalanceUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create account reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of OrderReconcileReturnObject</returns>
        System.Threading.Tasks.Task<OrderReconcileReturnObject> CreateAccountOrderReconciliationAsync (Guid? accountId, OrderReconcileRequest req);

        /// <summary>
        /// Create account reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (OrderReconcileReturnObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderReconcileReturnObject>> CreateAccountOrderReconciliationAsyncWithHttpInfo (Guid? accountId, OrderReconcileRequest req);
        /// <summary>
        /// Sell all account order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderSellAllUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Sell all account order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderSellAllUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create sell-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderSellOnlyUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create sell-only account rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderSellOnlyUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Bulk orders for a client
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for a client
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> CreateClientOrderBulkUsingPostAsync (Guid? clientId, TokenDateRequest req);

        /// <summary>
        /// Bulk orders for a client
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for a client
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> CreateClientOrderBulkUsingPostAsyncWithHttpInfo (Guid? clientId, TokenDateRequest req);
        /// <summary>
        /// Bulk orders for your firm
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> CreateOrderBulkUsingPostAsync (TokenDateRequest req);

        /// <summary>
        /// Bulk orders for your firm
        /// </summary>
        /// <remarks>
        /// Aggregates all orders on a given date for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> CreateOrderBulkUsingPostAsyncWithHttpInfo (TokenDateRequest req);
        /// <summary>
        /// Create an order status
        /// </summary>
        /// <remarks>
        /// Create an order status for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>Task of OrderStatus</returns>
        System.Threading.Tasks.Task<OrderStatus> CreateOrderStatusUsingPostAsync (OrderStatus orderStatusRequest);

        /// <summary>
        /// Create an order status
        /// </summary>
        /// <remarks>
        /// Create an order status for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>Task of ApiResponse (OrderStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderStatus>> CreateOrderStatusUsingPostAsyncWithHttpInfo (OrderStatus orderStatusRequest);
        /// <summary>
        /// Create an order tracking record
        /// </summary>
        /// <remarks>
        /// Create a new order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>Task of OrderTrack</returns>
        System.Threading.Tasks.Task<OrderTrack> CreateOrderTrackUsingPostAsync (OrderTrack orderTrackRequest);

        /// <summary>
        /// Create an order tracking record
        /// </summary>
        /// <remarks>
        /// Create a new order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>Task of ApiResponse (OrderTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderTrack>> CreateOrderTrackUsingPostAsyncWithHttpInfo (OrderTrack orderTrackRequest);
        /// <summary>
        /// Create an order record
        /// </summary>
        /// <remarks>
        /// Create an order record defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> CreateOrderUsingPostAsync (Order orderInfoRequest);

        /// <summary>
        /// Create an order record
        /// </summary>
        /// <remarks>
        /// Create an order record defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> CreateOrderUsingPostAsyncWithHttpInfo (Order orderInfoRequest);
        /// <summary>
        /// Create buy-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderBuyOnlyUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create buy-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderBuyOnlyUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderRebalanceUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderRebalanceUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create portfolio reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of OrderReconcileReturnObject</returns>
        System.Threading.Tasks.Task<OrderReconcileReturnObject> CreatePortfolioOrderReconciliationAsync (Guid? portfolioId, OrderReconcileRequest req);

        /// <summary>
        /// Create portfolio reconciliation order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (OrderReconcileReturnObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderReconcileReturnObject>> CreatePortfolioOrderReconciliationAsyncWithHttpInfo (Guid? portfolioId, OrderReconcileRequest req);
        /// <summary>
        /// Sell all portfolio order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderSellAllUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Sell all portfolio order
        /// </summary>
        /// <remarks>
        /// Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderSellAllUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Create sell-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderSellOnlyUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req);

        /// <summary>
        /// Create sell-only portfolio rebalance orders
        /// </summary>
        /// <remarks>
        /// Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderSellOnlyUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req);
        /// <summary>
        /// Delete an order status
        /// </summary>
        /// <remarks>
        /// Permanently delete an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderStatusUsingDeleteAsync (Guid? orderStatusId);

        /// <summary>
        /// Delete an order status
        /// </summary>
        /// <remarks>
        /// Permanently delete an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderStatusUsingDeleteAsyncWithHttpInfo (Guid? orderStatusId);
        /// <summary>
        /// Delete an order tracking record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderTrackUsingDeleteAsync (Guid? orderTrackId);

        /// <summary>
        /// Delete an order tracking record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderTrackUsingDeleteAsyncWithHttpInfo (Guid? orderTrackId);
        /// <summary>
        /// Delete an order record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderUsingDeleteAsync (Guid? orderId);

        /// <summary>
        /// Delete an order record
        /// </summary>
        /// <remarks>
        /// Permanently delete an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderUsingDeleteAsyncWithHttpInfo (Guid? orderId);
        /// <summary>
        /// List all order records
        /// </summary>
        /// <remarks>
        /// Get the information for all order records defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrder</returns>
        System.Threading.Tasks.Task<PageOrder> GetOrderAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all order records
        /// </summary>
        /// <remarks>
        /// Get the information for all order records defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageOrder>> GetOrderAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all bulk orders
        /// </summary>
        /// <remarks>
        /// Get the information for all bulk order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrderBulk</returns>
        System.Threading.Tasks.Task<PageOrderBulk> GetOrderBulkAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all bulk orders
        /// </summary>
        /// <remarks>
        /// Get the information for all bulk order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrderBulk)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageOrderBulk>> GetOrderBulkAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all order statuses
        /// </summary>
        /// <remarks>
        /// Get the information for all order statuses defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrderStatus</returns>
        System.Threading.Tasks.Task<PageOrderStatus> GetOrderStatusAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all order statuses
        /// </summary>
        /// <remarks>
        /// Get the information for all order statuses defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrderStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageOrderStatus>> GetOrderStatusAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an order status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of OrderStatus</returns>
        System.Threading.Tasks.Task<OrderStatus> GetOrderStatusUsingGetAsync (Guid? orderStatusId);

        /// <summary>
        /// Retrieve an order status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of ApiResponse (OrderStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderStatus>> GetOrderStatusUsingGetAsyncWithHttpInfo (Guid? orderStatusId);
        /// <summary>
        /// List all order tracking records
        /// </summary>
        /// <remarks>
        /// Get the information for all order tracking record for all order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrderTrack</returns>
        System.Threading.Tasks.Task<PageOrderTrack> GetOrderTrackAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all order tracking records
        /// </summary>
        /// <remarks>
        /// Get the information for all order tracking record for all order records.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrderTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageOrderTrack>> GetOrderTrackAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an order tracking record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of OrderTrack</returns>
        System.Threading.Tasks.Task<OrderTrack> GetOrderTrackUsingGetAsync (Guid? orderTrackId);

        /// <summary>
        /// Retrieve an order tracking record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of ApiResponse (OrderTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderTrack>> GetOrderTrackUsingGetAsyncWithHttpInfo (Guid? orderTrackId);
        /// <summary>
        /// Retrieve an order record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> GetOrderUsingGetAsync (Guid? orderId);

        /// <summary>
        /// Retrieve an order record
        /// </summary>
        /// <remarks>
        /// Retrieve the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderUsingGetAsyncWithHttpInfo (Guid? orderId);
        /// <summary>
        /// Update an order status
        /// </summary>
        /// <remarks>
        /// Update the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of OrderStatus</returns>
        System.Threading.Tasks.Task<OrderStatus> UpdateOrderStatusUsingPutAsync (Object orderStatus, Guid? orderStatusId);

        /// <summary>
        /// Update an order status
        /// </summary>
        /// <remarks>
        /// Update the information for an order status defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of ApiResponse (OrderStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderStatus>> UpdateOrderStatusUsingPutAsyncWithHttpInfo (Object orderStatus, Guid? orderStatusId);
        /// <summary>
        /// Update an order tracking record
        /// </summary>
        /// <remarks>
        /// Update the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of OrderTrack</returns>
        System.Threading.Tasks.Task<OrderTrack> UpdateOrderTrackUsingPutAsync (Object orderTrack, Guid? orderTrackId);

        /// <summary>
        /// Update an order tracking record
        /// </summary>
        /// <remarks>
        /// Update the information for an order tracking record for an order.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of ApiResponse (OrderTrack)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderTrack>> UpdateOrderTrackUsingPutAsyncWithHttpInfo (Object orderTrack, Guid? orderTrackId);
        /// <summary>
        /// Update an order record
        /// </summary>
        /// <remarks>
        /// Update the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> UpdateOrderUsingPutAsync (Object order, Guid? orderId);

        /// <summary>
        /// Update an order record
        /// </summary>
        /// <remarks>
        /// Update the information for an order record.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> UpdateOrderUsingPutAsyncWithHttpInfo (Object order, Guid? orderId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrderApi : IOrderApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrderApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bulk orders for an account Aggregates all orders on a given date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> CreateAccountOrderBulkUsingPost (Guid? accountId, TokenDateRequest req)
        {
             ApiResponse<List<Order>> localVarResponse = CreateAccountOrderBulkUsingPostWithHttpInfo(accountId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk orders for an account Aggregates all orders on a given date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > CreateAccountOrderBulkUsingPostWithHttpInfo (Guid? accountId, TokenDateRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderBulkUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderBulkUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Bulk orders for an account Aggregates all orders on a given date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> CreateAccountOrderBulkUsingPostAsync (Guid? accountId, TokenDateRequest req)
        {
             ApiResponse<List<Order>> localVarResponse = await CreateAccountOrderBulkUsingPostAsyncWithHttpInfo(accountId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk orders for an account Aggregates all orders on a given date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> CreateAccountOrderBulkUsingPostAsyncWithHttpInfo (Guid? accountId, TokenDateRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderBulkUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderBulkUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Create buy-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreateAccountOrderBuyOnlyUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreateAccountOrderBuyOnlyUsingPostWithHttpInfo(accountId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create buy-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreateAccountOrderBuyOnlyUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderBuyOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderBuyOnlyUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_buy_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderBuyOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create buy-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderBuyOnlyUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreateAccountOrderBuyOnlyUsingPostAsyncWithHttpInfo(accountId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create buy-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderBuyOnlyUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderBuyOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderBuyOnlyUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_buy_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderBuyOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreateAccountOrderRebalanceUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreateAccountOrderRebalanceUsingPostWithHttpInfo(accountId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreateAccountOrderRebalanceUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderRebalanceUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderRebalanceUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_rebalance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderRebalanceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderRebalanceUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreateAccountOrderRebalanceUsingPostAsyncWithHttpInfo(accountId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderRebalanceUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderRebalanceUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderRebalanceUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_rebalance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderRebalanceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create account reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>OrderReconcileReturnObject</returns>
        public OrderReconcileReturnObject CreateAccountOrderReconciliation (Guid? accountId, OrderReconcileRequest req)
        {
             ApiResponse<OrderReconcileReturnObject> localVarResponse = CreateAccountOrderReconciliationWithHttpInfo(accountId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create account reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of OrderReconcileReturnObject</returns>
        public ApiResponse< OrderReconcileReturnObject > CreateAccountOrderReconciliationWithHttpInfo (Guid? accountId, OrderReconcileRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderReconciliation");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderReconciliation");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_reconciliation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderReconciliation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderReconcileReturnObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderReconcileReturnObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderReconcileReturnObject)));
        }

        /// <summary>
        /// Create account reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of OrderReconcileReturnObject</returns>
        public async System.Threading.Tasks.Task<OrderReconcileReturnObject> CreateAccountOrderReconciliationAsync (Guid? accountId, OrderReconcileRequest req)
        {
             ApiResponse<OrderReconcileReturnObject> localVarResponse = await CreateAccountOrderReconciliationAsyncWithHttpInfo(accountId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create account reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (OrderReconcileReturnObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderReconcileReturnObject>> CreateAccountOrderReconciliationAsyncWithHttpInfo (Guid? accountId, OrderReconcileRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderReconciliation");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderReconciliation");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_reconciliation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderReconciliation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderReconcileReturnObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderReconcileReturnObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderReconcileReturnObject)));
        }

        /// <summary>
        /// Sell all account order Create order records necessary to entirely sell all the holdings within an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreateAccountOrderSellAllUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreateAccountOrderSellAllUsingPostWithHttpInfo(accountId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sell all account order Create order records necessary to entirely sell all the holdings within an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreateAccountOrderSellAllUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderSellAllUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderSellAllUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_sell_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderSellAllUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Sell all account order Create order records necessary to entirely sell all the holdings within an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderSellAllUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreateAccountOrderSellAllUsingPostAsyncWithHttpInfo(accountId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sell all account order Create order records necessary to entirely sell all the holdings within an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderSellAllUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderSellAllUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderSellAllUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_sell_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderSellAllUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create sell-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreateAccountOrderSellOnlyUsingPost (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreateAccountOrderSellOnlyUsingPostWithHttpInfo(accountId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create sell-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreateAccountOrderSellOnlyUsingPostWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderSellOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderSellOnlyUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_sell_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderSellOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create sell-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreateAccountOrderSellOnlyUsingPostAsync (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreateAccountOrderSellOnlyUsingPostAsyncWithHttpInfo(accountId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create sell-only account rebalance orders Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreateAccountOrderSellOnlyUsingPostAsyncWithHttpInfo (Guid? accountId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling OrderApi->CreateAccountOrderSellOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateAccountOrderSellOnlyUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/order_sell_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountOrderSellOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Bulk orders for a client Aggregates all orders on a given date for a client
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> CreateClientOrderBulkUsingPost (Guid? clientId, TokenDateRequest req)
        {
             ApiResponse<List<Order>> localVarResponse = CreateClientOrderBulkUsingPostWithHttpInfo(clientId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk orders for a client Aggregates all orders on a given date for a client
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > CreateClientOrderBulkUsingPostWithHttpInfo (Guid? clientId, TokenDateRequest req)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderApi->CreateClientOrderBulkUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateClientOrderBulkUsingPost");

            var localVarPath = "/nucleus/v1/client/{client_id}/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientOrderBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Bulk orders for a client Aggregates all orders on a given date for a client
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> CreateClientOrderBulkUsingPostAsync (Guid? clientId, TokenDateRequest req)
        {
             ApiResponse<List<Order>> localVarResponse = await CreateClientOrderBulkUsingPostAsyncWithHttpInfo(clientId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk orders for a client Aggregates all orders on a given date for a client
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">client_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> CreateClientOrderBulkUsingPostAsyncWithHttpInfo (Guid? clientId, TokenDateRequest req)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling OrderApi->CreateClientOrderBulkUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateClientOrderBulkUsingPost");

            var localVarPath = "/nucleus/v1/client/{client_id}/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientOrderBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Bulk orders for your firm Aggregates all orders on a given date for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> CreateOrderBulkUsingPost (TokenDateRequest req)
        {
             ApiResponse<List<Order>> localVarResponse = CreateOrderBulkUsingPostWithHttpInfo(req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk orders for your firm Aggregates all orders on a given date for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > CreateOrderBulkUsingPostWithHttpInfo (TokenDateRequest req)
        {
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateOrderBulkUsingPost");

            var localVarPath = "/nucleus/v1/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Bulk orders for your firm Aggregates all orders on a given date for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> CreateOrderBulkUsingPostAsync (TokenDateRequest req)
        {
             ApiResponse<List<Order>> localVarResponse = await CreateOrderBulkUsingPostAsyncWithHttpInfo(req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk orders for your firm Aggregates all orders on a given date for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> CreateOrderBulkUsingPostAsyncWithHttpInfo (TokenDateRequest req)
        {
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreateOrderBulkUsingPost");

            var localVarPath = "/nucleus/v1/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
        }

        /// <summary>
        /// Create an order status Create an order status for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>OrderStatus</returns>
        public OrderStatus CreateOrderStatusUsingPost (OrderStatus orderStatusRequest)
        {
             ApiResponse<OrderStatus> localVarResponse = CreateOrderStatusUsingPostWithHttpInfo(orderStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order status Create an order status for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>ApiResponse of OrderStatus</returns>
        public ApiResponse< OrderStatus > CreateOrderStatusUsingPostWithHttpInfo (OrderStatus orderStatusRequest)
        {
            // verify the required parameter 'orderStatusRequest' is set
            if (orderStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusRequest' when calling OrderApi->CreateOrderStatusUsingPost");

            var localVarPath = "/nucleus/v1/order_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusRequest != null && orderStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderStatusUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderStatus)));
        }

        /// <summary>
        /// Create an order status Create an order status for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>Task of OrderStatus</returns>
        public async System.Threading.Tasks.Task<OrderStatus> CreateOrderStatusUsingPostAsync (OrderStatus orderStatusRequest)
        {
             ApiResponse<OrderStatus> localVarResponse = await CreateOrderStatusUsingPostAsyncWithHttpInfo(orderStatusRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an order status Create an order status for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusRequest">orderStatusRequest</param>
        /// <returns>Task of ApiResponse (OrderStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderStatus>> CreateOrderStatusUsingPostAsyncWithHttpInfo (OrderStatus orderStatusRequest)
        {
            // verify the required parameter 'orderStatusRequest' is set
            if (orderStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusRequest' when calling OrderApi->CreateOrderStatusUsingPost");

            var localVarPath = "/nucleus/v1/order_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusRequest != null && orderStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderStatusUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderStatus)));
        }

        /// <summary>
        /// Create an order tracking record Create a new order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>OrderTrack</returns>
        public OrderTrack CreateOrderTrackUsingPost (OrderTrack orderTrackRequest)
        {
             ApiResponse<OrderTrack> localVarResponse = CreateOrderTrackUsingPostWithHttpInfo(orderTrackRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order tracking record Create a new order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>ApiResponse of OrderTrack</returns>
        public ApiResponse< OrderTrack > CreateOrderTrackUsingPostWithHttpInfo (OrderTrack orderTrackRequest)
        {
            // verify the required parameter 'orderTrackRequest' is set
            if (orderTrackRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackRequest' when calling OrderApi->CreateOrderTrackUsingPost");

            var localVarPath = "/nucleus/v1/order_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackRequest != null && orderTrackRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderTrackRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderTrackRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderTrackUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTrack)));
        }

        /// <summary>
        /// Create an order tracking record Create a new order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>Task of OrderTrack</returns>
        public async System.Threading.Tasks.Task<OrderTrack> CreateOrderTrackUsingPostAsync (OrderTrack orderTrackRequest)
        {
             ApiResponse<OrderTrack> localVarResponse = await CreateOrderTrackUsingPostAsyncWithHttpInfo(orderTrackRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an order tracking record Create a new order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackRequest">orderTrackRequest</param>
        /// <returns>Task of ApiResponse (OrderTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderTrack>> CreateOrderTrackUsingPostAsyncWithHttpInfo (OrderTrack orderTrackRequest)
        {
            // verify the required parameter 'orderTrackRequest' is set
            if (orderTrackRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackRequest' when calling OrderApi->CreateOrderTrackUsingPost");

            var localVarPath = "/nucleus/v1/order_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackRequest != null && orderTrackRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderTrackRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderTrackRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderTrackUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTrack)));
        }

        /// <summary>
        /// Create an order record Create an order record defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>Order</returns>
        public Order CreateOrderUsingPost (Order orderInfoRequest)
        {
             ApiResponse<Order> localVarResponse = CreateOrderUsingPostWithHttpInfo(orderInfoRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an order record Create an order record defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > CreateOrderUsingPostWithHttpInfo (Order orderInfoRequest)
        {
            // verify the required parameter 'orderInfoRequest' is set
            if (orderInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderInfoRequest' when calling OrderApi->CreateOrderUsingPost");

            var localVarPath = "/nucleus/v1/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderInfoRequest != null && orderInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Create an order record Create an order record defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> CreateOrderUsingPostAsync (Order orderInfoRequest)
        {
             ApiResponse<Order> localVarResponse = await CreateOrderUsingPostAsyncWithHttpInfo(orderInfoRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an order record Create an order record defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderInfoRequest">orderInfoRequest</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> CreateOrderUsingPostAsyncWithHttpInfo (Order orderInfoRequest)
        {
            // verify the required parameter 'orderInfoRequest' is set
            if (orderInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderInfoRequest' when calling OrderApi->CreateOrderUsingPost");

            var localVarPath = "/nucleus/v1/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderInfoRequest != null && orderInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrderUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Create buy-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreatePortfolioOrderBuyOnlyUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreatePortfolioOrderBuyOnlyUsingPostWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create buy-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreatePortfolioOrderBuyOnlyUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderBuyOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderBuyOnlyUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_buy_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderBuyOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create buy-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderBuyOnlyUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreatePortfolioOrderBuyOnlyUsingPostAsyncWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create buy-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderBuyOnlyUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderBuyOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderBuyOnlyUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_buy_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderBuyOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreatePortfolioOrderRebalanceUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreatePortfolioOrderRebalanceUsingPostWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreatePortfolioOrderRebalanceUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderRebalanceUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderRebalanceUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_rebalance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderRebalanceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderRebalanceUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreatePortfolioOrderRebalanceUsingPostAsyncWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderRebalanceUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderRebalanceUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderRebalanceUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_rebalance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderRebalanceUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create portfolio reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>OrderReconcileReturnObject</returns>
        public OrderReconcileReturnObject CreatePortfolioOrderReconciliation (Guid? portfolioId, OrderReconcileRequest req)
        {
             ApiResponse<OrderReconcileReturnObject> localVarResponse = CreatePortfolioOrderReconciliationWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create portfolio reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of OrderReconcileReturnObject</returns>
        public ApiResponse< OrderReconcileReturnObject > CreatePortfolioOrderReconciliationWithHttpInfo (Guid? portfolioId, OrderReconcileRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderReconciliation");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderReconciliation");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_reconciliation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderReconciliation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderReconcileReturnObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderReconcileReturnObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderReconcileReturnObject)));
        }

        /// <summary>
        /// Create portfolio reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of OrderReconcileReturnObject</returns>
        public async System.Threading.Tasks.Task<OrderReconcileReturnObject> CreatePortfolioOrderReconciliationAsync (Guid? portfolioId, OrderReconcileRequest req)
        {
             ApiResponse<OrderReconcileReturnObject> localVarResponse = await CreatePortfolioOrderReconciliationAsyncWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create portfolio reconciliation order 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (OrderReconcileReturnObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderReconcileReturnObject>> CreatePortfolioOrderReconciliationAsyncWithHttpInfo (Guid? portfolioId, OrderReconcileRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderReconciliation");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderReconciliation");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_reconciliation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderReconciliation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderReconcileReturnObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderReconcileReturnObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderReconcileReturnObject)));
        }

        /// <summary>
        /// Sell all portfolio order Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreatePortfolioOrderSellAllUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreatePortfolioOrderSellAllUsingPostWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sell all portfolio order Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreatePortfolioOrderSellAllUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderSellAllUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderSellAllUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_sell_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderSellAllUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Sell all portfolio order Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderSellAllUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreatePortfolioOrderSellAllUsingPostAsyncWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sell all portfolio order Create order records necessary to entirely sell all the holdings within a portfolio.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderSellAllUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderSellAllUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderSellAllUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_sell_all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderSellAllUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create sell-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>List&lt;OrderVoClone&gt;</returns>
        public List<OrderVoClone> CreatePortfolioOrderSellOnlyUsingPost (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = CreatePortfolioOrderSellOnlyUsingPostWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create sell-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>ApiResponse of List&lt;OrderVoClone&gt;</returns>
        public ApiResponse< List<OrderVoClone> > CreatePortfolioOrderSellOnlyUsingPostWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderSellOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderSellOnlyUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_sell_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderSellOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Create sell-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of List&lt;OrderVoClone&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderVoClone>> CreatePortfolioOrderSellOnlyUsingPostAsync (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
             ApiResponse<List<OrderVoClone>> localVarResponse = await CreatePortfolioOrderSellOnlyUsingPostAsyncWithHttpInfo(portfolioId, req);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create sell-only portfolio rebalance orders Create order records necessary to rebalance a portfolio to the model to which it subscribes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="portfolioId">portfolio_id</param>
        /// <param name="req">req</param>
        /// <returns>Task of ApiResponse (List&lt;OrderVoClone&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderVoClone>>> CreatePortfolioOrderSellOnlyUsingPostAsyncWithHttpInfo (Guid? portfolioId, AccountPortfolioRebalanceRequest req)
        {
            // verify the required parameter 'portfolioId' is set
            if (portfolioId == null)
                throw new ApiException(400, "Missing required parameter 'portfolioId' when calling OrderApi->CreatePortfolioOrderSellOnlyUsingPost");
            // verify the required parameter 'req' is set
            if (req == null)
                throw new ApiException(400, "Missing required parameter 'req' when calling OrderApi->CreatePortfolioOrderSellOnlyUsingPost");

            var localVarPath = "/nucleus/v1/portfolio/{portfolio_id}/order_sell_only";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portfolioId != null) localVarPathParams.Add("portfolio_id", this.Configuration.ApiClient.ParameterToString(portfolioId)); // path parameter
            if (req != null && req.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(req); // http body (model) parameter
            }
            else
            {
                localVarPostBody = req; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePortfolioOrderSellOnlyUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderVoClone>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<OrderVoClone>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderVoClone>)));
        }

        /// <summary>
        /// Delete an order status Permanently delete an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns></returns>
        public void DeleteOrderStatusUsingDelete (Guid? orderStatusId)
        {
             DeleteOrderStatusUsingDeleteWithHttpInfo(orderStatusId);
        }

        /// <summary>
        /// Delete an order status Permanently delete an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderStatusUsingDeleteWithHttpInfo (Guid? orderStatusId)
        {
            // verify the required parameter 'orderStatusId' is set
            if (orderStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusId' when calling OrderApi->DeleteOrderStatusUsingDelete");

            var localVarPath = "/nucleus/v1/order_status/{order_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusId != null) localVarPathParams.Add("order_status_id", this.Configuration.ApiClient.ParameterToString(orderStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderStatusUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an order status Permanently delete an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderStatusUsingDeleteAsync (Guid? orderStatusId)
        {
             await DeleteOrderStatusUsingDeleteAsyncWithHttpInfo(orderStatusId);

        }

        /// <summary>
        /// Delete an order status Permanently delete an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderStatusUsingDeleteAsyncWithHttpInfo (Guid? orderStatusId)
        {
            // verify the required parameter 'orderStatusId' is set
            if (orderStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusId' when calling OrderApi->DeleteOrderStatusUsingDelete");

            var localVarPath = "/nucleus/v1/order_status/{order_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusId != null) localVarPathParams.Add("order_status_id", this.Configuration.ApiClient.ParameterToString(orderStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderStatusUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an order tracking record Permanently delete an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns></returns>
        public void DeleteOrderTrackUsingDelete (Guid? orderTrackId)
        {
             DeleteOrderTrackUsingDeleteWithHttpInfo(orderTrackId);
        }

        /// <summary>
        /// Delete an order tracking record Permanently delete an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderTrackUsingDeleteWithHttpInfo (Guid? orderTrackId)
        {
            // verify the required parameter 'orderTrackId' is set
            if (orderTrackId == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackId' when calling OrderApi->DeleteOrderTrackUsingDelete");

            var localVarPath = "/nucleus/v1/order_track/{order_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackId != null) localVarPathParams.Add("order_track_id", this.Configuration.ApiClient.ParameterToString(orderTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderTrackUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an order tracking record Permanently delete an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderTrackUsingDeleteAsync (Guid? orderTrackId)
        {
             await DeleteOrderTrackUsingDeleteAsyncWithHttpInfo(orderTrackId);

        }

        /// <summary>
        /// Delete an order tracking record Permanently delete an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderTrackUsingDeleteAsyncWithHttpInfo (Guid? orderTrackId)
        {
            // verify the required parameter 'orderTrackId' is set
            if (orderTrackId == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackId' when calling OrderApi->DeleteOrderTrackUsingDelete");

            var localVarPath = "/nucleus/v1/order_track/{order_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackId != null) localVarPathParams.Add("order_track_id", this.Configuration.ApiClient.ParameterToString(orderTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderTrackUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an order record Permanently delete an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns></returns>
        public void DeleteOrderUsingDelete (Guid? orderId)
        {
             DeleteOrderUsingDeleteWithHttpInfo(orderId);
        }

        /// <summary>
        /// Delete an order record Permanently delete an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrderUsingDeleteWithHttpInfo (Guid? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->DeleteOrderUsingDelete");

            var localVarPath = "/nucleus/v1/order/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an order record Permanently delete an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderUsingDeleteAsync (Guid? orderId)
        {
             await DeleteOrderUsingDeleteAsyncWithHttpInfo(orderId);

        }

        /// <summary>
        /// Delete an order record Permanently delete an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderUsingDeleteAsyncWithHttpInfo (Guid? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->DeleteOrderUsingDelete");

            var localVarPath = "/nucleus/v1/order/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrderUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all order records Get the information for all order records defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrder</returns>
        public PageOrder GetOrderAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrder> localVarResponse = GetOrderAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all order records Get the information for all order records defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrder</returns>
        public ApiResponse< PageOrder > GetOrderAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrder)));
        }

        /// <summary>
        /// List all order records Get the information for all order records defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrder</returns>
        public async System.Threading.Tasks.Task<PageOrder> GetOrderAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrder> localVarResponse = await GetOrderAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all order records Get the information for all order records defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageOrder>> GetOrderAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrder)));
        }

        /// <summary>
        /// List all bulk orders Get the information for all bulk order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrderBulk</returns>
        public PageOrderBulk GetOrderBulkAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrderBulk> localVarResponse = GetOrderBulkAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all bulk orders Get the information for all bulk order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrderBulk</returns>
        public ApiResponse< PageOrderBulk > GetOrderBulkAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderBulkAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrderBulk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrderBulk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrderBulk)));
        }

        /// <summary>
        /// List all bulk orders Get the information for all bulk order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrderBulk</returns>
        public async System.Threading.Tasks.Task<PageOrderBulk> GetOrderBulkAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrderBulk> localVarResponse = await GetOrderBulkAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all bulk orders Get the information for all bulk order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to true)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to order_bulk_id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrderBulk)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageOrderBulk>> GetOrderBulkAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order_bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderBulkAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrderBulk>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrderBulk) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrderBulk)));
        }

        /// <summary>
        /// List all order statuses Get the information for all order statuses defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrderStatus</returns>
        public PageOrderStatus GetOrderStatusAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrderStatus> localVarResponse = GetOrderStatusAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all order statuses Get the information for all order statuses defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrderStatus</returns>
        public ApiResponse< PageOrderStatus > GetOrderStatusAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatusAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrderStatus)));
        }

        /// <summary>
        /// List all order statuses Get the information for all order statuses defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrderStatus</returns>
        public async System.Threading.Tasks.Task<PageOrderStatus> GetOrderStatusAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrderStatus> localVarResponse = await GetOrderStatusAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all order statuses Get the information for all order statuses defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrderStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageOrderStatus>> GetOrderStatusAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatusAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrderStatus)));
        }

        /// <summary>
        /// Retrieve an order status Retrieve the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>OrderStatus</returns>
        public OrderStatus GetOrderStatusUsingGet (Guid? orderStatusId)
        {
             ApiResponse<OrderStatus> localVarResponse = GetOrderStatusUsingGetWithHttpInfo(orderStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order status Retrieve the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>ApiResponse of OrderStatus</returns>
        public ApiResponse< OrderStatus > GetOrderStatusUsingGetWithHttpInfo (Guid? orderStatusId)
        {
            // verify the required parameter 'orderStatusId' is set
            if (orderStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusId' when calling OrderApi->GetOrderStatusUsingGet");

            var localVarPath = "/nucleus/v1/order_status/{order_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusId != null) localVarPathParams.Add("order_status_id", this.Configuration.ApiClient.ParameterToString(orderStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderStatus)));
        }

        /// <summary>
        /// Retrieve an order status Retrieve the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of OrderStatus</returns>
        public async System.Threading.Tasks.Task<OrderStatus> GetOrderStatusUsingGetAsync (Guid? orderStatusId)
        {
             ApiResponse<OrderStatus> localVarResponse = await GetOrderStatusUsingGetAsyncWithHttpInfo(orderStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an order status Retrieve the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of ApiResponse (OrderStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderStatus>> GetOrderStatusUsingGetAsyncWithHttpInfo (Guid? orderStatusId)
        {
            // verify the required parameter 'orderStatusId' is set
            if (orderStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusId' when calling OrderApi->GetOrderStatusUsingGet");

            var localVarPath = "/nucleus/v1/order_status/{order_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusId != null) localVarPathParams.Add("order_status_id", this.Configuration.ApiClient.ParameterToString(orderStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderStatus)));
        }

        /// <summary>
        /// List all order tracking records Get the information for all order tracking record for all order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageOrderTrack</returns>
        public PageOrderTrack GetOrderTrackAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrderTrack> localVarResponse = GetOrderTrackAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all order tracking records Get the information for all order tracking record for all order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageOrderTrack</returns>
        public ApiResponse< PageOrderTrack > GetOrderTrackAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderTrackAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrderTrack)));
        }

        /// <summary>
        /// List all order tracking records Get the information for all order tracking record for all order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageOrderTrack</returns>
        public async System.Threading.Tasks.Task<PageOrderTrack> GetOrderTrackAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageOrderTrack> localVarResponse = await GetOrderTrackAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all order tracking records Get the information for all order tracking record for all order records.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageOrderTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageOrderTrack>> GetOrderTrackAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/order_track";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderTrackAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageOrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageOrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageOrderTrack)));
        }

        /// <summary>
        /// Retrieve an order tracking record Retrieve the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>OrderTrack</returns>
        public OrderTrack GetOrderTrackUsingGet (Guid? orderTrackId)
        {
             ApiResponse<OrderTrack> localVarResponse = GetOrderTrackUsingGetWithHttpInfo(orderTrackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order tracking record Retrieve the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>ApiResponse of OrderTrack</returns>
        public ApiResponse< OrderTrack > GetOrderTrackUsingGetWithHttpInfo (Guid? orderTrackId)
        {
            // verify the required parameter 'orderTrackId' is set
            if (orderTrackId == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackId' when calling OrderApi->GetOrderTrackUsingGet");

            var localVarPath = "/nucleus/v1/order_track/{order_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackId != null) localVarPathParams.Add("order_track_id", this.Configuration.ApiClient.ParameterToString(orderTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderTrackUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTrack)));
        }

        /// <summary>
        /// Retrieve an order tracking record Retrieve the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of OrderTrack</returns>
        public async System.Threading.Tasks.Task<OrderTrack> GetOrderTrackUsingGetAsync (Guid? orderTrackId)
        {
             ApiResponse<OrderTrack> localVarResponse = await GetOrderTrackUsingGetAsyncWithHttpInfo(orderTrackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an order tracking record Retrieve the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of ApiResponse (OrderTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderTrack>> GetOrderTrackUsingGetAsyncWithHttpInfo (Guid? orderTrackId)
        {
            // verify the required parameter 'orderTrackId' is set
            if (orderTrackId == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackId' when calling OrderApi->GetOrderTrackUsingGet");

            var localVarPath = "/nucleus/v1/order_track/{order_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackId != null) localVarPathParams.Add("order_track_id", this.Configuration.ApiClient.ParameterToString(orderTrackId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderTrackUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTrack)));
        }

        /// <summary>
        /// Retrieve an order record Retrieve the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Order</returns>
        public Order GetOrderUsingGet (Guid? orderId)
        {
             ApiResponse<Order> localVarResponse = GetOrderUsingGetWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an order record Retrieve the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > GetOrderUsingGetWithHttpInfo (Guid? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrderUsingGet");

            var localVarPath = "/nucleus/v1/order/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Retrieve an order record Retrieve the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> GetOrderUsingGetAsync (Guid? orderId)
        {
             ApiResponse<Order> localVarResponse = await GetOrderUsingGetAsyncWithHttpInfo(orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an order record Retrieve the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> GetOrderUsingGetAsyncWithHttpInfo (Guid? orderId)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->GetOrderUsingGet");

            var localVarPath = "/nucleus/v1/order/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrderUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Update an order status Update the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>OrderStatus</returns>
        public OrderStatus UpdateOrderStatusUsingPut (Object orderStatus, Guid? orderStatusId)
        {
             ApiResponse<OrderStatus> localVarResponse = UpdateOrderStatusUsingPutWithHttpInfo(orderStatus, orderStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an order status Update the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>ApiResponse of OrderStatus</returns>
        public ApiResponse< OrderStatus > UpdateOrderStatusUsingPutWithHttpInfo (Object orderStatus, Guid? orderStatusId)
        {
            // verify the required parameter 'orderStatus' is set
            if (orderStatus == null)
                throw new ApiException(400, "Missing required parameter 'orderStatus' when calling OrderApi->UpdateOrderStatusUsingPut");
            // verify the required parameter 'orderStatusId' is set
            if (orderStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusId' when calling OrderApi->UpdateOrderStatusUsingPut");

            var localVarPath = "/nucleus/v1/order_status/{order_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusId != null) localVarPathParams.Add("order_status_id", this.Configuration.ApiClient.ParameterToString(orderStatusId)); // path parameter
            if (orderStatus != null && orderStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderStatusUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderStatus)));
        }

        /// <summary>
        /// Update an order status Update the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of OrderStatus</returns>
        public async System.Threading.Tasks.Task<OrderStatus> UpdateOrderStatusUsingPutAsync (Object orderStatus, Guid? orderStatusId)
        {
             ApiResponse<OrderStatus> localVarResponse = await UpdateOrderStatusUsingPutAsyncWithHttpInfo(orderStatus, orderStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an order status Update the information for an order status defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderStatus">order_status</param>
        /// <param name="orderStatusId">UUID order_status_id</param>
        /// <returns>Task of ApiResponse (OrderStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderStatus>> UpdateOrderStatusUsingPutAsyncWithHttpInfo (Object orderStatus, Guid? orderStatusId)
        {
            // verify the required parameter 'orderStatus' is set
            if (orderStatus == null)
                throw new ApiException(400, "Missing required parameter 'orderStatus' when calling OrderApi->UpdateOrderStatusUsingPut");
            // verify the required parameter 'orderStatusId' is set
            if (orderStatusId == null)
                throw new ApiException(400, "Missing required parameter 'orderStatusId' when calling OrderApi->UpdateOrderStatusUsingPut");

            var localVarPath = "/nucleus/v1/order_status/{order_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderStatusId != null) localVarPathParams.Add("order_status_id", this.Configuration.ApiClient.ParameterToString(orderStatusId)); // path parameter
            if (orderStatus != null && orderStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderStatusUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderStatus)));
        }

        /// <summary>
        /// Update an order tracking record Update the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>OrderTrack</returns>
        public OrderTrack UpdateOrderTrackUsingPut (Object orderTrack, Guid? orderTrackId)
        {
             ApiResponse<OrderTrack> localVarResponse = UpdateOrderTrackUsingPutWithHttpInfo(orderTrack, orderTrackId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an order tracking record Update the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>ApiResponse of OrderTrack</returns>
        public ApiResponse< OrderTrack > UpdateOrderTrackUsingPutWithHttpInfo (Object orderTrack, Guid? orderTrackId)
        {
            // verify the required parameter 'orderTrack' is set
            if (orderTrack == null)
                throw new ApiException(400, "Missing required parameter 'orderTrack' when calling OrderApi->UpdateOrderTrackUsingPut");
            // verify the required parameter 'orderTrackId' is set
            if (orderTrackId == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackId' when calling OrderApi->UpdateOrderTrackUsingPut");

            var localVarPath = "/nucleus/v1/order_track/{order_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackId != null) localVarPathParams.Add("order_track_id", this.Configuration.ApiClient.ParameterToString(orderTrackId)); // path parameter
            if (orderTrack != null && orderTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderTrackUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTrack)));
        }

        /// <summary>
        /// Update an order tracking record Update the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of OrderTrack</returns>
        public async System.Threading.Tasks.Task<OrderTrack> UpdateOrderTrackUsingPutAsync (Object orderTrack, Guid? orderTrackId)
        {
             ApiResponse<OrderTrack> localVarResponse = await UpdateOrderTrackUsingPutAsyncWithHttpInfo(orderTrack, orderTrackId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an order tracking record Update the information for an order tracking record for an order.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderTrack">order_track</param>
        /// <param name="orderTrackId">UUID order_track_id</param>
        /// <returns>Task of ApiResponse (OrderTrack)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderTrack>> UpdateOrderTrackUsingPutAsyncWithHttpInfo (Object orderTrack, Guid? orderTrackId)
        {
            // verify the required parameter 'orderTrack' is set
            if (orderTrack == null)
                throw new ApiException(400, "Missing required parameter 'orderTrack' when calling OrderApi->UpdateOrderTrackUsingPut");
            // verify the required parameter 'orderTrackId' is set
            if (orderTrackId == null)
                throw new ApiException(400, "Missing required parameter 'orderTrackId' when calling OrderApi->UpdateOrderTrackUsingPut");

            var localVarPath = "/nucleus/v1/order_track/{order_track_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderTrackId != null) localVarPathParams.Add("order_track_id", this.Configuration.ApiClient.ParameterToString(orderTrackId)); // path parameter
            if (orderTrack != null && orderTrack.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderTrack); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderTrack; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderTrackUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderTrack>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OrderTrack) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderTrack)));
        }

        /// <summary>
        /// Update an order record Update the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Order</returns>
        public Order UpdateOrderUsingPut (Object order, Guid? orderId)
        {
             ApiResponse<Order> localVarResponse = UpdateOrderUsingPutWithHttpInfo(order, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an order record Update the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse< Order > UpdateOrderUsingPutWithHttpInfo (Object order, Guid? orderId)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->UpdateOrderUsingPut");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->UpdateOrderUsingPut");

            var localVarPath = "/nucleus/v1/order/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Update an order record Update the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> UpdateOrderUsingPutAsync (Object order, Guid? orderId)
        {
             ApiResponse<Order> localVarResponse = await UpdateOrderUsingPutAsyncWithHttpInfo(order, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an order record Update the information for an order record.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="order">order</param>
        /// <param name="orderId">UUID order_id</param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> UpdateOrderUsingPutAsyncWithHttpInfo (Object order, Guid? orderId)
        {
            // verify the required parameter 'order' is set
            if (order == null)
                throw new ApiException(400, "Missing required parameter 'order' when calling OrderApi->UpdateOrderUsingPut");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling OrderApi->UpdateOrderUsingPut");

            var localVarPath = "/nucleus/v1/order/{order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarPathParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // path parameter
            if (order != null && order.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(order); // http body (model) parameter
            }
            else
            {
                localVarPostBody = order; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrderUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

    }
}
