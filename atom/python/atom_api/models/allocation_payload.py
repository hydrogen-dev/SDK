# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class AllocationPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'category': 'str',
        'client_id': 'str',
        'benchmark_id': 'str',
        'inception_date': 'date',
        'node_map': 'list[dict(str, str)]',
        'metadata': 'object',
        'is_active': 'bool',
        'secondary_id': 'SecondaryId'
    }

    attribute_map = {
        'name': 'name',
        'category': 'category',
        'client_id': 'client_id',
        'benchmark_id': 'benchmark_id',
        'inception_date': 'inception_date',
        'node_map': 'node_map',
        'metadata': 'metadata',
        'is_active': 'is_active',
        'secondary_id': 'secondary_id'
    }

    def __init__(self, name=None, category=None, client_id=None, benchmark_id=None, inception_date=None, node_map=None, metadata=None, is_active=True, secondary_id=None):  # noqa: E501
        """AllocationPayload - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._category = None
        self._client_id = None
        self._benchmark_id = None
        self._inception_date = None
        self._node_map = None
        self._metadata = None
        self._is_active = None
        self._secondary_id = None
        self.discriminator = None

        self.name = name
        if category is not None:
            self.category = category
        if client_id is not None:
            self.client_id = client_id
        if benchmark_id is not None:
            self.benchmark_id = benchmark_id
        if inception_date is not None:
            self.inception_date = inception_date
        if node_map is not None:
            self.node_map = node_map
        if metadata is not None:
            self.metadata = metadata
        if is_active is not None:
            self.is_active = is_active
        if secondary_id is not None:
            self.secondary_id = secondary_id

    @property
    def name(self):
        """Gets the name of this AllocationPayload.  # noqa: E501

        Name of the allocation  # noqa: E501

        :return: The name of this AllocationPayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AllocationPayload.

        Name of the allocation  # noqa: E501

        :param name: The name of this AllocationPayload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category(self):
        """Gets the category of this AllocationPayload.  # noqa: E501

        Description of the allocation  # noqa: E501

        :return: The category of this AllocationPayload.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AllocationPayload.

        Description of the allocation  # noqa: E501

        :param category: The category of this AllocationPayload.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def client_id(self):
        """Gets the client_id of this AllocationPayload.  # noqa: E501


        :return: The client_id of this AllocationPayload.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AllocationPayload.


        :param client_id: The client_id of this AllocationPayload.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def benchmark_id(self):
        """Gets the benchmark_id of this AllocationPayload.  # noqa: E501

        The ID for the benchmark that the allocation should be compared to  # noqa: E501

        :return: The benchmark_id of this AllocationPayload.  # noqa: E501
        :rtype: str
        """
        return self._benchmark_id

    @benchmark_id.setter
    def benchmark_id(self, benchmark_id):
        """Sets the benchmark_id of this AllocationPayload.

        The ID for the benchmark that the allocation should be compared to  # noqa: E501

        :param benchmark_id: The benchmark_id of this AllocationPayload.  # noqa: E501
        :type: str
        """

        self._benchmark_id = benchmark_id

    @property
    def inception_date(self):
        """Gets the inception_date of this AllocationPayload.  # noqa: E501

        Date that the allocation first was managed  # noqa: E501

        :return: The inception_date of this AllocationPayload.  # noqa: E501
        :rtype: date
        """
        return self._inception_date

    @inception_date.setter
    def inception_date(self, inception_date):
        """Sets the inception_date of this AllocationPayload.

        Date that the allocation first was managed  # noqa: E501

        :param inception_date: The inception_date of this AllocationPayload.  # noqa: E501
        :type: date
        """

        self._inception_date = inception_date

    @property
    def node_map(self):
        """Gets the node_map of this AllocationPayload.  # noqa: E501

        List of nodes in a decision tree that map to the allocation  # noqa: E501

        :return: The node_map of this AllocationPayload.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._node_map

    @node_map.setter
    def node_map(self, node_map):
        """Sets the node_map of this AllocationPayload.

        List of nodes in a decision tree that map to the allocation  # noqa: E501

        :param node_map: The node_map of this AllocationPayload.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._node_map = node_map

    @property
    def metadata(self):
        """Gets the metadata of this AllocationPayload.  # noqa: E501

        Custom information associated with the allocation in the format key:value  # noqa: E501

        :return: The metadata of this AllocationPayload.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AllocationPayload.

        Custom information associated with the allocation in the format key:value  # noqa: E501

        :param metadata: The metadata of this AllocationPayload.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def is_active(self):
        """Gets the is_active of this AllocationPayload.  # noqa: E501

        Indicator if this allocation is active. Default is true which indicates it is active  # noqa: E501

        :return: The is_active of this AllocationPayload.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AllocationPayload.

        Indicator if this allocation is active. Default is true which indicates it is active  # noqa: E501

        :param is_active: The is_active of this AllocationPayload.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def secondary_id(self):
        """Gets the secondary_id of this AllocationPayload.  # noqa: E501


        :return: The secondary_id of this AllocationPayload.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this AllocationPayload.


        :param secondary_id: The secondary_id of this AllocationPayload.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocationPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocationPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
