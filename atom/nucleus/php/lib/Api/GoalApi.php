<?php
/**
 * GoalApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.20
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\nucleus\ApiException;
use com\hydrogen\nucleus\Configuration;
use com\hydrogen\nucleus\HeaderSelector;
use com\hydrogen\nucleus\ObjectSerializer;

/**
 * GoalApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GoalApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createGoalTrackUsingPost
     *
     * Create a goal track record
     *
     * @param  \com\hydrogen\nucleus\Model\GoalTrack $goal_track goalTrack (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\GoalTrack
     */
    public function createGoalTrackUsingPost($goal_track)
    {
        list($response) = $this->createGoalTrackUsingPostWithHttpInfo($goal_track);
        return $response;
    }

    /**
     * Operation createGoalTrackUsingPostWithHttpInfo
     *
     * Create a goal track record
     *
     * @param  \com\hydrogen\nucleus\Model\GoalTrack $goal_track goalTrack (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\GoalTrack, HTTP status code, HTTP response headers (array of strings)
     */
    public function createGoalTrackUsingPostWithHttpInfo($goal_track)
    {
        $returnType = '\com\hydrogen\nucleus\Model\GoalTrack';
        $request = $this->createGoalTrackUsingPostRequest($goal_track);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\GoalTrack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createGoalTrackUsingPostAsync
     *
     * Create a goal track record
     *
     * @param  \com\hydrogen\nucleus\Model\GoalTrack $goal_track goalTrack (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGoalTrackUsingPostAsync($goal_track)
    {
        return $this->createGoalTrackUsingPostAsyncWithHttpInfo($goal_track)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createGoalTrackUsingPostAsyncWithHttpInfo
     *
     * Create a goal track record
     *
     * @param  \com\hydrogen\nucleus\Model\GoalTrack $goal_track goalTrack (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGoalTrackUsingPostAsyncWithHttpInfo($goal_track)
    {
        $returnType = '\com\hydrogen\nucleus\Model\GoalTrack';
        $request = $this->createGoalTrackUsingPostRequest($goal_track);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createGoalTrackUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\GoalTrack $goal_track goalTrack (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createGoalTrackUsingPostRequest($goal_track)
    {
        // verify the required parameter 'goal_track' is set
        if ($goal_track === null || (is_array($goal_track) && count($goal_track) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_track when calling createGoalTrackUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/goal_track';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($goal_track)) {
            $_tempBody = $goal_track;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createGoalUsingPost
     *
     * Create a goal
     *
     * @param  \com\hydrogen\nucleus\Model\Goal $goal_request goalRequest (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Goal
     */
    public function createGoalUsingPost($goal_request)
    {
        list($response) = $this->createGoalUsingPostWithHttpInfo($goal_request);
        return $response;
    }

    /**
     * Operation createGoalUsingPostWithHttpInfo
     *
     * Create a goal
     *
     * @param  \com\hydrogen\nucleus\Model\Goal $goal_request goalRequest (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Goal, HTTP status code, HTTP response headers (array of strings)
     */
    public function createGoalUsingPostWithHttpInfo($goal_request)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Goal';
        $request = $this->createGoalUsingPostRequest($goal_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Goal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createGoalUsingPostAsync
     *
     * Create a goal
     *
     * @param  \com\hydrogen\nucleus\Model\Goal $goal_request goalRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGoalUsingPostAsync($goal_request)
    {
        return $this->createGoalUsingPostAsyncWithHttpInfo($goal_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createGoalUsingPostAsyncWithHttpInfo
     *
     * Create a goal
     *
     * @param  \com\hydrogen\nucleus\Model\Goal $goal_request goalRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGoalUsingPostAsyncWithHttpInfo($goal_request)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Goal';
        $request = $this->createGoalUsingPostRequest($goal_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createGoalUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\Goal $goal_request goalRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createGoalUsingPostRequest($goal_request)
    {
        // verify the required parameter 'goal_request' is set
        if ($goal_request === null || (is_array($goal_request) && count($goal_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_request when calling createGoalUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/goal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($goal_request)) {
            $_tempBody = $goal_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGoalTrackUsingDelete
     *
     * Delete a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteGoalTrackUsingDelete($goal_track_id)
    {
        $this->deleteGoalTrackUsingDeleteWithHttpInfo($goal_track_id);
    }

    /**
     * Operation deleteGoalTrackUsingDeleteWithHttpInfo
     *
     * Delete a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGoalTrackUsingDeleteWithHttpInfo($goal_track_id)
    {
        $returnType = '';
        $request = $this->deleteGoalTrackUsingDeleteRequest($goal_track_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteGoalTrackUsingDeleteAsync
     *
     * Delete a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalTrackUsingDeleteAsync($goal_track_id)
    {
        return $this->deleteGoalTrackUsingDeleteAsyncWithHttpInfo($goal_track_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteGoalTrackUsingDeleteAsyncWithHttpInfo
     *
     * Delete a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalTrackUsingDeleteAsyncWithHttpInfo($goal_track_id)
    {
        $returnType = '';
        $request = $this->deleteGoalTrackUsingDeleteRequest($goal_track_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGoalTrackUsingDelete'
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteGoalTrackUsingDeleteRequest($goal_track_id)
    {
        // verify the required parameter 'goal_track_id' is set
        if ($goal_track_id === null || (is_array($goal_track_id) && count($goal_track_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_track_id when calling deleteGoalTrackUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/goal_track/{goal_track_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($goal_track_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_track_id' . '}',
                ObjectSerializer::toPathValue($goal_track_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGoalUsingDelete
     *
     * Delete a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteGoalUsingDelete($goal_id)
    {
        $this->deleteGoalUsingDeleteWithHttpInfo($goal_id);
    }

    /**
     * Operation deleteGoalUsingDeleteWithHttpInfo
     *
     * Delete a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGoalUsingDeleteWithHttpInfo($goal_id)
    {
        $returnType = '';
        $request = $this->deleteGoalUsingDeleteRequest($goal_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteGoalUsingDeleteAsync
     *
     * Delete a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalUsingDeleteAsync($goal_id)
    {
        return $this->deleteGoalUsingDeleteAsyncWithHttpInfo($goal_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteGoalUsingDeleteAsyncWithHttpInfo
     *
     * Delete a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalUsingDeleteAsyncWithHttpInfo($goal_id)
    {
        $returnType = '';
        $request = $this->deleteGoalUsingDeleteRequest($goal_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGoalUsingDelete'
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteGoalUsingDeleteRequest($goal_id)
    {
        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling deleteGoalUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/goal/{goal_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_id' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalAllUsingGet
     *
     * List all goals
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageGoal_
     */
    public function getGoalAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getGoalAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getGoalAllUsingGetWithHttpInfo
     *
     * List all goals
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageGoal_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageGoal_';
        $request = $this->getGoalAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageGoal_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalAllUsingGetAsync
     *
     * List all goals
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getGoalAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalAllUsingGetAsyncWithHttpInfo
     *
     * List all goals
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageGoal_';
        $request = $this->getGoalAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/goal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalAssetSizeAllUsingGet
     *
     * List goal asset sizes
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional, default to false)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  string $sort_type sort_type (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AvailableDateDoubleVO[]
     */
    public function getGoalAssetSizeAllUsingGet($client_id, $goal_id, $currency_conversion = null, $end_date = null, $get_latest = 'false', $portfolio_goal = 'false', $sort_type = null, $start_date = null)
    {
        list($response) = $this->getGoalAssetSizeAllUsingGetWithHttpInfo($client_id, $goal_id, $currency_conversion, $end_date, $get_latest, $portfolio_goal, $sort_type, $start_date);
        return $response;
    }

    /**
     * Operation getGoalAssetSizeAllUsingGetWithHttpInfo
     *
     * List goal asset sizes
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional, default to false)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  string $sort_type sort_type (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AvailableDateDoubleVO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalAssetSizeAllUsingGetWithHttpInfo($client_id, $goal_id, $currency_conversion = null, $end_date = null, $get_latest = 'false', $portfolio_goal = 'false', $sort_type = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AvailableDateDoubleVO[]';
        $request = $this->getGoalAssetSizeAllUsingGetRequest($client_id, $goal_id, $currency_conversion, $end_date, $get_latest, $portfolio_goal, $sort_type, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AvailableDateDoubleVO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalAssetSizeAllUsingGetAsync
     *
     * List goal asset sizes
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional, default to false)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  string $sort_type sort_type (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalAssetSizeAllUsingGetAsync($client_id, $goal_id, $currency_conversion = null, $end_date = null, $get_latest = 'false', $portfolio_goal = 'false', $sort_type = null, $start_date = null)
    {
        return $this->getGoalAssetSizeAllUsingGetAsyncWithHttpInfo($client_id, $goal_id, $currency_conversion, $end_date, $get_latest, $portfolio_goal, $sort_type, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalAssetSizeAllUsingGetAsyncWithHttpInfo
     *
     * List goal asset sizes
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional, default to false)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  string $sort_type sort_type (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalAssetSizeAllUsingGetAsyncWithHttpInfo($client_id, $goal_id, $currency_conversion = null, $end_date = null, $get_latest = 'false', $portfolio_goal = 'false', $sort_type = null, $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AvailableDateDoubleVO[]';
        $request = $this->getGoalAssetSizeAllUsingGetRequest($client_id, $goal_id, $currency_conversion, $end_date, $get_latest, $portfolio_goal, $sort_type, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalAssetSizeAllUsingGet'
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  bool $get_latest get_latest (optional, default to false)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  string $sort_type sort_type (optional)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalAssetSizeAllUsingGetRequest($client_id, $goal_id, $currency_conversion = null, $end_date = null, $get_latest = 'false', $portfolio_goal = 'false', $sort_type = null, $start_date = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getGoalAssetSizeAllUsingGet'
            );
        }
        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling getGoalAssetSizeAllUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/goal/{goal_id}/asset_size';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($get_latest !== null) {
            $queryParams['get_latest'] = ObjectSerializer::toQueryValue($get_latest);
        }
        // query params
        if ($portfolio_goal !== null) {
            $queryParams['portfolio_goal'] = ObjectSerializer::toQueryValue($portfolio_goal);
        }
        // query params
        if ($sort_type !== null) {
            $queryParams['sort_type'] = ObjectSerializer::toQueryValue($sort_type);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_id' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalHoldingAllUsingGet
     *
     * List goal holdings
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PagePortfolioHoldingAgg_
     */
    public function getGoalHoldingAllUsingGet($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        list($response) = $this->getGoalHoldingAllUsingGetWithHttpInfo($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date);
        return $response;
    }

    /**
     * Operation getGoalHoldingAllUsingGetWithHttpInfo
     *
     * List goal holdings
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PagePortfolioHoldingAgg_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalHoldingAllUsingGetWithHttpInfo($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PagePortfolioHoldingAgg_';
        $request = $this->getGoalHoldingAllUsingGetRequest($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PagePortfolioHoldingAgg_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalHoldingAllUsingGetAsync
     *
     * List goal holdings
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalHoldingAllUsingGetAsync($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        return $this->getGoalHoldingAllUsingGetAsyncWithHttpInfo($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalHoldingAllUsingGetAsyncWithHttpInfo
     *
     * List goal holdings
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalHoldingAllUsingGetAsyncWithHttpInfo($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PagePortfolioHoldingAgg_';
        $request = $this->getGoalHoldingAllUsingGetRequest($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalHoldingAllUsingGet'
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalHoldingAllUsingGetRequest($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getGoalHoldingAllUsingGet'
            );
        }
        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling getGoalHoldingAllUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/goal/{goal_id}/holding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($portfolio_goal !== null) {
            $queryParams['portfolio_goal'] = ObjectSerializer::toQueryValue($portfolio_goal);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_id' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalTrackAllUsingGet
     *
     * List all goal track records
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  bool $get_latest true or false (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  string $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageGoalTrack_
     */
    public function getGoalTrackAllUsingGet($ascending = 'false', $end_date = null, $filter = null, $get_latest = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        list($response) = $this->getGoalTrackAllUsingGetWithHttpInfo($ascending, $end_date, $filter, $get_latest, $order_by, $page, $size, $start_date);
        return $response;
    }

    /**
     * Operation getGoalTrackAllUsingGetWithHttpInfo
     *
     * List all goal track records
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  bool $get_latest true or false (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  string $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageGoalTrack_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalTrackAllUsingGetWithHttpInfo($ascending = 'false', $end_date = null, $filter = null, $get_latest = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageGoalTrack_';
        $request = $this->getGoalTrackAllUsingGetRequest($ascending, $end_date, $filter, $get_latest, $order_by, $page, $size, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageGoalTrack_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalTrackAllUsingGetAsync
     *
     * List all goal track records
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  bool $get_latest true or false (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  string $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalTrackAllUsingGetAsync($ascending = 'false', $end_date = null, $filter = null, $get_latest = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        return $this->getGoalTrackAllUsingGetAsyncWithHttpInfo($ascending, $end_date, $filter, $get_latest, $order_by, $page, $size, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalTrackAllUsingGetAsyncWithHttpInfo
     *
     * List all goal track records
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  bool $get_latest true or false (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  string $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalTrackAllUsingGetAsyncWithHttpInfo($ascending = 'false', $end_date = null, $filter = null, $get_latest = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageGoalTrack_';
        $request = $this->getGoalTrackAllUsingGetRequest($ascending, $end_date, $filter, $get_latest, $order_by, $page, $size, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalTrackAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  bool $get_latest true or false (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     * @param  string $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalTrackAllUsingGetRequest($ascending = 'false', $end_date = null, $filter = null, $get_latest = null, $order_by = 'update_date', $page = '0', $size = '25', $start_date = null)
    {

        $resourcePath = '/nucleus/v1/goal_track';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($get_latest !== null) {
            $queryParams['get_latest'] = ObjectSerializer::toQueryValue($get_latest);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalTrackUsingGet
     *
     * Retrieve a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\GoalTrack
     */
    public function getGoalTrackUsingGet($goal_track_id)
    {
        list($response) = $this->getGoalTrackUsingGetWithHttpInfo($goal_track_id);
        return $response;
    }

    /**
     * Operation getGoalTrackUsingGetWithHttpInfo
     *
     * Retrieve a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\GoalTrack, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalTrackUsingGetWithHttpInfo($goal_track_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\GoalTrack';
        $request = $this->getGoalTrackUsingGetRequest($goal_track_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\GoalTrack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalTrackUsingGetAsync
     *
     * Retrieve a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalTrackUsingGetAsync($goal_track_id)
    {
        return $this->getGoalTrackUsingGetAsyncWithHttpInfo($goal_track_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalTrackUsingGetAsyncWithHttpInfo
     *
     * Retrieve a goal track record
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalTrackUsingGetAsyncWithHttpInfo($goal_track_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\GoalTrack';
        $request = $this->getGoalTrackUsingGetRequest($goal_track_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalTrackUsingGet'
     *
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalTrackUsingGetRequest($goal_track_id)
    {
        // verify the required parameter 'goal_track_id' is set
        if ($goal_track_id === null || (is_array($goal_track_id) && count($goal_track_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_track_id when calling getGoalTrackUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/goal_track/{goal_track_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($goal_track_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_track_id' . '}',
                ObjectSerializer::toPathValue($goal_track_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalTransactionAllUsingGet
     *
     * List goal transactions
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PagePortfolioTransaction_
     */
    public function getGoalTransactionAllUsingGet($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'update_date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        list($response) = $this->getGoalTransactionAllUsingGetWithHttpInfo($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date);
        return $response;
    }

    /**
     * Operation getGoalTransactionAllUsingGetWithHttpInfo
     *
     * List goal transactions
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PagePortfolioTransaction_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalTransactionAllUsingGetWithHttpInfo($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'update_date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PagePortfolioTransaction_';
        $request = $this->getGoalTransactionAllUsingGetRequest($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PagePortfolioTransaction_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalTransactionAllUsingGetAsync
     *
     * List goal transactions
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalTransactionAllUsingGetAsync($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'update_date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        return $this->getGoalTransactionAllUsingGetAsyncWithHttpInfo($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalTransactionAllUsingGetAsyncWithHttpInfo
     *
     * List goal transactions
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalTransactionAllUsingGetAsyncWithHttpInfo($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'update_date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\PagePortfolioTransaction_';
        $request = $this->getGoalTransactionAllUsingGetRequest($client_id, $goal_id, $ascending, $currency_conversion, $end_date, $filter, $order_by, $page, $portfolio_goal, $size, $start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalTransactionAllUsingGet'
     *
     * @param  string $client_id client_id (required)
     * @param  string $goal_id UUID goal_id (required)
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion Currency Code (optional)
     * @param  \DateTime $end_date end date (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  bool $portfolio_goal portfolio_goal (optional, default to false)
     * @param  int $size size (optional, default to 25)
     * @param  \DateTime $start_date start date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalTransactionAllUsingGetRequest($client_id, $goal_id, $ascending = 'false', $currency_conversion = null, $end_date = null, $filter = null, $order_by = 'update_date', $page = '0', $portfolio_goal = 'false', $size = '25', $start_date = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getGoalTransactionAllUsingGet'
            );
        }
        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling getGoalTransactionAllUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/goal/{goal_id}/transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['client_id'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($portfolio_goal !== null) {
            $queryParams['portfolio_goal'] = ObjectSerializer::toQueryValue($portfolio_goal);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }

        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_id' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalUsingGet
     *
     * Retrieve a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Goal
     */
    public function getGoalUsingGet($goal_id)
    {
        list($response) = $this->getGoalUsingGetWithHttpInfo($goal_id);
        return $response;
    }

    /**
     * Operation getGoalUsingGetWithHttpInfo
     *
     * Retrieve a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Goal, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalUsingGetWithHttpInfo($goal_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Goal';
        $request = $this->getGoalUsingGetRequest($goal_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Goal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGoalUsingGetAsync
     *
     * Retrieve a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalUsingGetAsync($goal_id)
    {
        return $this->getGoalUsingGetAsyncWithHttpInfo($goal_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalUsingGetAsyncWithHttpInfo
     *
     * Retrieve a goal
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalUsingGetAsyncWithHttpInfo($goal_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Goal';
        $request = $this->getGoalUsingGetRequest($goal_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalUsingGet'
     *
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGoalUsingGetRequest($goal_id)
    {
        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling getGoalUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/goal/{goal_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_id' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGoalTrackUsingPut
     *
     * Update a goal track record
     *
     * @param  object $goal_track goal_track (required)
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\GoalTrack
     */
    public function updateGoalTrackUsingPut($goal_track, $goal_track_id)
    {
        list($response) = $this->updateGoalTrackUsingPutWithHttpInfo($goal_track, $goal_track_id);
        return $response;
    }

    /**
     * Operation updateGoalTrackUsingPutWithHttpInfo
     *
     * Update a goal track record
     *
     * @param  object $goal_track goal_track (required)
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\GoalTrack, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGoalTrackUsingPutWithHttpInfo($goal_track, $goal_track_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\GoalTrack';
        $request = $this->updateGoalTrackUsingPutRequest($goal_track, $goal_track_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\GoalTrack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGoalTrackUsingPutAsync
     *
     * Update a goal track record
     *
     * @param  object $goal_track goal_track (required)
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGoalTrackUsingPutAsync($goal_track, $goal_track_id)
    {
        return $this->updateGoalTrackUsingPutAsyncWithHttpInfo($goal_track, $goal_track_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGoalTrackUsingPutAsyncWithHttpInfo
     *
     * Update a goal track record
     *
     * @param  object $goal_track goal_track (required)
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGoalTrackUsingPutAsyncWithHttpInfo($goal_track, $goal_track_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\GoalTrack';
        $request = $this->updateGoalTrackUsingPutRequest($goal_track, $goal_track_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGoalTrackUsingPut'
     *
     * @param  object $goal_track goal_track (required)
     * @param  string $goal_track_id UUID goal_track_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGoalTrackUsingPutRequest($goal_track, $goal_track_id)
    {
        // verify the required parameter 'goal_track' is set
        if ($goal_track === null || (is_array($goal_track) && count($goal_track) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_track when calling updateGoalTrackUsingPut'
            );
        }
        // verify the required parameter 'goal_track_id' is set
        if ($goal_track_id === null || (is_array($goal_track_id) && count($goal_track_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_track_id when calling updateGoalTrackUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/goal_track/{goal_track_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($goal_track_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_track_id' . '}',
                ObjectSerializer::toPathValue($goal_track_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($goal_track)) {
            $_tempBody = $goal_track;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGoalUsingPut
     *
     * Update a goal
     *
     * @param  object $goal goal (required)
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\Goal
     */
    public function updateGoalUsingPut($goal, $goal_id)
    {
        list($response) = $this->updateGoalUsingPutWithHttpInfo($goal, $goal_id);
        return $response;
    }

    /**
     * Operation updateGoalUsingPutWithHttpInfo
     *
     * Update a goal
     *
     * @param  object $goal goal (required)
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\Goal, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGoalUsingPutWithHttpInfo($goal, $goal_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Goal';
        $request = $this->updateGoalUsingPutRequest($goal, $goal_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\Goal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGoalUsingPutAsync
     *
     * Update a goal
     *
     * @param  object $goal goal (required)
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGoalUsingPutAsync($goal, $goal_id)
    {
        return $this->updateGoalUsingPutAsyncWithHttpInfo($goal, $goal_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGoalUsingPutAsyncWithHttpInfo
     *
     * Update a goal
     *
     * @param  object $goal goal (required)
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGoalUsingPutAsyncWithHttpInfo($goal, $goal_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\Goal';
        $request = $this->updateGoalUsingPutRequest($goal, $goal_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGoalUsingPut'
     *
     * @param  object $goal goal (required)
     * @param  string $goal_id UUID goal_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGoalUsingPutRequest($goal, $goal_id)
    {
        // verify the required parameter 'goal' is set
        if ($goal === null || (is_array($goal) && count($goal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal when calling updateGoalUsingPut'
            );
        }
        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling updateGoalUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/goal/{goal_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goal_id' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($goal)) {
            $_tempBody = $goal;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
