/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import atom_api.ApiCallback;
import atom_api.ApiClient;
import atom_api.ApiException;
import atom_api.ApiResponse;
import atom_api.Configuration;
import atom_api.Pair;
import atom_api.ProgressRequestBody;
import atom_api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AnnuityAccumulationResponse;
import io.swagger.client.model.AnnuityAmountResponse;
import io.swagger.client.model.AnnuityCalculatorAccumulationHorizon;
import io.swagger.client.model.AnnuityCalculatorAnnuityAmount;
import io.swagger.client.model.AnnuityCalculatorDecumulationHorizon;
import io.swagger.client.model.AnnuityCalculatorDepositAmount;
import io.swagger.client.model.AnnuityCalculatorInitialBalance;
import io.swagger.client.model.AnnuityDecumulationResponse;
import io.swagger.client.model.AnnuityDepositamountResponse;
import io.swagger.client.model.AnnuityInitialbalanceResponse;
import io.swagger.client.model.Backtest;
import io.swagger.client.model.BacktestResponse;
import io.swagger.client.model.BudgetCalculator;
import io.swagger.client.model.BudgetCalculatorResponse;
import io.swagger.client.model.DimRiskScoreResponse;
import io.swagger.client.model.DimensionalRiskScore;
import io.swagger.client.model.DiversificationScore;
import io.swagger.client.model.EducationCalculatorAnnualCost;
import io.swagger.client.model.EducationCalculatorAnnualcostResponse;
import io.swagger.client.model.EducationCalculatorDepositAmount;
import io.swagger.client.model.EducationCalculatorDepositamountResponse;
import io.swagger.client.model.EducationCalculatorPctcoveredResponse;
import io.swagger.client.model.EducationCalculatorPercentCovered;
import io.swagger.client.model.EmergencyFundCalculator;
import io.swagger.client.model.EmergencyFundResponse;
import io.swagger.client.model.EventStudy;
import io.swagger.client.model.EventStudyResponse;
import io.swagger.client.model.FinancialHealthCheck;
import io.swagger.client.model.FinancialPicture;
import io.swagger.client.model.FinancialPictureResponse;
import io.swagger.client.model.GoalAccumulationAllocation;
import io.swagger.client.model.GoalAccumulationRecommendation;
import io.swagger.client.model.GoalAccumulationStatus;
import io.swagger.client.model.GoalAllocationResponse;
import io.swagger.client.model.GoalDecumulationAllocation;
import io.swagger.client.model.GoalDecumulationRecommendation;
import io.swagger.client.model.GoalDecumulationStatus;
import io.swagger.client.model.GoalRecommendationResponse;
import io.swagger.client.model.GoalStatusResponse;
import io.swagger.client.model.HealthCheckResponse;
import io.swagger.client.model.LifeInsuranceCalculator;
import io.swagger.client.model.LifeInsuranceNeedsResponse;
import io.swagger.client.model.MonteCarlo;
import io.swagger.client.model.MonteCarloResponse;
import io.swagger.client.model.MortgageCalculatorDownPayment;
import io.swagger.client.model.MortgageCalculatorDownpaymentResponse;
import io.swagger.client.model.MortgageCalculatorHomePrice;
import io.swagger.client.model.MortgageCalculatorHomepriceResponse;
import io.swagger.client.model.MortgageCalculatorPeriodicPayment;
import io.swagger.client.model.MortgageCalculatorPeriodicpaymentResponse;
import io.swagger.client.model.MvoResponse;
import io.swagger.client.model.OptConfigPortfolio;
import io.swagger.client.model.OptimizationScore;
import io.swagger.client.model.PfloDiversificationScoreResponse;
import io.swagger.client.model.PfloOptimizationScoreResponse;
import io.swagger.client.model.PortfolioWhatIfResponse;
import io.swagger.client.model.PurchaseCalculatorAmount;
import io.swagger.client.model.PurchaseCalculatorDepositAmount;
import io.swagger.client.model.PurchaseCalculatorDepositamountResponse;
import io.swagger.client.model.PurchaseCalculatorHorizon;
import io.swagger.client.model.PurchaseCalculatorPurchaseamountResponse;
import io.swagger.client.model.PurchaseCalculatorPurchasehorizonResponse;
import io.swagger.client.model.Rebalance;
import io.swagger.client.model.RebalanceResponse;
import io.swagger.client.model.RetirementCalculatorDepositAmount;
import io.swagger.client.model.RetirementCalculatorDepositamountResponse;
import io.swagger.client.model.RetirementCalculatorExpenses;
import io.swagger.client.model.RetirementCalculatorExpensesResponse;
import io.swagger.client.model.RetirementCalculatorPctcoveredResponse;
import io.swagger.client.model.RetirementCalculatorPercentCovered;
import io.swagger.client.model.RiskAllocation;
import io.swagger.client.model.RiskAllocationResponse;
import io.swagger.client.model.RiskScore;
import io.swagger.client.model.RiskScoreResponse;
import io.swagger.client.model.SavingsCalculatorResponse;
import io.swagger.client.model.ScenarioAnalysis;
import io.swagger.client.model.ScenarioAnalysisResponse;
import io.swagger.client.model.SensitivityAnalysis;
import io.swagger.client.model.SensitivityAnalysisResponse;
import io.swagger.client.model.SimpleSavingsCalculator;
import io.swagger.client.model.SpendingAnalysis;
import io.swagger.client.model.SpendingAnalysisResponse;
import io.swagger.client.model.VariableAnnuityPayload;
import io.swagger.client.model.VariableAnnuityResponse;
import io.swagger.client.model.WhatIfPortfolio;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProtonApi {
    private ApiClient apiClient;

    public ProtonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProtonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for annuityCalculatorAccumulationHorizon
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Horizon">Annuity calculator - accumulation horizon Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorAccumulationHorizonCall(AnnuityCalculatorAccumulationHorizon payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/annuity_calculator/accumulation_horizon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorAccumulationHorizonValidateBeforeCall(AnnuityCalculatorAccumulationHorizon payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling annuityCalculatorAccumulationHorizon(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorAccumulationHorizonCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity calculator - accumulation horizon
     * 
     * @param payload  (required)
     * @return AnnuityAccumulationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Horizon">Annuity calculator - accumulation horizon Documentation</a>
     */
    public AnnuityAccumulationResponse annuityCalculatorAccumulationHorizon(AnnuityCalculatorAccumulationHorizon payload) throws ApiException {
        ApiResponse<AnnuityAccumulationResponse> resp = annuityCalculatorAccumulationHorizonWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Annuity calculator - accumulation horizon
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;AnnuityAccumulationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Horizon">Annuity calculator - accumulation horizon Documentation</a>
     */
    public ApiResponse<AnnuityAccumulationResponse> annuityCalculatorAccumulationHorizonWithHttpInfo(AnnuityCalculatorAccumulationHorizon payload) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorAccumulationHorizonValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<AnnuityAccumulationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity calculator - accumulation horizon (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Horizon">Annuity calculator - accumulation horizon Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorAccumulationHorizonAsync(AnnuityCalculatorAccumulationHorizon payload, final ApiCallback<AnnuityAccumulationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorAccumulationHorizonValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnuityAccumulationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorAnnuityAmount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Annuity-Amount">Annuity calculator - annuity amount Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorAnnuityAmountCall(AnnuityCalculatorAnnuityAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/annuity_calculator/annuity_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorAnnuityAmountValidateBeforeCall(AnnuityCalculatorAnnuityAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling annuityCalculatorAnnuityAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorAnnuityAmountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity calculator - annuity amount
     * 
     * @param payload  (required)
     * @return AnnuityAmountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Annuity-Amount">Annuity calculator - annuity amount Documentation</a>
     */
    public AnnuityAmountResponse annuityCalculatorAnnuityAmount(AnnuityCalculatorAnnuityAmount payload) throws ApiException {
        ApiResponse<AnnuityAmountResponse> resp = annuityCalculatorAnnuityAmountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Annuity calculator - annuity amount
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;AnnuityAmountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Annuity-Amount">Annuity calculator - annuity amount Documentation</a>
     */
    public ApiResponse<AnnuityAmountResponse> annuityCalculatorAnnuityAmountWithHttpInfo(AnnuityCalculatorAnnuityAmount payload) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorAnnuityAmountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<AnnuityAmountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity calculator - annuity amount (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Annuity-Amount">Annuity calculator - annuity amount Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorAnnuityAmountAsync(AnnuityCalculatorAnnuityAmount payload, final ApiCallback<AnnuityAmountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorAnnuityAmountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnuityAmountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorDecumulationHorizon
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Horizon">Annuity calculator - decumulation horizon Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorDecumulationHorizonCall(AnnuityCalculatorDecumulationHorizon payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/annuity_calculator/decumulation_horizon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorDecumulationHorizonValidateBeforeCall(AnnuityCalculatorDecumulationHorizon payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling annuityCalculatorDecumulationHorizon(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorDecumulationHorizonCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity calculator - decumulation horizon
     * 
     * @param payload  (required)
     * @return AnnuityDecumulationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Horizon">Annuity calculator - decumulation horizon Documentation</a>
     */
    public AnnuityDecumulationResponse annuityCalculatorDecumulationHorizon(AnnuityCalculatorDecumulationHorizon payload) throws ApiException {
        ApiResponse<AnnuityDecumulationResponse> resp = annuityCalculatorDecumulationHorizonWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Annuity calculator - decumulation horizon
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;AnnuityDecumulationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Horizon">Annuity calculator - decumulation horizon Documentation</a>
     */
    public ApiResponse<AnnuityDecumulationResponse> annuityCalculatorDecumulationHorizonWithHttpInfo(AnnuityCalculatorDecumulationHorizon payload) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorDecumulationHorizonValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<AnnuityDecumulationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity calculator - decumulation horizon (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Horizon">Annuity calculator - decumulation horizon Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorDecumulationHorizonAsync(AnnuityCalculatorDecumulationHorizon payload, final ApiCallback<AnnuityDecumulationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorDecumulationHorizonValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnuityDecumulationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorDepositAmount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount">Annuity calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorDepositAmountCall(AnnuityCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/annuity_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorDepositAmountValidateBeforeCall(AnnuityCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling annuityCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorDepositAmountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity calculator - deposit amount
     * 
     * @param payload  (required)
     * @return AnnuityDepositamountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount">Annuity calculator - deposit amount Documentation</a>
     */
    public AnnuityDepositamountResponse annuityCalculatorDepositAmount(AnnuityCalculatorDepositAmount payload) throws ApiException {
        ApiResponse<AnnuityDepositamountResponse> resp = annuityCalculatorDepositAmountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Annuity calculator - deposit amount
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;AnnuityDepositamountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount">Annuity calculator - deposit amount Documentation</a>
     */
    public ApiResponse<AnnuityDepositamountResponse> annuityCalculatorDepositAmountWithHttpInfo(AnnuityCalculatorDepositAmount payload) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorDepositAmountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<AnnuityDepositamountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity calculator - deposit amount (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount">Annuity calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorDepositAmountAsync(AnnuityCalculatorDepositAmount payload, final ApiCallback<AnnuityDepositamountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorDepositAmountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnuityDepositamountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorInitialBalance
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Initial-Balance">Annuity calculator - initial balance Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorInitialBalanceCall(AnnuityCalculatorInitialBalance payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/annuity_calculator/initial_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorInitialBalanceValidateBeforeCall(AnnuityCalculatorInitialBalance payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling annuityCalculatorInitialBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorInitialBalanceCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity calculator - initial balance
     * 
     * @param payload  (required)
     * @return AnnuityInitialbalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Initial-Balance">Annuity calculator - initial balance Documentation</a>
     */
    public AnnuityInitialbalanceResponse annuityCalculatorInitialBalance(AnnuityCalculatorInitialBalance payload) throws ApiException {
        ApiResponse<AnnuityInitialbalanceResponse> resp = annuityCalculatorInitialBalanceWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Annuity calculator - initial balance
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;AnnuityInitialbalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Initial-Balance">Annuity calculator - initial balance Documentation</a>
     */
    public ApiResponse<AnnuityInitialbalanceResponse> annuityCalculatorInitialBalanceWithHttpInfo(AnnuityCalculatorInitialBalance payload) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorInitialBalanceValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<AnnuityInitialbalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity calculator - initial balance (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Initial-Balance">Annuity calculator - initial balance Documentation</a>
     */
    public com.squareup.okhttp.Call annuityCalculatorInitialBalanceAsync(AnnuityCalculatorInitialBalance payload, final ApiCallback<AnnuityInitialbalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorInitialBalanceValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AnnuityInitialbalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for budgetCalculator
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Budget-Calculator">Budget Calculator Documentation</a>
     */
    public com.squareup.okhttp.Call budgetCalculatorCall(BudgetCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/budget_calculator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call budgetCalculatorValidateBeforeCall(BudgetCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling budgetCalculator(Async)");
        }
        

        com.squareup.okhttp.Call call = budgetCalculatorCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Budget Calculator
     * 
     * @param payload  (required)
     * @return BudgetCalculatorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Budget-Calculator">Budget Calculator Documentation</a>
     */
    public BudgetCalculatorResponse budgetCalculator(BudgetCalculator payload) throws ApiException {
        ApiResponse<BudgetCalculatorResponse> resp = budgetCalculatorWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Budget Calculator
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;BudgetCalculatorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Budget-Calculator">Budget Calculator Documentation</a>
     */
    public ApiResponse<BudgetCalculatorResponse> budgetCalculatorWithHttpInfo(BudgetCalculator payload) throws ApiException {
        com.squareup.okhttp.Call call = budgetCalculatorValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<BudgetCalculatorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Budget Calculator (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Budget-Calculator">Budget Calculator Documentation</a>
     */
    public com.squareup.okhttp.Call budgetCalculatorAsync(BudgetCalculator payload, final ApiCallback<BudgetCalculatorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = budgetCalculatorValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BudgetCalculatorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dimensionalRiskScore
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Dimensional-Risk-Score">Dimensional risk score Documentation</a>
     */
    public com.squareup.okhttp.Call dimensionalRiskScoreCall(DimensionalRiskScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/dimensional_risk_score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dimensionalRiskScoreValidateBeforeCall(DimensionalRiskScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling dimensionalRiskScore(Async)");
        }
        

        com.squareup.okhttp.Call call = dimensionalRiskScoreCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Dimensional risk score
     * 
     * @param payload  (required)
     * @return DimRiskScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Dimensional-Risk-Score">Dimensional risk score Documentation</a>
     */
    public DimRiskScoreResponse dimensionalRiskScore(DimensionalRiskScore payload) throws ApiException {
        ApiResponse<DimRiskScoreResponse> resp = dimensionalRiskScoreWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Dimensional risk score
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;DimRiskScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Dimensional-Risk-Score">Dimensional risk score Documentation</a>
     */
    public ApiResponse<DimRiskScoreResponse> dimensionalRiskScoreWithHttpInfo(DimensionalRiskScore payload) throws ApiException {
        com.squareup.okhttp.Call call = dimensionalRiskScoreValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<DimRiskScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Dimensional risk score (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Dimensional-Risk-Score">Dimensional risk score Documentation</a>
     */
    public com.squareup.okhttp.Call dimensionalRiskScoreAsync(DimensionalRiskScore payload, final ApiCallback<DimRiskScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dimensionalRiskScoreValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DimRiskScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for educationCalculatorAnnualCost
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Total-Annual-Cost">Education calculator - total annual cost Documentation</a>
     */
    public com.squareup.okhttp.Call educationCalculatorAnnualCostCall(EducationCalculatorAnnualCost payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/education_calculator/annual_cost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call educationCalculatorAnnualCostValidateBeforeCall(EducationCalculatorAnnualCost payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling educationCalculatorAnnualCost(Async)");
        }
        

        com.squareup.okhttp.Call call = educationCalculatorAnnualCostCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Education calculator - total annual cost
     * 
     * @param payload  (required)
     * @return EducationCalculatorAnnualcostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Total-Annual-Cost">Education calculator - total annual cost Documentation</a>
     */
    public EducationCalculatorAnnualcostResponse educationCalculatorAnnualCost(EducationCalculatorAnnualCost payload) throws ApiException {
        ApiResponse<EducationCalculatorAnnualcostResponse> resp = educationCalculatorAnnualCostWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Education calculator - total annual cost
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;EducationCalculatorAnnualcostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Total-Annual-Cost">Education calculator - total annual cost Documentation</a>
     */
    public ApiResponse<EducationCalculatorAnnualcostResponse> educationCalculatorAnnualCostWithHttpInfo(EducationCalculatorAnnualCost payload) throws ApiException {
        com.squareup.okhttp.Call call = educationCalculatorAnnualCostValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<EducationCalculatorAnnualcostResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Education calculator - total annual cost (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Total-Annual-Cost">Education calculator - total annual cost Documentation</a>
     */
    public com.squareup.okhttp.Call educationCalculatorAnnualCostAsync(EducationCalculatorAnnualCost payload, final ApiCallback<EducationCalculatorAnnualcostResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = educationCalculatorAnnualCostValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EducationCalculatorAnnualcostResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for educationCalculatorDepositAmount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount45">Education calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call educationCalculatorDepositAmountCall(EducationCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/education_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call educationCalculatorDepositAmountValidateBeforeCall(EducationCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling educationCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = educationCalculatorDepositAmountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Education calculator - deposit amount
     * 
     * @param payload  (required)
     * @return EducationCalculatorDepositamountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount45">Education calculator - deposit amount Documentation</a>
     */
    public EducationCalculatorDepositamountResponse educationCalculatorDepositAmount(EducationCalculatorDepositAmount payload) throws ApiException {
        ApiResponse<EducationCalculatorDepositamountResponse> resp = educationCalculatorDepositAmountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Education calculator - deposit amount
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;EducationCalculatorDepositamountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount45">Education calculator - deposit amount Documentation</a>
     */
    public ApiResponse<EducationCalculatorDepositamountResponse> educationCalculatorDepositAmountWithHttpInfo(EducationCalculatorDepositAmount payload) throws ApiException {
        com.squareup.okhttp.Call call = educationCalculatorDepositAmountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<EducationCalculatorDepositamountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Education calculator - deposit amount (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount45">Education calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call educationCalculatorDepositAmountAsync(EducationCalculatorDepositAmount payload, final ApiCallback<EducationCalculatorDepositamountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = educationCalculatorDepositAmountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EducationCalculatorDepositamountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for educationCalculatorPercentCovered
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered">Education calculator - percent covered Documentation</a>
     */
    public com.squareup.okhttp.Call educationCalculatorPercentCoveredCall(EducationCalculatorPercentCovered payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/education_calculator/percent_covered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call educationCalculatorPercentCoveredValidateBeforeCall(EducationCalculatorPercentCovered payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling educationCalculatorPercentCovered(Async)");
        }
        

        com.squareup.okhttp.Call call = educationCalculatorPercentCoveredCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Education calculator - percent covered
     * 
     * @param payload  (required)
     * @return EducationCalculatorPctcoveredResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered">Education calculator - percent covered Documentation</a>
     */
    public EducationCalculatorPctcoveredResponse educationCalculatorPercentCovered(EducationCalculatorPercentCovered payload) throws ApiException {
        ApiResponse<EducationCalculatorPctcoveredResponse> resp = educationCalculatorPercentCoveredWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Education calculator - percent covered
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;EducationCalculatorPctcoveredResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered">Education calculator - percent covered Documentation</a>
     */
    public ApiResponse<EducationCalculatorPctcoveredResponse> educationCalculatorPercentCoveredWithHttpInfo(EducationCalculatorPercentCovered payload) throws ApiException {
        com.squareup.okhttp.Call call = educationCalculatorPercentCoveredValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<EducationCalculatorPctcoveredResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Education calculator - percent covered (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered">Education calculator - percent covered Documentation</a>
     */
    public com.squareup.okhttp.Call educationCalculatorPercentCoveredAsync(EducationCalculatorPercentCovered payload, final ApiCallback<EducationCalculatorPctcoveredResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = educationCalculatorPercentCoveredValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EducationCalculatorPctcoveredResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for emergencyFundCalculator
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Emergency-Fund-Calculator">Emergency fund calculator Documentation</a>
     */
    public com.squareup.okhttp.Call emergencyFundCalculatorCall(EmergencyFundCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/emergency_fund_calculator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call emergencyFundCalculatorValidateBeforeCall(EmergencyFundCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling emergencyFundCalculator(Async)");
        }
        

        com.squareup.okhttp.Call call = emergencyFundCalculatorCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Emergency fund calculator
     * 
     * @param payload  (required)
     * @return EmergencyFundResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Emergency-Fund-Calculator">Emergency fund calculator Documentation</a>
     */
    public EmergencyFundResponse emergencyFundCalculator(EmergencyFundCalculator payload) throws ApiException {
        ApiResponse<EmergencyFundResponse> resp = emergencyFundCalculatorWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Emergency fund calculator
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;EmergencyFundResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Emergency-Fund-Calculator">Emergency fund calculator Documentation</a>
     */
    public ApiResponse<EmergencyFundResponse> emergencyFundCalculatorWithHttpInfo(EmergencyFundCalculator payload) throws ApiException {
        com.squareup.okhttp.Call call = emergencyFundCalculatorValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<EmergencyFundResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Emergency fund calculator (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Emergency-Fund-Calculator">Emergency fund calculator Documentation</a>
     */
    public com.squareup.okhttp.Call emergencyFundCalculatorAsync(EmergencyFundCalculator payload, final ApiCallback<EmergencyFundResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = emergencyFundCalculatorValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EmergencyFundResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for eventStudy
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Event-Study">Event study Documentation</a>
     */
    public com.squareup.okhttp.Call eventStudyCall(EventStudy payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/event_study";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventStudyValidateBeforeCall(EventStudy payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling eventStudy(Async)");
        }
        

        com.squareup.okhttp.Call call = eventStudyCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Event study
     * 
     * @param payload  (required)
     * @return EventStudyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Event-Study">Event study Documentation</a>
     */
    public EventStudyResponse eventStudy(EventStudy payload) throws ApiException {
        ApiResponse<EventStudyResponse> resp = eventStudyWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Event study
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;EventStudyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Event-Study">Event study Documentation</a>
     */
    public ApiResponse<EventStudyResponse> eventStudyWithHttpInfo(EventStudy payload) throws ApiException {
        com.squareup.okhttp.Call call = eventStudyValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<EventStudyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Event study (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Event-Study">Event study Documentation</a>
     */
    public com.squareup.okhttp.Call eventStudyAsync(EventStudy payload, final ApiCallback<EventStudyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventStudyValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventStudyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for financialHealthCheck
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Health-Check">Financial health check Documentation</a>
     */
    public com.squareup.okhttp.Call financialHealthCheckCall(FinancialHealthCheck payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/financial_health_check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call financialHealthCheckValidateBeforeCall(FinancialHealthCheck payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling financialHealthCheck(Async)");
        }
        

        com.squareup.okhttp.Call call = financialHealthCheckCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Financial health check
     * 
     * @param payload  (required)
     * @return HealthCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Health-Check">Financial health check Documentation</a>
     */
    public HealthCheckResponse financialHealthCheck(FinancialHealthCheck payload) throws ApiException {
        ApiResponse<HealthCheckResponse> resp = financialHealthCheckWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Financial health check
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;HealthCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Health-Check">Financial health check Documentation</a>
     */
    public ApiResponse<HealthCheckResponse> financialHealthCheckWithHttpInfo(FinancialHealthCheck payload) throws ApiException {
        com.squareup.okhttp.Call call = financialHealthCheckValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<HealthCheckResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Financial health check (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Health-Check">Financial health check Documentation</a>
     */
    public com.squareup.okhttp.Call financialHealthCheckAsync(FinancialHealthCheck payload, final ApiCallback<HealthCheckResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = financialHealthCheckValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HealthCheckResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for financialPicture
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Picture">Financial Picture Documentation</a>
     */
    public com.squareup.okhttp.Call financialPictureCall(FinancialPicture payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/financial_picture";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call financialPictureValidateBeforeCall(FinancialPicture payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling financialPicture(Async)");
        }
        

        com.squareup.okhttp.Call call = financialPictureCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Financial Picture
     * 
     * @param payload  (required)
     * @return FinancialPictureResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Picture">Financial Picture Documentation</a>
     */
    public FinancialPictureResponse financialPicture(FinancialPicture payload) throws ApiException {
        ApiResponse<FinancialPictureResponse> resp = financialPictureWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Financial Picture
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;FinancialPictureResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Picture">Financial Picture Documentation</a>
     */
    public ApiResponse<FinancialPictureResponse> financialPictureWithHttpInfo(FinancialPicture payload) throws ApiException {
        com.squareup.okhttp.Call call = financialPictureValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<FinancialPictureResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Financial Picture (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Financial-Picture">Financial Picture Documentation</a>
     */
    public com.squareup.okhttp.Call financialPictureAsync(FinancialPicture payload, final ApiCallback<FinancialPictureResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = financialPictureValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FinancialPictureResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalAccumulationAllocation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Allocation">Goal accumulation allocation Documentation</a>
     */
    public com.squareup.okhttp.Call goalAccumulationAllocationCall(GoalAccumulationAllocation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/goal_accumulation/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalAccumulationAllocationValidateBeforeCall(GoalAccumulationAllocation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling goalAccumulationAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalAccumulationAllocationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal accumulation allocation
     * 
     * @param payload  (required)
     * @return GoalAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Allocation">Goal accumulation allocation Documentation</a>
     */
    public GoalAllocationResponse goalAccumulationAllocation(GoalAccumulationAllocation payload) throws ApiException {
        ApiResponse<GoalAllocationResponse> resp = goalAccumulationAllocationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Goal accumulation allocation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;GoalAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Allocation">Goal accumulation allocation Documentation</a>
     */
    public ApiResponse<GoalAllocationResponse> goalAccumulationAllocationWithHttpInfo(GoalAccumulationAllocation payload) throws ApiException {
        com.squareup.okhttp.Call call = goalAccumulationAllocationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<GoalAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal accumulation allocation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Allocation">Goal accumulation allocation Documentation</a>
     */
    public com.squareup.okhttp.Call goalAccumulationAllocationAsync(GoalAccumulationAllocation payload, final ApiCallback<GoalAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalAccumulationAllocationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalAccumulationRecommendation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Recommendation">Goal accumulation recommendation Documentation</a>
     */
    public com.squareup.okhttp.Call goalAccumulationRecommendationCall(GoalAccumulationRecommendation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/goal_accumulation/recommendation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalAccumulationRecommendationValidateBeforeCall(GoalAccumulationRecommendation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling goalAccumulationRecommendation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalAccumulationRecommendationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal accumulation recommendation
     * 
     * @param payload  (required)
     * @return GoalRecommendationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Recommendation">Goal accumulation recommendation Documentation</a>
     */
    public GoalRecommendationResponse goalAccumulationRecommendation(GoalAccumulationRecommendation payload) throws ApiException {
        ApiResponse<GoalRecommendationResponse> resp = goalAccumulationRecommendationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Goal accumulation recommendation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;GoalRecommendationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Recommendation">Goal accumulation recommendation Documentation</a>
     */
    public ApiResponse<GoalRecommendationResponse> goalAccumulationRecommendationWithHttpInfo(GoalAccumulationRecommendation payload) throws ApiException {
        com.squareup.okhttp.Call call = goalAccumulationRecommendationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<GoalRecommendationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal accumulation recommendation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Recommendation">Goal accumulation recommendation Documentation</a>
     */
    public com.squareup.okhttp.Call goalAccumulationRecommendationAsync(GoalAccumulationRecommendation payload, final ApiCallback<GoalRecommendationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalAccumulationRecommendationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalRecommendationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalAccumulationStatus
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Status">Goal accumulation status Documentation</a>
     */
    public com.squareup.okhttp.Call goalAccumulationStatusCall(GoalAccumulationStatus payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/goal_accumulation/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalAccumulationStatusValidateBeforeCall(GoalAccumulationStatus payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling goalAccumulationStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = goalAccumulationStatusCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal accumulation status
     * 
     * @param payload  (required)
     * @return GoalStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Status">Goal accumulation status Documentation</a>
     */
    public GoalStatusResponse goalAccumulationStatus(GoalAccumulationStatus payload) throws ApiException {
        ApiResponse<GoalStatusResponse> resp = goalAccumulationStatusWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Goal accumulation status
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;GoalStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Status">Goal accumulation status Documentation</a>
     */
    public ApiResponse<GoalStatusResponse> goalAccumulationStatusWithHttpInfo(GoalAccumulationStatus payload) throws ApiException {
        com.squareup.okhttp.Call call = goalAccumulationStatusValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<GoalStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal accumulation status (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Accumulation-Goal-Status">Goal accumulation status Documentation</a>
     */
    public com.squareup.okhttp.Call goalAccumulationStatusAsync(GoalAccumulationStatus payload, final ApiCallback<GoalStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalAccumulationStatusValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalDecumulationAllocation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Allocation">Goal decumulation allocation Documentation</a>
     */
    public com.squareup.okhttp.Call goalDecumulationAllocationCall(GoalDecumulationAllocation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/goal_decumulation/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalDecumulationAllocationValidateBeforeCall(GoalDecumulationAllocation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling goalDecumulationAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalDecumulationAllocationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal decumulation allocation
     * 
     * @param payload  (required)
     * @return GoalAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Allocation">Goal decumulation allocation Documentation</a>
     */
    public GoalAllocationResponse goalDecumulationAllocation(GoalDecumulationAllocation payload) throws ApiException {
        ApiResponse<GoalAllocationResponse> resp = goalDecumulationAllocationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Goal decumulation allocation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;GoalAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Allocation">Goal decumulation allocation Documentation</a>
     */
    public ApiResponse<GoalAllocationResponse> goalDecumulationAllocationWithHttpInfo(GoalDecumulationAllocation payload) throws ApiException {
        com.squareup.okhttp.Call call = goalDecumulationAllocationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<GoalAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal decumulation allocation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Allocation">Goal decumulation allocation Documentation</a>
     */
    public com.squareup.okhttp.Call goalDecumulationAllocationAsync(GoalDecumulationAllocation payload, final ApiCallback<GoalAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalDecumulationAllocationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalDecumulationRecommendation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Recommendation">Goal decumulation recommendation Documentation</a>
     */
    public com.squareup.okhttp.Call goalDecumulationRecommendationCall(GoalDecumulationRecommendation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/goal_decumulation/recommendation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalDecumulationRecommendationValidateBeforeCall(GoalDecumulationRecommendation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling goalDecumulationRecommendation(Async)");
        }
        

        com.squareup.okhttp.Call call = goalDecumulationRecommendationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal decumulation recommendation
     * 
     * @param payload  (required)
     * @return GoalRecommendationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Recommendation">Goal decumulation recommendation Documentation</a>
     */
    public GoalRecommendationResponse goalDecumulationRecommendation(GoalDecumulationRecommendation payload) throws ApiException {
        ApiResponse<GoalRecommendationResponse> resp = goalDecumulationRecommendationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Goal decumulation recommendation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;GoalRecommendationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Recommendation">Goal decumulation recommendation Documentation</a>
     */
    public ApiResponse<GoalRecommendationResponse> goalDecumulationRecommendationWithHttpInfo(GoalDecumulationRecommendation payload) throws ApiException {
        com.squareup.okhttp.Call call = goalDecumulationRecommendationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<GoalRecommendationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal decumulation recommendation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Recommendation">Goal decumulation recommendation Documentation</a>
     */
    public com.squareup.okhttp.Call goalDecumulationRecommendationAsync(GoalDecumulationRecommendation payload, final ApiCallback<GoalRecommendationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalDecumulationRecommendationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalRecommendationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for goalDecumulationStatus
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Status">Goal decumulation status Documentation</a>
     */
    public com.squareup.okhttp.Call goalDecumulationStatusCall(GoalDecumulationStatus payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/goal_decumulation/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call goalDecumulationStatusValidateBeforeCall(GoalDecumulationStatus payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling goalDecumulationStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = goalDecumulationStatusCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Goal decumulation status
     * 
     * @param payload  (required)
     * @return GoalStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Status">Goal decumulation status Documentation</a>
     */
    public GoalStatusResponse goalDecumulationStatus(GoalDecumulationStatus payload) throws ApiException {
        ApiResponse<GoalStatusResponse> resp = goalDecumulationStatusWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Goal decumulation status
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;GoalStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Status">Goal decumulation status Documentation</a>
     */
    public ApiResponse<GoalStatusResponse> goalDecumulationStatusWithHttpInfo(GoalDecumulationStatus payload) throws ApiException {
        com.squareup.okhttp.Call call = goalDecumulationStatusValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<GoalStatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Goal decumulation status (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Decumulation-Goal-Status">Goal decumulation status Documentation</a>
     */
    public com.squareup.okhttp.Call goalDecumulationStatusAsync(GoalDecumulationStatus payload, final ApiCallback<GoalStatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = goalDecumulationStatusValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GoalStatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lifeInsuranceNeedsCalculator
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Life-Insurance-Needs-Calculator">Life insurance needs calculator Documentation</a>
     */
    public com.squareup.okhttp.Call lifeInsuranceNeedsCalculatorCall(LifeInsuranceCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/life_insurance/needs_calculator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lifeInsuranceNeedsCalculatorValidateBeforeCall(LifeInsuranceCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling lifeInsuranceNeedsCalculator(Async)");
        }
        

        com.squareup.okhttp.Call call = lifeInsuranceNeedsCalculatorCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Life insurance needs calculator
     * 
     * @param payload  (required)
     * @return LifeInsuranceNeedsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Life-Insurance-Needs-Calculator">Life insurance needs calculator Documentation</a>
     */
    public LifeInsuranceNeedsResponse lifeInsuranceNeedsCalculator(LifeInsuranceCalculator payload) throws ApiException {
        ApiResponse<LifeInsuranceNeedsResponse> resp = lifeInsuranceNeedsCalculatorWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Life insurance needs calculator
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;LifeInsuranceNeedsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Life-Insurance-Needs-Calculator">Life insurance needs calculator Documentation</a>
     */
    public ApiResponse<LifeInsuranceNeedsResponse> lifeInsuranceNeedsCalculatorWithHttpInfo(LifeInsuranceCalculator payload) throws ApiException {
        com.squareup.okhttp.Call call = lifeInsuranceNeedsCalculatorValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<LifeInsuranceNeedsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Life insurance needs calculator (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Life-Insurance-Needs-Calculator">Life insurance needs calculator Documentation</a>
     */
    public com.squareup.okhttp.Call lifeInsuranceNeedsCalculatorAsync(LifeInsuranceCalculator payload, final ApiCallback<LifeInsuranceNeedsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lifeInsuranceNeedsCalculatorValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LifeInsuranceNeedsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modelBacktest
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Model-Backtest">Model backtest Documentation</a>
     */
    public com.squareup.okhttp.Call modelBacktestCall(Backtest payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/backtest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modelBacktestValidateBeforeCall(Backtest payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling modelBacktest(Async)");
        }
        

        com.squareup.okhttp.Call call = modelBacktestCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Model backtest
     * 
     * @param payload  (required)
     * @return BacktestResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Model-Backtest">Model backtest Documentation</a>
     */
    public BacktestResponse modelBacktest(Backtest payload) throws ApiException {
        ApiResponse<BacktestResponse> resp = modelBacktestWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Model backtest
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;BacktestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Model-Backtest">Model backtest Documentation</a>
     */
    public ApiResponse<BacktestResponse> modelBacktestWithHttpInfo(Backtest payload) throws ApiException {
        com.squareup.okhttp.Call call = modelBacktestValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<BacktestResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Model backtest (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Model-Backtest">Model backtest Documentation</a>
     */
    public com.squareup.okhttp.Call modelBacktestAsync(Backtest payload, final ApiCallback<BacktestResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modelBacktestValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BacktestResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for monteCarlo
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Monte-Carlo">Monte Carlo Documentation</a>
     */
    public com.squareup.okhttp.Call monteCarloCall(MonteCarlo payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/monte_carlo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call monteCarloValidateBeforeCall(MonteCarlo payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling monteCarlo(Async)");
        }
        

        com.squareup.okhttp.Call call = monteCarloCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Monte Carlo
     * 
     * @param payload  (required)
     * @return MonteCarloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Monte-Carlo">Monte Carlo Documentation</a>
     */
    public MonteCarloResponse monteCarlo(MonteCarlo payload) throws ApiException {
        ApiResponse<MonteCarloResponse> resp = monteCarloWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Monte Carlo
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;MonteCarloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Monte-Carlo">Monte Carlo Documentation</a>
     */
    public ApiResponse<MonteCarloResponse> monteCarloWithHttpInfo(MonteCarlo payload) throws ApiException {
        com.squareup.okhttp.Call call = monteCarloValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<MonteCarloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Monte Carlo (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Monte-Carlo">Monte Carlo Documentation</a>
     */
    public com.squareup.okhttp.Call monteCarloAsync(MonteCarlo payload, final ApiCallback<MonteCarloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = monteCarloValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MonteCarloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mortgageCalculatorDownPayment
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Down-Payment">Mortgage calculator - down payment Documentation</a>
     */
    public com.squareup.okhttp.Call mortgageCalculatorDownPaymentCall(MortgageCalculatorDownPayment payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/mortgage_calculator/down_payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mortgageCalculatorDownPaymentValidateBeforeCall(MortgageCalculatorDownPayment payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling mortgageCalculatorDownPayment(Async)");
        }
        

        com.squareup.okhttp.Call call = mortgageCalculatorDownPaymentCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mortgage calculator - down payment
     * 
     * @param payload  (required)
     * @return MortgageCalculatorDownpaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Down-Payment">Mortgage calculator - down payment Documentation</a>
     */
    public MortgageCalculatorDownpaymentResponse mortgageCalculatorDownPayment(MortgageCalculatorDownPayment payload) throws ApiException {
        ApiResponse<MortgageCalculatorDownpaymentResponse> resp = mortgageCalculatorDownPaymentWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Mortgage calculator - down payment
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;MortgageCalculatorDownpaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Down-Payment">Mortgage calculator - down payment Documentation</a>
     */
    public ApiResponse<MortgageCalculatorDownpaymentResponse> mortgageCalculatorDownPaymentWithHttpInfo(MortgageCalculatorDownPayment payload) throws ApiException {
        com.squareup.okhttp.Call call = mortgageCalculatorDownPaymentValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<MortgageCalculatorDownpaymentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mortgage calculator - down payment (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Down-Payment">Mortgage calculator - down payment Documentation</a>
     */
    public com.squareup.okhttp.Call mortgageCalculatorDownPaymentAsync(MortgageCalculatorDownPayment payload, final ApiCallback<MortgageCalculatorDownpaymentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mortgageCalculatorDownPaymentValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MortgageCalculatorDownpaymentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mortgageCalculatorHomePrice
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Home-Price">Mortgage calculator - home price Documentation</a>
     */
    public com.squareup.okhttp.Call mortgageCalculatorHomePriceCall(MortgageCalculatorHomePrice payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/mortgage_calculator/home_price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mortgageCalculatorHomePriceValidateBeforeCall(MortgageCalculatorHomePrice payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling mortgageCalculatorHomePrice(Async)");
        }
        

        com.squareup.okhttp.Call call = mortgageCalculatorHomePriceCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mortgage calculator - home price
     * 
     * @param payload  (required)
     * @return MortgageCalculatorHomepriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Home-Price">Mortgage calculator - home price Documentation</a>
     */
    public MortgageCalculatorHomepriceResponse mortgageCalculatorHomePrice(MortgageCalculatorHomePrice payload) throws ApiException {
        ApiResponse<MortgageCalculatorHomepriceResponse> resp = mortgageCalculatorHomePriceWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Mortgage calculator - home price
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;MortgageCalculatorHomepriceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Home-Price">Mortgage calculator - home price Documentation</a>
     */
    public ApiResponse<MortgageCalculatorHomepriceResponse> mortgageCalculatorHomePriceWithHttpInfo(MortgageCalculatorHomePrice payload) throws ApiException {
        com.squareup.okhttp.Call call = mortgageCalculatorHomePriceValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<MortgageCalculatorHomepriceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mortgage calculator - home price (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Home-Price">Mortgage calculator - home price Documentation</a>
     */
    public com.squareup.okhttp.Call mortgageCalculatorHomePriceAsync(MortgageCalculatorHomePrice payload, final ApiCallback<MortgageCalculatorHomepriceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mortgageCalculatorHomePriceValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MortgageCalculatorHomepriceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mortgageCalculatorPeriodicPayment
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Periodic-Payment">Mortgage calculator - periodic payment Documentation</a>
     */
    public com.squareup.okhttp.Call mortgageCalculatorPeriodicPaymentCall(MortgageCalculatorPeriodicPayment payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/mortgage_calculator/periodic_payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mortgageCalculatorPeriodicPaymentValidateBeforeCall(MortgageCalculatorPeriodicPayment payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling mortgageCalculatorPeriodicPayment(Async)");
        }
        

        com.squareup.okhttp.Call call = mortgageCalculatorPeriodicPaymentCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mortgage calculator - periodic payment
     * 
     * @param payload  (required)
     * @return MortgageCalculatorPeriodicpaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Periodic-Payment">Mortgage calculator - periodic payment Documentation</a>
     */
    public MortgageCalculatorPeriodicpaymentResponse mortgageCalculatorPeriodicPayment(MortgageCalculatorPeriodicPayment payload) throws ApiException {
        ApiResponse<MortgageCalculatorPeriodicpaymentResponse> resp = mortgageCalculatorPeriodicPaymentWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Mortgage calculator - periodic payment
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;MortgageCalculatorPeriodicpaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Periodic-Payment">Mortgage calculator - periodic payment Documentation</a>
     */
    public ApiResponse<MortgageCalculatorPeriodicpaymentResponse> mortgageCalculatorPeriodicPaymentWithHttpInfo(MortgageCalculatorPeriodicPayment payload) throws ApiException {
        com.squareup.okhttp.Call call = mortgageCalculatorPeriodicPaymentValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<MortgageCalculatorPeriodicpaymentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mortgage calculator - periodic payment (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Periodic-Payment">Mortgage calculator - periodic payment Documentation</a>
     */
    public com.squareup.okhttp.Call mortgageCalculatorPeriodicPaymentAsync(MortgageCalculatorPeriodicPayment payload, final ApiCallback<MortgageCalculatorPeriodicpaymentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mortgageCalculatorPeriodicPaymentValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MortgageCalculatorPeriodicpaymentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mvo
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Mean-Variance-Optimization">Mean-variance optimization Documentation</a>
     */
    public com.squareup.okhttp.Call mvoCall(OptConfigPortfolio payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/mvo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mvoValidateBeforeCall(OptConfigPortfolio payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling mvo(Async)");
        }
        

        com.squareup.okhttp.Call call = mvoCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mean-variance optimization
     * 
     * @param payload  (required)
     * @return MvoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Mean-Variance-Optimization">Mean-variance optimization Documentation</a>
     */
    public MvoResponse mvo(OptConfigPortfolio payload) throws ApiException {
        ApiResponse<MvoResponse> resp = mvoWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Mean-variance optimization
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;MvoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Mean-Variance-Optimization">Mean-variance optimization Documentation</a>
     */
    public ApiResponse<MvoResponse> mvoWithHttpInfo(OptConfigPortfolio payload) throws ApiException {
        com.squareup.okhttp.Call call = mvoValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<MvoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mean-variance optimization (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Mean-Variance-Optimization">Mean-variance optimization Documentation</a>
     */
    public com.squareup.okhttp.Call mvoAsync(OptConfigPortfolio payload, final ApiCallback<MvoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mvoValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MvoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioDiversificationScore
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Diversification-Score">Portfolio diversification score Documentation</a>
     */
    public com.squareup.okhttp.Call portfolioDiversificationScoreCall(DiversificationScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/diversification_score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioDiversificationScoreValidateBeforeCall(DiversificationScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling portfolioDiversificationScore(Async)");
        }
        

        com.squareup.okhttp.Call call = portfolioDiversificationScoreCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Portfolio diversification score
     * 
     * @param payload  (required)
     * @return PfloDiversificationScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Diversification-Score">Portfolio diversification score Documentation</a>
     */
    public PfloDiversificationScoreResponse portfolioDiversificationScore(DiversificationScore payload) throws ApiException {
        ApiResponse<PfloDiversificationScoreResponse> resp = portfolioDiversificationScoreWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Portfolio diversification score
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;PfloDiversificationScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Diversification-Score">Portfolio diversification score Documentation</a>
     */
    public ApiResponse<PfloDiversificationScoreResponse> portfolioDiversificationScoreWithHttpInfo(DiversificationScore payload) throws ApiException {
        com.squareup.okhttp.Call call = portfolioDiversificationScoreValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<PfloDiversificationScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Portfolio diversification score (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Diversification-Score">Portfolio diversification score Documentation</a>
     */
    public com.squareup.okhttp.Call portfolioDiversificationScoreAsync(DiversificationScore payload, final ApiCallback<PfloDiversificationScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioDiversificationScoreValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PfloDiversificationScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioOptimizationScore
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-Optimization-Score">Portfolio optimization score Documentation</a>
     */
    public com.squareup.okhttp.Call portfolioOptimizationScoreCall(OptimizationScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/portfolio_optimization_score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioOptimizationScoreValidateBeforeCall(OptimizationScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling portfolioOptimizationScore(Async)");
        }
        

        com.squareup.okhttp.Call call = portfolioOptimizationScoreCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Portfolio optimization score
     * 
     * @param payload  (required)
     * @return PfloOptimizationScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-Optimization-Score">Portfolio optimization score Documentation</a>
     */
    public PfloOptimizationScoreResponse portfolioOptimizationScore(OptimizationScore payload) throws ApiException {
        ApiResponse<PfloOptimizationScoreResponse> resp = portfolioOptimizationScoreWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Portfolio optimization score
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;PfloOptimizationScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-Optimization-Score">Portfolio optimization score Documentation</a>
     */
    public ApiResponse<PfloOptimizationScoreResponse> portfolioOptimizationScoreWithHttpInfo(OptimizationScore payload) throws ApiException {
        com.squareup.okhttp.Call call = portfolioOptimizationScoreValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<PfloOptimizationScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Portfolio optimization score (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-Optimization-Score">Portfolio optimization score Documentation</a>
     */
    public com.squareup.okhttp.Call portfolioOptimizationScoreAsync(OptimizationScore payload, final ApiCallback<PfloOptimizationScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioOptimizationScoreValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PfloOptimizationScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for portfolioWhatIf
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-What-If">Portfolio what-if Documentation</a>
     */
    public com.squareup.okhttp.Call portfolioWhatIfCall(WhatIfPortfolio payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/portfolio_what_if";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call portfolioWhatIfValidateBeforeCall(WhatIfPortfolio payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling portfolioWhatIf(Async)");
        }
        

        com.squareup.okhttp.Call call = portfolioWhatIfCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Portfolio what-if
     * 
     * @param payload  (required)
     * @return PortfolioWhatIfResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-What-If">Portfolio what-if Documentation</a>
     */
    public PortfolioWhatIfResponse portfolioWhatIf(WhatIfPortfolio payload) throws ApiException {
        ApiResponse<PortfolioWhatIfResponse> resp = portfolioWhatIfWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Portfolio what-if
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;PortfolioWhatIfResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-What-If">Portfolio what-if Documentation</a>
     */
    public ApiResponse<PortfolioWhatIfResponse> portfolioWhatIfWithHttpInfo(WhatIfPortfolio payload) throws ApiException {
        com.squareup.okhttp.Call call = portfolioWhatIfValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<PortfolioWhatIfResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Portfolio what-if (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Portfolio-What-If">Portfolio what-if Documentation</a>
     */
    public com.squareup.okhttp.Call portfolioWhatIfAsync(WhatIfPortfolio payload, final ApiCallback<PortfolioWhatIfResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = portfolioWhatIfValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioWhatIfResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purchaseCalculatorDepositAmount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-149">Purchase calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call purchaseCalculatorDepositAmountCall(PurchaseCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/purchase_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purchaseCalculatorDepositAmountValidateBeforeCall(PurchaseCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling purchaseCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = purchaseCalculatorDepositAmountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purchase calculator - deposit amount
     * 
     * @param payload  (required)
     * @return PurchaseCalculatorDepositamountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-149">Purchase calculator - deposit amount Documentation</a>
     */
    public PurchaseCalculatorDepositamountResponse purchaseCalculatorDepositAmount(PurchaseCalculatorDepositAmount payload) throws ApiException {
        ApiResponse<PurchaseCalculatorDepositamountResponse> resp = purchaseCalculatorDepositAmountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Purchase calculator - deposit amount
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;PurchaseCalculatorDepositamountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-149">Purchase calculator - deposit amount Documentation</a>
     */
    public ApiResponse<PurchaseCalculatorDepositamountResponse> purchaseCalculatorDepositAmountWithHttpInfo(PurchaseCalculatorDepositAmount payload) throws ApiException {
        com.squareup.okhttp.Call call = purchaseCalculatorDepositAmountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<PurchaseCalculatorDepositamountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Purchase calculator - deposit amount (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-149">Purchase calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call purchaseCalculatorDepositAmountAsync(PurchaseCalculatorDepositAmount payload, final ApiCallback<PurchaseCalculatorDepositamountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purchaseCalculatorDepositAmountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PurchaseCalculatorDepositamountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purchaseCalculatorHorizon
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Horizon">Purchase calculator - horizon Documentation</a>
     */
    public com.squareup.okhttp.Call purchaseCalculatorHorizonCall(PurchaseCalculatorHorizon payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/purchase_calculator/horizon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purchaseCalculatorHorizonValidateBeforeCall(PurchaseCalculatorHorizon payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling purchaseCalculatorHorizon(Async)");
        }
        

        com.squareup.okhttp.Call call = purchaseCalculatorHorizonCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purchase calculator - horizon
     * 
     * @param payload  (required)
     * @return PurchaseCalculatorPurchasehorizonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Horizon">Purchase calculator - horizon Documentation</a>
     */
    public PurchaseCalculatorPurchasehorizonResponse purchaseCalculatorHorizon(PurchaseCalculatorHorizon payload) throws ApiException {
        ApiResponse<PurchaseCalculatorPurchasehorizonResponse> resp = purchaseCalculatorHorizonWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Purchase calculator - horizon
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;PurchaseCalculatorPurchasehorizonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Horizon">Purchase calculator - horizon Documentation</a>
     */
    public ApiResponse<PurchaseCalculatorPurchasehorizonResponse> purchaseCalculatorHorizonWithHttpInfo(PurchaseCalculatorHorizon payload) throws ApiException {
        com.squareup.okhttp.Call call = purchaseCalculatorHorizonValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<PurchaseCalculatorPurchasehorizonResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Purchase calculator - horizon (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Horizon">Purchase calculator - horizon Documentation</a>
     */
    public com.squareup.okhttp.Call purchaseCalculatorHorizonAsync(PurchaseCalculatorHorizon payload, final ApiCallback<PurchaseCalculatorPurchasehorizonResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purchaseCalculatorHorizonValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PurchaseCalculatorPurchasehorizonResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purchaseCalculatorPurchaseAmount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Amount">Purchase calculator - purchase amount Documentation</a>
     */
    public com.squareup.okhttp.Call purchaseCalculatorPurchaseAmountCall(PurchaseCalculatorAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/purchase_calculator/amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purchaseCalculatorPurchaseAmountValidateBeforeCall(PurchaseCalculatorAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling purchaseCalculatorPurchaseAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = purchaseCalculatorPurchaseAmountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purchase calculator - purchase amount
     * 
     * @param payload  (required)
     * @return PurchaseCalculatorPurchaseamountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Amount">Purchase calculator - purchase amount Documentation</a>
     */
    public PurchaseCalculatorPurchaseamountResponse purchaseCalculatorPurchaseAmount(PurchaseCalculatorAmount payload) throws ApiException {
        ApiResponse<PurchaseCalculatorPurchaseamountResponse> resp = purchaseCalculatorPurchaseAmountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Purchase calculator - purchase amount
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;PurchaseCalculatorPurchaseamountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Amount">Purchase calculator - purchase amount Documentation</a>
     */
    public ApiResponse<PurchaseCalculatorPurchaseamountResponse> purchaseCalculatorPurchaseAmountWithHttpInfo(PurchaseCalculatorAmount payload) throws ApiException {
        com.squareup.okhttp.Call call = purchaseCalculatorPurchaseAmountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<PurchaseCalculatorPurchaseamountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Purchase calculator - purchase amount (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Purchase-Amount">Purchase calculator - purchase amount Documentation</a>
     */
    public com.squareup.okhttp.Call purchaseCalculatorPurchaseAmountAsync(PurchaseCalculatorAmount payload, final ApiCallback<PurchaseCalculatorPurchaseamountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purchaseCalculatorPurchaseAmountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PurchaseCalculatorPurchaseamountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rebalancingSignal
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Rebalancing">Rebalancing Documentation</a>
     */
    public com.squareup.okhttp.Call rebalancingSignalCall(Rebalance payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/rebalancing_signal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rebalancingSignalValidateBeforeCall(Rebalance payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling rebalancingSignal(Async)");
        }
        

        com.squareup.okhttp.Call call = rebalancingSignalCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rebalancing
     * 
     * @param payload  (required)
     * @return RebalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Rebalancing">Rebalancing Documentation</a>
     */
    public RebalanceResponse rebalancingSignal(Rebalance payload) throws ApiException {
        ApiResponse<RebalanceResponse> resp = rebalancingSignalWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Rebalancing
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;RebalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Rebalancing">Rebalancing Documentation</a>
     */
    public ApiResponse<RebalanceResponse> rebalancingSignalWithHttpInfo(Rebalance payload) throws ApiException {
        com.squareup.okhttp.Call call = rebalancingSignalValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<RebalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rebalancing (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Rebalancing">Rebalancing Documentation</a>
     */
    public com.squareup.okhttp.Call rebalancingSignalAsync(Rebalance payload, final ApiCallback<RebalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rebalancingSignalValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RebalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retirementCalculatorDepositAmount
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-257">Retirement calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call retirementCalculatorDepositAmountCall(RetirementCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/retirement_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retirementCalculatorDepositAmountValidateBeforeCall(RetirementCalculatorDepositAmount payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling retirementCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = retirementCalculatorDepositAmountCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retirement calculator - deposit amount
     * 
     * @param payload  (required)
     * @return RetirementCalculatorDepositamountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-257">Retirement calculator - deposit amount Documentation</a>
     */
    public RetirementCalculatorDepositamountResponse retirementCalculatorDepositAmount(RetirementCalculatorDepositAmount payload) throws ApiException {
        ApiResponse<RetirementCalculatorDepositamountResponse> resp = retirementCalculatorDepositAmountWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Retirement calculator - deposit amount
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;RetirementCalculatorDepositamountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-257">Retirement calculator - deposit amount Documentation</a>
     */
    public ApiResponse<RetirementCalculatorDepositamountResponse> retirementCalculatorDepositAmountWithHttpInfo(RetirementCalculatorDepositAmount payload) throws ApiException {
        com.squareup.okhttp.Call call = retirementCalculatorDepositAmountValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<RetirementCalculatorDepositamountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retirement calculator - deposit amount (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Deposit-Amount-257">Retirement calculator - deposit amount Documentation</a>
     */
    public com.squareup.okhttp.Call retirementCalculatorDepositAmountAsync(RetirementCalculatorDepositAmount payload, final ApiCallback<RetirementCalculatorDepositamountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retirementCalculatorDepositAmountValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetirementCalculatorDepositamountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retirementCalculatorExpenses
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Retirement-Expense">Retirement calculator - expenses Documentation</a>
     */
    public com.squareup.okhttp.Call retirementCalculatorExpensesCall(RetirementCalculatorExpenses payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/retirement_calculator/expenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retirementCalculatorExpensesValidateBeforeCall(RetirementCalculatorExpenses payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling retirementCalculatorExpenses(Async)");
        }
        

        com.squareup.okhttp.Call call = retirementCalculatorExpensesCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retirement calculator - expenses
     * 
     * @param payload  (required)
     * @return RetirementCalculatorExpensesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Retirement-Expense">Retirement calculator - expenses Documentation</a>
     */
    public RetirementCalculatorExpensesResponse retirementCalculatorExpenses(RetirementCalculatorExpenses payload) throws ApiException {
        ApiResponse<RetirementCalculatorExpensesResponse> resp = retirementCalculatorExpensesWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Retirement calculator - expenses
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;RetirementCalculatorExpensesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Retirement-Expense">Retirement calculator - expenses Documentation</a>
     */
    public ApiResponse<RetirementCalculatorExpensesResponse> retirementCalculatorExpensesWithHttpInfo(RetirementCalculatorExpenses payload) throws ApiException {
        com.squareup.okhttp.Call call = retirementCalculatorExpensesValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<RetirementCalculatorExpensesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retirement calculator - expenses (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Retirement-Expense">Retirement calculator - expenses Documentation</a>
     */
    public com.squareup.okhttp.Call retirementCalculatorExpensesAsync(RetirementCalculatorExpenses payload, final ApiCallback<RetirementCalculatorExpensesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retirementCalculatorExpensesValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetirementCalculatorExpensesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retirementCalculatorPercentCovered
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered-158">Retirement calculator - percent of costs covered Documentation</a>
     */
    public com.squareup.okhttp.Call retirementCalculatorPercentCoveredCall(RetirementCalculatorPercentCovered payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/retirement_calculator/percent_covered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retirementCalculatorPercentCoveredValidateBeforeCall(RetirementCalculatorPercentCovered payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling retirementCalculatorPercentCovered(Async)");
        }
        

        com.squareup.okhttp.Call call = retirementCalculatorPercentCoveredCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retirement calculator - percent of costs covered
     * 
     * @param payload  (required)
     * @return RetirementCalculatorPctcoveredResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered-158">Retirement calculator - percent of costs covered Documentation</a>
     */
    public RetirementCalculatorPctcoveredResponse retirementCalculatorPercentCovered(RetirementCalculatorPercentCovered payload) throws ApiException {
        ApiResponse<RetirementCalculatorPctcoveredResponse> resp = retirementCalculatorPercentCoveredWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Retirement calculator - percent of costs covered
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;RetirementCalculatorPctcoveredResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered-158">Retirement calculator - percent of costs covered Documentation</a>
     */
    public ApiResponse<RetirementCalculatorPctcoveredResponse> retirementCalculatorPercentCoveredWithHttpInfo(RetirementCalculatorPercentCovered payload) throws ApiException {
        com.squareup.okhttp.Call call = retirementCalculatorPercentCoveredValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<RetirementCalculatorPctcoveredResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retirement calculator - percent of costs covered (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Percent-of-Costs-Covered-158">Retirement calculator - percent of costs covered Documentation</a>
     */
    public com.squareup.okhttp.Call retirementCalculatorPercentCoveredAsync(RetirementCalculatorPercentCovered payload, final ApiCallback<RetirementCalculatorPctcoveredResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retirementCalculatorPercentCoveredValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetirementCalculatorPctcoveredResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for riskAllocation
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Allocation">Risk allocation Documentation</a>
     */
    public com.squareup.okhttp.Call riskAllocationCall(RiskAllocation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/risk_allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call riskAllocationValidateBeforeCall(RiskAllocation payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling riskAllocation(Async)");
        }
        

        com.squareup.okhttp.Call call = riskAllocationCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Risk allocation
     * 
     * @param payload  (required)
     * @return RiskAllocationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Allocation">Risk allocation Documentation</a>
     */
    public RiskAllocationResponse riskAllocation(RiskAllocation payload) throws ApiException {
        ApiResponse<RiskAllocationResponse> resp = riskAllocationWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Risk allocation
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;RiskAllocationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Allocation">Risk allocation Documentation</a>
     */
    public ApiResponse<RiskAllocationResponse> riskAllocationWithHttpInfo(RiskAllocation payload) throws ApiException {
        com.squareup.okhttp.Call call = riskAllocationValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<RiskAllocationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Risk allocation (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Allocation">Risk allocation Documentation</a>
     */
    public com.squareup.okhttp.Call riskAllocationAsync(RiskAllocation payload, final ApiCallback<RiskAllocationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = riskAllocationValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskAllocationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for riskScore
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Score">Risk score Documentation</a>
     */
    public com.squareup.okhttp.Call riskScoreCall(RiskScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/risk_score";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call riskScoreValidateBeforeCall(RiskScore payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling riskScore(Async)");
        }
        

        com.squareup.okhttp.Call call = riskScoreCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Risk score
     * 
     * @param payload  (required)
     * @return RiskScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Score">Risk score Documentation</a>
     */
    public RiskScoreResponse riskScore(RiskScore payload) throws ApiException {
        ApiResponse<RiskScoreResponse> resp = riskScoreWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Risk score
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;RiskScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Score">Risk score Documentation</a>
     */
    public ApiResponse<RiskScoreResponse> riskScoreWithHttpInfo(RiskScore payload) throws ApiException {
        com.squareup.okhttp.Call call = riskScoreValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<RiskScoreResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Risk score (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Risk-Score">Risk score Documentation</a>
     */
    public com.squareup.okhttp.Call riskScoreAsync(RiskScore payload, final ApiCallback<RiskScoreResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = riskScoreValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RiskScoreResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for savingsCalculator
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Savings-Calculator">Savings calculator Documentation</a>
     */
    public com.squareup.okhttp.Call savingsCalculatorCall(SimpleSavingsCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/savings_calculator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call savingsCalculatorValidateBeforeCall(SimpleSavingsCalculator payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling savingsCalculator(Async)");
        }
        

        com.squareup.okhttp.Call call = savingsCalculatorCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Savings calculator
     * 
     * @param payload  (required)
     * @return SavingsCalculatorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Savings-Calculator">Savings calculator Documentation</a>
     */
    public SavingsCalculatorResponse savingsCalculator(SimpleSavingsCalculator payload) throws ApiException {
        ApiResponse<SavingsCalculatorResponse> resp = savingsCalculatorWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Savings calculator
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;SavingsCalculatorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Savings-Calculator">Savings calculator Documentation</a>
     */
    public ApiResponse<SavingsCalculatorResponse> savingsCalculatorWithHttpInfo(SimpleSavingsCalculator payload) throws ApiException {
        com.squareup.okhttp.Call call = savingsCalculatorValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<SavingsCalculatorResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Savings calculator (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Savings-Calculator">Savings calculator Documentation</a>
     */
    public com.squareup.okhttp.Call savingsCalculatorAsync(SimpleSavingsCalculator payload, final ApiCallback<SavingsCalculatorResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savingsCalculatorValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SavingsCalculatorResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scenarioAnalysis
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Scenario-Analysis">Scenario analysis Documentation</a>
     */
    public com.squareup.okhttp.Call scenarioAnalysisCall(ScenarioAnalysis payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/scenario_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scenarioAnalysisValidateBeforeCall(ScenarioAnalysis payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling scenarioAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = scenarioAnalysisCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scenario analysis
     * 
     * @param payload  (required)
     * @return ScenarioAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Scenario-Analysis">Scenario analysis Documentation</a>
     */
    public ScenarioAnalysisResponse scenarioAnalysis(ScenarioAnalysis payload) throws ApiException {
        ApiResponse<ScenarioAnalysisResponse> resp = scenarioAnalysisWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Scenario analysis
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;ScenarioAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Scenario-Analysis">Scenario analysis Documentation</a>
     */
    public ApiResponse<ScenarioAnalysisResponse> scenarioAnalysisWithHttpInfo(ScenarioAnalysis payload) throws ApiException {
        com.squareup.okhttp.Call call = scenarioAnalysisValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<ScenarioAnalysisResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scenario analysis (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Scenario-Analysis">Scenario analysis Documentation</a>
     */
    public com.squareup.okhttp.Call scenarioAnalysisAsync(ScenarioAnalysis payload, final ApiCallback<ScenarioAnalysisResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scenarioAnalysisValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScenarioAnalysisResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sensitivityAnalysis
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Sensitivity-analysis">Sensitivity analysis Documentation</a>
     */
    public com.squareup.okhttp.Call sensitivityAnalysisCall(SensitivityAnalysis payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/sensitivity_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sensitivityAnalysisValidateBeforeCall(SensitivityAnalysis payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling sensitivityAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = sensitivityAnalysisCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sensitivity analysis
     * 
     * @param payload  (required)
     * @return SensitivityAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Sensitivity-analysis">Sensitivity analysis Documentation</a>
     */
    public SensitivityAnalysisResponse sensitivityAnalysis(SensitivityAnalysis payload) throws ApiException {
        ApiResponse<SensitivityAnalysisResponse> resp = sensitivityAnalysisWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Sensitivity analysis
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;SensitivityAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Sensitivity-analysis">Sensitivity analysis Documentation</a>
     */
    public ApiResponse<SensitivityAnalysisResponse> sensitivityAnalysisWithHttpInfo(SensitivityAnalysis payload) throws ApiException {
        com.squareup.okhttp.Call call = sensitivityAnalysisValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<SensitivityAnalysisResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sensitivity analysis (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Sensitivity-analysis">Sensitivity analysis Documentation</a>
     */
    public com.squareup.okhttp.Call sensitivityAnalysisAsync(SensitivityAnalysis payload, final ApiCallback<SensitivityAnalysisResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sensitivityAnalysisValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SensitivityAnalysisResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spendingAnalysis
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Spending-Analysis">Spending Analysis Documentation</a>
     */
    public com.squareup.okhttp.Call spendingAnalysisCall(SpendingAnalysis payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/spending_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spendingAnalysisValidateBeforeCall(SpendingAnalysis payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling spendingAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = spendingAnalysisCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Spending Analysis
     * 
     * @param payload  (required)
     * @return SpendingAnalysisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Spending-Analysis">Spending Analysis Documentation</a>
     */
    public SpendingAnalysisResponse spendingAnalysis(SpendingAnalysis payload) throws ApiException {
        ApiResponse<SpendingAnalysisResponse> resp = spendingAnalysisWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Spending Analysis
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;SpendingAnalysisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Spending-Analysis">Spending Analysis Documentation</a>
     */
    public ApiResponse<SpendingAnalysisResponse> spendingAnalysisWithHttpInfo(SpendingAnalysis payload) throws ApiException {
        com.squareup.okhttp.Call call = spendingAnalysisValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<SpendingAnalysisResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Spending Analysis (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Spending-Analysis">Spending Analysis Documentation</a>
     */
    public com.squareup.okhttp.Call spendingAnalysisAsync(SpendingAnalysis payload, final ApiCallback<SpendingAnalysisResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spendingAnalysisValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpendingAnalysisResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variableAnnuity
     * @param payload  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Variable-Annuity">Variable annuity Documentation</a>
     */
    public com.squareup.okhttp.Call variableAnnuityCall(VariableAnnuityPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = payload;

        // create path and map variables
        String localVarPath = "/proton/v1/variable_annuity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call variableAnnuityValidateBeforeCall(VariableAnnuityPayload payload, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling variableAnnuity(Async)");
        }
        

        com.squareup.okhttp.Call call = variableAnnuityCall(payload, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Variable annuity
     * 
     * @param payload  (required)
     * @return VariableAnnuityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Variable-Annuity">Variable annuity Documentation</a>
     */
    public VariableAnnuityResponse variableAnnuity(VariableAnnuityPayload payload) throws ApiException {
        ApiResponse<VariableAnnuityResponse> resp = variableAnnuityWithHttpInfo(payload);
        return resp.getData();
    }

    /**
     * Variable annuity
     * 
     * @param payload  (required)
     * @return ApiResponse&lt;VariableAnnuityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Variable-Annuity">Variable annuity Documentation</a>
     */
    public ApiResponse<VariableAnnuityResponse> variableAnnuityWithHttpInfo(VariableAnnuityPayload payload) throws ApiException {
        com.squareup.okhttp.Call call = variableAnnuityValidateBeforeCall(payload, null, null);
        Type localVarReturnType = new TypeToken<VariableAnnuityResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Variable annuity (asynchronously)
     * 
     * @param payload  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="https://www.hydrogenplatform.com/docs/proton/v1/#Variable-Annuity">Variable annuity Documentation</a>
     */
    public com.squareup.okhttp.Call variableAnnuityAsync(VariableAnnuityPayload payload, final ApiCallback<VariableAnnuityResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = variableAnnuityValidateBeforeCall(payload, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VariableAnnuityResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
