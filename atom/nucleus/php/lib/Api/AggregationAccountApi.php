<?php
/**
 * AggregationAccountApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\nucleus\ApiException;
use com\hydrogen\nucleus\Configuration;
use com\hydrogen\nucleus\HeaderSelector;
use com\hydrogen\nucleus\ObjectSerializer;

/**
 * AggregationAccountApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregationAccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAggregationAccountBalanceBulkUsingPost
     *
     * Create a bulk aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance[] $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountBalance[]
     */
    public function createAggregationAccountBalanceBulkUsingPost($aggregation_account_balance)
    {
        list($response) = $this->createAggregationAccountBalanceBulkUsingPostWithHttpInfo($aggregation_account_balance);
        return $response;
    }

    /**
     * Operation createAggregationAccountBalanceBulkUsingPostWithHttpInfo
     *
     * Create a bulk aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance[] $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountBalance[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountBalanceBulkUsingPostWithHttpInfo($aggregation_account_balance)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance[]';
        $request = $this->createAggregationAccountBalanceBulkUsingPostRequest($aggregation_account_balance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountBalance[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountBalanceBulkUsingPostAsync
     *
     * Create a bulk aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance[] $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountBalanceBulkUsingPostAsync($aggregation_account_balance)
    {
        return $this->createAggregationAccountBalanceBulkUsingPostAsyncWithHttpInfo($aggregation_account_balance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountBalanceBulkUsingPostAsyncWithHttpInfo
     *
     * Create a bulk aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance[] $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountBalanceBulkUsingPostAsyncWithHttpInfo($aggregation_account_balance)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance[]';
        $request = $this->createAggregationAccountBalanceBulkUsingPostRequest($aggregation_account_balance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountBalanceBulkUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance[] $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountBalanceBulkUsingPostRequest($aggregation_account_balance)
    {
        // verify the required parameter 'aggregation_account_balance' is set
        if ($aggregation_account_balance === null || (is_array($aggregation_account_balance) && count($aggregation_account_balance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_balance when calling createAggregationAccountBalanceBulkUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/bulk_aggregation_account_balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_balance)) {
            $_tempBody = $aggregation_account_balance;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAggregationAccountBalanceUsingPost
     *
     * Create an aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountBalance
     */
    public function createAggregationAccountBalanceUsingPost($aggregation_account_balance)
    {
        list($response) = $this->createAggregationAccountBalanceUsingPostWithHttpInfo($aggregation_account_balance);
        return $response;
    }

    /**
     * Operation createAggregationAccountBalanceUsingPostWithHttpInfo
     *
     * Create an aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountBalanceUsingPostWithHttpInfo($aggregation_account_balance)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance';
        $request = $this->createAggregationAccountBalanceUsingPostRequest($aggregation_account_balance);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountBalanceUsingPostAsync
     *
     * Create an aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountBalanceUsingPostAsync($aggregation_account_balance)
    {
        return $this->createAggregationAccountBalanceUsingPostAsyncWithHttpInfo($aggregation_account_balance)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountBalanceUsingPostAsyncWithHttpInfo
     *
     * Create an aggregation account balance
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountBalanceUsingPostAsyncWithHttpInfo($aggregation_account_balance)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance';
        $request = $this->createAggregationAccountBalanceUsingPostRequest($aggregation_account_balance);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountBalanceUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountBalance $aggregation_account_balance aggregationAccountBalance (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountBalanceUsingPostRequest($aggregation_account_balance)
    {
        // verify the required parameter 'aggregation_account_balance' is set
        if ($aggregation_account_balance === null || (is_array($aggregation_account_balance) && count($aggregation_account_balance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_balance when calling createAggregationAccountBalanceUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_balance)) {
            $_tempBody = $aggregation_account_balance;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAggregationAccountBulkUsingPost
     *
     * Create a bulk aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccount[]
     */
    public function createAggregationAccountBulkUsingPost($aggregation_account_list)
    {
        list($response) = $this->createAggregationAccountBulkUsingPostWithHttpInfo($aggregation_account_list);
        return $response;
    }

    /**
     * Operation createAggregationAccountBulkUsingPostWithHttpInfo
     *
     * Create a bulk aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountBulkUsingPostWithHttpInfo($aggregation_account_list)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount[]';
        $request = $this->createAggregationAccountBulkUsingPostRequest($aggregation_account_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountBulkUsingPostAsync
     *
     * Create a bulk aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountBulkUsingPostAsync($aggregation_account_list)
    {
        return $this->createAggregationAccountBulkUsingPostAsyncWithHttpInfo($aggregation_account_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountBulkUsingPostAsyncWithHttpInfo
     *
     * Create a bulk aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountBulkUsingPostAsyncWithHttpInfo($aggregation_account_list)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount[]';
        $request = $this->createAggregationAccountBulkUsingPostRequest($aggregation_account_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountBulkUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountBulkUsingPostRequest($aggregation_account_list)
    {
        // verify the required parameter 'aggregation_account_list' is set
        if ($aggregation_account_list === null || (is_array($aggregation_account_list) && count($aggregation_account_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_list when calling createAggregationAccountBulkUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/bulk_aggregation_account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_list)) {
            $_tempBody = $aggregation_account_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAggregationAccountHoldingBulkUsingPost
     *
     * Create a bulk aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding[] $aggregation_transaction aggregationTransaction (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountHolding[]
     */
    public function createAggregationAccountHoldingBulkUsingPost($aggregation_transaction)
    {
        list($response) = $this->createAggregationAccountHoldingBulkUsingPostWithHttpInfo($aggregation_transaction);
        return $response;
    }

    /**
     * Operation createAggregationAccountHoldingBulkUsingPostWithHttpInfo
     *
     * Create a bulk aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding[] $aggregation_transaction aggregationTransaction (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountHolding[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountHoldingBulkUsingPostWithHttpInfo($aggregation_transaction)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding[]';
        $request = $this->createAggregationAccountHoldingBulkUsingPostRequest($aggregation_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountHolding[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountHoldingBulkUsingPostAsync
     *
     * Create a bulk aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding[] $aggregation_transaction aggregationTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountHoldingBulkUsingPostAsync($aggregation_transaction)
    {
        return $this->createAggregationAccountHoldingBulkUsingPostAsyncWithHttpInfo($aggregation_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountHoldingBulkUsingPostAsyncWithHttpInfo
     *
     * Create a bulk aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding[] $aggregation_transaction aggregationTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountHoldingBulkUsingPostAsyncWithHttpInfo($aggregation_transaction)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding[]';
        $request = $this->createAggregationAccountHoldingBulkUsingPostRequest($aggregation_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountHoldingBulkUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding[] $aggregation_transaction aggregationTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountHoldingBulkUsingPostRequest($aggregation_transaction)
    {
        // verify the required parameter 'aggregation_transaction' is set
        if ($aggregation_transaction === null || (is_array($aggregation_transaction) && count($aggregation_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_transaction when calling createAggregationAccountHoldingBulkUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/bulk_aggregation_account_holding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_transaction)) {
            $_tempBody = $aggregation_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAggregationAccountHoldingUsingPost
     *
     * Create an aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountHolding
     */
    public function createAggregationAccountHoldingUsingPost($aggregation_account_holding)
    {
        list($response) = $this->createAggregationAccountHoldingUsingPostWithHttpInfo($aggregation_account_holding);
        return $response;
    }

    /**
     * Operation createAggregationAccountHoldingUsingPostWithHttpInfo
     *
     * Create an aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountHolding, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountHoldingUsingPostWithHttpInfo($aggregation_account_holding)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding';
        $request = $this->createAggregationAccountHoldingUsingPostRequest($aggregation_account_holding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountHolding',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountHoldingUsingPostAsync
     *
     * Create an aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountHoldingUsingPostAsync($aggregation_account_holding)
    {
        return $this->createAggregationAccountHoldingUsingPostAsyncWithHttpInfo($aggregation_account_holding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountHoldingUsingPostAsyncWithHttpInfo
     *
     * Create an aggregation account holding
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountHoldingUsingPostAsyncWithHttpInfo($aggregation_account_holding)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding';
        $request = $this->createAggregationAccountHoldingUsingPostRequest($aggregation_account_holding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountHoldingUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountHolding $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountHoldingUsingPostRequest($aggregation_account_holding)
    {
        // verify the required parameter 'aggregation_account_holding' is set
        if ($aggregation_account_holding === null || (is_array($aggregation_account_holding) && count($aggregation_account_holding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_holding when calling createAggregationAccountHoldingUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_holding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_holding)) {
            $_tempBody = $aggregation_account_holding;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAggregationAccountTransactionBulkUsingPost
     *
     * Create a bulk aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction[] $aggregation_account_transactions aggregationAccountTransactions (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountTransaction[]
     */
    public function createAggregationAccountTransactionBulkUsingPost($aggregation_account_transactions)
    {
        list($response) = $this->createAggregationAccountTransactionBulkUsingPostWithHttpInfo($aggregation_account_transactions);
        return $response;
    }

    /**
     * Operation createAggregationAccountTransactionBulkUsingPostWithHttpInfo
     *
     * Create a bulk aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction[] $aggregation_account_transactions aggregationAccountTransactions (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountTransaction[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountTransactionBulkUsingPostWithHttpInfo($aggregation_account_transactions)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction[]';
        $request = $this->createAggregationAccountTransactionBulkUsingPostRequest($aggregation_account_transactions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountTransaction[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountTransactionBulkUsingPostAsync
     *
     * Create a bulk aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction[] $aggregation_account_transactions aggregationAccountTransactions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountTransactionBulkUsingPostAsync($aggregation_account_transactions)
    {
        return $this->createAggregationAccountTransactionBulkUsingPostAsyncWithHttpInfo($aggregation_account_transactions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountTransactionBulkUsingPostAsyncWithHttpInfo
     *
     * Create a bulk aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction[] $aggregation_account_transactions aggregationAccountTransactions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountTransactionBulkUsingPostAsyncWithHttpInfo($aggregation_account_transactions)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction[]';
        $request = $this->createAggregationAccountTransactionBulkUsingPostRequest($aggregation_account_transactions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountTransactionBulkUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction[] $aggregation_account_transactions aggregationAccountTransactions (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountTransactionBulkUsingPostRequest($aggregation_account_transactions)
    {
        // verify the required parameter 'aggregation_account_transactions' is set
        if ($aggregation_account_transactions === null || (is_array($aggregation_account_transactions) && count($aggregation_account_transactions) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_transactions when calling createAggregationAccountTransactionBulkUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/bulk_aggregation_account_transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_transactions)) {
            $_tempBody = $aggregation_account_transactions;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAggregationAccountTransactionUsingPost
     *
     * Create an aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction $aggregation_account_transaction aggregationAccountTransaction (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountTransaction
     */
    public function createAggregationAccountTransactionUsingPost($aggregation_account_transaction)
    {
        list($response) = $this->createAggregationAccountTransactionUsingPostWithHttpInfo($aggregation_account_transaction);
        return $response;
    }

    /**
     * Operation createAggregationAccountTransactionUsingPostWithHttpInfo
     *
     * Create an aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction $aggregation_account_transaction aggregationAccountTransaction (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountTransaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountTransactionUsingPostWithHttpInfo($aggregation_account_transaction)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction';
        $request = $this->createAggregationAccountTransactionUsingPostRequest($aggregation_account_transaction);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountTransactionUsingPostAsync
     *
     * Create an aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction $aggregation_account_transaction aggregationAccountTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountTransactionUsingPostAsync($aggregation_account_transaction)
    {
        return $this->createAggregationAccountTransactionUsingPostAsyncWithHttpInfo($aggregation_account_transaction)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountTransactionUsingPostAsyncWithHttpInfo
     *
     * Create an aggregation account transaction
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction $aggregation_account_transaction aggregationAccountTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountTransactionUsingPostAsyncWithHttpInfo($aggregation_account_transaction)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction';
        $request = $this->createAggregationAccountTransactionUsingPostRequest($aggregation_account_transaction);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountTransactionUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccountTransaction $aggregation_account_transaction aggregationAccountTransaction (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountTransactionUsingPostRequest($aggregation_account_transaction)
    {
        // verify the required parameter 'aggregation_account_transaction' is set
        if ($aggregation_account_transaction === null || (is_array($aggregation_account_transaction) && count($aggregation_account_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_transaction when calling createAggregationAccountTransactionUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_transaction)) {
            $_tempBody = $aggregation_account_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAggregationAccountUsingPost
     *
     * Create an aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount $aggregation_account aggregationAccount (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccount
     */
    public function createAggregationAccountUsingPost($aggregation_account)
    {
        list($response) = $this->createAggregationAccountUsingPostWithHttpInfo($aggregation_account);
        return $response;
    }

    /**
     * Operation createAggregationAccountUsingPostWithHttpInfo
     *
     * Create an aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount $aggregation_account aggregationAccount (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAggregationAccountUsingPostWithHttpInfo($aggregation_account)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount';
        $request = $this->createAggregationAccountUsingPostRequest($aggregation_account);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAggregationAccountUsingPostAsync
     *
     * Create an aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount $aggregation_account aggregationAccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountUsingPostAsync($aggregation_account)
    {
        return $this->createAggregationAccountUsingPostAsyncWithHttpInfo($aggregation_account)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAggregationAccountUsingPostAsyncWithHttpInfo
     *
     * Create an aggregation account
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount $aggregation_account aggregationAccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAggregationAccountUsingPostAsyncWithHttpInfo($aggregation_account)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount';
        $request = $this->createAggregationAccountUsingPostRequest($aggregation_account);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAggregationAccountUsingPost'
     *
     * @param  \com\hydrogen\nucleus\Model\AggregationAccount $aggregation_account aggregationAccount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAggregationAccountUsingPostRequest($aggregation_account)
    {
        // verify the required parameter 'aggregation_account' is set
        if ($aggregation_account === null || (is_array($aggregation_account) && count($aggregation_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account when calling createAggregationAccountUsingPost'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account)) {
            $_tempBody = $aggregation_account;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAggregationAccountBalanceUsingDelete
     *
     * Delete an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAggregationAccountBalanceUsingDelete($aggregation_account_balance_id)
    {
        $this->deleteAggregationAccountBalanceUsingDeleteWithHttpInfo($aggregation_account_balance_id);
    }

    /**
     * Operation deleteAggregationAccountBalanceUsingDeleteWithHttpInfo
     *
     * Delete an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAggregationAccountBalanceUsingDeleteWithHttpInfo($aggregation_account_balance_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountBalanceUsingDeleteRequest($aggregation_account_balance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAggregationAccountBalanceUsingDeleteAsync
     *
     * Delete an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountBalanceUsingDeleteAsync($aggregation_account_balance_id)
    {
        return $this->deleteAggregationAccountBalanceUsingDeleteAsyncWithHttpInfo($aggregation_account_balance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAggregationAccountBalanceUsingDeleteAsyncWithHttpInfo
     *
     * Delete an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountBalanceUsingDeleteAsyncWithHttpInfo($aggregation_account_balance_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountBalanceUsingDeleteRequest($aggregation_account_balance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAggregationAccountBalanceUsingDelete'
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAggregationAccountBalanceUsingDeleteRequest($aggregation_account_balance_id)
    {
        // verify the required parameter 'aggregation_account_balance_id' is set
        if ($aggregation_account_balance_id === null || (is_array($aggregation_account_balance_id) && count($aggregation_account_balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_balance_id when calling deleteAggregationAccountBalanceUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_balance_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_balance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAggregationAccountHoldingUsingDelete
     *
     * Delete an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAggregationAccountHoldingUsingDelete($aggregation_account_holding_id)
    {
        $this->deleteAggregationAccountHoldingUsingDeleteWithHttpInfo($aggregation_account_holding_id);
    }

    /**
     * Operation deleteAggregationAccountHoldingUsingDeleteWithHttpInfo
     *
     * Delete an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAggregationAccountHoldingUsingDeleteWithHttpInfo($aggregation_account_holding_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountHoldingUsingDeleteRequest($aggregation_account_holding_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAggregationAccountHoldingUsingDeleteAsync
     *
     * Delete an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountHoldingUsingDeleteAsync($aggregation_account_holding_id)
    {
        return $this->deleteAggregationAccountHoldingUsingDeleteAsyncWithHttpInfo($aggregation_account_holding_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAggregationAccountHoldingUsingDeleteAsyncWithHttpInfo
     *
     * Delete an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountHoldingUsingDeleteAsyncWithHttpInfo($aggregation_account_holding_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountHoldingUsingDeleteRequest($aggregation_account_holding_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAggregationAccountHoldingUsingDelete'
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAggregationAccountHoldingUsingDeleteRequest($aggregation_account_holding_id)
    {
        // verify the required parameter 'aggregation_account_holding_id' is set
        if ($aggregation_account_holding_id === null || (is_array($aggregation_account_holding_id) && count($aggregation_account_holding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_holding_id when calling deleteAggregationAccountHoldingUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_holding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_holding_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_holding_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAggregationAccountTransactionUsingDelete
     *
     * Delete an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAggregationAccountTransactionUsingDelete($aggregation_account_transaction_id)
    {
        $this->deleteAggregationAccountTransactionUsingDeleteWithHttpInfo($aggregation_account_transaction_id);
    }

    /**
     * Operation deleteAggregationAccountTransactionUsingDeleteWithHttpInfo
     *
     * Delete an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAggregationAccountTransactionUsingDeleteWithHttpInfo($aggregation_account_transaction_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountTransactionUsingDeleteRequest($aggregation_account_transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAggregationAccountTransactionUsingDeleteAsync
     *
     * Delete an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountTransactionUsingDeleteAsync($aggregation_account_transaction_id)
    {
        return $this->deleteAggregationAccountTransactionUsingDeleteAsyncWithHttpInfo($aggregation_account_transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAggregationAccountTransactionUsingDeleteAsyncWithHttpInfo
     *
     * Delete an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountTransactionUsingDeleteAsyncWithHttpInfo($aggregation_account_transaction_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountTransactionUsingDeleteRequest($aggregation_account_transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAggregationAccountTransactionUsingDelete'
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAggregationAccountTransactionUsingDeleteRequest($aggregation_account_transaction_id)
    {
        // verify the required parameter 'aggregation_account_transaction_id' is set
        if ($aggregation_account_transaction_id === null || (is_array($aggregation_account_transaction_id) && count($aggregation_account_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_transaction_id when calling deleteAggregationAccountTransactionUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_transaction_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAggregationAccountUsingDelete
     *
     * Delete an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAggregationAccountUsingDelete($aggregation_account_id)
    {
        $this->deleteAggregationAccountUsingDeleteWithHttpInfo($aggregation_account_id);
    }

    /**
     * Operation deleteAggregationAccountUsingDeleteWithHttpInfo
     *
     * Delete an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAggregationAccountUsingDeleteWithHttpInfo($aggregation_account_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountUsingDeleteRequest($aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAggregationAccountUsingDeleteAsync
     *
     * Delete an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountUsingDeleteAsync($aggregation_account_id)
    {
        return $this->deleteAggregationAccountUsingDeleteAsyncWithHttpInfo($aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAggregationAccountUsingDeleteAsyncWithHttpInfo
     *
     * Delete an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAggregationAccountUsingDeleteAsyncWithHttpInfo($aggregation_account_id)
    {
        $returnType = '';
        $request = $this->deleteAggregationAccountUsingDeleteRequest($aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAggregationAccountUsingDelete'
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAggregationAccountUsingDeleteRequest($aggregation_account_id)
    {
        // verify the required parameter 'aggregation_account_id' is set
        if ($aggregation_account_id === null || (is_array($aggregation_account_id) && count($aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id when calling deleteAggregationAccountUsingDelete'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account/{aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountAggregateDataUsingGet
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getAggregationAccountAggregateDataUsingGet($aggregation_account_id, $currency_conversion = null)
    {
        list($response) = $this->getAggregationAccountAggregateDataUsingGetWithHttpInfo($aggregation_account_id, $currency_conversion);
        return $response;
    }

    /**
     * Operation getAggregationAccountAggregateDataUsingGetWithHttpInfo
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountAggregateDataUsingGetWithHttpInfo($aggregation_account_id, $currency_conversion = null)
    {
        $returnType = 'object';
        $request = $this->getAggregationAccountAggregateDataUsingGetRequest($aggregation_account_id, $currency_conversion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountAggregateDataUsingGetAsync
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountAggregateDataUsingGetAsync($aggregation_account_id, $currency_conversion = null)
    {
        return $this->getAggregationAccountAggregateDataUsingGetAsyncWithHttpInfo($aggregation_account_id, $currency_conversion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountAggregateDataUsingGetAsyncWithHttpInfo
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountAggregateDataUsingGetAsyncWithHttpInfo($aggregation_account_id, $currency_conversion = null)
    {
        $returnType = 'object';
        $request = $this->getAggregationAccountAggregateDataUsingGetRequest($aggregation_account_id, $currency_conversion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountAggregateDataUsingGet'
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountAggregateDataUsingGetRequest($aggregation_account_id, $currency_conversion = null)
    {
        // verify the required parameter 'aggregation_account_id' is set
        if ($aggregation_account_id === null || (is_array($aggregation_account_id) && count($aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id when calling getAggregationAccountAggregateDataUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account/{aggregation_account_id}/aggregate_data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }

        // path params
        if ($aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountAllUsingGet
     *
     * List all aggregation accounts
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageAggregationAccount_
     */
    public function getAggregationAccountAllUsingGet($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getAggregationAccountAllUsingGetWithHttpInfo($ascending, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getAggregationAccountAllUsingGetWithHttpInfo
     *
     * List all aggregation accounts
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageAggregationAccount_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountAllUsingGetWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccount_';
        $request = $this->getAggregationAccountAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageAggregationAccount_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountAllUsingGetAsync
     *
     * List all aggregation accounts
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountAllUsingGetAsync($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getAggregationAccountAllUsingGetAsyncWithHttpInfo($ascending, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountAllUsingGetAsyncWithHttpInfo
     *
     * List all aggregation accounts
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountAllUsingGetAsyncWithHttpInfo($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccount_';
        $request = $this->getAggregationAccountAllUsingGetRequest($ascending, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountAllUsingGetRequest($ascending = 'false', $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/aggregation_account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGet
     *
     * List all aggregation account balances
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageAggregationAccountBalance_
     */
    public function getAggregationAccountBalanceAllUsingGet($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getAggregationAccountBalanceAllUsingGetWithHttpInfo($ascending, $currency_conversion, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGetWithHttpInfo
     *
     * List all aggregation account balances
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageAggregationAccountBalance_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountBalanceAllUsingGetWithHttpInfo($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccountBalance_';
        $request = $this->getAggregationAccountBalanceAllUsingGetRequest($ascending, $currency_conversion, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageAggregationAccountBalance_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGetAsync
     *
     * List all aggregation account balances
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceAllUsingGetAsync($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo($ascending, $currency_conversion, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo
     *
     * List all aggregation account balances
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceAllUsingGetAsyncWithHttpInfo($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccountBalance_';
        $request = $this->getAggregationAccountBalanceAllUsingGetRequest($ascending, $currency_conversion, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountBalanceAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountBalanceAllUsingGetRequest($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/aggregation_account_balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountBalanceUsingGet
     *
     * Retrieve an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountBalance
     */
    public function getAggregationAccountBalanceUsingGet($aggregation_account_balance_id, $currency_conversion = null)
    {
        list($response) = $this->getAggregationAccountBalanceUsingGetWithHttpInfo($aggregation_account_balance_id, $currency_conversion);
        return $response;
    }

    /**
     * Operation getAggregationAccountBalanceUsingGetWithHttpInfo
     *
     * Retrieve an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountBalanceUsingGetWithHttpInfo($aggregation_account_balance_id, $currency_conversion = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance';
        $request = $this->getAggregationAccountBalanceUsingGetRequest($aggregation_account_balance_id, $currency_conversion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountBalanceUsingGetAsync
     *
     * Retrieve an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceUsingGetAsync($aggregation_account_balance_id, $currency_conversion = null)
    {
        return $this->getAggregationAccountBalanceUsingGetAsyncWithHttpInfo($aggregation_account_balance_id, $currency_conversion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountBalanceUsingGetAsyncWithHttpInfo
     *
     * Retrieve an aggregation account balance
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountBalanceUsingGetAsyncWithHttpInfo($aggregation_account_balance_id, $currency_conversion = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance';
        $request = $this->getAggregationAccountBalanceUsingGetRequest($aggregation_account_balance_id, $currency_conversion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountBalanceUsingGet'
     *
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountBalanceUsingGetRequest($aggregation_account_balance_id, $currency_conversion = null)
    {
        // verify the required parameter 'aggregation_account_balance_id' is set
        if ($aggregation_account_balance_id === null || (is_array($aggregation_account_balance_id) && count($aggregation_account_balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_balance_id when calling getAggregationAccountBalanceUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }

        // path params
        if ($aggregation_account_balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_balance_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_balance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGet
     *
     * List all aggregation account holdings
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageAggregationAccountHolding_
     */
    public function getAggregationAccountHoldingAllUsingGet($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getAggregationAccountHoldingAllUsingGetWithHttpInfo($ascending, $currency_conversion, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGetWithHttpInfo
     *
     * List all aggregation account holdings
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageAggregationAccountHolding_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountHoldingAllUsingGetWithHttpInfo($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccountHolding_';
        $request = $this->getAggregationAccountHoldingAllUsingGetRequest($ascending, $currency_conversion, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageAggregationAccountHolding_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGetAsync
     *
     * List all aggregation account holdings
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingAllUsingGetAsync($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo($ascending, $currency_conversion, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo
     *
     * List all aggregation account holdings
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingAllUsingGetAsyncWithHttpInfo($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccountHolding_';
        $request = $this->getAggregationAccountHoldingAllUsingGetRequest($ascending, $currency_conversion, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountHoldingAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountHoldingAllUsingGetRequest($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/aggregation_account_holding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountHoldingUsingGet
     *
     * Retrieve an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountHolding
     */
    public function getAggregationAccountHoldingUsingGet($aggregation_account_holding_id, $currency_conversion = null)
    {
        list($response) = $this->getAggregationAccountHoldingUsingGetWithHttpInfo($aggregation_account_holding_id, $currency_conversion);
        return $response;
    }

    /**
     * Operation getAggregationAccountHoldingUsingGetWithHttpInfo
     *
     * Retrieve an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountHolding, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountHoldingUsingGetWithHttpInfo($aggregation_account_holding_id, $currency_conversion = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding';
        $request = $this->getAggregationAccountHoldingUsingGetRequest($aggregation_account_holding_id, $currency_conversion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountHolding',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountHoldingUsingGetAsync
     *
     * Retrieve an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingUsingGetAsync($aggregation_account_holding_id, $currency_conversion = null)
    {
        return $this->getAggregationAccountHoldingUsingGetAsyncWithHttpInfo($aggregation_account_holding_id, $currency_conversion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountHoldingUsingGetAsyncWithHttpInfo
     *
     * Retrieve an aggregation account holding
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountHoldingUsingGetAsyncWithHttpInfo($aggregation_account_holding_id, $currency_conversion = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding';
        $request = $this->getAggregationAccountHoldingUsingGetRequest($aggregation_account_holding_id, $currency_conversion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountHoldingUsingGet'
     *
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountHoldingUsingGetRequest($aggregation_account_holding_id, $currency_conversion = null)
    {
        // verify the required parameter 'aggregation_account_holding_id' is set
        if ($aggregation_account_holding_id === null || (is_array($aggregation_account_holding_id) && count($aggregation_account_holding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_holding_id when calling getAggregationAccountHoldingUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }

        // path params
        if ($aggregation_account_holding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_holding_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_holding_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountOverviewByBusinessIdUsingGet
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $business_id UUID business_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getAggregationAccountOverviewByBusinessIdUsingGet($business_id, $currency_conversion = null)
    {
        list($response) = $this->getAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo($business_id, $currency_conversion);
        return $response;
    }

    /**
     * Operation getAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $business_id UUID business_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountOverviewByBusinessIdUsingGetWithHttpInfo($business_id, $currency_conversion = null)
    {
        $returnType = 'object';
        $request = $this->getAggregationAccountOverviewByBusinessIdUsingGetRequest($business_id, $currency_conversion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountOverviewByBusinessIdUsingGetAsync
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $business_id UUID business_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountOverviewByBusinessIdUsingGetAsync($business_id, $currency_conversion = null)
    {
        return $this->getAggregationAccountOverviewByBusinessIdUsingGetAsyncWithHttpInfo($business_id, $currency_conversion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountOverviewByBusinessIdUsingGetAsyncWithHttpInfo
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $business_id UUID business_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountOverviewByBusinessIdUsingGetAsyncWithHttpInfo($business_id, $currency_conversion = null)
    {
        $returnType = 'object';
        $request = $this->getAggregationAccountOverviewByBusinessIdUsingGetRequest($business_id, $currency_conversion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountOverviewByBusinessIdUsingGet'
     *
     * @param  string $business_id UUID business_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountOverviewByBusinessIdUsingGetRequest($business_id, $currency_conversion = null)
    {
        // verify the required parameter 'business_id' is set
        if ($business_id === null || (is_array($business_id) && count($business_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_id when calling getAggregationAccountOverviewByBusinessIdUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/business/{business_id}/aggregation_account_overview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }

        // path params
        if ($business_id !== null) {
            $resourcePath = str_replace(
                '{' . 'business_id' . '}',
                ObjectSerializer::toPathValue($business_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountOverviewUsingGet
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $client_id UUID client_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function getAggregationAccountOverviewUsingGet($client_id, $currency_conversion = null)
    {
        list($response) = $this->getAggregationAccountOverviewUsingGetWithHttpInfo($client_id, $currency_conversion);
        return $response;
    }

    /**
     * Operation getAggregationAccountOverviewUsingGetWithHttpInfo
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $client_id UUID client_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountOverviewUsingGetWithHttpInfo($client_id, $currency_conversion = null)
    {
        $returnType = 'object';
        $request = $this->getAggregationAccountOverviewUsingGetRequest($client_id, $currency_conversion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountOverviewUsingGetAsync
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $client_id UUID client_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountOverviewUsingGetAsync($client_id, $currency_conversion = null)
    {
        return $this->getAggregationAccountOverviewUsingGetAsyncWithHttpInfo($client_id, $currency_conversion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountOverviewUsingGetAsyncWithHttpInfo
     *
     * Retrieve an aggregation account aggregate data
     *
     * @param  string $client_id UUID client_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountOverviewUsingGetAsyncWithHttpInfo($client_id, $currency_conversion = null)
    {
        $returnType = 'object';
        $request = $this->getAggregationAccountOverviewUsingGetRequest($client_id, $currency_conversion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountOverviewUsingGet'
     *
     * @param  string $client_id UUID client_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountOverviewUsingGetRequest($client_id, $currency_conversion = null)
    {
        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling getAggregationAccountOverviewUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/client/{client_id}/aggregation_account_overview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }

        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client_id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGet
     *
     * List all aggregation account transactions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\PageAggregationAccountTransaction_
     */
    public function getAggregationAccountTransactionAllUsingGet($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        list($response) = $this->getAggregationAccountTransactionAllUsingGetWithHttpInfo($ascending, $currency_conversion, $filter, $order_by, $page, $size);
        return $response;
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGetWithHttpInfo
     *
     * List all aggregation account transactions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\PageAggregationAccountTransaction_, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountTransactionAllUsingGetWithHttpInfo($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccountTransaction_';
        $request = $this->getAggregationAccountTransactionAllUsingGetRequest($ascending, $currency_conversion, $filter, $order_by, $page, $size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\PageAggregationAccountTransaction_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGetAsync
     *
     * List all aggregation account transactions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionAllUsingGetAsync($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        return $this->getAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo($ascending, $currency_conversion, $filter, $order_by, $page, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo
     *
     * List all aggregation account transactions
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionAllUsingGetAsyncWithHttpInfo($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {
        $returnType = '\com\hydrogen\nucleus\Model\PageAggregationAccountTransaction_';
        $request = $this->getAggregationAccountTransactionAllUsingGetRequest($ascending, $currency_conversion, $filter, $order_by, $page, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountTransactionAllUsingGet'
     *
     * @param  bool $ascending ascending (optional, default to false)
     * @param  string $currency_conversion currency_conversion (optional)
     * @param  string $filter filter (optional)
     * @param  string $order_by order_by (optional, default to update_date)
     * @param  int $page page (optional, default to 0)
     * @param  int $size size (optional, default to 25)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountTransactionAllUsingGetRequest($ascending = 'false', $currency_conversion = null, $filter = null, $order_by = 'update_date', $page = '0', $size = '25')
    {

        $resourcePath = '/nucleus/v1/aggregation_account_transaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ascending !== null) {
            $queryParams['ascending'] = ObjectSerializer::toQueryValue($ascending);
        }
        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($size !== null) {
            $queryParams['size'] = ObjectSerializer::toQueryValue($size);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountTransactionUsingGet
     *
     * Retrieve an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountTransaction
     */
    public function getAggregationAccountTransactionUsingGet($aggregation_account_transaction_id, $currency_conversion = null)
    {
        list($response) = $this->getAggregationAccountTransactionUsingGetWithHttpInfo($aggregation_account_transaction_id, $currency_conversion);
        return $response;
    }

    /**
     * Operation getAggregationAccountTransactionUsingGetWithHttpInfo
     *
     * Retrieve an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountTransaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountTransactionUsingGetWithHttpInfo($aggregation_account_transaction_id, $currency_conversion = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction';
        $request = $this->getAggregationAccountTransactionUsingGetRequest($aggregation_account_transaction_id, $currency_conversion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountTransactionUsingGetAsync
     *
     * Retrieve an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionUsingGetAsync($aggregation_account_transaction_id, $currency_conversion = null)
    {
        return $this->getAggregationAccountTransactionUsingGetAsyncWithHttpInfo($aggregation_account_transaction_id, $currency_conversion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountTransactionUsingGetAsyncWithHttpInfo
     *
     * Retrieve an aggregation account transaction
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountTransactionUsingGetAsyncWithHttpInfo($aggregation_account_transaction_id, $currency_conversion = null)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction';
        $request = $this->getAggregationAccountTransactionUsingGetRequest($aggregation_account_transaction_id, $currency_conversion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountTransactionUsingGet'
     *
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     * @param  string $currency_conversion USD (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountTransactionUsingGetRequest($aggregation_account_transaction_id, $currency_conversion = null)
    {
        // verify the required parameter 'aggregation_account_transaction_id' is set
        if ($aggregation_account_transaction_id === null || (is_array($aggregation_account_transaction_id) && count($aggregation_account_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_transaction_id when calling getAggregationAccountTransactionUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_conversion !== null) {
            $queryParams['currency_conversion'] = ObjectSerializer::toQueryValue($currency_conversion);
        }

        // path params
        if ($aggregation_account_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_transaction_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAggregationAccountUsingGet
     *
     * Retrieve an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccount
     */
    public function getAggregationAccountUsingGet($aggregation_account_id)
    {
        list($response) = $this->getAggregationAccountUsingGetWithHttpInfo($aggregation_account_id);
        return $response;
    }

    /**
     * Operation getAggregationAccountUsingGetWithHttpInfo
     *
     * Retrieve an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAggregationAccountUsingGetWithHttpInfo($aggregation_account_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount';
        $request = $this->getAggregationAccountUsingGetRequest($aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAggregationAccountUsingGetAsync
     *
     * Retrieve an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountUsingGetAsync($aggregation_account_id)
    {
        return $this->getAggregationAccountUsingGetAsyncWithHttpInfo($aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAggregationAccountUsingGetAsyncWithHttpInfo
     *
     * Retrieve an aggregation account
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAggregationAccountUsingGetAsyncWithHttpInfo($aggregation_account_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount';
        $request = $this->getAggregationAccountUsingGetRequest($aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAggregationAccountUsingGet'
     *
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAggregationAccountUsingGetRequest($aggregation_account_id)
    {
        // verify the required parameter 'aggregation_account_id' is set
        if ($aggregation_account_id === null || (is_array($aggregation_account_id) && count($aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id when calling getAggregationAccountUsingGet'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account/{aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAggregationAccountBalanceUsingPut
     *
     * Update an aggregation account balance
     *
     * @param  object $aggregation_account_balance aggregation_account_balance (required)
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountBalance
     */
    public function updateAggregationAccountBalanceUsingPut($aggregation_account_balance, $aggregation_account_balance_id)
    {
        list($response) = $this->updateAggregationAccountBalanceUsingPutWithHttpInfo($aggregation_account_balance, $aggregation_account_balance_id);
        return $response;
    }

    /**
     * Operation updateAggregationAccountBalanceUsingPutWithHttpInfo
     *
     * Update an aggregation account balance
     *
     * @param  object $aggregation_account_balance aggregation_account_balance (required)
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountBalance, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAggregationAccountBalanceUsingPutWithHttpInfo($aggregation_account_balance, $aggregation_account_balance_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance';
        $request = $this->updateAggregationAccountBalanceUsingPutRequest($aggregation_account_balance, $aggregation_account_balance_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountBalance',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAggregationAccountBalanceUsingPutAsync
     *
     * Update an aggregation account balance
     *
     * @param  object $aggregation_account_balance aggregation_account_balance (required)
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountBalanceUsingPutAsync($aggregation_account_balance, $aggregation_account_balance_id)
    {
        return $this->updateAggregationAccountBalanceUsingPutAsyncWithHttpInfo($aggregation_account_balance, $aggregation_account_balance_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAggregationAccountBalanceUsingPutAsyncWithHttpInfo
     *
     * Update an aggregation account balance
     *
     * @param  object $aggregation_account_balance aggregation_account_balance (required)
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountBalanceUsingPutAsyncWithHttpInfo($aggregation_account_balance, $aggregation_account_balance_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountBalance';
        $request = $this->updateAggregationAccountBalanceUsingPutRequest($aggregation_account_balance, $aggregation_account_balance_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAggregationAccountBalanceUsingPut'
     *
     * @param  object $aggregation_account_balance aggregation_account_balance (required)
     * @param  string $aggregation_account_balance_id UUID aggregation_account_balance_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAggregationAccountBalanceUsingPutRequest($aggregation_account_balance, $aggregation_account_balance_id)
    {
        // verify the required parameter 'aggregation_account_balance' is set
        if ($aggregation_account_balance === null || (is_array($aggregation_account_balance) && count($aggregation_account_balance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_balance when calling updateAggregationAccountBalanceUsingPut'
            );
        }
        // verify the required parameter 'aggregation_account_balance_id' is set
        if ($aggregation_account_balance_id === null || (is_array($aggregation_account_balance_id) && count($aggregation_account_balance_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_balance_id when calling updateAggregationAccountBalanceUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_balance_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_balance_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_balance_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($aggregation_account_balance)) {
            $_tempBody = $aggregation_account_balance;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAggregationAccountBulkUsingPut
     *
     * Update a bulk aggregation account
     *
     * @param  object[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccount[]
     */
    public function updateAggregationAccountBulkUsingPut($aggregation_account_list)
    {
        list($response) = $this->updateAggregationAccountBulkUsingPutWithHttpInfo($aggregation_account_list);
        return $response;
    }

    /**
     * Operation updateAggregationAccountBulkUsingPutWithHttpInfo
     *
     * Update a bulk aggregation account
     *
     * @param  object[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAggregationAccountBulkUsingPutWithHttpInfo($aggregation_account_list)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount[]';
        $request = $this->updateAggregationAccountBulkUsingPutRequest($aggregation_account_list);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccount[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAggregationAccountBulkUsingPutAsync
     *
     * Update a bulk aggregation account
     *
     * @param  object[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountBulkUsingPutAsync($aggregation_account_list)
    {
        return $this->updateAggregationAccountBulkUsingPutAsyncWithHttpInfo($aggregation_account_list)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAggregationAccountBulkUsingPutAsyncWithHttpInfo
     *
     * Update a bulk aggregation account
     *
     * @param  object[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountBulkUsingPutAsyncWithHttpInfo($aggregation_account_list)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount[]';
        $request = $this->updateAggregationAccountBulkUsingPutRequest($aggregation_account_list);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAggregationAccountBulkUsingPut'
     *
     * @param  object[] $aggregation_account_list aggregationAccountList (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAggregationAccountBulkUsingPutRequest($aggregation_account_list)
    {
        // verify the required parameter 'aggregation_account_list' is set
        if ($aggregation_account_list === null || (is_array($aggregation_account_list) && count($aggregation_account_list) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_list when calling updateAggregationAccountBulkUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/bulk_aggregation_account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_list)) {
            $_tempBody = $aggregation_account_list;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAggregationAccountHoldingBulkUsingPut
     *
     * Update an bulk aggregation account holding
     *
     * @param  object[] $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountHolding[]
     */
    public function updateAggregationAccountHoldingBulkUsingPut($aggregation_account_holding)
    {
        list($response) = $this->updateAggregationAccountHoldingBulkUsingPutWithHttpInfo($aggregation_account_holding);
        return $response;
    }

    /**
     * Operation updateAggregationAccountHoldingBulkUsingPutWithHttpInfo
     *
     * Update an bulk aggregation account holding
     *
     * @param  object[] $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountHolding[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAggregationAccountHoldingBulkUsingPutWithHttpInfo($aggregation_account_holding)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding[]';
        $request = $this->updateAggregationAccountHoldingBulkUsingPutRequest($aggregation_account_holding);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountHolding[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAggregationAccountHoldingBulkUsingPutAsync
     *
     * Update an bulk aggregation account holding
     *
     * @param  object[] $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountHoldingBulkUsingPutAsync($aggregation_account_holding)
    {
        return $this->updateAggregationAccountHoldingBulkUsingPutAsyncWithHttpInfo($aggregation_account_holding)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAggregationAccountHoldingBulkUsingPutAsyncWithHttpInfo
     *
     * Update an bulk aggregation account holding
     *
     * @param  object[] $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountHoldingBulkUsingPutAsyncWithHttpInfo($aggregation_account_holding)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding[]';
        $request = $this->updateAggregationAccountHoldingBulkUsingPutRequest($aggregation_account_holding);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAggregationAccountHoldingBulkUsingPut'
     *
     * @param  object[] $aggregation_account_holding aggregationAccountHolding (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAggregationAccountHoldingBulkUsingPutRequest($aggregation_account_holding)
    {
        // verify the required parameter 'aggregation_account_holding' is set
        if ($aggregation_account_holding === null || (is_array($aggregation_account_holding) && count($aggregation_account_holding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_holding when calling updateAggregationAccountHoldingBulkUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/bulk_aggregation_account_holding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($aggregation_account_holding)) {
            $_tempBody = $aggregation_account_holding;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAggregationAccountHoldingUsingPut
     *
     * Update an aggregation account holding
     *
     * @param  object $aggregation_account_holding aggregation_account_holding (required)
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountHolding
     */
    public function updateAggregationAccountHoldingUsingPut($aggregation_account_holding, $aggregation_account_holding_id)
    {
        list($response) = $this->updateAggregationAccountHoldingUsingPutWithHttpInfo($aggregation_account_holding, $aggregation_account_holding_id);
        return $response;
    }

    /**
     * Operation updateAggregationAccountHoldingUsingPutWithHttpInfo
     *
     * Update an aggregation account holding
     *
     * @param  object $aggregation_account_holding aggregation_account_holding (required)
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountHolding, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAggregationAccountHoldingUsingPutWithHttpInfo($aggregation_account_holding, $aggregation_account_holding_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding';
        $request = $this->updateAggregationAccountHoldingUsingPutRequest($aggregation_account_holding, $aggregation_account_holding_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountHolding',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAggregationAccountHoldingUsingPutAsync
     *
     * Update an aggregation account holding
     *
     * @param  object $aggregation_account_holding aggregation_account_holding (required)
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountHoldingUsingPutAsync($aggregation_account_holding, $aggregation_account_holding_id)
    {
        return $this->updateAggregationAccountHoldingUsingPutAsyncWithHttpInfo($aggregation_account_holding, $aggregation_account_holding_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAggregationAccountHoldingUsingPutAsyncWithHttpInfo
     *
     * Update an aggregation account holding
     *
     * @param  object $aggregation_account_holding aggregation_account_holding (required)
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountHoldingUsingPutAsyncWithHttpInfo($aggregation_account_holding, $aggregation_account_holding_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountHolding';
        $request = $this->updateAggregationAccountHoldingUsingPutRequest($aggregation_account_holding, $aggregation_account_holding_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAggregationAccountHoldingUsingPut'
     *
     * @param  object $aggregation_account_holding aggregation_account_holding (required)
     * @param  string $aggregation_account_holding_id UUID aggregation_account_holding_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAggregationAccountHoldingUsingPutRequest($aggregation_account_holding, $aggregation_account_holding_id)
    {
        // verify the required parameter 'aggregation_account_holding' is set
        if ($aggregation_account_holding === null || (is_array($aggregation_account_holding) && count($aggregation_account_holding) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_holding when calling updateAggregationAccountHoldingUsingPut'
            );
        }
        // verify the required parameter 'aggregation_account_holding_id' is set
        if ($aggregation_account_holding_id === null || (is_array($aggregation_account_holding_id) && count($aggregation_account_holding_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_holding_id when calling updateAggregationAccountHoldingUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_holding_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_holding_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_holding_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($aggregation_account_holding)) {
            $_tempBody = $aggregation_account_holding;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAggregationAccountTransactionUsingPut
     *
     * Update an aggregation account transaction
     *
     * @param  object $aggregation_account_transaction aggregation_account_transaction (required)
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccountTransaction
     */
    public function updateAggregationAccountTransactionUsingPut($aggregation_account_transaction, $aggregation_account_transaction_id)
    {
        list($response) = $this->updateAggregationAccountTransactionUsingPutWithHttpInfo($aggregation_account_transaction, $aggregation_account_transaction_id);
        return $response;
    }

    /**
     * Operation updateAggregationAccountTransactionUsingPutWithHttpInfo
     *
     * Update an aggregation account transaction
     *
     * @param  object $aggregation_account_transaction aggregation_account_transaction (required)
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccountTransaction, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAggregationAccountTransactionUsingPutWithHttpInfo($aggregation_account_transaction, $aggregation_account_transaction_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction';
        $request = $this->updateAggregationAccountTransactionUsingPutRequest($aggregation_account_transaction, $aggregation_account_transaction_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccountTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAggregationAccountTransactionUsingPutAsync
     *
     * Update an aggregation account transaction
     *
     * @param  object $aggregation_account_transaction aggregation_account_transaction (required)
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountTransactionUsingPutAsync($aggregation_account_transaction, $aggregation_account_transaction_id)
    {
        return $this->updateAggregationAccountTransactionUsingPutAsyncWithHttpInfo($aggregation_account_transaction, $aggregation_account_transaction_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAggregationAccountTransactionUsingPutAsyncWithHttpInfo
     *
     * Update an aggregation account transaction
     *
     * @param  object $aggregation_account_transaction aggregation_account_transaction (required)
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountTransactionUsingPutAsyncWithHttpInfo($aggregation_account_transaction, $aggregation_account_transaction_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccountTransaction';
        $request = $this->updateAggregationAccountTransactionUsingPutRequest($aggregation_account_transaction, $aggregation_account_transaction_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAggregationAccountTransactionUsingPut'
     *
     * @param  object $aggregation_account_transaction aggregation_account_transaction (required)
     * @param  string $aggregation_account_transaction_id UUID aggregation_account_transaction_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAggregationAccountTransactionUsingPutRequest($aggregation_account_transaction, $aggregation_account_transaction_id)
    {
        // verify the required parameter 'aggregation_account_transaction' is set
        if ($aggregation_account_transaction === null || (is_array($aggregation_account_transaction) && count($aggregation_account_transaction) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_transaction when calling updateAggregationAccountTransactionUsingPut'
            );
        }
        // verify the required parameter 'aggregation_account_transaction_id' is set
        if ($aggregation_account_transaction_id === null || (is_array($aggregation_account_transaction_id) && count($aggregation_account_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_transaction_id when calling updateAggregationAccountTransactionUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_transaction_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_transaction_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($aggregation_account_transaction)) {
            $_tempBody = $aggregation_account_transaction;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAggregationAccountUsingPut
     *
     * Update an aggregation account
     *
     * @param  object $aggregation_account aggregation_account (required)
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com\hydrogen\nucleus\Model\AggregationAccount
     */
    public function updateAggregationAccountUsingPut($aggregation_account, $aggregation_account_id)
    {
        list($response) = $this->updateAggregationAccountUsingPutWithHttpInfo($aggregation_account, $aggregation_account_id);
        return $response;
    }

    /**
     * Operation updateAggregationAccountUsingPutWithHttpInfo
     *
     * Update an aggregation account
     *
     * @param  object $aggregation_account aggregation_account (required)
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \com\hydrogen\nucleus\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com\hydrogen\nucleus\Model\AggregationAccount, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAggregationAccountUsingPutWithHttpInfo($aggregation_account, $aggregation_account_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount';
        $request = $this->updateAggregationAccountUsingPutRequest($aggregation_account, $aggregation_account_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com\hydrogen\nucleus\Model\AggregationAccount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAggregationAccountUsingPutAsync
     *
     * Update an aggregation account
     *
     * @param  object $aggregation_account aggregation_account (required)
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountUsingPutAsync($aggregation_account, $aggregation_account_id)
    {
        return $this->updateAggregationAccountUsingPutAsyncWithHttpInfo($aggregation_account, $aggregation_account_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAggregationAccountUsingPutAsyncWithHttpInfo
     *
     * Update an aggregation account
     *
     * @param  object $aggregation_account aggregation_account (required)
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAggregationAccountUsingPutAsyncWithHttpInfo($aggregation_account, $aggregation_account_id)
    {
        $returnType = '\com\hydrogen\nucleus\Model\AggregationAccount';
        $request = $this->updateAggregationAccountUsingPutRequest($aggregation_account, $aggregation_account_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAggregationAccountUsingPut'
     *
     * @param  object $aggregation_account aggregation_account (required)
     * @param  string $aggregation_account_id UUID aggregation_account_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAggregationAccountUsingPutRequest($aggregation_account, $aggregation_account_id)
    {
        // verify the required parameter 'aggregation_account' is set
        if ($aggregation_account === null || (is_array($aggregation_account) && count($aggregation_account) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account when calling updateAggregationAccountUsingPut'
            );
        }
        // verify the required parameter 'aggregation_account_id' is set
        if ($aggregation_account_id === null || (is_array($aggregation_account_id) && count($aggregation_account_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $aggregation_account_id when calling updateAggregationAccountUsingPut'
            );
        }

        $resourcePath = '/nucleus/v1/aggregation_account/{aggregation_account_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($aggregation_account_id !== null) {
            $resourcePath = str_replace(
                '{' . 'aggregation_account_id' . '}',
                ObjectSerializer::toPathValue($aggregation_account_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($aggregation_account)) {
            $_tempBody = $aggregation_account;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
