/*
 * Hydrogen Electron API
 * The Hydrogen Electron API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.24
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenElectronApi);
  }
}(this, function(expect, HydrogenElectronApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SpendingControlVendorRequestDataVO', function() {
      beforeEach(function() {
        instance = new HydrogenElectronApi.SpendingControlVendorRequestDataVO();
      });

      it('should create an instance of SpendingControlVendorRequestDataVO', function() {
        // TODO: update the code to test SpendingControlVendorRequestDataVO
        expect(instance).to.be.a(HydrogenElectronApi.SpendingControlVendorRequestDataVO);
      });

      it('should have the property clientId (base name: "client_id")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property controlScope (base name: "control_scope")', function() {
        // TODO: update the code to test the property controlScope
        expect(instance).to.have.property('controlScope');
        // expect(instance.controlScope).to.be(expectedValueLiteral);
      });

      it('should have the property controlType (base name: "control_type")', function() {
        // TODO: update the code to test the property controlType
        expect(instance).to.have.property('controlType');
        // expect(instance.controlType).to.be(expectedValueLiteral);
      });

      it('should have the property controlValues (base name: "control_values")', function() {
        // TODO: update the code to test the property controlValues
        expect(instance).to.have.property('controlValues');
        // expect(instance.controlValues).to.be(expectedValueLiteral);
      });

      it('should have the property currencyCode (base name: "currency_code")', function() {
        // TODO: update the code to test the property currencyCode
        expect(instance).to.have.property('currencyCode');
        // expect(instance.currencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property frequencyUnit (base name: "frequency_unit")', function() {
        // TODO: update the code to test the property frequencyUnit
        expect(instance).to.have.property('frequencyUnit');
        // expect(instance.frequencyUnit).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "is_active")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property limitValue (base name: "limit_value")', function() {
        // TODO: update the code to test the property limitValue
        expect(instance).to.have.property('limitValue');
        // expect(instance.limitValue).to.be(expectedValueLiteral);
      });

    });
  });

}));
