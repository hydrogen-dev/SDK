/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an account allocation
        /// </summary>
        /// <remarks>
        /// Create an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>AccountAllocationMapping</returns>
        AccountAllocationMapping CreateAccountAllocationMappingUsingPost (AccountAllocationMapping allocRequest);

        /// <summary>
        /// Create an account allocation
        /// </summary>
        /// <remarks>
        /// Create an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>ApiResponse of AccountAllocationMapping</returns>
        ApiResponse<AccountAllocationMapping> CreateAccountAllocationMappingUsingPostWithHttpInfo (AccountAllocationMapping allocRequest);
        /// <summary>
        /// Create an account status
        /// </summary>
        /// <remarks>
        /// Create an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>AccountStatus</returns>
        AccountStatus CreateAccountStatusUsingPost (AccountStatus accountStatusRequest);

        /// <summary>
        /// Create an account status
        /// </summary>
        /// <remarks>
        /// Create an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>ApiResponse of AccountStatus</returns>
        ApiResponse<AccountStatus> CreateAccountStatusUsingPostWithHttpInfo (AccountStatus accountStatusRequest);
        /// <summary>
        /// Create an account type
        /// </summary>
        /// <remarks>
        /// Create a new account type for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>AccountType</returns>
        AccountType CreateAccountTypeUsingPost (AccountType accountTypeRequest);

        /// <summary>
        /// Create an account type
        /// </summary>
        /// <remarks>
        /// Create a new account type for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>ApiResponse of AccountType</returns>
        ApiResponse<AccountType> CreateAccountTypeUsingPostWithHttpInfo (AccountType accountTypeRequest);
        /// <summary>
        /// Create an account
        /// </summary>
        /// <remarks>
        /// Create an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>Account</returns>
        Account CreateAccountUsingPost (Account account);

        /// <summary>
        /// Create an account
        /// </summary>
        /// <remarks>
        /// Create an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> CreateAccountUsingPostWithHttpInfo (Account account);
        /// <summary>
        /// Delete an account allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns></returns>
        void DeleteAccountAllocationMappingUsingDelete (Guid? accountAllocationId);

        /// <summary>
        /// Delete an account allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountAllocationMappingUsingDeleteWithHttpInfo (Guid? accountAllocationId);
        /// <summary>
        /// Delete an account permission
        /// </summary>
        /// <remarks>
        /// Delete an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>AccountPermissionVO</returns>
        AccountPermissionVO DeleteAccountPermissionUsingDELETE (Guid? accountId);

        /// <summary>
        /// Delete an account permission
        /// </summary>
        /// <remarks>
        /// Delete an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        ApiResponse<AccountPermissionVO> DeleteAccountPermissionUsingDELETEWithHttpInfo (Guid? accountId);
        /// <summary>
        /// Delete an account status
        /// </summary>
        /// <remarks>
        /// Permanently delete an account status record from an account’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns></returns>
        void DeleteAccountStatusUsingDelete (Guid? accountStatusId);

        /// <summary>
        /// Delete an account status
        /// </summary>
        /// <remarks>
        /// Permanently delete an account status record from an account’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountStatusUsingDeleteWithHttpInfo (Guid? accountStatusId);
        /// <summary>
        /// Delete an account type
        /// </summary>
        /// <remarks>
        /// Permanently delete a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns></returns>
        void DeleteAccountTypeUsingDelete (Guid? accountTypeId);

        /// <summary>
        /// Delete an account type
        /// </summary>
        /// <remarks>
        /// Permanently delete a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountTypeUsingDeleteWithHttpInfo (Guid? accountTypeId);
        /// <summary>
        /// Delete an account
        /// </summary>
        /// <remarks>
        /// Permanently delete an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns></returns>
        void DeleteAccountUsingDelete (Guid? accountId);

        /// <summary>
        /// Delete an account
        /// </summary>
        /// <remarks>
        /// Permanently delete an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountUsingDeleteWithHttpInfo (Guid? accountId);
        /// <summary>
        /// List all accounts
        /// </summary>
        /// <remarks>
        /// Get information for all accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccount</returns>
        PageAccount GetAccountAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all accounts
        /// </summary>
        /// <remarks>
        /// Get information for all accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccount</returns>
        ApiResponse<PageAccount> GetAccountAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all account allocations
        /// </summary>
        /// <remarks>
        /// Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountAllocationMapping</returns>
        PageAccountAllocationMapping GetAccountAllocationMappingAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account allocations
        /// </summary>
        /// <remarks>
        /// Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountAllocationMapping</returns>
        ApiResponse<PageAccountAllocationMapping> GetAccountAllocationMappingAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an account allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>AccountAllocationMapping</returns>
        AccountAllocationMapping GetAccountAllocationMappingUsingGet (Guid? accountAllocationId);

        /// <summary>
        /// Retrieve an account allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>ApiResponse of AccountAllocationMapping</returns>
        ApiResponse<AccountAllocationMapping> GetAccountAllocationMappingUsingGetWithHttpInfo (Guid? accountAllocationId);
        /// <summary>
        /// List all account asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        List<AvailableDateDoubleVO> GetAccountAssetSizeAggAllUsingGet (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all account asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        ApiResponse<List<AvailableDateDoubleVO>> GetAccountAssetSizeAggAllUsingGetWithHttpInfo (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Object</returns>
        Object GetAccountOverviewUsingGet (Guid? accountId, bool? ascending = null, string orderBy = null);

        /// <summary>
        /// List all Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetAccountOverviewUsingGetWithHttpInfo (Guid? accountId, bool? ascending = null, string orderBy = null);
        /// <summary>
        /// Get an account permission
        /// </summary>
        /// <remarks>
        /// Get an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>AccountPermissionVO</returns>
        AccountPermissionVO GetAccountPermissionUsingGET (Guid? accountId);

        /// <summary>
        /// Get an account permission
        /// </summary>
        /// <remarks>
        /// Get an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        ApiResponse<AccountPermissionVO> GetAccountPermissionUsingGETWithHttpInfo (Guid? accountId);
        /// <summary>
        /// List all account statuses
        /// </summary>
        /// <remarks>
        /// Get the account status history information for all accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountStatus</returns>
        PageAccountStatus GetAccountStatusAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account statuses
        /// </summary>
        /// <remarks>
        /// Get the account status history information for all accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountStatus</returns>
        ApiResponse<PageAccountStatus> GetAccountStatusAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an account status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>AccountStatus</returns>
        AccountStatus GetAccountStatusUsingGet (Guid? accountStatusId);

        /// <summary>
        /// Retrieve an account status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>ApiResponse of AccountStatus</returns>
        ApiResponse<AccountStatus> GetAccountStatusUsingGetWithHttpInfo (Guid? accountStatusId);
        /// <summary>
        /// List all account types
        /// </summary>
        /// <remarks>
        /// List all account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountType</returns>
        PageAccountType GetAccountTypeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account types
        /// </summary>
        /// <remarks>
        /// List all account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountType</returns>
        ApiResponse<PageAccountType> GetAccountTypeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Get an Account Type
        /// </summary>
        /// <remarks>
        /// Get an account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>AccountType</returns>
        AccountType GetAccountTypeUsingGet (Guid? accountTypeId);

        /// <summary>
        /// Get an Account Type
        /// </summary>
        /// <remarks>
        /// Get an account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>ApiResponse of AccountType</returns>
        ApiResponse<AccountType> GetAccountTypeUsingGetWithHttpInfo (Guid? accountTypeId);
        /// <summary>
        /// Retrieve an account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Account</returns>
        Account GetAccountUsingGet (Guid? accountId);

        /// <summary>
        /// Retrieve an account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> GetAccountUsingGetWithHttpInfo (Guid? accountId);
        /// <summary>
        /// List all account permission
        /// </summary>
        /// <remarks>
        /// List all account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountPermissionVO</returns>
        PageAccountPermissionVO GetAllAccountPermissionUsingGET (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account permission
        /// </summary>
        /// <remarks>
        /// List all account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountPermissionVO</returns>
        ApiResponse<PageAccountPermissionVO> GetAllAccountPermissionUsingGETWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all account holdings
        /// </summary>
        /// <remarks>
        /// Get information for all the securities that are currently being held by an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        PagePortfolioHoldingAgg GetPortfolioHoldingAggAllUsingGet (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all account holdings
        /// </summary>
        /// <remarks>
        /// Get information for all the securities that are currently being held by an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        ApiResponse<PagePortfolioHoldingAgg> GetPortfolioHoldingAggAllUsingGetWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all account transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetPortfolioTransactionAggAllUsingGet (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all account transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetPortfolioTransactionAggAllUsingGetWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// create an account permission
        /// </summary>
        /// <remarks>
        /// create an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>AccountPermissionVO</returns>
        AccountPermissionVO InsertAccountAndRelatedPermissionUsingPOST (AclClientPermissionVO aclClientPermissionVO);

        /// <summary>
        /// create an account permission
        /// </summary>
        /// <remarks>
        /// create an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        ApiResponse<AccountPermissionVO> InsertAccountAndRelatedPermissionUsingPOSTWithHttpInfo (AclClientPermissionVO aclClientPermissionVO);
        /// <summary>
        /// Subscribe an account
        /// </summary>
        /// <remarks>
        /// After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>List&lt;Portfolio&gt;</returns>
        List<Portfolio> SubscribeAccountUsingPost (Guid? accountId, AccountAllocationMapping allocRequest);

        /// <summary>
        /// Subscribe an account
        /// </summary>
        /// <remarks>
        /// After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>ApiResponse of List&lt;Portfolio&gt;</returns>
        ApiResponse<List<Portfolio>> SubscribeAccountUsingPostWithHttpInfo (Guid? accountId, AccountAllocationMapping allocRequest);
        /// <summary>
        /// Update an account allocation
        /// </summary>
        /// <remarks>
        /// Update the information for an account-allocation mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>AccountAllocationMapping</returns>
        AccountAllocationMapping UpdateAccountAllocationMappingUsingPut (Guid? accountAllocationId, Object accountAllocationMapping);

        /// <summary>
        /// Update an account allocation
        /// </summary>
        /// <remarks>
        /// Update the information for an account-allocation mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>ApiResponse of AccountAllocationMapping</returns>
        ApiResponse<AccountAllocationMapping> UpdateAccountAllocationMappingUsingPutWithHttpInfo (Guid? accountAllocationId, Object accountAllocationMapping);
        /// <summary>
        /// Update an account status
        /// </summary>
        /// <remarks>
        /// Update an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>AccountStatus</returns>
        AccountStatus UpdateAccountStatusUsingPut (Object accountStatus, Guid? accountStatusId);

        /// <summary>
        /// Update an account status
        /// </summary>
        /// <remarks>
        /// Update an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>ApiResponse of AccountStatus</returns>
        ApiResponse<AccountStatus> UpdateAccountStatusUsingPutWithHttpInfo (Object accountStatus, Guid? accountStatusId);
        /// <summary>
        /// Update an account type
        /// </summary>
        /// <remarks>
        /// Update the information for a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>AccountType</returns>
        AccountType UpdateAccountTypeUsingPut (Object accountType, Guid? accountTypeId);

        /// <summary>
        /// Update an account type
        /// </summary>
        /// <remarks>
        /// Update the information for a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>ApiResponse of AccountType</returns>
        ApiResponse<AccountType> UpdateAccountTypeUsingPutWithHttpInfo (Object accountType, Guid? accountTypeId);
        /// <summary>
        /// Update an account
        /// </summary>
        /// <remarks>
        /// Update the information for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Account</returns>
        Account UpdateAccountUsingPut (Object account, Guid? accountId);

        /// <summary>
        /// Update an account
        /// </summary>
        /// <remarks>
        /// Update the information for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> UpdateAccountUsingPutWithHttpInfo (Object account, Guid? accountId);
        /// <summary>
        /// Update an account permission
        /// </summary>
        /// <remarks>
        /// Update an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>AccountPermissionVO</returns>
        AccountPermissionVO UpdateClientAccountPermissionUsingPUT (Guid? accountId, Object aclClientPermissionVO);

        /// <summary>
        /// Update an account permission
        /// </summary>
        /// <remarks>
        /// Update an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        ApiResponse<AccountPermissionVO> UpdateClientAccountPermissionUsingPUTWithHttpInfo (Guid? accountId, Object aclClientPermissionVO);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an account allocation
        /// </summary>
        /// <remarks>
        /// Create an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of AccountAllocationMapping</returns>
        System.Threading.Tasks.Task<AccountAllocationMapping> CreateAccountAllocationMappingUsingPostAsync (AccountAllocationMapping allocRequest);

        /// <summary>
        /// Create an account allocation
        /// </summary>
        /// <remarks>
        /// Create an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of ApiResponse (AccountAllocationMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAllocationMapping>> CreateAccountAllocationMappingUsingPostAsyncWithHttpInfo (AccountAllocationMapping allocRequest);
        /// <summary>
        /// Create an account status
        /// </summary>
        /// <remarks>
        /// Create an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>Task of AccountStatus</returns>
        System.Threading.Tasks.Task<AccountStatus> CreateAccountStatusUsingPostAsync (AccountStatus accountStatusRequest);

        /// <summary>
        /// Create an account status
        /// </summary>
        /// <remarks>
        /// Create an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>Task of ApiResponse (AccountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountStatus>> CreateAccountStatusUsingPostAsyncWithHttpInfo (AccountStatus accountStatusRequest);
        /// <summary>
        /// Create an account type
        /// </summary>
        /// <remarks>
        /// Create a new account type for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>Task of AccountType</returns>
        System.Threading.Tasks.Task<AccountType> CreateAccountTypeUsingPostAsync (AccountType accountTypeRequest);

        /// <summary>
        /// Create an account type
        /// </summary>
        /// <remarks>
        /// Create a new account type for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>Task of ApiResponse (AccountType)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountType>> CreateAccountTypeUsingPostAsyncWithHttpInfo (AccountType accountTypeRequest);
        /// <summary>
        /// Create an account
        /// </summary>
        /// <remarks>
        /// Create an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> CreateAccountUsingPostAsync (Account account);

        /// <summary>
        /// Create an account
        /// </summary>
        /// <remarks>
        /// Create an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> CreateAccountUsingPostAsyncWithHttpInfo (Account account);
        /// <summary>
        /// Delete an account allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountAllocationMappingUsingDeleteAsync (Guid? accountAllocationId);

        /// <summary>
        /// Delete an account allocation
        /// </summary>
        /// <remarks>
        /// Permanently delete an account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountAllocationMappingUsingDeleteAsyncWithHttpInfo (Guid? accountAllocationId);
        /// <summary>
        /// Delete an account permission
        /// </summary>
        /// <remarks>
        /// Delete an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of AccountPermissionVO</returns>
        System.Threading.Tasks.Task<AccountPermissionVO> DeleteAccountPermissionUsingDELETEAsync (Guid? accountId);

        /// <summary>
        /// Delete an account permission
        /// </summary>
        /// <remarks>
        /// Delete an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> DeleteAccountPermissionUsingDELETEAsyncWithHttpInfo (Guid? accountId);
        /// <summary>
        /// Delete an account status
        /// </summary>
        /// <remarks>
        /// Permanently delete an account status record from an account’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountStatusUsingDeleteAsync (Guid? accountStatusId);

        /// <summary>
        /// Delete an account status
        /// </summary>
        /// <remarks>
        /// Permanently delete an account status record from an account’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountStatusUsingDeleteAsyncWithHttpInfo (Guid? accountStatusId);
        /// <summary>
        /// Delete an account type
        /// </summary>
        /// <remarks>
        /// Permanently delete a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountTypeUsingDeleteAsync (Guid? accountTypeId);

        /// <summary>
        /// Delete an account type
        /// </summary>
        /// <remarks>
        /// Permanently delete a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountTypeUsingDeleteAsyncWithHttpInfo (Guid? accountTypeId);
        /// <summary>
        /// Delete an account
        /// </summary>
        /// <remarks>
        /// Permanently delete an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountUsingDeleteAsync (Guid? accountId);

        /// <summary>
        /// Delete an account
        /// </summary>
        /// <remarks>
        /// Permanently delete an account under a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUsingDeleteAsyncWithHttpInfo (Guid? accountId);
        /// <summary>
        /// List all accounts
        /// </summary>
        /// <remarks>
        /// Get information for all accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccount</returns>
        System.Threading.Tasks.Task<PageAccount> GetAccountAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all accounts
        /// </summary>
        /// <remarks>
        /// Get information for all accounts for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccount)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAccount>> GetAccountAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all account allocations
        /// </summary>
        /// <remarks>
        /// Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountAllocationMapping</returns>
        System.Threading.Tasks.Task<PageAccountAllocationMapping> GetAccountAllocationMappingAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account allocations
        /// </summary>
        /// <remarks>
        /// Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountAllocationMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAccountAllocationMapping>> GetAccountAllocationMappingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an account allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of AccountAllocationMapping</returns>
        System.Threading.Tasks.Task<AccountAllocationMapping> GetAccountAllocationMappingUsingGetAsync (Guid? accountAllocationId);

        /// <summary>
        /// Retrieve an account allocation
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account-allocation mapping for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of ApiResponse (AccountAllocationMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAllocationMapping>> GetAccountAllocationMappingUsingGetAsyncWithHttpInfo (Guid? accountAllocationId);
        /// <summary>
        /// List all account asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetAccountAssetSizeAggAllUsingGetAsync (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all account asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes by date for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetAccountAssetSizeAggAllUsingGetAsyncWithHttpInfo (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetAccountOverviewUsingGetAsync (Guid? accountId, bool? ascending = null, string orderBy = null);

        /// <summary>
        /// List all Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetAccountOverviewUsingGetAsyncWithHttpInfo (Guid? accountId, bool? ascending = null, string orderBy = null);
        /// <summary>
        /// Get an account permission
        /// </summary>
        /// <remarks>
        /// Get an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of AccountPermissionVO</returns>
        System.Threading.Tasks.Task<AccountPermissionVO> GetAccountPermissionUsingGETAsync (Guid? accountId);

        /// <summary>
        /// Get an account permission
        /// </summary>
        /// <remarks>
        /// Get an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> GetAccountPermissionUsingGETAsyncWithHttpInfo (Guid? accountId);
        /// <summary>
        /// List all account statuses
        /// </summary>
        /// <remarks>
        /// Get the account status history information for all accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountStatus</returns>
        System.Threading.Tasks.Task<PageAccountStatus> GetAccountStatusAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account statuses
        /// </summary>
        /// <remarks>
        /// Get the account status history information for all accounts.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAccountStatus>> GetAccountStatusAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an account status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of AccountStatus</returns>
        System.Threading.Tasks.Task<AccountStatus> GetAccountStatusUsingGetAsync (Guid? accountStatusId);

        /// <summary>
        /// Retrieve an account status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of ApiResponse (AccountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountStatus>> GetAccountStatusUsingGetAsyncWithHttpInfo (Guid? accountStatusId);
        /// <summary>
        /// List all account types
        /// </summary>
        /// <remarks>
        /// List all account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountType</returns>
        System.Threading.Tasks.Task<PageAccountType> GetAccountTypeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account types
        /// </summary>
        /// <remarks>
        /// List all account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountType)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAccountType>> GetAccountTypeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Get an Account Type
        /// </summary>
        /// <remarks>
        /// Get an account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of AccountType</returns>
        System.Threading.Tasks.Task<AccountType> GetAccountTypeUsingGetAsync (Guid? accountTypeId);

        /// <summary>
        /// Get an Account Type
        /// </summary>
        /// <remarks>
        /// Get an account types defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of ApiResponse (AccountType)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountType>> GetAccountTypeUsingGetAsyncWithHttpInfo (Guid? accountTypeId);
        /// <summary>
        /// Retrieve an account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> GetAccountUsingGetAsync (Guid? accountId);

        /// <summary>
        /// Retrieve an account
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific account associated with a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountUsingGetAsyncWithHttpInfo (Guid? accountId);
        /// <summary>
        /// List all account permission
        /// </summary>
        /// <remarks>
        /// List all account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountPermissionVO</returns>
        System.Threading.Tasks.Task<PageAccountPermissionVO> GetAllAccountPermissionUsingGETAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all account permission
        /// </summary>
        /// <remarks>
        /// List all account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountPermissionVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageAccountPermissionVO>> GetAllAccountPermissionUsingGETAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all account holdings
        /// </summary>
        /// <remarks>
        /// Get information for all the securities that are currently being held by an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetPortfolioHoldingAggAllUsingGetAsync (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all account holdings
        /// </summary>
        /// <remarks>
        /// Get information for all the securities that are currently being held by an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetPortfolioHoldingAggAllUsingGetAsyncWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// List all account transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetPortfolioTransactionAggAllUsingGetAsync (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);

        /// <summary>
        /// List all account transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetPortfolioTransactionAggAllUsingGetAsyncWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null);
        /// <summary>
        /// create an account permission
        /// </summary>
        /// <remarks>
        /// create an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of AccountPermissionVO</returns>
        System.Threading.Tasks.Task<AccountPermissionVO> InsertAccountAndRelatedPermissionUsingPOSTAsync (AclClientPermissionVO aclClientPermissionVO);

        /// <summary>
        /// create an account permission
        /// </summary>
        /// <remarks>
        /// create an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> InsertAccountAndRelatedPermissionUsingPOSTAsyncWithHttpInfo (AclClientPermissionVO aclClientPermissionVO);
        /// <summary>
        /// Subscribe an account
        /// </summary>
        /// <remarks>
        /// After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of List&lt;Portfolio&gt;</returns>
        System.Threading.Tasks.Task<List<Portfolio>> SubscribeAccountUsingPostAsync (Guid? accountId, AccountAllocationMapping allocRequest);

        /// <summary>
        /// Subscribe an account
        /// </summary>
        /// <remarks>
        /// After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of ApiResponse (List&lt;Portfolio&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Portfolio>>> SubscribeAccountUsingPostAsyncWithHttpInfo (Guid? accountId, AccountAllocationMapping allocRequest);
        /// <summary>
        /// Update an account allocation
        /// </summary>
        /// <remarks>
        /// Update the information for an account-allocation mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>Task of AccountAllocationMapping</returns>
        System.Threading.Tasks.Task<AccountAllocationMapping> UpdateAccountAllocationMappingUsingPutAsync (Guid? accountAllocationId, Object accountAllocationMapping);

        /// <summary>
        /// Update an account allocation
        /// </summary>
        /// <remarks>
        /// Update the information for an account-allocation mapping.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>Task of ApiResponse (AccountAllocationMapping)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAllocationMapping>> UpdateAccountAllocationMappingUsingPutAsyncWithHttpInfo (Guid? accountAllocationId, Object accountAllocationMapping);
        /// <summary>
        /// Update an account status
        /// </summary>
        /// <remarks>
        /// Update an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of AccountStatus</returns>
        System.Threading.Tasks.Task<AccountStatus> UpdateAccountStatusUsingPutAsync (Object accountStatus, Guid? accountStatusId);

        /// <summary>
        /// Update an account status
        /// </summary>
        /// <remarks>
        /// Update an account status record for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of ApiResponse (AccountStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountStatus>> UpdateAccountStatusUsingPutAsyncWithHttpInfo (Object accountStatus, Guid? accountStatusId);
        /// <summary>
        /// Update an account type
        /// </summary>
        /// <remarks>
        /// Update the information for a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of AccountType</returns>
        System.Threading.Tasks.Task<AccountType> UpdateAccountTypeUsingPutAsync (Object accountType, Guid? accountTypeId);

        /// <summary>
        /// Update an account type
        /// </summary>
        /// <remarks>
        /// Update the information for a possible account type defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of ApiResponse (AccountType)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountType>> UpdateAccountTypeUsingPutAsyncWithHttpInfo (Object accountType, Guid? accountTypeId);
        /// <summary>
        /// Update an account
        /// </summary>
        /// <remarks>
        /// Update the information for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> UpdateAccountUsingPutAsync (Object account, Guid? accountId);

        /// <summary>
        /// Update an account
        /// </summary>
        /// <remarks>
        /// Update the information for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> UpdateAccountUsingPutAsyncWithHttpInfo (Object account, Guid? accountId);
        /// <summary>
        /// Update an account permission
        /// </summary>
        /// <remarks>
        /// Update an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of AccountPermissionVO</returns>
        System.Threading.Tasks.Task<AccountPermissionVO> UpdateClientAccountPermissionUsingPUTAsync (Guid? accountId, Object aclClientPermissionVO);

        /// <summary>
        /// Update an account permission
        /// </summary>
        /// <remarks>
        /// Update an account permission
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> UpdateClientAccountPermissionUsingPUTAsyncWithHttpInfo (Guid? accountId, Object aclClientPermissionVO);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountApi : IAccountApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an account allocation Create an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>AccountAllocationMapping</returns>
        public AccountAllocationMapping CreateAccountAllocationMappingUsingPost (AccountAllocationMapping allocRequest)
        {
             ApiResponse<AccountAllocationMapping> localVarResponse = CreateAccountAllocationMappingUsingPostWithHttpInfo(allocRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account allocation Create an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>ApiResponse of AccountAllocationMapping</returns>
        public ApiResponse< AccountAllocationMapping > CreateAccountAllocationMappingUsingPostWithHttpInfo (AccountAllocationMapping allocRequest)
        {
            // verify the required parameter 'allocRequest' is set
            if (allocRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocRequest' when calling AccountApi->CreateAccountAllocationMappingUsingPost");

            var localVarPath = "/nucleus/v1/account_allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocRequest != null && allocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountAllocationMappingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAllocationMapping)));
        }

        /// <summary>
        /// Create an account allocation Create an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of AccountAllocationMapping</returns>
        public async System.Threading.Tasks.Task<AccountAllocationMapping> CreateAccountAllocationMappingUsingPostAsync (AccountAllocationMapping allocRequest)
        {
             ApiResponse<AccountAllocationMapping> localVarResponse = await CreateAccountAllocationMappingUsingPostAsyncWithHttpInfo(allocRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an account allocation Create an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of ApiResponse (AccountAllocationMapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountAllocationMapping>> CreateAccountAllocationMappingUsingPostAsyncWithHttpInfo (AccountAllocationMapping allocRequest)
        {
            // verify the required parameter 'allocRequest' is set
            if (allocRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocRequest' when calling AccountApi->CreateAccountAllocationMappingUsingPost");

            var localVarPath = "/nucleus/v1/account_allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allocRequest != null && allocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountAllocationMappingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAllocationMapping)));
        }

        /// <summary>
        /// Create an account status Create an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>AccountStatus</returns>
        public AccountStatus CreateAccountStatusUsingPost (AccountStatus accountStatusRequest)
        {
             ApiResponse<AccountStatus> localVarResponse = CreateAccountStatusUsingPostWithHttpInfo(accountStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account status Create an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>ApiResponse of AccountStatus</returns>
        public ApiResponse< AccountStatus > CreateAccountStatusUsingPostWithHttpInfo (AccountStatus accountStatusRequest)
        {
            // verify the required parameter 'accountStatusRequest' is set
            if (accountStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusRequest' when calling AccountApi->CreateAccountStatusUsingPost");

            var localVarPath = "/nucleus/v1/account_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusRequest != null && accountStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountStatusUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountStatus)));
        }

        /// <summary>
        /// Create an account status Create an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>Task of AccountStatus</returns>
        public async System.Threading.Tasks.Task<AccountStatus> CreateAccountStatusUsingPostAsync (AccountStatus accountStatusRequest)
        {
             ApiResponse<AccountStatus> localVarResponse = await CreateAccountStatusUsingPostAsyncWithHttpInfo(accountStatusRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an account status Create an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusRequest">accountStatusRequest</param>
        /// <returns>Task of ApiResponse (AccountStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountStatus>> CreateAccountStatusUsingPostAsyncWithHttpInfo (AccountStatus accountStatusRequest)
        {
            // verify the required parameter 'accountStatusRequest' is set
            if (accountStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusRequest' when calling AccountApi->CreateAccountStatusUsingPost");

            var localVarPath = "/nucleus/v1/account_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusRequest != null && accountStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountStatusUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountStatus)));
        }

        /// <summary>
        /// Create an account type Create a new account type for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>AccountType</returns>
        public AccountType CreateAccountTypeUsingPost (AccountType accountTypeRequest)
        {
             ApiResponse<AccountType> localVarResponse = CreateAccountTypeUsingPostWithHttpInfo(accountTypeRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account type Create a new account type for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>ApiResponse of AccountType</returns>
        public ApiResponse< AccountType > CreateAccountTypeUsingPostWithHttpInfo (AccountType accountTypeRequest)
        {
            // verify the required parameter 'accountTypeRequest' is set
            if (accountTypeRequest == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeRequest' when calling AccountApi->CreateAccountTypeUsingPost");

            var localVarPath = "/nucleus/v1/account_type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeRequest != null && accountTypeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountTypeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountTypeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTypeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountType)));
        }

        /// <summary>
        /// Create an account type Create a new account type for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>Task of AccountType</returns>
        public async System.Threading.Tasks.Task<AccountType> CreateAccountTypeUsingPostAsync (AccountType accountTypeRequest)
        {
             ApiResponse<AccountType> localVarResponse = await CreateAccountTypeUsingPostAsyncWithHttpInfo(accountTypeRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an account type Create a new account type for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeRequest">accountTypeRequest</param>
        /// <returns>Task of ApiResponse (AccountType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountType>> CreateAccountTypeUsingPostAsyncWithHttpInfo (AccountType accountTypeRequest)
        {
            // verify the required parameter 'accountTypeRequest' is set
            if (accountTypeRequest == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeRequest' when calling AccountApi->CreateAccountTypeUsingPost");

            var localVarPath = "/nucleus/v1/account_type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeRequest != null && accountTypeRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountTypeRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountTypeRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountTypeUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountType)));
        }

        /// <summary>
        /// Create an account Create an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>Account</returns>
        public Account CreateAccountUsingPost (Account account)
        {
             ApiResponse<Account> localVarResponse = CreateAccountUsingPostWithHttpInfo(account);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account Create an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse< Account > CreateAccountUsingPostWithHttpInfo (Account account)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling AccountApi->CreateAccountUsingPost");

            var localVarPath = "/nucleus/v1/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Create an account Create an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> CreateAccountUsingPostAsync (Account account)
        {
             ApiResponse<Account> localVarResponse = await CreateAccountUsingPostAsyncWithHttpInfo(account);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an account Create an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Account>> CreateAccountUsingPostAsyncWithHttpInfo (Account account)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling AccountApi->CreateAccountUsingPost");

            var localVarPath = "/nucleus/v1/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Delete an account allocation Permanently delete an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns></returns>
        public void DeleteAccountAllocationMappingUsingDelete (Guid? accountAllocationId)
        {
             DeleteAccountAllocationMappingUsingDeleteWithHttpInfo(accountAllocationId);
        }

        /// <summary>
        /// Delete an account allocation Permanently delete an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountAllocationMappingUsingDeleteWithHttpInfo (Guid? accountAllocationId)
        {
            // verify the required parameter 'accountAllocationId' is set
            if (accountAllocationId == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationId' when calling AccountApi->DeleteAccountAllocationMappingUsingDelete");

            var localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountAllocationId != null) localVarPathParams.Add("account_allocation_id", this.Configuration.ApiClient.ParameterToString(accountAllocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountAllocationMappingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account allocation Permanently delete an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountAllocationMappingUsingDeleteAsync (Guid? accountAllocationId)
        {
             await DeleteAccountAllocationMappingUsingDeleteAsyncWithHttpInfo(accountAllocationId);

        }

        /// <summary>
        /// Delete an account allocation Permanently delete an account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountAllocationMappingUsingDeleteAsyncWithHttpInfo (Guid? accountAllocationId)
        {
            // verify the required parameter 'accountAllocationId' is set
            if (accountAllocationId == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationId' when calling AccountApi->DeleteAccountAllocationMappingUsingDelete");

            var localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountAllocationId != null) localVarPathParams.Add("account_allocation_id", this.Configuration.ApiClient.ParameterToString(accountAllocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountAllocationMappingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account permission Delete an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>AccountPermissionVO</returns>
        public AccountPermissionVO DeleteAccountPermissionUsingDELETE (Guid? accountId)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = DeleteAccountPermissionUsingDELETEWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an account permission Delete an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        public ApiResponse< AccountPermissionVO > DeleteAccountPermissionUsingDELETEWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->DeleteAccountPermissionUsingDELETE");

            var localVarPath = "/nucleus/v1/account_permission/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountPermissionUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

        /// <summary>
        /// Delete an account permission Delete an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of AccountPermissionVO</returns>
        public async System.Threading.Tasks.Task<AccountPermissionVO> DeleteAccountPermissionUsingDELETEAsync (Guid? accountId)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = await DeleteAccountPermissionUsingDELETEAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an account permission Delete an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> DeleteAccountPermissionUsingDELETEAsyncWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->DeleteAccountPermissionUsingDELETE");

            var localVarPath = "/nucleus/v1/account_permission/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountPermissionUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

        /// <summary>
        /// Delete an account status Permanently delete an account status record from an account’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns></returns>
        public void DeleteAccountStatusUsingDelete (Guid? accountStatusId)
        {
             DeleteAccountStatusUsingDeleteWithHttpInfo(accountStatusId);
        }

        /// <summary>
        /// Delete an account status Permanently delete an account status record from an account’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountStatusUsingDeleteWithHttpInfo (Guid? accountStatusId)
        {
            // verify the required parameter 'accountStatusId' is set
            if (accountStatusId == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusId' when calling AccountApi->DeleteAccountStatusUsingDelete");

            var localVarPath = "/nucleus/v1/account_status/{account_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusId != null) localVarPathParams.Add("account_status_id", this.Configuration.ApiClient.ParameterToString(accountStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountStatusUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account status Permanently delete an account status record from an account’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountStatusUsingDeleteAsync (Guid? accountStatusId)
        {
             await DeleteAccountStatusUsingDeleteAsyncWithHttpInfo(accountStatusId);

        }

        /// <summary>
        /// Delete an account status Permanently delete an account status record from an account’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountStatusUsingDeleteAsyncWithHttpInfo (Guid? accountStatusId)
        {
            // verify the required parameter 'accountStatusId' is set
            if (accountStatusId == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusId' when calling AccountApi->DeleteAccountStatusUsingDelete");

            var localVarPath = "/nucleus/v1/account_status/{account_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusId != null) localVarPathParams.Add("account_status_id", this.Configuration.ApiClient.ParameterToString(accountStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountStatusUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account type Permanently delete a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns></returns>
        public void DeleteAccountTypeUsingDelete (Guid? accountTypeId)
        {
             DeleteAccountTypeUsingDeleteWithHttpInfo(accountTypeId);
        }

        /// <summary>
        /// Delete an account type Permanently delete a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountTypeUsingDeleteWithHttpInfo (Guid? accountTypeId)
        {
            // verify the required parameter 'accountTypeId' is set
            if (accountTypeId == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeId' when calling AccountApi->DeleteAccountTypeUsingDelete");

            var localVarPath = "/nucleus/v1/account_type/{account_type_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeId != null) localVarPathParams.Add("account_type_id", this.Configuration.ApiClient.ParameterToString(accountTypeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTypeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account type Permanently delete a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountTypeUsingDeleteAsync (Guid? accountTypeId)
        {
             await DeleteAccountTypeUsingDeleteAsyncWithHttpInfo(accountTypeId);

        }

        /// <summary>
        /// Delete an account type Permanently delete a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountTypeUsingDeleteAsyncWithHttpInfo (Guid? accountTypeId)
        {
            // verify the required parameter 'accountTypeId' is set
            if (accountTypeId == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeId' when calling AccountApi->DeleteAccountTypeUsingDelete");

            var localVarPath = "/nucleus/v1/account_type/{account_type_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeId != null) localVarPathParams.Add("account_type_id", this.Configuration.ApiClient.ParameterToString(accountTypeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountTypeUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account Permanently delete an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns></returns>
        public void DeleteAccountUsingDelete (Guid? accountId)
        {
             DeleteAccountUsingDeleteWithHttpInfo(accountId);
        }

        /// <summary>
        /// Delete an account Permanently delete an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountUsingDeleteWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->DeleteAccountUsingDelete");

            var localVarPath = "/nucleus/v1/account/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an account Permanently delete an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountUsingDeleteAsync (Guid? accountId)
        {
             await DeleteAccountUsingDeleteAsyncWithHttpInfo(accountId);

        }

        /// <summary>
        /// Delete an account Permanently delete an account under a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUsingDeleteAsyncWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->DeleteAccountUsingDelete");

            var localVarPath = "/nucleus/v1/account/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all accounts Get information for all accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccount</returns>
        public PageAccount GetAccountAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccount> localVarResponse = GetAccountAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all accounts Get information for all accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccount</returns>
        public ApiResponse< PageAccount > GetAccountAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccount)));
        }

        /// <summary>
        /// List all accounts Get information for all accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccount</returns>
        public async System.Threading.Tasks.Task<PageAccount> GetAccountAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccount> localVarResponse = await GetAccountAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all accounts Get information for all accounts for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccount)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAccount>> GetAccountAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccount>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccount) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccount)));
        }

        /// <summary>
        /// List all account allocations Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountAllocationMapping</returns>
        public PageAccountAllocationMapping GetAccountAllocationMappingAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountAllocationMapping> localVarResponse = GetAccountAllocationMappingAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account allocations Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountAllocationMapping</returns>
        public ApiResponse< PageAccountAllocationMapping > GetAccountAllocationMappingAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAllocationMappingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountAllocationMapping)));
        }

        /// <summary>
        /// List all account allocations Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountAllocationMapping</returns>
        public async System.Threading.Tasks.Task<PageAccountAllocationMapping> GetAccountAllocationMappingAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountAllocationMapping> localVarResponse = await GetAccountAllocationMappingAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account allocations Get information for all account-allocation mappings for all accounts defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountAllocationMapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAccountAllocationMapping>> GetAccountAllocationMappingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_allocation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAllocationMappingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountAllocationMapping)));
        }

        /// <summary>
        /// Retrieve an account allocation Retrieve the information for a specific account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>AccountAllocationMapping</returns>
        public AccountAllocationMapping GetAccountAllocationMappingUsingGet (Guid? accountAllocationId)
        {
             ApiResponse<AccountAllocationMapping> localVarResponse = GetAccountAllocationMappingUsingGetWithHttpInfo(accountAllocationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an account allocation Retrieve the information for a specific account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>ApiResponse of AccountAllocationMapping</returns>
        public ApiResponse< AccountAllocationMapping > GetAccountAllocationMappingUsingGetWithHttpInfo (Guid? accountAllocationId)
        {
            // verify the required parameter 'accountAllocationId' is set
            if (accountAllocationId == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationId' when calling AccountApi->GetAccountAllocationMappingUsingGet");

            var localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountAllocationId != null) localVarPathParams.Add("account_allocation_id", this.Configuration.ApiClient.ParameterToString(accountAllocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAllocationMappingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAllocationMapping)));
        }

        /// <summary>
        /// Retrieve an account allocation Retrieve the information for a specific account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of AccountAllocationMapping</returns>
        public async System.Threading.Tasks.Task<AccountAllocationMapping> GetAccountAllocationMappingUsingGetAsync (Guid? accountAllocationId)
        {
             ApiResponse<AccountAllocationMapping> localVarResponse = await GetAccountAllocationMappingUsingGetAsyncWithHttpInfo(accountAllocationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an account allocation Retrieve the information for a specific account-allocation mapping for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <returns>Task of ApiResponse (AccountAllocationMapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountAllocationMapping>> GetAccountAllocationMappingUsingGetAsyncWithHttpInfo (Guid? accountAllocationId)
        {
            // verify the required parameter 'accountAllocationId' is set
            if (accountAllocationId == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationId' when calling AccountApi->GetAccountAllocationMappingUsingGet");

            var localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountAllocationId != null) localVarPathParams.Add("account_allocation_id", this.Configuration.ApiClient.ParameterToString(accountAllocationId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAllocationMappingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAllocationMapping)));
        }

        /// <summary>
        /// List all account asset sizes Get a list of asset sizes by date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        public List<AvailableDateDoubleVO> GetAccountAssetSizeAggAllUsingGet (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = GetAccountAssetSizeAggAllUsingGetWithHttpInfo(accountId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account asset sizes Get a list of asset sizes by date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        public ApiResponse< List<AvailableDateDoubleVO> > GetAccountAssetSizeAggAllUsingGetWithHttpInfo (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountAssetSizeAggAllUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (excludeSubledger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_subledger", excludeSubledger)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAssetSizeAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// List all account asset sizes Get a list of asset sizes by date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetAccountAssetSizeAggAllUsingGetAsync (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = await GetAccountAssetSizeAggAllUsingGetAsyncWithHttpInfo(accountId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account asset sizes Get a list of asset sizes by date for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account Id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date (optional)</param>
        /// <param name="excludeSubledger">true or false (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetAccountAssetSizeAggAllUsingGetAsyncWithHttpInfo (Guid? accountId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountAssetSizeAggAllUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (excludeSubledger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_subledger", excludeSubledger)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAssetSizeAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// List all Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Object</returns>
        public Object GetAccountOverviewUsingGet (Guid? accountId, bool? ascending = null, string orderBy = null)
        {
             ApiResponse<Object> localVarResponse = GetAccountOverviewUsingGetWithHttpInfo(accountId, ascending, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetAccountOverviewUsingGetWithHttpInfo (Guid? accountId, bool? ascending = null, string orderBy = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountOverviewUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List all Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetAccountOverviewUsingGetAsync (Guid? accountId, bool? ascending = null, string orderBy = null)
        {
             ApiResponse<Object> localVarResponse = await GetAccountOverviewUsingGetAsyncWithHttpInfo(accountId, ascending, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetAccountOverviewUsingGetAsyncWithHttpInfo (Guid? accountId, bool? ascending = null, string orderBy = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountOverviewUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get an account permission Get an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>AccountPermissionVO</returns>
        public AccountPermissionVO GetAccountPermissionUsingGET (Guid? accountId)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = GetAccountPermissionUsingGETWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an account permission Get an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        public ApiResponse< AccountPermissionVO > GetAccountPermissionUsingGETWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountPermissionUsingGET");

            var localVarPath = "/nucleus/v1/account_permission/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPermissionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

        /// <summary>
        /// Get an account permission Get an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of AccountPermissionVO</returns>
        public async System.Threading.Tasks.Task<AccountPermissionVO> GetAccountPermissionUsingGETAsync (Guid? accountId)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = await GetAccountPermissionUsingGETAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an account permission Get an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> GetAccountPermissionUsingGETAsyncWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountPermissionUsingGET");

            var localVarPath = "/nucleus/v1/account_permission/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountPermissionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

        /// <summary>
        /// List all account statuses Get the account status history information for all accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountStatus</returns>
        public PageAccountStatus GetAccountStatusAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountStatus> localVarResponse = GetAccountStatusAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account statuses Get the account status history information for all accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountStatus</returns>
        public ApiResponse< PageAccountStatus > GetAccountStatusAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountStatusAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountStatus)));
        }

        /// <summary>
        /// List all account statuses Get the account status history information for all accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountStatus</returns>
        public async System.Threading.Tasks.Task<PageAccountStatus> GetAccountStatusAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountStatus> localVarResponse = await GetAccountStatusAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account statuses Get the account status history information for all accounts.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAccountStatus>> GetAccountStatusAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountStatusAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountStatus)));
        }

        /// <summary>
        /// Retrieve an account status Retrieve the information for a specific account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>AccountStatus</returns>
        public AccountStatus GetAccountStatusUsingGet (Guid? accountStatusId)
        {
             ApiResponse<AccountStatus> localVarResponse = GetAccountStatusUsingGetWithHttpInfo(accountStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an account status Retrieve the information for a specific account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>ApiResponse of AccountStatus</returns>
        public ApiResponse< AccountStatus > GetAccountStatusUsingGetWithHttpInfo (Guid? accountStatusId)
        {
            // verify the required parameter 'accountStatusId' is set
            if (accountStatusId == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusId' when calling AccountApi->GetAccountStatusUsingGet");

            var localVarPath = "/nucleus/v1/account_status/{account_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusId != null) localVarPathParams.Add("account_status_id", this.Configuration.ApiClient.ParameterToString(accountStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountStatus)));
        }

        /// <summary>
        /// Retrieve an account status Retrieve the information for a specific account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of AccountStatus</returns>
        public async System.Threading.Tasks.Task<AccountStatus> GetAccountStatusUsingGetAsync (Guid? accountStatusId)
        {
             ApiResponse<AccountStatus> localVarResponse = await GetAccountStatusUsingGetAsyncWithHttpInfo(accountStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an account status Retrieve the information for a specific account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of ApiResponse (AccountStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountStatus>> GetAccountStatusUsingGetAsyncWithHttpInfo (Guid? accountStatusId)
        {
            // verify the required parameter 'accountStatusId' is set
            if (accountStatusId == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusId' when calling AccountApi->GetAccountStatusUsingGet");

            var localVarPath = "/nucleus/v1/account_status/{account_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusId != null) localVarPathParams.Add("account_status_id", this.Configuration.ApiClient.ParameterToString(accountStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountStatus)));
        }

        /// <summary>
        /// List all account types List all account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountType</returns>
        public PageAccountType GetAccountTypeAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountType> localVarResponse = GetAccountTypeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account types List all account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountType</returns>
        public ApiResponse< PageAccountType > GetAccountTypeAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTypeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountType)));
        }

        /// <summary>
        /// List all account types List all account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountType</returns>
        public async System.Threading.Tasks.Task<PageAccountType> GetAccountTypeAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountType> localVarResponse = await GetAccountTypeAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account types List all account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAccountType>> GetAccountTypeAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_type";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTypeAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountType)));
        }

        /// <summary>
        /// Get an Account Type Get an account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>AccountType</returns>
        public AccountType GetAccountTypeUsingGet (Guid? accountTypeId)
        {
             ApiResponse<AccountType> localVarResponse = GetAccountTypeUsingGetWithHttpInfo(accountTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Account Type Get an account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>ApiResponse of AccountType</returns>
        public ApiResponse< AccountType > GetAccountTypeUsingGetWithHttpInfo (Guid? accountTypeId)
        {
            // verify the required parameter 'accountTypeId' is set
            if (accountTypeId == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeId' when calling AccountApi->GetAccountTypeUsingGet");

            var localVarPath = "/nucleus/v1/account_type/{account_type_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeId != null) localVarPathParams.Add("account_type_id", this.Configuration.ApiClient.ParameterToString(accountTypeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTypeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountType)));
        }

        /// <summary>
        /// Get an Account Type Get an account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of AccountType</returns>
        public async System.Threading.Tasks.Task<AccountType> GetAccountTypeUsingGetAsync (Guid? accountTypeId)
        {
             ApiResponse<AccountType> localVarResponse = await GetAccountTypeUsingGetAsyncWithHttpInfo(accountTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Account Type Get an account types defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of ApiResponse (AccountType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountType>> GetAccountTypeUsingGetAsyncWithHttpInfo (Guid? accountTypeId)
        {
            // verify the required parameter 'accountTypeId' is set
            if (accountTypeId == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeId' when calling AccountApi->GetAccountTypeUsingGet");

            var localVarPath = "/nucleus/v1/account_type/{account_type_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeId != null) localVarPathParams.Add("account_type_id", this.Configuration.ApiClient.ParameterToString(accountTypeId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountTypeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountType)));
        }

        /// <summary>
        /// Retrieve an account Retrieve the information for a specific account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Account</returns>
        public Account GetAccountUsingGet (Guid? accountId)
        {
             ApiResponse<Account> localVarResponse = GetAccountUsingGetWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an account Retrieve the information for a specific account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse< Account > GetAccountUsingGetWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Retrieve an account Retrieve the information for a specific account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> GetAccountUsingGetAsync (Guid? accountId)
        {
             ApiResponse<Account> localVarResponse = await GetAccountUsingGetAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an account Retrieve the information for a specific account associated with a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountUsingGetAsyncWithHttpInfo (Guid? accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetAccountUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// List all account permission List all account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageAccountPermissionVO</returns>
        public PageAccountPermissionVO GetAllAccountPermissionUsingGET (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountPermissionVO> localVarResponse = GetAllAccountPermissionUsingGETWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account permission List all account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageAccountPermissionVO</returns>
        public ApiResponse< PageAccountPermissionVO > GetAllAccountPermissionUsingGETWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountPermissionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountPermissionVO)));
        }

        /// <summary>
        /// List all account permission List all account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageAccountPermissionVO</returns>
        public async System.Threading.Tasks.Task<PageAccountPermissionVO> GetAllAccountPermissionUsingGETAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageAccountPermissionVO> localVarResponse = await GetAllAccountPermissionUsingGETAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account permission List all account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageAccountPermissionVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageAccountPermissionVO>> GetAllAccountPermissionUsingGETAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/account_permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccountPermissionUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageAccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageAccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAccountPermissionVO)));
        }

        /// <summary>
        /// List all account holdings Get information for all the securities that are currently being held by an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        public PagePortfolioHoldingAgg GetPortfolioHoldingAggAllUsingGet (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = GetPortfolioHoldingAggAllUsingGetWithHttpInfo(accountId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account holdings Get information for all the securities that are currently being held by an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        public ApiResponse< PagePortfolioHoldingAgg > GetPortfolioHoldingAggAllUsingGetWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetPortfolioHoldingAggAllUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioHoldingAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// List all account holdings Get information for all the securities that are currently being held by an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        public async System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetPortfolioHoldingAggAllUsingGetAsync (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = await GetPortfolioHoldingAggAllUsingGetAsyncWithHttpInfo(accountId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account holdings Get information for all the securities that are currently being held by an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetPortfolioHoldingAggAllUsingGetAsyncWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetPortfolioHoldingAggAllUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioHoldingAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// List all account transactions Get the information for all transactions for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetPortfolioTransactionAggAllUsingGet (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetPortfolioTransactionAggAllUsingGetWithHttpInfo(accountId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all account transactions Get the information for all transactions for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetPortfolioTransactionAggAllUsingGetWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetPortfolioTransactionAggAllUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioTransactionAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all account transactions Get the information for all transactions for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetPortfolioTransactionAggAllUsingGetAsync (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetPortfolioTransactionAggAllUsingGetAsyncWithHttpInfo(accountId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all account transactions Get the information for all transactions for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <param name="endDate">end date  (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date  (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetPortfolioTransactionAggAllUsingGetAsyncWithHttpInfo (Guid? accountId, bool? ascending = null, string currencyConversion = null, DateTime? endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, DateTime? startDate = null)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->GetPortfolioTransactionAggAllUsingGet");

            var localVarPath = "/nucleus/v1/account/{account_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPortfolioTransactionAggAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// create an account permission create an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>AccountPermissionVO</returns>
        public AccountPermissionVO InsertAccountAndRelatedPermissionUsingPOST (AclClientPermissionVO aclClientPermissionVO)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = InsertAccountAndRelatedPermissionUsingPOSTWithHttpInfo(aclClientPermissionVO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create an account permission create an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        public ApiResponse< AccountPermissionVO > InsertAccountAndRelatedPermissionUsingPOSTWithHttpInfo (AclClientPermissionVO aclClientPermissionVO)
        {
            // verify the required parameter 'aclClientPermissionVO' is set
            if (aclClientPermissionVO == null)
                throw new ApiException(400, "Missing required parameter 'aclClientPermissionVO' when calling AccountApi->InsertAccountAndRelatedPermissionUsingPOST");

            var localVarPath = "/nucleus/v1/account_permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aclClientPermissionVO != null && aclClientPermissionVO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aclClientPermissionVO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aclClientPermissionVO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertAccountAndRelatedPermissionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

        /// <summary>
        /// create an account permission create an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of AccountPermissionVO</returns>
        public async System.Threading.Tasks.Task<AccountPermissionVO> InsertAccountAndRelatedPermissionUsingPOSTAsync (AclClientPermissionVO aclClientPermissionVO)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = await InsertAccountAndRelatedPermissionUsingPOSTAsyncWithHttpInfo(aclClientPermissionVO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create an account permission create an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> InsertAccountAndRelatedPermissionUsingPOSTAsyncWithHttpInfo (AclClientPermissionVO aclClientPermissionVO)
        {
            // verify the required parameter 'aclClientPermissionVO' is set
            if (aclClientPermissionVO == null)
                throw new ApiException(400, "Missing required parameter 'aclClientPermissionVO' when calling AccountApi->InsertAccountAndRelatedPermissionUsingPOST");

            var localVarPath = "/nucleus/v1/account_permission";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (aclClientPermissionVO != null && aclClientPermissionVO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aclClientPermissionVO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aclClientPermissionVO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertAccountAndRelatedPermissionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

        /// <summary>
        /// Subscribe an account After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>List&lt;Portfolio&gt;</returns>
        public List<Portfolio> SubscribeAccountUsingPost (Guid? accountId, AccountAllocationMapping allocRequest)
        {
             ApiResponse<List<Portfolio>> localVarResponse = SubscribeAccountUsingPostWithHttpInfo(accountId, allocRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Subscribe an account After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>ApiResponse of List&lt;Portfolio&gt;</returns>
        public ApiResponse< List<Portfolio> > SubscribeAccountUsingPostWithHttpInfo (Guid? accountId, AccountAllocationMapping allocRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->SubscribeAccountUsingPost");
            // verify the required parameter 'allocRequest' is set
            if (allocRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocRequest' when calling AccountApi->SubscribeAccountUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (allocRequest != null && allocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portfolio>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portfolio>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portfolio>)));
        }

        /// <summary>
        /// Subscribe an account After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of List&lt;Portfolio&gt;</returns>
        public async System.Threading.Tasks.Task<List<Portfolio>> SubscribeAccountUsingPostAsync (Guid? accountId, AccountAllocationMapping allocRequest)
        {
             ApiResponse<List<Portfolio>> localVarResponse = await SubscribeAccountUsingPostAsyncWithHttpInfo(accountId, allocRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Subscribe an account After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">UUID account_id</param>
        /// <param name="allocRequest">allocRequest</param>
        /// <returns>Task of ApiResponse (List&lt;Portfolio&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Portfolio>>> SubscribeAccountUsingPostAsyncWithHttpInfo (Guid? accountId, AccountAllocationMapping allocRequest)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->SubscribeAccountUsingPost");
            // verify the required parameter 'allocRequest' is set
            if (allocRequest == null)
                throw new ApiException(400, "Missing required parameter 'allocRequest' when calling AccountApi->SubscribeAccountUsingPost");

            var localVarPath = "/nucleus/v1/account/{account_id}/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (allocRequest != null && allocRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(allocRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = allocRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubscribeAccountUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Portfolio>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Portfolio>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Portfolio>)));
        }

        /// <summary>
        /// Update an account allocation Update the information for an account-allocation mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>AccountAllocationMapping</returns>
        public AccountAllocationMapping UpdateAccountAllocationMappingUsingPut (Guid? accountAllocationId, Object accountAllocationMapping)
        {
             ApiResponse<AccountAllocationMapping> localVarResponse = UpdateAccountAllocationMappingUsingPutWithHttpInfo(accountAllocationId, accountAllocationMapping);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an account allocation Update the information for an account-allocation mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>ApiResponse of AccountAllocationMapping</returns>
        public ApiResponse< AccountAllocationMapping > UpdateAccountAllocationMappingUsingPutWithHttpInfo (Guid? accountAllocationId, Object accountAllocationMapping)
        {
            // verify the required parameter 'accountAllocationId' is set
            if (accountAllocationId == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationId' when calling AccountApi->UpdateAccountAllocationMappingUsingPut");
            // verify the required parameter 'accountAllocationMapping' is set
            if (accountAllocationMapping == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationMapping' when calling AccountApi->UpdateAccountAllocationMappingUsingPut");

            var localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountAllocationId != null) localVarPathParams.Add("account_allocation_id", this.Configuration.ApiClient.ParameterToString(accountAllocationId)); // path parameter
            if (accountAllocationMapping != null && accountAllocationMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountAllocationMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountAllocationMapping; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountAllocationMappingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAllocationMapping)));
        }

        /// <summary>
        /// Update an account allocation Update the information for an account-allocation mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>Task of AccountAllocationMapping</returns>
        public async System.Threading.Tasks.Task<AccountAllocationMapping> UpdateAccountAllocationMappingUsingPutAsync (Guid? accountAllocationId, Object accountAllocationMapping)
        {
             ApiResponse<AccountAllocationMapping> localVarResponse = await UpdateAccountAllocationMappingUsingPutAsyncWithHttpInfo(accountAllocationId, accountAllocationMapping);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an account allocation Update the information for an account-allocation mapping.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountAllocationId">UUID account_allocation_id</param>
        /// <param name="accountAllocationMapping">account_allocation_mapping</param>
        /// <returns>Task of ApiResponse (AccountAllocationMapping)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountAllocationMapping>> UpdateAccountAllocationMappingUsingPutAsyncWithHttpInfo (Guid? accountAllocationId, Object accountAllocationMapping)
        {
            // verify the required parameter 'accountAllocationId' is set
            if (accountAllocationId == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationId' when calling AccountApi->UpdateAccountAllocationMappingUsingPut");
            // verify the required parameter 'accountAllocationMapping' is set
            if (accountAllocationMapping == null)
                throw new ApiException(400, "Missing required parameter 'accountAllocationMapping' when calling AccountApi->UpdateAccountAllocationMappingUsingPut");

            var localVarPath = "/nucleus/v1/account_allocation/{account_allocation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountAllocationId != null) localVarPathParams.Add("account_allocation_id", this.Configuration.ApiClient.ParameterToString(accountAllocationId)); // path parameter
            if (accountAllocationMapping != null && accountAllocationMapping.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountAllocationMapping); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountAllocationMapping; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountAllocationMappingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAllocationMapping>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountAllocationMapping) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAllocationMapping)));
        }

        /// <summary>
        /// Update an account status Update an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>AccountStatus</returns>
        public AccountStatus UpdateAccountStatusUsingPut (Object accountStatus, Guid? accountStatusId)
        {
             ApiResponse<AccountStatus> localVarResponse = UpdateAccountStatusUsingPutWithHttpInfo(accountStatus, accountStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an account status Update an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>ApiResponse of AccountStatus</returns>
        public ApiResponse< AccountStatus > UpdateAccountStatusUsingPutWithHttpInfo (Object accountStatus, Guid? accountStatusId)
        {
            // verify the required parameter 'accountStatus' is set
            if (accountStatus == null)
                throw new ApiException(400, "Missing required parameter 'accountStatus' when calling AccountApi->UpdateAccountStatusUsingPut");
            // verify the required parameter 'accountStatusId' is set
            if (accountStatusId == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusId' when calling AccountApi->UpdateAccountStatusUsingPut");

            var localVarPath = "/nucleus/v1/account_status/{account_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusId != null) localVarPathParams.Add("account_status_id", this.Configuration.ApiClient.ParameterToString(accountStatusId)); // path parameter
            if (accountStatus != null && accountStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountStatusUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountStatus)));
        }

        /// <summary>
        /// Update an account status Update an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of AccountStatus</returns>
        public async System.Threading.Tasks.Task<AccountStatus> UpdateAccountStatusUsingPutAsync (Object accountStatus, Guid? accountStatusId)
        {
             ApiResponse<AccountStatus> localVarResponse = await UpdateAccountStatusUsingPutAsyncWithHttpInfo(accountStatus, accountStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an account status Update an account status record for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountStatus">account_status</param>
        /// <param name="accountStatusId">UUID account_status_id</param>
        /// <returns>Task of ApiResponse (AccountStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountStatus>> UpdateAccountStatusUsingPutAsyncWithHttpInfo (Object accountStatus, Guid? accountStatusId)
        {
            // verify the required parameter 'accountStatus' is set
            if (accountStatus == null)
                throw new ApiException(400, "Missing required parameter 'accountStatus' when calling AccountApi->UpdateAccountStatusUsingPut");
            // verify the required parameter 'accountStatusId' is set
            if (accountStatusId == null)
                throw new ApiException(400, "Missing required parameter 'accountStatusId' when calling AccountApi->UpdateAccountStatusUsingPut");

            var localVarPath = "/nucleus/v1/account_status/{account_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountStatusId != null) localVarPathParams.Add("account_status_id", this.Configuration.ApiClient.ParameterToString(accountStatusId)); // path parameter
            if (accountStatus != null && accountStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountStatusUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountStatus)));
        }

        /// <summary>
        /// Update an account type Update the information for a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>AccountType</returns>
        public AccountType UpdateAccountTypeUsingPut (Object accountType, Guid? accountTypeId)
        {
             ApiResponse<AccountType> localVarResponse = UpdateAccountTypeUsingPutWithHttpInfo(accountType, accountTypeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an account type Update the information for a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>ApiResponse of AccountType</returns>
        public ApiResponse< AccountType > UpdateAccountTypeUsingPutWithHttpInfo (Object accountType, Guid? accountTypeId)
        {
            // verify the required parameter 'accountType' is set
            if (accountType == null)
                throw new ApiException(400, "Missing required parameter 'accountType' when calling AccountApi->UpdateAccountTypeUsingPut");
            // verify the required parameter 'accountTypeId' is set
            if (accountTypeId == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeId' when calling AccountApi->UpdateAccountTypeUsingPut");

            var localVarPath = "/nucleus/v1/account_type/{account_type_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeId != null) localVarPathParams.Add("account_type_id", this.Configuration.ApiClient.ParameterToString(accountTypeId)); // path parameter
            if (accountType != null && accountType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountType; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountTypeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountType)));
        }

        /// <summary>
        /// Update an account type Update the information for a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of AccountType</returns>
        public async System.Threading.Tasks.Task<AccountType> UpdateAccountTypeUsingPutAsync (Object accountType, Guid? accountTypeId)
        {
             ApiResponse<AccountType> localVarResponse = await UpdateAccountTypeUsingPutAsyncWithHttpInfo(accountType, accountTypeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an account type Update the information for a possible account type defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountType">account_type</param>
        /// <param name="accountTypeId">UUID account_type_id</param>
        /// <returns>Task of ApiResponse (AccountType)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountType>> UpdateAccountTypeUsingPutAsyncWithHttpInfo (Object accountType, Guid? accountTypeId)
        {
            // verify the required parameter 'accountType' is set
            if (accountType == null)
                throw new ApiException(400, "Missing required parameter 'accountType' when calling AccountApi->UpdateAccountTypeUsingPut");
            // verify the required parameter 'accountTypeId' is set
            if (accountTypeId == null)
                throw new ApiException(400, "Missing required parameter 'accountTypeId' when calling AccountApi->UpdateAccountTypeUsingPut");

            var localVarPath = "/nucleus/v1/account_type/{account_type_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountTypeId != null) localVarPathParams.Add("account_type_id", this.Configuration.ApiClient.ParameterToString(accountTypeId)); // path parameter
            if (accountType != null && accountType.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(accountType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountType; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountTypeUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountType>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountType) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountType)));
        }

        /// <summary>
        /// Update an account Update the information for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Account</returns>
        public Account UpdateAccountUsingPut (Object account, Guid? accountId)
        {
             ApiResponse<Account> localVarResponse = UpdateAccountUsingPutWithHttpInfo(account, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an account Update the information for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse< Account > UpdateAccountUsingPutWithHttpInfo (Object account, Guid? accountId)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling AccountApi->UpdateAccountUsingPut");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->UpdateAccountUsingPut");

            var localVarPath = "/nucleus/v1/account/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Update an account Update the information for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> UpdateAccountUsingPutAsync (Object account, Guid? accountId)
        {
             ApiResponse<Account> localVarResponse = await UpdateAccountUsingPutAsyncWithHttpInfo(account, accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an account Update the information for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">account</param>
        /// <param name="accountId">UUID account_id</param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Account>> UpdateAccountUsingPutAsyncWithHttpInfo (Object account, Guid? accountId)
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling AccountApi->UpdateAccountUsingPut");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->UpdateAccountUsingPut");

            var localVarPath = "/nucleus/v1/account/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (account != null && account.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(account); // http body (model) parameter
            }
            else
            {
                localVarPostBody = account; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAccountUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Update an account permission Update an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>AccountPermissionVO</returns>
        public AccountPermissionVO UpdateClientAccountPermissionUsingPUT (Guid? accountId, Object aclClientPermissionVO)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = UpdateClientAccountPermissionUsingPUTWithHttpInfo(accountId, aclClientPermissionVO);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an account permission Update an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>ApiResponse of AccountPermissionVO</returns>
        public ApiResponse< AccountPermissionVO > UpdateClientAccountPermissionUsingPUTWithHttpInfo (Guid? accountId, Object aclClientPermissionVO)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->UpdateClientAccountPermissionUsingPUT");
            // verify the required parameter 'aclClientPermissionVO' is set
            if (aclClientPermissionVO == null)
                throw new ApiException(400, "Missing required parameter 'aclClientPermissionVO' when calling AccountApi->UpdateClientAccountPermissionUsingPUT");

            var localVarPath = "/nucleus/v1/account_permission/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (aclClientPermissionVO != null && aclClientPermissionVO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aclClientPermissionVO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aclClientPermissionVO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientAccountPermissionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

        /// <summary>
        /// Update an account permission Update an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of AccountPermissionVO</returns>
        public async System.Threading.Tasks.Task<AccountPermissionVO> UpdateClientAccountPermissionUsingPUTAsync (Guid? accountId, Object aclClientPermissionVO)
        {
             ApiResponse<AccountPermissionVO> localVarResponse = await UpdateClientAccountPermissionUsingPUTAsyncWithHttpInfo(accountId, aclClientPermissionVO);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an account permission Update an account permission
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">account_id</param>
        /// <param name="aclClientPermissionVO">aclClientPermissionVO</param>
        /// <returns>Task of ApiResponse (AccountPermissionVO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountPermissionVO>> UpdateClientAccountPermissionUsingPUTAsyncWithHttpInfo (Guid? accountId, Object aclClientPermissionVO)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountApi->UpdateClientAccountPermissionUsingPUT");
            // verify the required parameter 'aclClientPermissionVO' is set
            if (aclClientPermissionVO == null)
                throw new ApiException(400, "Missing required parameter 'aclClientPermissionVO' when calling AccountApi->UpdateClientAccountPermissionUsingPUT");

            var localVarPath = "/nucleus/v1/account_permission/{account_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("account_id", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            if (aclClientPermissionVO != null && aclClientPermissionVO.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(aclClientPermissionVO); // http body (model) parameter
            }
            else
            {
                localVarPostBody = aclClientPermissionVO; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientAccountPermissionUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountPermissionVO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AccountPermissionVO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountPermissionVO)));
        }

    }
}
