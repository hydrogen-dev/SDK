/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScoreApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a score
        /// </summary>
        /// <remarks>
        /// Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>Score</returns>
        Score CreateScoreUsingPost (Score score);

        /// <summary>
        /// Create a score
        /// </summary>
        /// <remarks>
        /// Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>ApiResponse of Score</returns>
        ApiResponse<Score> CreateScoreUsingPostWithHttpInfo (Score score);
        /// <summary>
        /// Delete a score
        /// </summary>
        /// <remarks>
        /// Permanently delete a score
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns></returns>
        void DeleteScoreUsingDelete (Guid? scoreId);

        /// <summary>
        /// Delete a score
        /// </summary>
        /// <remarks>
        /// Permanently delete a score
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScoreUsingDeleteWithHttpInfo (Guid? scoreId);
        /// <summary>
        /// List all scores
        /// </summary>
        /// <remarks>
        /// Get information for all scores stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageScore</returns>
        PageScore GetScoreAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all scores
        /// </summary>
        /// <remarks>
        /// Get information for all scores stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageScore</returns>
        ApiResponse<PageScore> GetScoreAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a score
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Score</returns>
        Score GetScoreUsingGet (Guid? scoreId);

        /// <summary>
        /// Retrieve a score
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>ApiResponse of Score</returns>
        ApiResponse<Score> GetScoreUsingGetWithHttpInfo (Guid? scoreId);
        /// <summary>
        /// Update a score
        /// </summary>
        /// <remarks>
        /// Update the information for a score.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Score</returns>
        Score UpdateScoreUsingPut (Object score, Guid? scoreId);

        /// <summary>
        /// Update a score
        /// </summary>
        /// <remarks>
        /// Update the information for a score.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>ApiResponse of Score</returns>
        ApiResponse<Score> UpdateScoreUsingPutWithHttpInfo (Object score, Guid? scoreId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a score
        /// </summary>
        /// <remarks>
        /// Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>Task of Score</returns>
        System.Threading.Tasks.Task<Score> CreateScoreUsingPostAsync (Score score);

        /// <summary>
        /// Create a score
        /// </summary>
        /// <remarks>
        /// Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        System.Threading.Tasks.Task<ApiResponse<Score>> CreateScoreUsingPostAsyncWithHttpInfo (Score score);
        /// <summary>
        /// Delete a score
        /// </summary>
        /// <remarks>
        /// Permanently delete a score
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScoreUsingDeleteAsync (Guid? scoreId);

        /// <summary>
        /// Delete a score
        /// </summary>
        /// <remarks>
        /// Permanently delete a score
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScoreUsingDeleteAsyncWithHttpInfo (Guid? scoreId);
        /// <summary>
        /// List all scores
        /// </summary>
        /// <remarks>
        /// Get information for all scores stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageScore</returns>
        System.Threading.Tasks.Task<PageScore> GetScoreAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all scores
        /// </summary>
        /// <remarks>
        /// Get information for all scores stored for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageScore>> GetScoreAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a score
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of Score</returns>
        System.Threading.Tasks.Task<Score> GetScoreUsingGetAsync (Guid? scoreId);

        /// <summary>
        /// Retrieve a score
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        System.Threading.Tasks.Task<ApiResponse<Score>> GetScoreUsingGetAsyncWithHttpInfo (Guid? scoreId);
        /// <summary>
        /// Update a score
        /// </summary>
        /// <remarks>
        /// Update the information for a score.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of Score</returns>
        System.Threading.Tasks.Task<Score> UpdateScoreUsingPutAsync (Object score, Guid? scoreId);

        /// <summary>
        /// Update a score
        /// </summary>
        /// <remarks>
        /// Update the information for a score.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        System.Threading.Tasks.Task<ApiResponse<Score>> UpdateScoreUsingPutAsyncWithHttpInfo (Object score, Guid? scoreId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScoreApi : IScoreApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScoreApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScoreApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a score Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>Score</returns>
        public Score CreateScoreUsingPost (Score score)
        {
             ApiResponse<Score> localVarResponse = CreateScoreUsingPostWithHttpInfo(score);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a score Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>ApiResponse of Score</returns>
        public ApiResponse< Score > CreateScoreUsingPostWithHttpInfo (Score score)
        {
            // verify the required parameter 'score' is set
            if (score == null)
                throw new ApiException(400, "Missing required parameter 'score' when calling ScoreApi->CreateScoreUsingPost");

            var localVarPath = "/nucleus/v1/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (score != null && score.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(score); // http body (model) parameter
            }
            else
            {
                localVarPostBody = score; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateScoreUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Score>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Score) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Score)));
        }

        /// <summary>
        /// Create a score Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>Task of Score</returns>
        public async System.Threading.Tasks.Task<Score> CreateScoreUsingPostAsync (Score score)
        {
             ApiResponse<Score> localVarResponse = await CreateScoreUsingPostAsyncWithHttpInfo(score);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a score Create a score for a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Score>> CreateScoreUsingPostAsyncWithHttpInfo (Score score)
        {
            // verify the required parameter 'score' is set
            if (score == null)
                throw new ApiException(400, "Missing required parameter 'score' when calling ScoreApi->CreateScoreUsingPost");

            var localVarPath = "/nucleus/v1/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (score != null && score.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(score); // http body (model) parameter
            }
            else
            {
                localVarPostBody = score; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateScoreUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Score>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Score) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Score)));
        }

        /// <summary>
        /// Delete a score Permanently delete a score
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns></returns>
        public void DeleteScoreUsingDelete (Guid? scoreId)
        {
             DeleteScoreUsingDeleteWithHttpInfo(scoreId);
        }

        /// <summary>
        /// Delete a score Permanently delete a score
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteScoreUsingDeleteWithHttpInfo (Guid? scoreId)
        {
            // verify the required parameter 'scoreId' is set
            if (scoreId == null)
                throw new ApiException(400, "Missing required parameter 'scoreId' when calling ScoreApi->DeleteScoreUsingDelete");

            var localVarPath = "/nucleus/v1/score/{score_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scoreId != null) localVarPathParams.Add("score_id", this.Configuration.ApiClient.ParameterToString(scoreId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScoreUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a score Permanently delete a score
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScoreUsingDeleteAsync (Guid? scoreId)
        {
             await DeleteScoreUsingDeleteAsyncWithHttpInfo(scoreId);

        }

        /// <summary>
        /// Delete a score Permanently delete a score
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScoreUsingDeleteAsyncWithHttpInfo (Guid? scoreId)
        {
            // verify the required parameter 'scoreId' is set
            if (scoreId == null)
                throw new ApiException(400, "Missing required parameter 'scoreId' when calling ScoreApi->DeleteScoreUsingDelete");

            var localVarPath = "/nucleus/v1/score/{score_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scoreId != null) localVarPathParams.Add("score_id", this.Configuration.ApiClient.ParameterToString(scoreId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteScoreUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all scores Get information for all scores stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageScore</returns>
        public PageScore GetScoreAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageScore> localVarResponse = GetScoreAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all scores Get information for all scores stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageScore</returns>
        public ApiResponse< PageScore > GetScoreAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScoreAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageScore)));
        }

        /// <summary>
        /// List all scores Get information for all scores stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageScore</returns>
        public async System.Threading.Tasks.Task<PageScore> GetScoreAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageScore> localVarResponse = await GetScoreAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all scores Get information for all scores stored for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageScore)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageScore>> GetScoreAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/score";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScoreAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageScore) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageScore)));
        }

        /// <summary>
        /// Retrieve a score Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Score</returns>
        public Score GetScoreUsingGet (Guid? scoreId)
        {
             ApiResponse<Score> localVarResponse = GetScoreUsingGetWithHttpInfo(scoreId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a score Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>ApiResponse of Score</returns>
        public ApiResponse< Score > GetScoreUsingGetWithHttpInfo (Guid? scoreId)
        {
            // verify the required parameter 'scoreId' is set
            if (scoreId == null)
                throw new ApiException(400, "Missing required parameter 'scoreId' when calling ScoreApi->GetScoreUsingGet");

            var localVarPath = "/nucleus/v1/score/{score_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scoreId != null) localVarPathParams.Add("score_id", this.Configuration.ApiClient.ParameterToString(scoreId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScoreUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Score>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Score) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Score)));
        }

        /// <summary>
        /// Retrieve a score Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of Score</returns>
        public async System.Threading.Tasks.Task<Score> GetScoreUsingGetAsync (Guid? scoreId)
        {
             ApiResponse<Score> localVarResponse = await GetScoreUsingGetAsyncWithHttpInfo(scoreId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a score Retrieve the information for a specific score associated with a client, account, goal, portfolio, allocation, model, benchmark or security.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Score>> GetScoreUsingGetAsyncWithHttpInfo (Guid? scoreId)
        {
            // verify the required parameter 'scoreId' is set
            if (scoreId == null)
                throw new ApiException(400, "Missing required parameter 'scoreId' when calling ScoreApi->GetScoreUsingGet");

            var localVarPath = "/nucleus/v1/score/{score_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scoreId != null) localVarPathParams.Add("score_id", this.Configuration.ApiClient.ParameterToString(scoreId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetScoreUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Score>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Score) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Score)));
        }

        /// <summary>
        /// Update a score Update the information for a score.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Score</returns>
        public Score UpdateScoreUsingPut (Object score, Guid? scoreId)
        {
             ApiResponse<Score> localVarResponse = UpdateScoreUsingPutWithHttpInfo(score, scoreId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a score Update the information for a score.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>ApiResponse of Score</returns>
        public ApiResponse< Score > UpdateScoreUsingPutWithHttpInfo (Object score, Guid? scoreId)
        {
            // verify the required parameter 'score' is set
            if (score == null)
                throw new ApiException(400, "Missing required parameter 'score' when calling ScoreApi->UpdateScoreUsingPut");
            // verify the required parameter 'scoreId' is set
            if (scoreId == null)
                throw new ApiException(400, "Missing required parameter 'scoreId' when calling ScoreApi->UpdateScoreUsingPut");

            var localVarPath = "/nucleus/v1/score/{score_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scoreId != null) localVarPathParams.Add("score_id", this.Configuration.ApiClient.ParameterToString(scoreId)); // path parameter
            if (score != null && score.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(score); // http body (model) parameter
            }
            else
            {
                localVarPostBody = score; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScoreUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Score>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Score) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Score)));
        }

        /// <summary>
        /// Update a score Update the information for a score.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of Score</returns>
        public async System.Threading.Tasks.Task<Score> UpdateScoreUsingPutAsync (Object score, Guid? scoreId)
        {
             ApiResponse<Score> localVarResponse = await UpdateScoreUsingPutAsyncWithHttpInfo(score, scoreId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a score Update the information for a score.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="score">score</param>
        /// <param name="scoreId">UUID score_id</param>
        /// <returns>Task of ApiResponse (Score)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Score>> UpdateScoreUsingPutAsyncWithHttpInfo (Object score, Guid? scoreId)
        {
            // verify the required parameter 'score' is set
            if (score == null)
                throw new ApiException(400, "Missing required parameter 'score' when calling ScoreApi->UpdateScoreUsingPut");
            // verify the required parameter 'scoreId' is set
            if (scoreId == null)
                throw new ApiException(400, "Missing required parameter 'scoreId' when calling ScoreApi->UpdateScoreUsingPut");

            var localVarPath = "/nucleus/v1/score/{score_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scoreId != null) localVarPathParams.Add("score_id", this.Configuration.ApiClient.ParameterToString(scoreId)); // path parameter
            if (score != null && score.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(score); // http body (model) parameter
            }
            else
            {
                localVarPostBody = score; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateScoreUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Score>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Score) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Score)));
        }

    }
}
