=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.8-SNAPSHOT

=end

require 'date'

module AtomApi
  class QuestionnairePayloadQuestions
    # A category for the question such as “Onboarding” or “Risk Profile”
    attr_accessor :category

    # A subcategory for the question such as “Income-related”
    attr_accessor :subcategory

    # Title for the question such as the body of the question or a header. Pairs with the description field
    attr_accessor :title

    # Description for the question such as additioonal question content. Pairs with the title field
    attr_accessor :description

    # The type of question structure such as “multiple_choice” or “free_form”
    attr_accessor :question_type

    # The order of the question within the questionnaire or category such as “1”, “2”, “3”
    attr_accessor :order_index

    # A reference link to a document related to the question
    attr_accessor :document

    # A reference link to an image associated with the question
    attr_accessor :image

    # The weight of the question as a percentage of the total questionnaire if each question does not contribute equally when calculating the final “score”; ex. 20 representing 20%. Weights of all the questions must add up to 100
    attr_accessor :weight

    # Indicates if the question is answered at an account-level
    attr_accessor :is_account

    # Custom information associated with the question in the format key:value
    attr_accessor :metadata

    attr_accessor :answers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'category' => :'category',
        :'subcategory' => :'subcategory',
        :'title' => :'title',
        :'description' => :'description',
        :'question_type' => :'question_type',
        :'order_index' => :'order_index',
        :'document' => :'document',
        :'image' => :'image',
        :'weight' => :'weight',
        :'is_account' => :'is_account',
        :'metadata' => :'metadata',
        :'answers' => :'answers'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'category' => :'String',
        :'subcategory' => :'String',
        :'title' => :'String',
        :'description' => :'String',
        :'question_type' => :'String',
        :'order_index' => :'String',
        :'document' => :'String',
        :'image' => :'String',
        :'weight' => :'Float',
        :'is_account' => :'BOOLEAN',
        :'metadata' => :'Object',
        :'answers' => :'Array<QuestionnairePayloadAnswers>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'subcategory')
        self.subcategory = attributes[:'subcategory']
      end

      if attributes.has_key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'question_type')
        self.question_type = attributes[:'question_type']
      end

      if attributes.has_key?(:'order_index')
        self.order_index = attributes[:'order_index']
      end

      if attributes.has_key?(:'document')
        self.document = attributes[:'document']
      end

      if attributes.has_key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.has_key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.has_key?(:'is_account')
        self.is_account = attributes[:'is_account']
      end

      if attributes.has_key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.has_key?(:'answers')
        if (value = attributes[:'answers']).is_a?(Array)
          self.answers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          category == o.category &&
          subcategory == o.subcategory &&
          title == o.title &&
          description == o.description &&
          question_type == o.question_type &&
          order_index == o.order_index &&
          document == o.document &&
          image == o.image &&
          weight == o.weight &&
          is_account == o.is_account &&
          metadata == o.metadata &&
          answers == o.answers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [category, subcategory, title, description, question_type, order_index, document, image, weight, is_account, metadata, answers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
