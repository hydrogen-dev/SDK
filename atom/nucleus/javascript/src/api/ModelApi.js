/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Model', 'model/ModelAssetSize', 'model/ModelComment', 'model/ModelHolding', 'model/ModelTransaction', 'model/OrderReconcileRequest', 'model/PageModel', 'model/PageModelAssetSize', 'model/PageModelComment', 'model/PageModelHolding', 'model/PageModelTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Model'), require('../model/ModelAssetSize'), require('../model/ModelComment'), require('../model/ModelHolding'), require('../model/ModelTransaction'), require('../model/OrderReconcileRequest'), require('../model/PageModel'), require('../model/PageModelAssetSize'), require('../model/PageModelComment'), require('../model/PageModelHolding'), require('../model/PageModelTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.ModelApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Model, root.HydrogenNucleusApi.ModelAssetSize, root.HydrogenNucleusApi.ModelComment, root.HydrogenNucleusApi.ModelHolding, root.HydrogenNucleusApi.ModelTransaction, root.HydrogenNucleusApi.OrderReconcileRequest, root.HydrogenNucleusApi.PageModel, root.HydrogenNucleusApi.PageModelAssetSize, root.HydrogenNucleusApi.PageModelComment, root.HydrogenNucleusApi.PageModelHolding, root.HydrogenNucleusApi.PageModelTransaction);
  }
}(this, function(ApiClient, Model, ModelAssetSize, ModelComment, ModelHolding, ModelTransaction, OrderReconcileRequest, PageModel, PageModelAssetSize, PageModelComment, PageModelHolding, PageModelTransaction) {
  'use strict';

  /**
   * Model service.
   * @module api/ModelApi
   * @version 1.9.5
   */

  /**
   * Constructs a new ModelApi. 
   * @alias module:api/ModelApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createModelAssetSizeUsingPost operation.
     * @callback module:api/ModelApi~createModelAssetSizeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelAssetSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model asset size
     * Create a new asset size record for a model.
     * @param {module:model/ModelAssetSize} req req
     * @param {module:api/ModelApi~createModelAssetSizeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelAssetSize}
     */
    this.createModelAssetSizeUsingPost = function(req, callback) {
      var postBody = req;

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createModelAssetSizeUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelAssetSize;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelChangeUsingPost operation.
     * @callback module:api/ModelApi~createModelChangeUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change a model composition
     * Model composition changes represent a change in a modelâ€™s holdings.
     * @param {module:model/OrderReconcileRequest} changeRequest changeRequest
     * @param {String} modelId UUID model_id
     * @param {module:api/ModelApi~createModelChangeUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelTransaction>}
     */
    this.createModelChangeUsingPost = function(changeRequest, modelId, callback) {
      var postBody = changeRequest;

      // verify the required parameter 'changeRequest' is set
      if (changeRequest === undefined || changeRequest === null) {
        throw new Error("Missing the required parameter 'changeRequest' when calling createModelChangeUsingPost");
      }

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling createModelChangeUsingPost");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [ModelTransaction];

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}/model_change', 'POST',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelCommentUsingPost operation.
     * @callback module:api/ModelApi~createModelCommentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model commentary
     * Create a new comment for a model available for your firm.
     * @param {module:model/ModelComment} modelCommentRequest modelCommentRequest
     * @param {module:api/ModelApi~createModelCommentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelComment}
     */
    this.createModelCommentUsingPost = function(modelCommentRequest, callback) {
      var postBody = modelCommentRequest;

      // verify the required parameter 'modelCommentRequest' is set
      if (modelCommentRequest === undefined || modelCommentRequest === null) {
        throw new Error("Missing the required parameter 'modelCommentRequest' when calling createModelCommentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelComment;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment', 'POST',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelHoldingUsingPost operation.
     * @callback module:api/ModelApi~createModelHoldingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model holding
     * Create a new model holding record for a specific model and date.
     * @param {module:model/ModelHolding} modelHoldingRequest modelHoldingRequest
     * @param {module:api/ModelApi~createModelHoldingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelHolding}
     */
    this.createModelHoldingUsingPost = function(modelHoldingRequest, callback) {
      var postBody = modelHoldingRequest;

      // verify the required parameter 'modelHoldingRequest' is set
      if (modelHoldingRequest === undefined || modelHoldingRequest === null) {
        throw new Error("Missing the required parameter 'modelHoldingRequest' when calling createModelHoldingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding', 'POST',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelTransactionUsingPost operation.
     * @callback module:api/ModelApi~createModelTransactionUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model transaction
     * Create a new transaction record for a security under a model for a specific date.
     * @param {module:model/ModelTransaction} modelTransactionRequest modelTransactionRequest
     * @param {module:api/ModelApi~createModelTransactionUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelTransaction}
     */
    this.createModelTransactionUsingPost = function(modelTransactionRequest, callback) {
      var postBody = modelTransactionRequest;

      // verify the required parameter 'modelTransactionRequest' is set
      if (modelTransactionRequest === undefined || modelTransactionRequest === null) {
        throw new Error("Missing the required parameter 'modelTransactionRequest' when calling createModelTransactionUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction', 'POST',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModelUsingPost operation.
     * @callback module:api/ModelApi~createModelUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model
     * Create a new model for your firm to which a portfolios can later subscribe.
     * @param {module:model/Model} modelInfoRequest modelInfoRequest
     * @param {module:api/ModelApi~createModelUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.createModelUsingPost = function(modelInfoRequest, callback) {
      var postBody = modelInfoRequest;

      // verify the required parameter 'modelInfoRequest' is set
      if (modelInfoRequest === undefined || modelInfoRequest === null) {
        throw new Error("Missing the required parameter 'modelInfoRequest' when calling createModelUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/nucleus/v1/model', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelAssetSizeUsingDelete operation.
     * @callback module:api/ModelApi~deleteModelAssetSizeUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model asset size
     * Permanently delete a model asset size record for a model. 
     * @param {String} modelAssetSizeId UUID model_asset_size_id
     * @param {module:api/ModelApi~deleteModelAssetSizeUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelAssetSizeUsingDelete = function(modelAssetSizeId, callback) {
      var postBody = null;

      // verify the required parameter 'modelAssetSizeId' is set
      if (modelAssetSizeId === undefined || modelAssetSizeId === null) {
        throw new Error("Missing the required parameter 'modelAssetSizeId' when calling deleteModelAssetSizeUsingDelete");
      }


      var pathParams = {
        'model_asset_size_id': modelAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size/{model_asset_size_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelCommentUsingDelete operation.
     * @callback module:api/ModelApi~deleteModelCommentUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model commentary
     * Permanently delete a model comment for a model
     * @param {String} modelCommentId UUID model_comment_id
     * @param {module:api/ModelApi~deleteModelCommentUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelCommentUsingDelete = function(modelCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'modelCommentId' is set
      if (modelCommentId === undefined || modelCommentId === null) {
        throw new Error("Missing the required parameter 'modelCommentId' when calling deleteModelCommentUsingDelete");
      }


      var pathParams = {
        'model_comment_id': modelCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment/{model_comment_id}', 'DELETE',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelHoldingUsingDelete operation.
     * @callback module:api/ModelApi~deleteModelHoldingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model holding
     * Permanently delete a model holding record for a model.
     * @param {String} modelHoldingId UUID model_holding_id
     * @param {module:api/ModelApi~deleteModelHoldingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelHoldingUsingDelete = function(modelHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'modelHoldingId' is set
      if (modelHoldingId === undefined || modelHoldingId === null) {
        throw new Error("Missing the required parameter 'modelHoldingId' when calling deleteModelHoldingUsingDelete");
      }


      var pathParams = {
        'model_holding_id': modelHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding/{model_holding_id}', 'DELETE',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelTransactionUsingDelete operation.
     * @callback module:api/ModelApi~deleteModelTransactionUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model transaction
     * Permanently delete a model transaction for a model.
     * @param {String} modelTransactionId UUID model_transaction_id
     * @param {module:api/ModelApi~deleteModelTransactionUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelTransactionUsingDelete = function(modelTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'modelTransactionId' is set
      if (modelTransactionId === undefined || modelTransactionId === null) {
        throw new Error("Missing the required parameter 'modelTransactionId' when calling deleteModelTransactionUsingDelete");
      }


      var pathParams = {
        'model_transaction_id': modelTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction/{model_transaction_id}', 'DELETE',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelUsingDelete operation.
     * @callback module:api/ModelApi~deleteModelUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model
     * Permanently delete a model for your firm.
     * @param {String} modelId UUID model_id
     * @param {module:api/ModelApi~deleteModelUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelUsingDelete = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling deleteModelUsingDelete");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}', 'DELETE',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelAllUsingGet operation.
     * @callback module:api/ModelApi~getModelAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all models
     * Get details for all models defined for your firm to which portfolios can subscribe.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/ModelApi~getModelAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageModel}
     */
    this.getModelAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageModel;

      return this.apiClient.callApi(
        '/nucleus/v1/model', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelAssetSizeAllUsingGet operation.
     * @callback module:api/ModelApi~getModelAssetSizeAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageModelAssetSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model asset sizes
     * Get a list of asset sizes per date for all models defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/ModelApi~getModelAssetSizeAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageModelAssetSize}
     */
    this.getModelAssetSizeAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageModelAssetSize;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelAssetSizeUsingGet operation.
     * @callback module:api/ModelApi~getModelAssetSizeUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelAssetSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model asset size
     * Retrieve the information for a model asset size record for a model.
     * @param {String} modelAssetSizeId UUID model_asset_size_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/ModelApi~getModelAssetSizeUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelAssetSize}
     */
    this.getModelAssetSizeUsingGet = function(modelAssetSizeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'modelAssetSizeId' is set
      if (modelAssetSizeId === undefined || modelAssetSizeId === null) {
        throw new Error("Missing the required parameter 'modelAssetSizeId' when calling getModelAssetSizeUsingGet");
      }


      var pathParams = {
        'model_asset_size_id': modelAssetSizeId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ModelAssetSize;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size/{model_asset_size_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCommentAllUsingGet operation.
     * @callback module:api/ModelApi~getModelCommentAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageModelComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model commentaries
     * List all comments for all models defined by your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/ModelApi~getModelCommentAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageModelComment}
     */
    this.getModelCommentAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageModelComment;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelCommentUsingGet operation.
     * @callback module:api/ModelApi~getModelCommentUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model commentary
     * Retrieve the information for a model comment for a model.
     * @param {String} modelCommentId UUID model_comment_id
     * @param {module:api/ModelApi~getModelCommentUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelComment}
     */
    this.getModelCommentUsingGet = function(modelCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'modelCommentId' is set
      if (modelCommentId === undefined || modelCommentId === null) {
        throw new Error("Missing the required parameter 'modelCommentId' when calling getModelCommentUsingGet");
      }


      var pathParams = {
        'model_comment_id': modelCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ModelComment;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment/{model_comment_id}', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelHoldingAllUsingGet operation.
     * @callback module:api/ModelApi~getModelHoldingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageModelHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model holdings
     * Get all model holding records for all models defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/ModelApi~getModelHoldingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageModelHolding}
     */
    this.getModelHoldingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageModelHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelHoldingUsingGet operation.
     * @callback module:api/ModelApi~getModelHoldingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model holding
     * Retrieve the information for a model holding record for a model.
     * @param {String} modelHoldingId UUID model_holding_id
     * @param {module:api/ModelApi~getModelHoldingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelHolding}
     */
    this.getModelHoldingUsingGet = function(modelHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'modelHoldingId' is set
      if (modelHoldingId === undefined || modelHoldingId === null) {
        throw new Error("Missing the required parameter 'modelHoldingId' when calling getModelHoldingUsingGet");
      }


      var pathParams = {
        'model_holding_id': modelHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ModelHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding/{model_holding_id}', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelTransactionAllUsingGet operation.
     * @callback module:api/ModelApi~getModelTransactionAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageModelTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model transactions
     * Get details for all transaction records for all models defined by your firm. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/ModelApi~getModelTransactionAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageModelTransaction}
     */
    this.getModelTransactionAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageModelTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelTransactionUsingGet operation.
     * @callback module:api/ModelApi~getModelTransactionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model transaction
     * Retrieve the information for a model transaction for a model.
     * @param {String} modelTransactionId UUID model_transaction_id
     * @param {module:api/ModelApi~getModelTransactionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelTransaction}
     */
    this.getModelTransactionUsingGet = function(modelTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'modelTransactionId' is set
      if (modelTransactionId === undefined || modelTransactionId === null) {
        throw new Error("Missing the required parameter 'modelTransactionId' when calling getModelTransactionUsingGet");
      }


      var pathParams = {
        'model_transaction_id': modelTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ModelTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction/{model_transaction_id}', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelUsingGet operation.
     * @callback module:api/ModelApi~getModelUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model
     * Get the information for a model for your firm.
     * @param {String} modelId UUID model_id
     * @param {module:api/ModelApi~getModelUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.getModelUsingGet = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getModelUsingGet");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}', 'GET',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelAssetSizeUsingPut operation.
     * @callback module:api/ModelApi~updateModelAssetSizeUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelAssetSize} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model asset size
     * Update a model asset size record for a model.
     * @param {Object} modelAssetSize model_asset_size
     * @param {String} modelAssetSizeId UUID model_asset_size_id
     * @param {module:api/ModelApi~updateModelAssetSizeUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelAssetSize}
     */
    this.updateModelAssetSizeUsingPut = function(modelAssetSize, modelAssetSizeId, callback) {
      var postBody = modelAssetSize;

      // verify the required parameter 'modelAssetSize' is set
      if (modelAssetSize === undefined || modelAssetSize === null) {
        throw new Error("Missing the required parameter 'modelAssetSize' when calling updateModelAssetSizeUsingPut");
      }

      // verify the required parameter 'modelAssetSizeId' is set
      if (modelAssetSizeId === undefined || modelAssetSizeId === null) {
        throw new Error("Missing the required parameter 'modelAssetSizeId' when calling updateModelAssetSizeUsingPut");
      }


      var pathParams = {
        'model_asset_size_id': modelAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelAssetSize;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size/{model_asset_size_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelCommentUsingPut operation.
     * @callback module:api/ModelApi~updateModelCommentUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model commentary
     * Update a model comment for a model.
     * @param {Object} modelComment model_comment
     * @param {String} modelCommentId UUID model_comment_id
     * @param {module:api/ModelApi~updateModelCommentUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelComment}
     */
    this.updateModelCommentUsingPut = function(modelComment, modelCommentId, callback) {
      var postBody = modelComment;

      // verify the required parameter 'modelComment' is set
      if (modelComment === undefined || modelComment === null) {
        throw new Error("Missing the required parameter 'modelComment' when calling updateModelCommentUsingPut");
      }

      // verify the required parameter 'modelCommentId' is set
      if (modelCommentId === undefined || modelCommentId === null) {
        throw new Error("Missing the required parameter 'modelCommentId' when calling updateModelCommentUsingPut");
      }


      var pathParams = {
        'model_comment_id': modelCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelComment;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment/{model_comment_id}', 'PUT',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelHoldingUsingPut operation.
     * @callback module:api/ModelApi~updateModelHoldingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model holding
     * Update a model holding record for a model.
     * @param {Object} modelHolding model_holding
     * @param {String} modelHoldingId UUID model_holding_id
     * @param {module:api/ModelApi~updateModelHoldingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelHolding}
     */
    this.updateModelHoldingUsingPut = function(modelHolding, modelHoldingId, callback) {
      var postBody = modelHolding;

      // verify the required parameter 'modelHolding' is set
      if (modelHolding === undefined || modelHolding === null) {
        throw new Error("Missing the required parameter 'modelHolding' when calling updateModelHoldingUsingPut");
      }

      // verify the required parameter 'modelHoldingId' is set
      if (modelHoldingId === undefined || modelHoldingId === null) {
        throw new Error("Missing the required parameter 'modelHoldingId' when calling updateModelHoldingUsingPut");
      }


      var pathParams = {
        'model_holding_id': modelHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding/{model_holding_id}', 'PUT',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelTransactionUsingPut operation.
     * @callback module:api/ModelApi~updateModelTransactionUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model transaction
     * Update a model transaction for a model.
     * @param {Object} modelTransaction model_transaction
     * @param {String} modelTransactionId UUID model_transaction_id
     * @param {module:api/ModelApi~updateModelTransactionUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelTransaction}
     */
    this.updateModelTransactionUsingPut = function(modelTransaction, modelTransactionId, callback) {
      var postBody = modelTransaction;

      // verify the required parameter 'modelTransaction' is set
      if (modelTransaction === undefined || modelTransaction === null) {
        throw new Error("Missing the required parameter 'modelTransaction' when calling updateModelTransactionUsingPut");
      }

      // verify the required parameter 'modelTransactionId' is set
      if (modelTransactionId === undefined || modelTransactionId === null) {
        throw new Error("Missing the required parameter 'modelTransactionId' when calling updateModelTransactionUsingPut");
      }


      var pathParams = {
        'model_transaction_id': modelTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ModelTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction/{model_transaction_id}', 'PUT',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelUsingPut operation.
     * @callback module:api/ModelApi~updateModelUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Model} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model
     * Update a model for your firm.
     * @param {Object} model model
     * @param {String} modelId UUID model_id
     * @param {module:api/ModelApi~updateModelUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Model}
     */
    this.updateModelUsingPut = function(model, modelId, callback) {
      var postBody = model;

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling updateModelUsingPut");
      }

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling updateModelUsingPut");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Model;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}', 'PUT',
        pathParams, queryParams,  headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
