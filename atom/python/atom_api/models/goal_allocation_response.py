# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.goal_allocation_section_response import GoalAllocationSectionResponse  # noqa: F401,E501
from atom_api.models.goal_recommendation_response import GoalRecommendationResponse  # noqa: F401,E501
from atom_api.models.goal_status_section_response import GoalStatusSectionResponse  # noqa: F401,E501


class GoalAllocationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_status': 'GoalStatusSectionResponse',
        'recommended_status': 'GoalRecommendationResponse',
        'allocation': 'GoalAllocationSectionResponse'
    }

    attribute_map = {
        'current_status': 'current_status',
        'recommended_status': 'recommended_status',
        'allocation': 'allocation'
    }

    def __init__(self, current_status=None, recommended_status=None, allocation=None):  # noqa: E501
        """GoalAllocationResponse - a model defined in Swagger"""  # noqa: E501

        self._current_status = None
        self._recommended_status = None
        self._allocation = None
        self.discriminator = None

        if current_status is not None:
            self.current_status = current_status
        if recommended_status is not None:
            self.recommended_status = recommended_status
        if allocation is not None:
            self.allocation = allocation

    @property
    def current_status(self):
        """Gets the current_status of this GoalAllocationResponse.  # noqa: E501


        :return: The current_status of this GoalAllocationResponse.  # noqa: E501
        :rtype: GoalStatusSectionResponse
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this GoalAllocationResponse.


        :param current_status: The current_status of this GoalAllocationResponse.  # noqa: E501
        :type: GoalStatusSectionResponse
        """

        self._current_status = current_status

    @property
    def recommended_status(self):
        """Gets the recommended_status of this GoalAllocationResponse.  # noqa: E501


        :return: The recommended_status of this GoalAllocationResponse.  # noqa: E501
        :rtype: GoalRecommendationResponse
        """
        return self._recommended_status

    @recommended_status.setter
    def recommended_status(self, recommended_status):
        """Sets the recommended_status of this GoalAllocationResponse.


        :param recommended_status: The recommended_status of this GoalAllocationResponse.  # noqa: E501
        :type: GoalRecommendationResponse
        """

        self._recommended_status = recommended_status

    @property
    def allocation(self):
        """Gets the allocation of this GoalAllocationResponse.  # noqa: E501


        :return: The allocation of this GoalAllocationResponse.  # noqa: E501
        :rtype: GoalAllocationSectionResponse
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this GoalAllocationResponse.


        :param allocation: The allocation of this GoalAllocationResponse.  # noqa: E501
        :type: GoalAllocationSectionResponse
        """

        self._allocation = allocation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalAllocationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalAllocationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
