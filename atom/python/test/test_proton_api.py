# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import atom_api
from atom_api.api.proton_api import ProtonApi  # noqa: E501
from atom_api.rest import ApiException


class TestProtonApi(unittest.TestCase):
    """ProtonApi unit test stubs"""

    def setUp(self):
        self.api = atom_api.api.proton_api.ProtonApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_annuity_calculator_accumulation_horizon(self):
        """Test case for annuity_calculator_accumulation_horizon

        Annuity calculator - accumulation horizon  # noqa: E501
        """
        pass

    def test_annuity_calculator_annuity_amount(self):
        """Test case for annuity_calculator_annuity_amount

        Annuity calculator - annuity amount  # noqa: E501
        """
        pass

    def test_annuity_calculator_decumulation_horizon(self):
        """Test case for annuity_calculator_decumulation_horizon

        Annuity calculator - decumulation horizon  # noqa: E501
        """
        pass

    def test_annuity_calculator_deposit_amount(self):
        """Test case for annuity_calculator_deposit_amount

        Annuity calculator - deposit amount  # noqa: E501
        """
        pass

    def test_annuity_calculator_initial_balance(self):
        """Test case for annuity_calculator_initial_balance

        Annuity calculator - initial balance  # noqa: E501
        """
        pass

    def test_budget_calculator(self):
        """Test case for budget_calculator

        Budget Calculator  # noqa: E501
        """
        pass

    def test_cash_flow_analysis(self):
        """Test case for cash_flow_analysis

        Cash Flow Analysis  # noqa: E501
        """
        pass

    def test_dimensional_risk_score(self):
        """Test case for dimensional_risk_score

        Dimensional risk score  # noqa: E501
        """
        pass

    def test_education_calculator_annual_cost(self):
        """Test case for education_calculator_annual_cost

        Education calculator - total annual cost  # noqa: E501
        """
        pass

    def test_education_calculator_deposit_amount(self):
        """Test case for education_calculator_deposit_amount

        Education calculator - deposit amount  # noqa: E501
        """
        pass

    def test_education_calculator_percent_covered(self):
        """Test case for education_calculator_percent_covered

        Education calculator - percent covered  # noqa: E501
        """
        pass

    def test_emergency_fund_calculator(self):
        """Test case for emergency_fund_calculator

        Emergency fund calculator  # noqa: E501
        """
        pass

    def test_event_study(self):
        """Test case for event_study

        Event study  # noqa: E501
        """
        pass

    def test_financial_health_check(self):
        """Test case for financial_health_check

        Financial health check  # noqa: E501
        """
        pass

    def test_financial_picture(self):
        """Test case for financial_picture

        Financial Picture  # noqa: E501
        """
        pass

    def test_goal_accumulation_allocation(self):
        """Test case for goal_accumulation_allocation

        Goal accumulation allocation  # noqa: E501
        """
        pass

    def test_goal_accumulation_recommendation(self):
        """Test case for goal_accumulation_recommendation

        Goal accumulation recommendation  # noqa: E501
        """
        pass

    def test_goal_accumulation_status(self):
        """Test case for goal_accumulation_status

        Goal accumulation status  # noqa: E501
        """
        pass

    def test_goal_decumulation_allocation(self):
        """Test case for goal_decumulation_allocation

        Goal decumulation allocation  # noqa: E501
        """
        pass

    def test_goal_decumulation_recommendation(self):
        """Test case for goal_decumulation_recommendation

        Goal decumulation recommendation  # noqa: E501
        """
        pass

    def test_goal_decumulation_status(self):
        """Test case for goal_decumulation_status

        Goal decumulation status  # noqa: E501
        """
        pass

    def test_life_insurance_needs_calculator(self):
        """Test case for life_insurance_needs_calculator

        Life insurance needs calculator  # noqa: E501
        """
        pass

    def test_model_backtest(self):
        """Test case for model_backtest

        Model backtest  # noqa: E501
        """
        pass

    def test_monte_carlo(self):
        """Test case for monte_carlo

        Monte Carlo  # noqa: E501
        """
        pass

    def test_mortgage_calculator_down_payment(self):
        """Test case for mortgage_calculator_down_payment

        Mortgage calculator - down payment  # noqa: E501
        """
        pass

    def test_mortgage_calculator_home_price(self):
        """Test case for mortgage_calculator_home_price

        Mortgage calculator - home price  # noqa: E501
        """
        pass

    def test_mortgage_calculator_periodic_payment(self):
        """Test case for mortgage_calculator_periodic_payment

        Mortgage calculator - periodic payment  # noqa: E501
        """
        pass

    def test_mvo(self):
        """Test case for mvo

        Mean-variance optimization  # noqa: E501
        """
        pass

    def test_portfolio_diversification_score(self):
        """Test case for portfolio_diversification_score

        Portfolio diversification score  # noqa: E501
        """
        pass

    def test_portfolio_optimization_score(self):
        """Test case for portfolio_optimization_score

        Portfolio optimization score  # noqa: E501
        """
        pass

    def test_portfolio_what_if(self):
        """Test case for portfolio_what_if

        Portfolio what-if  # noqa: E501
        """
        pass

    def test_purchase_calculator_deposit_amount(self):
        """Test case for purchase_calculator_deposit_amount

        Purchase calculator - deposit amount  # noqa: E501
        """
        pass

    def test_purchase_calculator_horizon(self):
        """Test case for purchase_calculator_horizon

        Purchase calculator - horizon  # noqa: E501
        """
        pass

    def test_purchase_calculator_purchase_amount(self):
        """Test case for purchase_calculator_purchase_amount

        Purchase calculator - purchase amount  # noqa: E501
        """
        pass

    def test_rebalancing_signal(self):
        """Test case for rebalancing_signal

        Rebalancing  # noqa: E501
        """
        pass

    def test_retirement_calculator_deposit_amount(self):
        """Test case for retirement_calculator_deposit_amount

        Retirement calculator - deposit amount  # noqa: E501
        """
        pass

    def test_retirement_calculator_expenses(self):
        """Test case for retirement_calculator_expenses

        Retirement calculator - expenses  # noqa: E501
        """
        pass

    def test_retirement_calculator_percent_covered(self):
        """Test case for retirement_calculator_percent_covered

        Retirement calculator - percent of costs covered  # noqa: E501
        """
        pass

    def test_risk_allocation(self):
        """Test case for risk_allocation

        Risk allocation  # noqa: E501
        """
        pass

    def test_risk_score(self):
        """Test case for risk_score

        Risk score  # noqa: E501
        """
        pass

    def test_savings_calculator(self):
        """Test case for savings_calculator

        Savings calculator  # noqa: E501
        """
        pass

    def test_scenario_analysis(self):
        """Test case for scenario_analysis

        Scenario analysis  # noqa: E501
        """
        pass

    def test_sensitivity_analysis(self):
        """Test case for sensitivity_analysis

        Sensitivity analysis  # noqa: E501
        """
        pass

    def test_variable_annuity(self):
        """Test case for variable_annuity

        Variable annuity  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
