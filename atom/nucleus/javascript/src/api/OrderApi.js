/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountPortfolioRebalanceRequest', 'model/Order', 'model/OrderReconcileRequest', 'model/OrderReconcileReturnObject', 'model/OrderStatus', 'model/OrderTrack', 'model/OrderVoClone', 'model/PageOrder', 'model/PageOrderBulk', 'model/PageOrderStatus', 'model/PageOrderTrack', 'model/TokenDateRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountPortfolioRebalanceRequest'), require('../model/Order'), require('../model/OrderReconcileRequest'), require('../model/OrderReconcileReturnObject'), require('../model/OrderStatus'), require('../model/OrderTrack'), require('../model/OrderVoClone'), require('../model/PageOrder'), require('../model/PageOrderBulk'), require('../model/PageOrderStatus'), require('../model/PageOrderTrack'), require('../model/TokenDateRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.OrderApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.AccountPortfolioRebalanceRequest, root.HydrogenNucleusApi.Order, root.HydrogenNucleusApi.OrderReconcileRequest, root.HydrogenNucleusApi.OrderReconcileReturnObject, root.HydrogenNucleusApi.OrderStatus, root.HydrogenNucleusApi.OrderTrack, root.HydrogenNucleusApi.OrderVoClone, root.HydrogenNucleusApi.PageOrder, root.HydrogenNucleusApi.PageOrderBulk, root.HydrogenNucleusApi.PageOrderStatus, root.HydrogenNucleusApi.PageOrderTrack, root.HydrogenNucleusApi.TokenDateRequest);
  }
}(this, function(ApiClient, AccountPortfolioRebalanceRequest, Order, OrderReconcileRequest, OrderReconcileReturnObject, OrderStatus, OrderTrack, OrderVoClone, PageOrder, PageOrderBulk, PageOrderStatus, PageOrderTrack, TokenDateRequest) {
  'use strict';

  /**
   * Order service.
   * @module api/OrderApi
   * @version 1.9.5
   */

  /**
   * Constructs a new OrderApi. 
   * @alias module:api/OrderApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAccountOrderBulkUsingPost operation.
     * @callback module:api/OrderApi~createAccountOrderBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk orders for an account
     * Aggregates all orders on a given date for an account.
     * @param {String} accountId account_id
     * @param {module:model/TokenDateRequest} req req
     * @param {module:api/OrderApi~createAccountOrderBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    this.createAccountOrderBulkUsingPost = function(accountId, req, callback) {
      var postBody = req;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createAccountOrderBulkUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createAccountOrderBulkUsingPost");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountOrderBuyOnlyUsingPost operation.
     * @callback module:api/OrderApi~createAccountOrderBuyOnlyUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create buy-only account rebalance orders
     * Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
     * @param {String} accountId account_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createAccountOrderBuyOnlyUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createAccountOrderBuyOnlyUsingPost = function(accountId, req, callback) {
      var postBody = req;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createAccountOrderBuyOnlyUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createAccountOrderBuyOnlyUsingPost");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_buy_only', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountOrderRebalanceUsingPost operation.
     * @callback module:api/OrderApi~createAccountOrderRebalanceUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create account rebalance orders
     * Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe. 
     * @param {String} accountId account_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createAccountOrderRebalanceUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createAccountOrderRebalanceUsingPost = function(accountId, req, callback) {
      var postBody = req;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createAccountOrderRebalanceUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createAccountOrderRebalanceUsingPost");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_rebalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountOrderReconciliation operation.
     * @callback module:api/OrderApi~createAccountOrderReconciliationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderReconcileReturnObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create account reconciliation order
     * @param {String} accountId account_id
     * @param {module:model/OrderReconcileRequest} req req
     * @param {module:api/OrderApi~createAccountOrderReconciliationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderReconcileReturnObject}
     */
    this.createAccountOrderReconciliation = function(accountId, req, callback) {
      var postBody = req;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createAccountOrderReconciliation");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createAccountOrderReconciliation");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderReconcileReturnObject;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_reconciliation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountOrderSellAllUsingPost operation.
     * @callback module:api/OrderApi~createAccountOrderSellAllUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sell all account order
     * Create order records necessary to entirely sell all the holdings within an account.
     * @param {String} accountId account_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createAccountOrderSellAllUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createAccountOrderSellAllUsingPost = function(accountId, req, callback) {
      var postBody = req;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createAccountOrderSellAllUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createAccountOrderSellAllUsingPost");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_sell_all', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountOrderSellOnlyUsingPost operation.
     * @callback module:api/OrderApi~createAccountOrderSellOnlyUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create sell-only account rebalance orders
     * Create order records necessary to rebalance an account and all its portfolios according to the allocation(s) to which the account subscribes and models to which the portfolios subscribe.
     * @param {String} accountId account_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createAccountOrderSellOnlyUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createAccountOrderSellOnlyUsingPost = function(accountId, req, callback) {
      var postBody = req;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createAccountOrderSellOnlyUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createAccountOrderSellOnlyUsingPost");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_sell_only', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClientOrderBulkUsingPost operation.
     * @callback module:api/OrderApi~createClientOrderBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk orders for a client
     * Aggregates all orders on a given date for a client
     * @param {String} clientId client_id
     * @param {module:model/TokenDateRequest} req req
     * @param {module:api/OrderApi~createClientOrderBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    this.createClientOrderBulkUsingPost = function(clientId, req, callback) {
      var postBody = req;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createClientOrderBulkUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createClientOrderBulkUsingPost");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}/order_bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderBulkUsingPost operation.
     * @callback module:api/OrderApi~createOrderBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk orders for your firm
     * Aggregates all orders on a given date for your firm.
     * @param {module:model/TokenDateRequest} req req
     * @param {module:api/OrderApi~createOrderBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    this.createOrderBulkUsingPost = function(req, callback) {
      var postBody = req;

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createOrderBulkUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/nucleus/v1/order_bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderStatusUsingPost operation.
     * @callback module:api/OrderApi~createOrderStatusUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order status
     * Create an order status for your firm.
     * @param {module:model/OrderStatus} orderStatusRequest orderStatusRequest
     * @param {module:api/OrderApi~createOrderStatusUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStatus}
     */
    this.createOrderStatusUsingPost = function(orderStatusRequest, callback) {
      var postBody = orderStatusRequest;

      // verify the required parameter 'orderStatusRequest' is set
      if (orderStatusRequest === undefined || orderStatusRequest === null) {
        throw new Error("Missing the required parameter 'orderStatusRequest' when calling createOrderStatusUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderStatus;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderTrackUsingPost operation.
     * @callback module:api/OrderApi~createOrderTrackUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order tracking record
     * Create a new order tracking record for an order.
     * @param {module:model/OrderTrack} orderTrackRequest orderTrackRequest
     * @param {module:api/OrderApi~createOrderTrackUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderTrack}
     */
    this.createOrderTrackUsingPost = function(orderTrackRequest, callback) {
      var postBody = orderTrackRequest;

      // verify the required parameter 'orderTrackRequest' is set
      if (orderTrackRequest === undefined || orderTrackRequest === null) {
        throw new Error("Missing the required parameter 'orderTrackRequest' when calling createOrderTrackUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrderUsingPost operation.
     * @callback module:api/OrderApi~createOrderUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order record
     * Create an order record defined for your firm.
     * @param {module:model/Order} orderInfoRequest orderInfoRequest
     * @param {module:api/OrderApi~createOrderUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.createOrderUsingPost = function(orderInfoRequest, callback) {
      var postBody = orderInfoRequest;

      // verify the required parameter 'orderInfoRequest' is set
      if (orderInfoRequest === undefined || orderInfoRequest === null) {
        throw new Error("Missing the required parameter 'orderInfoRequest' when calling createOrderUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/nucleus/v1/order', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioOrderBuyOnlyUsingPost operation.
     * @callback module:api/OrderApi~createPortfolioOrderBuyOnlyUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create buy-only portfolio rebalance orders
     * Create order records necessary to rebalance a portfolio to the model to which it subscribes. However, these will only be buy transactions, and no securities will be sold.
     * @param {String} portfolioId portfolio_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createPortfolioOrderBuyOnlyUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createPortfolioOrderBuyOnlyUsingPost = function(portfolioId, req, callback) {
      var postBody = req;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling createPortfolioOrderBuyOnlyUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createPortfolioOrderBuyOnlyUsingPost");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_buy_only', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioOrderRebalanceUsingPost operation.
     * @callback module:api/OrderApi~createPortfolioOrderRebalanceUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create portfolio rebalance orders
     * Create order records necessary to rebalance a portfolio to the model to which it subscribes.
     * @param {String} portfolioId portfolio_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createPortfolioOrderRebalanceUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createPortfolioOrderRebalanceUsingPost = function(portfolioId, req, callback) {
      var postBody = req;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling createPortfolioOrderRebalanceUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createPortfolioOrderRebalanceUsingPost");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_rebalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioOrderReconciliation operation.
     * @callback module:api/OrderApi~createPortfolioOrderReconciliationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderReconcileReturnObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create portfolio reconciliation order
     * @param {String} portfolioId portfolio_id
     * @param {module:model/OrderReconcileRequest} req req
     * @param {module:api/OrderApi~createPortfolioOrderReconciliationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderReconcileReturnObject}
     */
    this.createPortfolioOrderReconciliation = function(portfolioId, req, callback) {
      var postBody = req;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling createPortfolioOrderReconciliation");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createPortfolioOrderReconciliation");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderReconcileReturnObject;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_reconciliation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioOrderSellAllUsingPost operation.
     * @callback module:api/OrderApi~createPortfolioOrderSellAllUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sell all portfolio order
     * Create order records necessary to entirely sell all the holdings within a portfolio.
     * @param {String} portfolioId portfolio_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createPortfolioOrderSellAllUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createPortfolioOrderSellAllUsingPost = function(portfolioId, req, callback) {
      var postBody = req;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling createPortfolioOrderSellAllUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createPortfolioOrderSellAllUsingPost");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_sell_all', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioOrderSellOnlyUsingPost operation.
     * @callback module:api/OrderApi~createPortfolioOrderSellOnlyUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OrderVoClone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create sell-only portfolio rebalance orders
     * Create order records necessary to rebalance a portfolio to the model to which it subscribes.
     * @param {String} portfolioId portfolio_id
     * @param {module:model/AccountPortfolioRebalanceRequest} req req
     * @param {module:api/OrderApi~createPortfolioOrderSellOnlyUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OrderVoClone>}
     */
    this.createPortfolioOrderSellOnlyUsingPost = function(portfolioId, req, callback) {
      var postBody = req;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling createPortfolioOrderSellOnlyUsingPost");
      }

      // verify the required parameter 'req' is set
      if (req === undefined || req === null) {
        throw new Error("Missing the required parameter 'req' when calling createPortfolioOrderSellOnlyUsingPost");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [OrderVoClone];

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_sell_only', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderStatusUsingDelete operation.
     * @callback module:api/OrderApi~deleteOrderStatusUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order status
     * Permanently delete an order status defined for your firm.
     * @param {String} orderStatusId UUID order_status_id
     * @param {module:api/OrderApi~deleteOrderStatusUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrderStatusUsingDelete = function(orderStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'orderStatusId' is set
      if (orderStatusId === undefined || orderStatusId === null) {
        throw new Error("Missing the required parameter 'orderStatusId' when calling deleteOrderStatusUsingDelete");
      }


      var pathParams = {
        'order_status_id': orderStatusId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status/{order_status_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderTrackUsingDelete operation.
     * @callback module:api/OrderApi~deleteOrderTrackUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order tracking record
     * Permanently delete an order tracking record for an order.
     * @param {String} orderTrackId UUID order_track_id
     * @param {module:api/OrderApi~deleteOrderTrackUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrderTrackUsingDelete = function(orderTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'orderTrackId' is set
      if (orderTrackId === undefined || orderTrackId === null) {
        throw new Error("Missing the required parameter 'orderTrackId' when calling deleteOrderTrackUsingDelete");
      }


      var pathParams = {
        'order_track_id': orderTrackId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track/{order_track_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderUsingDelete operation.
     * @callback module:api/OrderApi~deleteOrderUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order record
     * Permanently delete an order record.
     * @param {String} orderId UUID order_id
     * @param {module:api/OrderApi~deleteOrderUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrderUsingDelete = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrderUsingDelete");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/order/{order_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderAllUsingGet operation.
     * @callback module:api/OrderApi~getOrderAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all order records
     * Get the information for all order records defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/OrderApi~getOrderAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOrder}
     */
    this.getOrderAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageOrder;

      return this.apiClient.callApi(
        '/nucleus/v1/order', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderBulkAllUsingGet operation.
     * @callback module:api/OrderApi~getOrderBulkAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOrderBulk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all bulk orders
     * Get the information for all bulk order records.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to true)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to order_bulk_id)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/OrderApi~getOrderBulkAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOrderBulk}
     */
    this.getOrderBulkAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageOrderBulk;

      return this.apiClient.callApi(
        '/nucleus/v1/order_bulk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatusAllUsingGet operation.
     * @callback module:api/OrderApi~getOrderStatusAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOrderStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all order statuses
     * Get the information for all order statuses defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/OrderApi~getOrderStatusAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOrderStatus}
     */
    this.getOrderStatusAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageOrderStatus;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatusUsingGet operation.
     * @callback module:api/OrderApi~getOrderStatusUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order status
     * Retrieve the information for an order status defined for your firm.
     * @param {String} orderStatusId UUID order_status_id
     * @param {module:api/OrderApi~getOrderStatusUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStatus}
     */
    this.getOrderStatusUsingGet = function(orderStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'orderStatusId' is set
      if (orderStatusId === undefined || orderStatusId === null) {
        throw new Error("Missing the required parameter 'orderStatusId' when calling getOrderStatusUsingGet");
      }


      var pathParams = {
        'order_status_id': orderStatusId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = OrderStatus;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status/{order_status_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderTrackAllUsingGet operation.
     * @callback module:api/OrderApi~getOrderTrackAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageOrderTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all order tracking records
     * Get the information for all order tracking record for all order records.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/OrderApi~getOrderTrackAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageOrderTrack}
     */
    this.getOrderTrackAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageOrderTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderTrackUsingGet operation.
     * @callback module:api/OrderApi~getOrderTrackUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order tracking record
     * Retrieve the information for an order tracking record for an order.
     * @param {String} orderTrackId UUID order_track_id
     * @param {module:api/OrderApi~getOrderTrackUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderTrack}
     */
    this.getOrderTrackUsingGet = function(orderTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'orderTrackId' is set
      if (orderTrackId === undefined || orderTrackId === null) {
        throw new Error("Missing the required parameter 'orderTrackId' when calling getOrderTrackUsingGet");
      }


      var pathParams = {
        'order_track_id': orderTrackId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = OrderTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track/{order_track_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderUsingGet operation.
     * @callback module:api/OrderApi~getOrderUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order record
     * Retrieve the information for an order record.
     * @param {String} orderId UUID order_id
     * @param {module:api/OrderApi~getOrderUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.getOrderUsingGet = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderUsingGet");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/nucleus/v1/order/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderStatusUsingPut operation.
     * @callback module:api/OrderApi~updateOrderStatusUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order status
     * Update the information for an order status defined for your firm.
     * @param {module:model/OrderStatus} orderStatus order_status
     * @param {String} orderStatusId UUID order_status_id
     * @param {module:api/OrderApi~updateOrderStatusUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderStatus}
     */
    this.updateOrderStatusUsingPut = function(orderStatus, orderStatusId, callback) {
      var postBody = orderStatus;

      // verify the required parameter 'orderStatus' is set
      if (orderStatus === undefined || orderStatus === null) {
        throw new Error("Missing the required parameter 'orderStatus' when calling updateOrderStatusUsingPut");
      }

      // verify the required parameter 'orderStatusId' is set
      if (orderStatusId === undefined || orderStatusId === null) {
        throw new Error("Missing the required parameter 'orderStatusId' when calling updateOrderStatusUsingPut");
      }


      var pathParams = {
        'order_status_id': orderStatusId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderStatus;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status/{order_status_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderTrackUsingPut operation.
     * @callback module:api/OrderApi~updateOrderTrackUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderTrack} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order tracking record
     * Update the information for an order tracking record for an order.
     * @param {module:model/OrderTrack} orderTrack order_track
     * @param {String} orderTrackId UUID order_track_id
     * @param {module:api/OrderApi~updateOrderTrackUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderTrack}
     */
    this.updateOrderTrackUsingPut = function(orderTrack, orderTrackId, callback) {
      var postBody = orderTrack;

      // verify the required parameter 'orderTrack' is set
      if (orderTrack === undefined || orderTrack === null) {
        throw new Error("Missing the required parameter 'orderTrack' when calling updateOrderTrackUsingPut");
      }

      // verify the required parameter 'orderTrackId' is set
      if (orderTrackId === undefined || orderTrackId === null) {
        throw new Error("Missing the required parameter 'orderTrackId' when calling updateOrderTrackUsingPut");
      }


      var pathParams = {
        'order_track_id': orderTrackId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = OrderTrack;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track/{order_track_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderUsingPut operation.
     * @callback module:api/OrderApi~updateOrderUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order record
     * Update the information for an order record.
     * @param {module:model/Order} order order
     * @param {String} orderId UUID order_id
     * @param {module:api/OrderApi~updateOrderUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.updateOrderUsingPut = function(order, orderId, callback) {
      var postBody = order;

      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling updateOrderUsingPut");
      }

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrderUsingPut");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/nucleus/v1/order/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
