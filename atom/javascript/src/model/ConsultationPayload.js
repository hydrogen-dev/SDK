/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SecondaryId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./SecondaryId'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.ConsultationPayload = factory(root.atom_api.ApiClient, root.atom_api.SecondaryId);
  }
}(this, function(ApiClient, SecondaryId) {
  'use strict';




  /**
   * The ConsultationPayload model module.
   * @module model/ConsultationPayload
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>ConsultationPayload</code>.
   * @alias module:model/ConsultationPayload
   * @class
   */
  var exports = function() {
    var _this = this;

























  };

  /**
   * Constructs a <code>ConsultationPayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ConsultationPayload} obj Optional instance to populate.
   * @return {module:model/ConsultationPayload} The populated <code>ConsultationPayload</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('account_type_id')) {
        obj['account_type_id'] = ApiClient.convertToType(data['account_type_id'], 'String');
      }
      if (data.hasOwnProperty('additional_questions')) {
        obj['additional_questions'] = ApiClient.convertToType(data['additional_questions'], 'String');
      }
      if (data.hasOwnProperty('assets')) {
        obj['assets'] = ApiClient.convertToType(data['assets'], 'String');
      }
      if (data.hasOwnProperty('assigned')) {
        obj['assigned'] = ApiClient.convertToType(data['assigned'], 'String');
      }
      if (data.hasOwnProperty('calendar')) {
        obj['calendar'] = ApiClient.convertToType(data['calendar'], 'Boolean');
      }
      if (data.hasOwnProperty('category')) {
        obj['category'] = ApiClient.convertToType(data['category'], 'String');
      }
      if (data.hasOwnProperty('comments')) {
        obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
      }
      if (data.hasOwnProperty('client_id')) {
        obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
      }
      if (data.hasOwnProperty('time')) {
        obj['time'] = ApiClient.convertToType(data['time'], 'Date');
      }
      if (data.hasOwnProperty('close_time')) {
        obj['close_time'] = ApiClient.convertToType(data['close_time'], 'Date');
      }
      if (data.hasOwnProperty('closed_by')) {
        obj['closed_by'] = ApiClient.convertToType(data['closed_by'], 'String');
      }
      if (data.hasOwnProperty('completed')) {
        obj['completed'] = ApiClient.convertToType(data['completed'], 'Boolean');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('email')) {
        obj['email'] = ApiClient.convertToType(data['email'], 'String');
      }
      if (data.hasOwnProperty('firmname')) {
        obj['firmname'] = ApiClient.convertToType(data['firmname'], 'String');
      }
      if (data.hasOwnProperty('phone')) {
        obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
      }
      if (data.hasOwnProperty('investment_allocation')) {
        obj['investment_allocation'] = ApiClient.convertToType(data['investment_allocation'], 'String');
      }
      if (data.hasOwnProperty('investment_location')) {
        obj['investment_location'] = ApiClient.convertToType(data['investment_location'], 'String');
      }
      if (data.hasOwnProperty('investment_objectives')) {
        obj['investment_objectives'] = ApiClient.convertToType(data['investment_objectives'], 'String');
      }
      if (data.hasOwnProperty('is_active')) {
        obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
      }
      if (data.hasOwnProperty('reminded')) {
        obj['reminded'] = ApiClient.convertToType(data['reminded'], 'Boolean');
      }
      if (data.hasOwnProperty('source')) {
        obj['source'] = ApiClient.convertToType(data['source'], 'String');
      }
      if (data.hasOwnProperty('secondary_id')) {
        obj['secondary_id'] = SecondaryId.constructFromObject(data['secondary_id']);
      }
      if (data.hasOwnProperty('metadata')) {
        obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
      }
    }
    return obj;
  }

  /**
   * The ID of the account type for the account of the client who submitted the request
   * @member {String} account_type_id
   */
  exports.prototype['account_type_id'] = undefined;
  /**
   * Any additional questions to be answered during the consultation
   * @member {String} additional_questions
   */
  exports.prototype['additional_questions'] = undefined;
  /**
   * Asset value for a client’s account
   * @member {String} assets
   */
  exports.prototype['assets'] = undefined;
  /**
   * Internal user to whom the request is assigned
   * @member {String} assigned
   */
  exports.prototype['assigned'] = undefined;
  /**
   * Indicates if the request is scheduled on the calendar. Defaults to false which indicates it has not been scheduled
   * @member {Boolean} calendar
   * @default false
   */
  exports.prototype['calendar'] = false;
  /**
   * Category for the purpose of the request such as “New Account”
   * @member {String} category
   */
  exports.prototype['category'] = undefined;
  /**
   * Additional information on the purpose of the request such as “Would like to open a new account”
   * @member {String} comments
   */
  exports.prototype['comments'] = undefined;
  /**
   * The ID for the client that submitted the request
   * @member {String} client_id
   */
  exports.prototype['client_id'] = undefined;
  /**
   * Date that the consultation is scheduled
   * @member {Date} time
   */
  exports.prototype['time'] = undefined;
  /**
   * Date that the consultation request has been resolved and closed
   * @member {Date} close_time
   */
  exports.prototype['close_time'] = undefined;
  /**
   * Internal user that has resolved and closed the consultation request
   * @member {String} closed_by
   */
  exports.prototype['closed_by'] = undefined;
  /**
   * Indicates if the consultation request has been resolved and closed. Defaults to false which indicates it has not been closed
   * @member {Boolean} completed
   * @default false
   */
  exports.prototype['completed'] = false;
  /**
   * Name of the client that submitted the request
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Contact email or the client in the format sample@example.com
   * @member {String} email
   */
  exports.prototype['email'] = undefined;
  /**
   * Firm name for the client’s firm
   * @member {String} firmname
   */
  exports.prototype['firmname'] = undefined;
  /**
   * Contact phone number for the client
   * @member {String} phone
   */
  exports.prototype['phone'] = undefined;
  /**
   * The type of investment allocation with which the client is associated
   * @member {String} investment_allocation
   */
  exports.prototype['investment_allocation'] = undefined;
  /**
   * Description of the location of the client’s investments
   * @member {String} investment_location
   */
  exports.prototype['investment_location'] = undefined;
  /**
   * Brief information on the client’s investment objectives
   * @member {String} investment_objectives
   */
  exports.prototype['investment_objectives'] = undefined;
  /**
   * Indicates if the consultation request is active. Defaults to true which indicates it is active
   * @member {Boolean} is_active
   * @default true
   */
  exports.prototype['is_active'] = true;
  /**
   * Indicates if a reminder of the consultation was sent to the client. Defaults to false which indicates it has not been sent
   * @member {Boolean} reminded
   * @default false
   */
  exports.prototype['reminded'] = false;
  /**
   * Information on how the client has requested the consultation
   * @member {String} source
   */
  exports.prototype['source'] = undefined;
  /**
   * @member {module:model/SecondaryId} secondary_id
   */
  exports.prototype['secondary_id'] = undefined;
  /**
   * Custom information associated with the consultation in the format key:value
   * @member {Object} metadata
   */
  exports.prototype['metadata'] = undefined;



  return exports;
}));


