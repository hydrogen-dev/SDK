/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Proton.Client;
using Proton.ModelEntity;

namespace Proton.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFinancialPlanningApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Education Calculator - Annual Cost
        /// </summary>
        /// <remarks>
        /// Calculate the achievable education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> EducationCalculatorAnnualCost (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest);

        /// <summary>
        /// Education Calculator - Annual Cost
        /// </summary>
        /// <remarks>
        /// Calculate the achievable education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> EducationCalculatorAnnualCostWithHttpInfo (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest);
        /// <summary>
        /// Education Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> EducationCalculatorDepositAmount (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest);

        /// <summary>
        /// Education Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> EducationCalculatorDepositAmountWithHttpInfo (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest);
        /// <summary>
        /// Education Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of education costs that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> EducationCalculatorPercentCovered (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest);

        /// <summary>
        /// Education Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of education costs that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> EducationCalculatorPercentCoveredWithHttpInfo (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest);
        /// <summary>
        /// Mortgage Calculator - Down Payment
        /// </summary>
        /// <remarks>
        /// Calculate the necessary down payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> MortgageCalculatorDownPayment (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest);

        /// <summary>
        /// Mortgage Calculator - Down Payment
        /// </summary>
        /// <remarks>
        /// Calculate the necessary down payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> MortgageCalculatorDownPaymentWithHttpInfo (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest);
        /// <summary>
        /// Mortgage Calculator - Home Price
        /// </summary>
        /// <remarks>
        /// Calculate the achievable home price for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> MortgageCalculatorHomePrice (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest);

        /// <summary>
        /// Mortgage Calculator - Home Price
        /// </summary>
        /// <remarks>
        /// Calculate the achievable home price for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> MortgageCalculatorHomePriceWithHttpInfo (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest);
        /// <summary>
        /// Mortgage Calculator - Periodic Payment
        /// </summary>
        /// <remarks>
        /// Calculate the periodic payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> MortgageCalculatorPeriodicPayment (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest);

        /// <summary>
        /// Mortgage Calculator - Periodic Payment
        /// </summary>
        /// <remarks>
        /// Calculate the periodic payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> MortgageCalculatorPeriodicPaymentWithHttpInfo (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest);
        /// <summary>
        /// Purchase Calculator - Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> PurchaseCalculatorAmount (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest);

        /// <summary>
        /// Purchase Calculator - Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> PurchaseCalculatorAmountWithHttpInfo (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest);
        /// <summary>
        /// Purchase Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> PurchaseCalculatorDepositAmount (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest);

        /// <summary>
        /// Purchase Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> PurchaseCalculatorDepositAmountWithHttpInfo (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest);
        /// <summary>
        /// Purchase Calculator - Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary time horizon to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> PurchaseCalculatorHorizon (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest);

        /// <summary>
        /// Purchase Calculator - Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary time horizon to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> PurchaseCalculatorHorizonWithHttpInfo (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest);
        /// <summary>
        /// Retirement Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RetirementCalculatorDepositAmount (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest);

        /// <summary>
        /// Retirement Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RetirementCalculatorDepositAmountWithHttpInfo (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest);
        /// <summary>
        /// Retirement Calculator - Expenses
        /// </summary>
        /// <remarks>
        /// Calculate the achievable retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RetirementCalculatorExpenses (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest);

        /// <summary>
        /// Retirement Calculator - Expenses
        /// </summary>
        /// <remarks>
        /// Calculate the achievable retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RetirementCalculatorExpensesWithHttpInfo (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest);
        /// <summary>
        /// Retirement Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of retirement expenses that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RetirementCalculatorPercentCovered (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest);

        /// <summary>
        /// Retirement Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of retirement expenses that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RetirementCalculatorPercentCoveredWithHttpInfo (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Education Calculator - Annual Cost
        /// </summary>
        /// <remarks>
        /// Calculate the achievable education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> EducationCalculatorAnnualCostAsync (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest);

        /// <summary>
        /// Education Calculator - Annual Cost
        /// </summary>
        /// <remarks>
        /// Calculate the achievable education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EducationCalculatorAnnualCostAsyncWithHttpInfo (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest);
        /// <summary>
        /// Education Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> EducationCalculatorDepositAmountAsync (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest);

        /// <summary>
        /// Education Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve education costs
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EducationCalculatorDepositAmountAsyncWithHttpInfo (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest);
        /// <summary>
        /// Education Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of education costs that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> EducationCalculatorPercentCoveredAsync (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest);

        /// <summary>
        /// Education Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of education costs that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EducationCalculatorPercentCoveredAsyncWithHttpInfo (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest);
        /// <summary>
        /// Mortgage Calculator - Down Payment
        /// </summary>
        /// <remarks>
        /// Calculate the necessary down payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> MortgageCalculatorDownPaymentAsync (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest);

        /// <summary>
        /// Mortgage Calculator - Down Payment
        /// </summary>
        /// <remarks>
        /// Calculate the necessary down payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MortgageCalculatorDownPaymentAsyncWithHttpInfo (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest);
        /// <summary>
        /// Mortgage Calculator - Home Price
        /// </summary>
        /// <remarks>
        /// Calculate the achievable home price for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> MortgageCalculatorHomePriceAsync (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest);

        /// <summary>
        /// Mortgage Calculator - Home Price
        /// </summary>
        /// <remarks>
        /// Calculate the achievable home price for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MortgageCalculatorHomePriceAsyncWithHttpInfo (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest);
        /// <summary>
        /// Mortgage Calculator - Periodic Payment
        /// </summary>
        /// <remarks>
        /// Calculate the periodic payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> MortgageCalculatorPeriodicPaymentAsync (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest);

        /// <summary>
        /// Mortgage Calculator - Periodic Payment
        /// </summary>
        /// <remarks>
        /// Calculate the periodic payment for the mortgage
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MortgageCalculatorPeriodicPaymentAsyncWithHttpInfo (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest);
        /// <summary>
        /// Purchase Calculator - Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> PurchaseCalculatorAmountAsync (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest);

        /// <summary>
        /// Purchase Calculator - Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PurchaseCalculatorAmountAsyncWithHttpInfo (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest);
        /// <summary>
        /// Purchase Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> PurchaseCalculatorDepositAmountAsync (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest);

        /// <summary>
        /// Purchase Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PurchaseCalculatorDepositAmountAsyncWithHttpInfo (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest);
        /// <summary>
        /// Purchase Calculator - Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary time horizon to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> PurchaseCalculatorHorizonAsync (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest);

        /// <summary>
        /// Purchase Calculator - Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary time horizon to achieve the purchase amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PurchaseCalculatorHorizonAsyncWithHttpInfo (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest);
        /// <summary>
        /// Retirement Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RetirementCalculatorDepositAmountAsync (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest);

        /// <summary>
        /// Retirement Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RetirementCalculatorDepositAmountAsyncWithHttpInfo (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest);
        /// <summary>
        /// Retirement Calculator - Expenses
        /// </summary>
        /// <remarks>
        /// Calculate the achievable retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RetirementCalculatorExpensesAsync (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest);

        /// <summary>
        /// Retirement Calculator - Expenses
        /// </summary>
        /// <remarks>
        /// Calculate the achievable retirement expenses
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RetirementCalculatorExpensesAsyncWithHttpInfo (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest);
        /// <summary>
        /// Retirement Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of retirement expenses that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RetirementCalculatorPercentCoveredAsync (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest);

        /// <summary>
        /// Retirement Calculator - Percent Covered
        /// </summary>
        /// <remarks>
        /// Calculate the achievable percentage of retirement expenses that can be covered
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RetirementCalculatorPercentCoveredAsyncWithHttpInfo (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FinancialPlanningApi : IFinancialPlanningApi
    {
        private Proton.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialPlanningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FinancialPlanningApi(String basePath)
        {
            this.Configuration = new Proton.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialPlanningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FinancialPlanningApi(Proton.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Proton.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Proton.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Proton.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Education Calculator - Annual Cost Calculate the achievable education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> EducationCalculatorAnnualCost (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = EducationCalculatorAnnualCostWithHttpInfo(educationCalculatorAnnualCostRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Education Calculator - Annual Cost Calculate the achievable education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > EducationCalculatorAnnualCostWithHttpInfo (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest)
        {
            // verify the required parameter 'educationCalculatorAnnualCostRequest' is set
            if (educationCalculatorAnnualCostRequest == null)
                throw new ApiException(400, "Missing required parameter 'educationCalculatorAnnualCostRequest' when calling FinancialPlanningApi->EducationCalculatorAnnualCost");

            var localVarPath = "/education_calculator/annual_cost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (educationCalculatorAnnualCostRequest != null && educationCalculatorAnnualCostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(educationCalculatorAnnualCostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = educationCalculatorAnnualCostRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EducationCalculatorAnnualCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Education Calculator - Annual Cost Calculate the achievable education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> EducationCalculatorAnnualCostAsync (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await EducationCalculatorAnnualCostAsyncWithHttpInfo(educationCalculatorAnnualCostRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Education Calculator - Annual Cost Calculate the achievable education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorAnnualCostRequest">Request payload for Education Calculator - Annual Cost</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EducationCalculatorAnnualCostAsyncWithHttpInfo (EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest)
        {
            // verify the required parameter 'educationCalculatorAnnualCostRequest' is set
            if (educationCalculatorAnnualCostRequest == null)
                throw new ApiException(400, "Missing required parameter 'educationCalculatorAnnualCostRequest' when calling FinancialPlanningApi->EducationCalculatorAnnualCost");

            var localVarPath = "/education_calculator/annual_cost";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (educationCalculatorAnnualCostRequest != null && educationCalculatorAnnualCostRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(educationCalculatorAnnualCostRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = educationCalculatorAnnualCostRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EducationCalculatorAnnualCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Education Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> EducationCalculatorDepositAmount (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = EducationCalculatorDepositAmountWithHttpInfo(educationCalculatorDepositAmountRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Education Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > EducationCalculatorDepositAmountWithHttpInfo (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'educationCalculatorDepositAmountRequest' is set
            if (educationCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'educationCalculatorDepositAmountRequest' when calling FinancialPlanningApi->EducationCalculatorDepositAmount");

            var localVarPath = "/education_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (educationCalculatorDepositAmountRequest != null && educationCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(educationCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = educationCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EducationCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Education Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> EducationCalculatorDepositAmountAsync (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await EducationCalculatorDepositAmountAsyncWithHttpInfo(educationCalculatorDepositAmountRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Education Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve education costs
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorDepositAmountRequest">Request payload for Education Calculator - Deposit Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EducationCalculatorDepositAmountAsyncWithHttpInfo (EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'educationCalculatorDepositAmountRequest' is set
            if (educationCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'educationCalculatorDepositAmountRequest' when calling FinancialPlanningApi->EducationCalculatorDepositAmount");

            var localVarPath = "/education_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (educationCalculatorDepositAmountRequest != null && educationCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(educationCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = educationCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EducationCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Education Calculator - Percent Covered Calculate the achievable percentage of education costs that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> EducationCalculatorPercentCovered (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = EducationCalculatorPercentCoveredWithHttpInfo(educationCalculatorPercentCoveredRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Education Calculator - Percent Covered Calculate the achievable percentage of education costs that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > EducationCalculatorPercentCoveredWithHttpInfo (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest)
        {
            // verify the required parameter 'educationCalculatorPercentCoveredRequest' is set
            if (educationCalculatorPercentCoveredRequest == null)
                throw new ApiException(400, "Missing required parameter 'educationCalculatorPercentCoveredRequest' when calling FinancialPlanningApi->EducationCalculatorPercentCovered");

            var localVarPath = "/education_calculator/percent_covered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (educationCalculatorPercentCoveredRequest != null && educationCalculatorPercentCoveredRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(educationCalculatorPercentCoveredRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = educationCalculatorPercentCoveredRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EducationCalculatorPercentCovered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Education Calculator - Percent Covered Calculate the achievable percentage of education costs that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> EducationCalculatorPercentCoveredAsync (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await EducationCalculatorPercentCoveredAsyncWithHttpInfo(educationCalculatorPercentCoveredRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Education Calculator - Percent Covered Calculate the achievable percentage of education costs that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="educationCalculatorPercentCoveredRequest">Request payload for Education Calculator - Percent Covered</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> EducationCalculatorPercentCoveredAsyncWithHttpInfo (EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest)
        {
            // verify the required parameter 'educationCalculatorPercentCoveredRequest' is set
            if (educationCalculatorPercentCoveredRequest == null)
                throw new ApiException(400, "Missing required parameter 'educationCalculatorPercentCoveredRequest' when calling FinancialPlanningApi->EducationCalculatorPercentCovered");

            var localVarPath = "/education_calculator/percent_covered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (educationCalculatorPercentCoveredRequest != null && educationCalculatorPercentCoveredRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(educationCalculatorPercentCoveredRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = educationCalculatorPercentCoveredRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EducationCalculatorPercentCovered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Mortgage Calculator - Down Payment Calculate the necessary down payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> MortgageCalculatorDownPayment (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = MortgageCalculatorDownPaymentWithHttpInfo(mortgageCalculatorDownPaymentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mortgage Calculator - Down Payment Calculate the necessary down payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > MortgageCalculatorDownPaymentWithHttpInfo (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest)
        {
            // verify the required parameter 'mortgageCalculatorDownPaymentRequest' is set
            if (mortgageCalculatorDownPaymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'mortgageCalculatorDownPaymentRequest' when calling FinancialPlanningApi->MortgageCalculatorDownPayment");

            var localVarPath = "/mortgage_calculator/down_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (mortgageCalculatorDownPaymentRequest != null && mortgageCalculatorDownPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mortgageCalculatorDownPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mortgageCalculatorDownPaymentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MortgageCalculatorDownPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Mortgage Calculator - Down Payment Calculate the necessary down payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> MortgageCalculatorDownPaymentAsync (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await MortgageCalculatorDownPaymentAsyncWithHttpInfo(mortgageCalculatorDownPaymentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mortgage Calculator - Down Payment Calculate the necessary down payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorDownPaymentRequest">Request payload for Mortgage Calculator - Down Payment</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MortgageCalculatorDownPaymentAsyncWithHttpInfo (MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest)
        {
            // verify the required parameter 'mortgageCalculatorDownPaymentRequest' is set
            if (mortgageCalculatorDownPaymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'mortgageCalculatorDownPaymentRequest' when calling FinancialPlanningApi->MortgageCalculatorDownPayment");

            var localVarPath = "/mortgage_calculator/down_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (mortgageCalculatorDownPaymentRequest != null && mortgageCalculatorDownPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mortgageCalculatorDownPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mortgageCalculatorDownPaymentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MortgageCalculatorDownPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Mortgage Calculator - Home Price Calculate the achievable home price for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> MortgageCalculatorHomePrice (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = MortgageCalculatorHomePriceWithHttpInfo(mortgageCalculatorHomePriceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mortgage Calculator - Home Price Calculate the achievable home price for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > MortgageCalculatorHomePriceWithHttpInfo (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest)
        {
            // verify the required parameter 'mortgageCalculatorHomePriceRequest' is set
            if (mortgageCalculatorHomePriceRequest == null)
                throw new ApiException(400, "Missing required parameter 'mortgageCalculatorHomePriceRequest' when calling FinancialPlanningApi->MortgageCalculatorHomePrice");

            var localVarPath = "/mortgage_calculator/home_price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (mortgageCalculatorHomePriceRequest != null && mortgageCalculatorHomePriceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mortgageCalculatorHomePriceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mortgageCalculatorHomePriceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MortgageCalculatorHomePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Mortgage Calculator - Home Price Calculate the achievable home price for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> MortgageCalculatorHomePriceAsync (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await MortgageCalculatorHomePriceAsyncWithHttpInfo(mortgageCalculatorHomePriceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mortgage Calculator - Home Price Calculate the achievable home price for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorHomePriceRequest">Request payload for Mortgage Calculator - Home Price</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MortgageCalculatorHomePriceAsyncWithHttpInfo (MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest)
        {
            // verify the required parameter 'mortgageCalculatorHomePriceRequest' is set
            if (mortgageCalculatorHomePriceRequest == null)
                throw new ApiException(400, "Missing required parameter 'mortgageCalculatorHomePriceRequest' when calling FinancialPlanningApi->MortgageCalculatorHomePrice");

            var localVarPath = "/mortgage_calculator/home_price";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (mortgageCalculatorHomePriceRequest != null && mortgageCalculatorHomePriceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mortgageCalculatorHomePriceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mortgageCalculatorHomePriceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MortgageCalculatorHomePrice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Mortgage Calculator - Periodic Payment Calculate the periodic payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> MortgageCalculatorPeriodicPayment (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = MortgageCalculatorPeriodicPaymentWithHttpInfo(mortgageCalculatorPeriodicPaymentRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mortgage Calculator - Periodic Payment Calculate the periodic payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > MortgageCalculatorPeriodicPaymentWithHttpInfo (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest)
        {
            // verify the required parameter 'mortgageCalculatorPeriodicPaymentRequest' is set
            if (mortgageCalculatorPeriodicPaymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'mortgageCalculatorPeriodicPaymentRequest' when calling FinancialPlanningApi->MortgageCalculatorPeriodicPayment");

            var localVarPath = "/mortgage_calculator/periodic_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (mortgageCalculatorPeriodicPaymentRequest != null && mortgageCalculatorPeriodicPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mortgageCalculatorPeriodicPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mortgageCalculatorPeriodicPaymentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MortgageCalculatorPeriodicPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Mortgage Calculator - Periodic Payment Calculate the periodic payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> MortgageCalculatorPeriodicPaymentAsync (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await MortgageCalculatorPeriodicPaymentAsyncWithHttpInfo(mortgageCalculatorPeriodicPaymentRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mortgage Calculator - Periodic Payment Calculate the periodic payment for the mortgage
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mortgageCalculatorPeriodicPaymentRequest">Request payload for Mortgage Calculator - Periodic Payment</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> MortgageCalculatorPeriodicPaymentAsyncWithHttpInfo (MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest)
        {
            // verify the required parameter 'mortgageCalculatorPeriodicPaymentRequest' is set
            if (mortgageCalculatorPeriodicPaymentRequest == null)
                throw new ApiException(400, "Missing required parameter 'mortgageCalculatorPeriodicPaymentRequest' when calling FinancialPlanningApi->MortgageCalculatorPeriodicPayment");

            var localVarPath = "/mortgage_calculator/periodic_payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (mortgageCalculatorPeriodicPaymentRequest != null && mortgageCalculatorPeriodicPaymentRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(mortgageCalculatorPeriodicPaymentRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mortgageCalculatorPeriodicPaymentRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MortgageCalculatorPeriodicPayment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Purchase Calculator - Amount Calculate the achievable purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> PurchaseCalculatorAmount (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = PurchaseCalculatorAmountWithHttpInfo(purchaseCalculatorAmountRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Calculator - Amount Calculate the achievable purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > PurchaseCalculatorAmountWithHttpInfo (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest)
        {
            // verify the required parameter 'purchaseCalculatorAmountRequest' is set
            if (purchaseCalculatorAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'purchaseCalculatorAmountRequest' when calling FinancialPlanningApi->PurchaseCalculatorAmount");

            var localVarPath = "/purchase_calculator/amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (purchaseCalculatorAmountRequest != null && purchaseCalculatorAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(purchaseCalculatorAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchaseCalculatorAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCalculatorAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Purchase Calculator - Amount Calculate the achievable purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> PurchaseCalculatorAmountAsync (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await PurchaseCalculatorAmountAsyncWithHttpInfo(purchaseCalculatorAmountRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase Calculator - Amount Calculate the achievable purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorAmountRequest">Request payload for Purchase Calculator - Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PurchaseCalculatorAmountAsyncWithHttpInfo (PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest)
        {
            // verify the required parameter 'purchaseCalculatorAmountRequest' is set
            if (purchaseCalculatorAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'purchaseCalculatorAmountRequest' when calling FinancialPlanningApi->PurchaseCalculatorAmount");

            var localVarPath = "/purchase_calculator/amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (purchaseCalculatorAmountRequest != null && purchaseCalculatorAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(purchaseCalculatorAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchaseCalculatorAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCalculatorAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Purchase Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> PurchaseCalculatorDepositAmount (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = PurchaseCalculatorDepositAmountWithHttpInfo(purchaseCalculatorDepositAmountRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > PurchaseCalculatorDepositAmountWithHttpInfo (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'purchaseCalculatorDepositAmountRequest' is set
            if (purchaseCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'purchaseCalculatorDepositAmountRequest' when calling FinancialPlanningApi->PurchaseCalculatorDepositAmount");

            var localVarPath = "/purchase_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (purchaseCalculatorDepositAmountRequest != null && purchaseCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(purchaseCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchaseCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Purchase Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> PurchaseCalculatorDepositAmountAsync (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await PurchaseCalculatorDepositAmountAsyncWithHttpInfo(purchaseCalculatorDepositAmountRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase Calculator - Deposit Amount Calculate the necessary periodic deposit amount to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorDepositAmountRequest">Request payload for Purchase Calculator - Deposit Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PurchaseCalculatorDepositAmountAsyncWithHttpInfo (PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'purchaseCalculatorDepositAmountRequest' is set
            if (purchaseCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'purchaseCalculatorDepositAmountRequest' when calling FinancialPlanningApi->PurchaseCalculatorDepositAmount");

            var localVarPath = "/purchase_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (purchaseCalculatorDepositAmountRequest != null && purchaseCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(purchaseCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchaseCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Purchase Calculator - Horizon Calculate the necessary time horizon to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> PurchaseCalculatorHorizon (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = PurchaseCalculatorHorizonWithHttpInfo(purchaseCalculatorHorizonRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Calculator - Horizon Calculate the necessary time horizon to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > PurchaseCalculatorHorizonWithHttpInfo (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest)
        {
            // verify the required parameter 'purchaseCalculatorHorizonRequest' is set
            if (purchaseCalculatorHorizonRequest == null)
                throw new ApiException(400, "Missing required parameter 'purchaseCalculatorHorizonRequest' when calling FinancialPlanningApi->PurchaseCalculatorHorizon");

            var localVarPath = "/purchase_calculator/horizon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (purchaseCalculatorHorizonRequest != null && purchaseCalculatorHorizonRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(purchaseCalculatorHorizonRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchaseCalculatorHorizonRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCalculatorHorizon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Purchase Calculator - Horizon Calculate the necessary time horizon to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> PurchaseCalculatorHorizonAsync (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await PurchaseCalculatorHorizonAsyncWithHttpInfo(purchaseCalculatorHorizonRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Purchase Calculator - Horizon Calculate the necessary time horizon to achieve the purchase amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseCalculatorHorizonRequest">Request payload for Purchase Calculator - Horizon</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> PurchaseCalculatorHorizonAsyncWithHttpInfo (PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest)
        {
            // verify the required parameter 'purchaseCalculatorHorizonRequest' is set
            if (purchaseCalculatorHorizonRequest == null)
                throw new ApiException(400, "Missing required parameter 'purchaseCalculatorHorizonRequest' when calling FinancialPlanningApi->PurchaseCalculatorHorizon");

            var localVarPath = "/purchase_calculator/horizon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (purchaseCalculatorHorizonRequest != null && purchaseCalculatorHorizonRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(purchaseCalculatorHorizonRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = purchaseCalculatorHorizonRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchaseCalculatorHorizon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retirement Calculator - Deposit Amount Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RetirementCalculatorDepositAmount (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RetirementCalculatorDepositAmountWithHttpInfo(retirementCalculatorDepositAmountRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retirement Calculator - Deposit Amount Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > RetirementCalculatorDepositAmountWithHttpInfo (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'retirementCalculatorDepositAmountRequest' is set
            if (retirementCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'retirementCalculatorDepositAmountRequest' when calling FinancialPlanningApi->RetirementCalculatorDepositAmount");

            var localVarPath = "/retirement_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (retirementCalculatorDepositAmountRequest != null && retirementCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retirementCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retirementCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetirementCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retirement Calculator - Deposit Amount Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RetirementCalculatorDepositAmountAsync (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RetirementCalculatorDepositAmountAsyncWithHttpInfo(retirementCalculatorDepositAmountRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retirement Calculator - Deposit Amount Calculate the necessary period deposit amount to achieve the retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorDepositAmountRequest">Request payload for Retirement Calculator - Deposit AMount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RetirementCalculatorDepositAmountAsyncWithHttpInfo (RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'retirementCalculatorDepositAmountRequest' is set
            if (retirementCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'retirementCalculatorDepositAmountRequest' when calling FinancialPlanningApi->RetirementCalculatorDepositAmount");

            var localVarPath = "/retirement_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (retirementCalculatorDepositAmountRequest != null && retirementCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retirementCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retirementCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetirementCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retirement Calculator - Expenses Calculate the achievable retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RetirementCalculatorExpenses (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RetirementCalculatorExpensesWithHttpInfo(retirementCalculatorExpensesRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retirement Calculator - Expenses Calculate the achievable retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > RetirementCalculatorExpensesWithHttpInfo (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest)
        {
            // verify the required parameter 'retirementCalculatorExpensesRequest' is set
            if (retirementCalculatorExpensesRequest == null)
                throw new ApiException(400, "Missing required parameter 'retirementCalculatorExpensesRequest' when calling FinancialPlanningApi->RetirementCalculatorExpenses");

            var localVarPath = "/retirement_calculator/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (retirementCalculatorExpensesRequest != null && retirementCalculatorExpensesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retirementCalculatorExpensesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retirementCalculatorExpensesRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetirementCalculatorExpenses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retirement Calculator - Expenses Calculate the achievable retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RetirementCalculatorExpensesAsync (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RetirementCalculatorExpensesAsyncWithHttpInfo(retirementCalculatorExpensesRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retirement Calculator - Expenses Calculate the achievable retirement expenses
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorExpensesRequest">Request payload for Retirement Calculator - Expenses</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RetirementCalculatorExpensesAsyncWithHttpInfo (RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest)
        {
            // verify the required parameter 'retirementCalculatorExpensesRequest' is set
            if (retirementCalculatorExpensesRequest == null)
                throw new ApiException(400, "Missing required parameter 'retirementCalculatorExpensesRequest' when calling FinancialPlanningApi->RetirementCalculatorExpenses");

            var localVarPath = "/retirement_calculator/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (retirementCalculatorExpensesRequest != null && retirementCalculatorExpensesRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retirementCalculatorExpensesRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retirementCalculatorExpensesRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetirementCalculatorExpenses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retirement Calculator - Percent Covered Calculate the achievable percentage of retirement expenses that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RetirementCalculatorPercentCovered (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RetirementCalculatorPercentCoveredWithHttpInfo(retirementCalculatorPercentCoveredRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retirement Calculator - Percent Covered Calculate the achievable percentage of retirement expenses that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > RetirementCalculatorPercentCoveredWithHttpInfo (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest)
        {
            // verify the required parameter 'retirementCalculatorPercentCoveredRequest' is set
            if (retirementCalculatorPercentCoveredRequest == null)
                throw new ApiException(400, "Missing required parameter 'retirementCalculatorPercentCoveredRequest' when calling FinancialPlanningApi->RetirementCalculatorPercentCovered");

            var localVarPath = "/retirement_calculator/percent_covered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (retirementCalculatorPercentCoveredRequest != null && retirementCalculatorPercentCoveredRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retirementCalculatorPercentCoveredRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retirementCalculatorPercentCoveredRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetirementCalculatorPercentCovered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Retirement Calculator - Percent Covered Calculate the achievable percentage of retirement expenses that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RetirementCalculatorPercentCoveredAsync (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RetirementCalculatorPercentCoveredAsyncWithHttpInfo(retirementCalculatorPercentCoveredRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retirement Calculator - Percent Covered Calculate the achievable percentage of retirement expenses that can be covered
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="retirementCalculatorPercentCoveredRequest">Request payload for Retirement Calculator - Percent Covered</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RetirementCalculatorPercentCoveredAsyncWithHttpInfo (RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest)
        {
            // verify the required parameter 'retirementCalculatorPercentCoveredRequest' is set
            if (retirementCalculatorPercentCoveredRequest == null)
                throw new ApiException(400, "Missing required parameter 'retirementCalculatorPercentCoveredRequest' when calling FinancialPlanningApi->RetirementCalculatorPercentCovered");

            var localVarPath = "/retirement_calculator/percent_covered";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (retirementCalculatorPercentCoveredRequest != null && retirementCalculatorPercentCoveredRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(retirementCalculatorPercentCoveredRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retirementCalculatorPercentCoveredRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetirementCalculatorPercentCovered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

    }
}
