/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.Benchmark;
import com.hydrogen.nucleus.model.DateDoubleVO;
import org.threeten.bp.LocalDate;
import com.hydrogen.nucleus.model.PageBenchmark;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BenchmarkApi {
    private ApiClient apiClient;

    public BenchmarkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BenchmarkApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBenchmarkUsingPost
     * @param benchmark benchmark (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBenchmarkUsingPostCall(Benchmark benchmark, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = benchmark;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBenchmarkUsingPostValidateBeforeCall(Benchmark benchmark, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmark' is set
        if (benchmark == null) {
            throw new ApiException("Missing the required parameter 'benchmark' when calling createBenchmarkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBenchmarkUsingPostCall(benchmark, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a benchmark
     * Create a new benchmark for your firm.
     * @param benchmark benchmark (required)
     * @return Benchmark
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Benchmark createBenchmarkUsingPost(Benchmark benchmark) throws ApiException {
        ApiResponse<Benchmark> resp = createBenchmarkUsingPostWithHttpInfo(benchmark);
        return resp.getData();
    }

    /**
     * Create a benchmark
     * Create a new benchmark for your firm.
     * @param benchmark benchmark (required)
     * @return ApiResponse&lt;Benchmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Benchmark> createBenchmarkUsingPostWithHttpInfo(Benchmark benchmark) throws ApiException {
        com.squareup.okhttp.Call call = createBenchmarkUsingPostValidateBeforeCall(benchmark, null, null);
        Type localVarReturnType = new TypeToken<Benchmark>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a benchmark (asynchronously)
     * Create a new benchmark for your firm.
     * @param benchmark benchmark (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBenchmarkUsingPostAsync(Benchmark benchmark, final ApiCallback<Benchmark> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBenchmarkUsingPostValidateBeforeCall(benchmark, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Benchmark>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBenchmarkUsingDelete
     * @param benchmarkId UUID benchmark_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBenchmarkUsingDeleteCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBenchmarkUsingDeleteValidateBeforeCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling deleteBenchmarkUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBenchmarkUsingDeleteCall(benchmarkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a benchmark
     * Permanently delete a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteBenchmarkUsingDelete(UUID benchmarkId) throws ApiException {
        deleteBenchmarkUsingDeleteWithHttpInfo(benchmarkId);
    }

    /**
     * Delete a benchmark
     * Permanently delete a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteBenchmarkUsingDeleteWithHttpInfo(UUID benchmarkId) throws ApiException {
        com.squareup.okhttp.Call call = deleteBenchmarkUsingDeleteValidateBeforeCall(benchmarkId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a benchmark (asynchronously)
     * Permanently delete a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBenchmarkUsingDeleteAsync(UUID benchmarkId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBenchmarkUsingDeleteValidateBeforeCall(benchmarkId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getBenchmarkAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarkAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getBenchmarkAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all benchmarks
     * Get details for all benchmarks defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageBenchmark
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageBenchmark getBenchmarkAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageBenchmark> resp = getBenchmarkAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all benchmarks
     * Get details for all benchmarks defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageBenchmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageBenchmark> getBenchmarkAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarkAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageBenchmark>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all benchmarks (asynchronously)
     * Get details for all benchmarks defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageBenchmark> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarkAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageBenchmark>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBenchmarkAssetSizeAllUsingGet
     * @param benchmarkId UUID benchmark_id (required)
     * @param endDate end date (optional)
     * @param sortType sort_type (optional)
     * @param startDate start date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkAssetSizeAllUsingGetCall(UUID benchmarkId, LocalDate endDate, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}/asset_size"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_type", sortType));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarkAssetSizeAllUsingGetValidateBeforeCall(UUID benchmarkId, LocalDate endDate, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling getBenchmarkAssetSizeAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBenchmarkAssetSizeAllUsingGetCall(benchmarkId, endDate, sortType, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all benchmark asset sizes
     * Get a list of asset sizes by date for a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @param endDate end date (optional)
     * @param sortType sort_type (optional)
     * @param startDate start date (optional)
     * @return List&lt;DateDoubleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DateDoubleVO> getBenchmarkAssetSizeAllUsingGet(UUID benchmarkId, LocalDate endDate, String sortType, LocalDate startDate) throws ApiException {
        ApiResponse<List<DateDoubleVO>> resp = getBenchmarkAssetSizeAllUsingGetWithHttpInfo(benchmarkId, endDate, sortType, startDate);
        return resp.getData();
    }

    /**
     * List all benchmark asset sizes
     * Get a list of asset sizes by date for a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @param endDate end date (optional)
     * @param sortType sort_type (optional)
     * @param startDate start date (optional)
     * @return ApiResponse&lt;List&lt;DateDoubleVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DateDoubleVO>> getBenchmarkAssetSizeAllUsingGetWithHttpInfo(UUID benchmarkId, LocalDate endDate, String sortType, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarkAssetSizeAllUsingGetValidateBeforeCall(benchmarkId, endDate, sortType, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<DateDoubleVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all benchmark asset sizes (asynchronously)
     * Get a list of asset sizes by date for a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @param endDate end date (optional)
     * @param sortType sort_type (optional)
     * @param startDate start date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkAssetSizeAllUsingGetAsync(UUID benchmarkId, LocalDate endDate, String sortType, LocalDate startDate, final ApiCallback<List<DateDoubleVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarkAssetSizeAllUsingGetValidateBeforeCall(benchmarkId, endDate, sortType, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DateDoubleVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBenchmarkUsingGet
     * @param benchmarkId UUID benchmark_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkUsingGetCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBenchmarkUsingGetValidateBeforeCall(UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling getBenchmarkUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBenchmarkUsingGetCall(benchmarkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a benchmark
     * Retrieve the information for a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @return Benchmark
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Benchmark getBenchmarkUsingGet(UUID benchmarkId) throws ApiException {
        ApiResponse<Benchmark> resp = getBenchmarkUsingGetWithHttpInfo(benchmarkId);
        return resp.getData();
    }

    /**
     * Retrieve a benchmark
     * Retrieve the information for a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @return ApiResponse&lt;Benchmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Benchmark> getBenchmarkUsingGetWithHttpInfo(UUID benchmarkId) throws ApiException {
        com.squareup.okhttp.Call call = getBenchmarkUsingGetValidateBeforeCall(benchmarkId, null, null);
        Type localVarReturnType = new TypeToken<Benchmark>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a benchmark (asynchronously)
     * Retrieve the information for a benchmark.
     * @param benchmarkId UUID benchmark_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBenchmarkUsingGetAsync(UUID benchmarkId, final ApiCallback<Benchmark> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBenchmarkUsingGetValidateBeforeCall(benchmarkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Benchmark>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBenchmarkUsingPut
     * @param benchmark benchmark (required)
     * @param benchmarkId UUID benchmark_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBenchmarkUsingPutCall(Object benchmark, UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = benchmark;

        // create path and map variables
        String localVarPath = "/nucleus/v1/benchmark/{benchmark_id}"
            .replaceAll("\\{" + "benchmark_id" + "\\}", apiClient.escapeString(benchmarkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBenchmarkUsingPutValidateBeforeCall(Object benchmark, UUID benchmarkId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'benchmark' is set
        if (benchmark == null) {
            throw new ApiException("Missing the required parameter 'benchmark' when calling updateBenchmarkUsingPut(Async)");
        }
        
        // verify the required parameter 'benchmarkId' is set
        if (benchmarkId == null) {
            throw new ApiException("Missing the required parameter 'benchmarkId' when calling updateBenchmarkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBenchmarkUsingPutCall(benchmark, benchmarkId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a benchmark
     * Updated the information for a benchmark.
     * @param benchmark benchmark (required)
     * @param benchmarkId UUID benchmark_id (required)
     * @return Benchmark
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Benchmark updateBenchmarkUsingPut(Object benchmark, UUID benchmarkId) throws ApiException {
        ApiResponse<Benchmark> resp = updateBenchmarkUsingPutWithHttpInfo(benchmark, benchmarkId);
        return resp.getData();
    }

    /**
     * Update a benchmark
     * Updated the information for a benchmark.
     * @param benchmark benchmark (required)
     * @param benchmarkId UUID benchmark_id (required)
     * @return ApiResponse&lt;Benchmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Benchmark> updateBenchmarkUsingPutWithHttpInfo(Object benchmark, UUID benchmarkId) throws ApiException {
        com.squareup.okhttp.Call call = updateBenchmarkUsingPutValidateBeforeCall(benchmark, benchmarkId, null, null);
        Type localVarReturnType = new TypeToken<Benchmark>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a benchmark (asynchronously)
     * Updated the information for a benchmark.
     * @param benchmark benchmark (required)
     * @param benchmarkId UUID benchmark_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBenchmarkUsingPutAsync(Object benchmark, UUID benchmarkId, final ApiCallback<Benchmark> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBenchmarkUsingPutValidateBeforeCall(benchmark, benchmarkId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Benchmark>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
