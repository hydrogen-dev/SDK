=begin
#Hydrogen Admin API

#The Hydrogen Admin API

OpenAPI spec version: 1.0.2
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'uri'

module AdminApi
  class ClientApi
    attr_accessor :api_client
    attr_accessor :auth_config

    def initialize(api_client = ApiClient.default, auth_config = AuthConfiguration.default)
      @api_client = api_client
      @auth_config = auth_config
    end


    def create_client_credential_return(appTokenConfig)
      client_credentials_token = @auth_config.create_client_credential_return(appTokenConfig['clientId'], appTokenConfig['clientSecret'])
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppTokenApi#client_credentials_token\nData: #{client_credentials_token.inspect}"
      end
      return client_credentials_token
    end

    def create_password_credential_return(appTokenConfig)

      password_credentials_token = @auth_config.create_password_credential_return(appTokenConfig['clientId'], appTokenConfig['clientSecret'],appTokenConfig['username'], appTokenConfig['password'] )
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppTokenApi#password_credentials_token\nData: #{password_credentials_token.inspect}"
      end
      return password_credentials_token
    end

    def create_client_token_credential_return(appTokenConfig)

      client_token_credentials = @auth_config.create_client_token_credential(appTokenConfig['clientId'], appTokenConfig['clientSecret'],appTokenConfig['clientToken'])
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppTokenApi#client_token_credentials\nData: #{client_token_credentials.inspect}"
      end
      return client_token_credentials
    end

    # Create a client
    # Create a new client, or register a new user, with your firm.
    # @param client_request clientRequest
    # @param [Hash] opts the optional parameters
    # @return [Client]
    def create_client_using_post(client_request, appTokenConfig = {}, opts = {})
      data, _status_code, _headers = create_client_using_post_with_http_info(client_request, appTokenConfig, opts)
      data
    end

    # Create a client
    # Create a new client, or register a new user, with your firm.
    # @param client_request clientRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def create_client_using_post_with_http_info(client_request, appTokenConfig = {}, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.create_client_using_post ...'
      end
      # verify the required parameter 'client_request' is set
      if @api_client.config.client_side_validation && client_request.nil?
        fail ArgumentError, "Missing the required parameter 'client_request' when calling ClientApi.create_client_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/client'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client_request)
      auth_names = ['oauth2']

      if @api_client.config.client_side_validation && appTokenConfig['basePath'].nil?
        fail ArgumentError, "Missing the required parameter 'basePath'"
      end

      if @api_client.config.client_side_validation && appTokenConfig['authType'].nil?
        fail ArgumentError, "Missing the required parameter 'authType'"
      end

      @auth_config.config.host = appTokenConfig['basePath']
      @api_client.config.host = appTokenConfig['basePath']

      if appTokenConfig['authType'].downcase == 'client_credentials'
        client_credentials_token = create_client_credential_return(appTokenConfig)
        @api_client.config.access_token = client_credentials_token
      elsif appTokenConfig['authType'].downcase == 'password_credentials'
        password_credential_token = create_password_credential_return(appTokenConfig)
        @api_client.config.access_token = password_credential_token
      elsif  appTokenConfig['authType'].downcase == 'client_token_credentials'
        client_token_credential = create_client_token_credential_return(appTokenConfig)
        @api_client.config.access_token = client_token_credential
      end
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#create_client_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all clients
    # Get details for all clients registered with your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageClient]
    def get_client_all_using_get(appTokenConfig = {}, opts = {})
      data, _status_code, _headers = get_client_all_using_get_with_http_info(appTokenConfig, opts)
      data
    end

    # List all clients
    # Get details for all clients registered with your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageClient, Fixnum, Hash)>] PageClient data, response status code and response headers
    def get_client_all_using_get_with_http_info(appTokenConfig = {}, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/client'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']

      if @api_client.config.client_side_validation && appTokenConfig['basePath'].nil?
        fail ArgumentError, "Missing the required parameter 'basePath'"
      end

      if @api_client.config.client_side_validation && appTokenConfig['authType'].nil?
        fail ArgumentError, "Missing the required parameter 'authType'"
      end

      @auth_config.config.host = appTokenConfig['basePath']
      @api_client.config.host = appTokenConfig['basePath']

      if appTokenConfig['authType'].downcase == 'client_credentials'
        client_credentials_token = create_client_credential_return(appTokenConfig)
        @api_client.config.access_token = client_credentials_token
      elsif appTokenConfig['authType'].downcase == 'password_credentials'
        password_credential_token = create_password_credential_return(appTokenConfig)
        @api_client.config.access_token = password_credential_token
      elsif  appTokenConfig['authType'].downcase == 'client_token_credentials'
        client_token_credential = create_client_token_credential_return(appTokenConfig)
        @api_client.config.access_token = client_token_credential
      end
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageClient')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a client
    # Retrieve the information for a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Client]
    def get_client_using_get(client_id, appTokenConfig = {}, opts = {})
      data, _status_code, _headers = get_client_using_get_with_http_info(client_id, appTokenConfig, opts)
      data
    end

    # Retrieve a client
    # Retrieve the information for a client registered with your firm.
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def get_client_using_get_with_http_info(client_id, appTokenConfig = {}, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.get_client_using_get ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.get_client_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']

      if @api_client.config.client_side_validation && appTokenConfig['basePath'].nil?
        fail ArgumentError, "Missing the required parameter 'basePath'"
      end

      if @api_client.config.client_side_validation && appTokenConfig['authType'].nil?
        fail ArgumentError, "Missing the required parameter 'authType'"
      end

      @auth_config.config.host = appTokenConfig['basePath']
      @api_client.config.host = appTokenConfig['basePath']

      if appTokenConfig['authType'].downcase == 'client_credentials'
        client_credentials_token = create_client_credential_return(appTokenConfig)
        @api_client.config.access_token = client_credentials_token
      elsif appTokenConfig['authType'].downcase == 'password_credentials'
        password_credential_token = create_password_credential_return(appTokenConfig)
        @api_client.config.access_token = password_credential_token
      elsif  appTokenConfig['authType'].downcase == 'client_token_credentials'
        client_token_credential = create_client_token_credential_return(appTokenConfig)
        @api_client.config.access_token = client_token_credential
      end
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#get_client_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client
    # Update the information for a client registered with your firm.
    # @param client client
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Client]
    def update_client_using_put(client, client_id, appTokenConfig = {}, opts = {})
      data, _status_code, _headers = update_client_using_put_with_http_info(client, client_id, appTokenConfig, opts)
      data
    end

    # Update a client
    # Update the information for a client registered with your firm.
    # @param client client
    # @param client_id UUID client_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Client, Fixnum, Hash)>] Client data, response status code and response headers
    def update_client_using_put_with_http_info(client, client_id, appTokenConfig = {}, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClientApi.update_client_using_put ...'
      end
      # verify the required parameter 'client' is set
      if @api_client.config.client_side_validation && client.nil?
        fail ArgumentError, "Missing the required parameter 'client' when calling ClientApi.update_client_using_put"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ClientApi.update_client_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(client)
      auth_names = ['oauth2']

      if @api_client.config.client_side_validation && appTokenConfig['basePath'].nil?
        fail ArgumentError, "Missing the required parameter 'basePath'"
      end

      if @api_client.config.client_side_validation && appTokenConfig['authType'].nil?
        fail ArgumentError, "Missing the required parameter 'authType'"
      end

      @auth_config.config.host = appTokenConfig['basePath']
      @api_client.config.host = appTokenConfig['basePath']

      if appTokenConfig['authType'].downcase == 'client_credentials'
        client_credentials_token = create_client_credential_return(appTokenConfig)
        @api_client.config.access_token = client_credentials_token
      elsif appTokenConfig['authType'].downcase == 'password_credentials'
        password_credential_token = create_password_credential_return(appTokenConfig)
        @api_client.config.access_token = password_credential_token
      elsif  appTokenConfig['authType'].downcase == 'client_token_credentials'
        client_token_credential = create_client_token_credential_return(appTokenConfig)
        @api_client.config.access_token = client_token_credential
      end
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Client')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClientApi#update_client_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
