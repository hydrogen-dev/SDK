# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaginationSort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'str',
        '_property': 'str',
        'ignore_case': 'bool',
        'null_handling': 'str',
        'descending': 'bool',
        'ascending': 'bool'
    }

    attribute_map = {
        'direction': 'direction',
        '_property': 'property',
        'ignore_case': 'ignore_case',
        'null_handling': 'null_handling',
        'descending': 'descending',
        'ascending': 'ascending'
    }

    def __init__(self, direction=None, _property=None, ignore_case=None, null_handling=None, descending=None, ascending=None):  # noqa: E501
        """PaginationSort - a model defined in Swagger"""  # noqa: E501

        self._direction = None
        self.__property = None
        self._ignore_case = None
        self._null_handling = None
        self._descending = None
        self._ascending = None
        self.discriminator = None

        if direction is not None:
            self.direction = direction
        if _property is not None:
            self._property = _property
        if ignore_case is not None:
            self.ignore_case = ignore_case
        if null_handling is not None:
            self.null_handling = null_handling
        if descending is not None:
            self.descending = descending
        if ascending is not None:
            self.ascending = ascending

    @property
    def direction(self):
        """Gets the direction of this PaginationSort.  # noqa: E501

        ASC if ascending sort, DESC if descending sort  # noqa: E501

        :return: The direction of this PaginationSort.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this PaginationSort.

        ASC if ascending sort, DESC if descending sort  # noqa: E501

        :param direction: The direction of this PaginationSort.  # noqa: E501
        :type: str
        """
        allowed_values = ["ASC", "DESC"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def _property(self):
        """Gets the _property of this PaginationSort.  # noqa: E501

        Property on which the records are sorted  # noqa: E501

        :return: The _property of this PaginationSort.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this PaginationSort.

        Property on which the records are sorted  # noqa: E501

        :param _property: The _property of this PaginationSort.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def ignore_case(self):
        """Gets the ignore_case of this PaginationSort.  # noqa: E501

        If true, ignore case when sorting  # noqa: E501

        :return: The ignore_case of this PaginationSort.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """Sets the ignore_case of this PaginationSort.

        If true, ignore case when sorting  # noqa: E501

        :param ignore_case: The ignore_case of this PaginationSort.  # noqa: E501
        :type: bool
        """

        self._ignore_case = ignore_case

    @property
    def null_handling(self):
        """Gets the null_handling of this PaginationSort.  # noqa: E501

        Type of null handling applied  # noqa: E501

        :return: The null_handling of this PaginationSort.  # noqa: E501
        :rtype: str
        """
        return self._null_handling

    @null_handling.setter
    def null_handling(self, null_handling):
        """Sets the null_handling of this PaginationSort.

        Type of null handling applied  # noqa: E501

        :param null_handling: The null_handling of this PaginationSort.  # noqa: E501
        :type: str
        """

        self._null_handling = null_handling

    @property
    def descending(self):
        """Gets the descending of this PaginationSort.  # noqa: E501

        If true, data is sorted in ascending order  # noqa: E501

        :return: The descending of this PaginationSort.  # noqa: E501
        :rtype: bool
        """
        return self._descending

    @descending.setter
    def descending(self, descending):
        """Sets the descending of this PaginationSort.

        If true, data is sorted in ascending order  # noqa: E501

        :param descending: The descending of this PaginationSort.  # noqa: E501
        :type: bool
        """

        self._descending = descending

    @property
    def ascending(self):
        """Gets the ascending of this PaginationSort.  # noqa: E501

        If true, data is sorted in descending order  # noqa: E501

        :return: The ascending of this PaginationSort.  # noqa: E501
        :rtype: bool
        """
        return self._ascending

    @ascending.setter
    def ascending(self, ascending):
        """Sets the ascending of this PaginationSort.

        If true, data is sorted in descending order  # noqa: E501

        :param ascending: The ascending of this PaginationSort.  # noqa: E501
        :type: bool
        """

        self._ascending = ascending

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaginationSort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationSort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
