/*
 * Hydrogen Electron API
 * The Hydrogen Electron API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.electron.api;

import com.hydrogen.electron.ApiCallback;
import com.hydrogen.electron.ApiClient;
import com.hydrogen.electron.ApiException;
import com.hydrogen.electron.ApiResponse;
import com.hydrogen.electron.Configuration;
import com.hydrogen.electron.Pair;
import com.hydrogen.electron.model.CardBaseRequestCO;
import com.hydrogen.electron.model.CardClientRequestCO;
import com.hydrogen.electron.model.CardLoadRequestCO;
import com.hydrogen.electron.model.CardLoadUnloadResponseVO;
import com.hydrogen.electron.model.CardReplaceResponseVO;
import com.hydrogen.electron.model.CardReserveAccountResponseVO;
import com.hydrogen.electron.model.CardSpendingControlRequestCO;
import com.hydrogen.electron.model.CardSpendingControlResponseVO;
import com.hydrogen.electron.model.CardUnloadRequestCO;
import com.hydrogen.electron.model.CreateCardClientResponseVO;
import com.hydrogen.electron.model.UpdateCardClientResponseVO;
import com.hydrogen.electron.ProgressRequestBody;
import com.hydrogen.electron.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.electron.model.BaseResponseVO;

import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardApi {
    private ApiClient apiClient;

    public CardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCardCloseUsingPost
     * @param closeRequest closeRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardCloseUsingPostCall(CardBaseRequestCO closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = closeRequest;

        // create path and map variables
        String localVarPath = "/card/close";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardCloseUsingPostValidateBeforeCall(CardBaseRequestCO closeRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'closeRequest' is set
        if (closeRequest == null) {
            throw new ApiException("Missing the required parameter 'closeRequest' when calling createCardCloseUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardCloseUsingPostCall(closeRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * close a card
     * 
     * @param closeRequest closeRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardCloseUsingPost(CardBaseRequestCO closeRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardCloseUsingPostWithHttpInfo(closeRequest);
        return resp.getData();
    }

    /**
     * close a card
     * 
     * @param closeRequest closeRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardCloseUsingPostWithHttpInfo(CardBaseRequestCO closeRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardCloseUsingPostValidateBeforeCall(closeRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * close a card (asynchronously)
     * 
     * @param closeRequest closeRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardCloseUsingPostAsync(CardBaseRequestCO closeRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardCloseUsingPostValidateBeforeCall(closeRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardIssueUsingPost
     * @param issueRequest issueRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardIssueUsingPostCall(CardBaseRequestCO issueRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = issueRequest;

        // create path and map variables
        String localVarPath = "/card/issue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardIssueUsingPostValidateBeforeCall(CardBaseRequestCO issueRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issueRequest' is set
        if (issueRequest == null) {
            throw new ApiException("Missing the required parameter 'issueRequest' when calling createCardIssueUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardIssueUsingPostCall(issueRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * issue a card
     * 
     * @param issueRequest issueRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardIssueUsingPost(CardBaseRequestCO issueRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardIssueUsingPostWithHttpInfo(issueRequest);
        return resp.getData();
    }

    /**
     * issue a card
     * 
     * @param issueRequest issueRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardIssueUsingPostWithHttpInfo(CardBaseRequestCO issueRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardIssueUsingPostValidateBeforeCall(issueRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * issue a card (asynchronously)
     * 
     * @param issueRequest issueRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardIssueUsingPostAsync(CardBaseRequestCO issueRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardIssueUsingPostValidateBeforeCall(issueRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardLoadUsingPost
     * @param loadRequest loadRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardLoadUsingPostCall(CardLoadRequestCO loadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = loadRequest;

        // create path and map variables
        String localVarPath = "/card/load";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardLoadUsingPostValidateBeforeCall(CardLoadRequestCO loadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loadRequest' is set
        if (loadRequest == null) {
            throw new ApiException("Missing the required parameter 'loadRequest' when calling createCardLoadUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardLoadUsingPostCall(loadRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a card load
     * 
     * @param loadRequest loadRequest (required)
     * @return CardLoadUnloadResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardLoadUnloadResponseVO createCardLoadUsingPost(CardLoadRequestCO loadRequest) throws ApiException {
        ApiResponse<CardLoadUnloadResponseVO> resp = createCardLoadUsingPostWithHttpInfo(loadRequest);
        return resp.getData();
    }

    /**
     * Create a card load
     * 
     * @param loadRequest loadRequest (required)
     * @return ApiResponse&lt;CardLoadUnloadResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardLoadUnloadResponseVO> createCardLoadUsingPostWithHttpInfo(CardLoadRequestCO loadRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardLoadUsingPostValidateBeforeCall(loadRequest, null, null);
        Type localVarReturnType = new TypeToken<CardLoadUnloadResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a card load (asynchronously)
     * 
     * @param loadRequest loadRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardLoadUsingPostAsync(CardLoadRequestCO loadRequest, final ApiCallback<CardLoadUnloadResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardLoadUsingPostValidateBeforeCall(loadRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardLoadUnloadResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardReactivateUsingPost
     * @param reactivateRequest reactivateRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardReactivateUsingPostCall(CardBaseRequestCO reactivateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reactivateRequest;

        // create path and map variables
        String localVarPath = "/card/reactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardReactivateUsingPostValidateBeforeCall(CardBaseRequestCO reactivateRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reactivateRequest' is set
        if (reactivateRequest == null) {
            throw new ApiException("Missing the required parameter 'reactivateRequest' when calling createCardReactivateUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardReactivateUsingPostCall(reactivateRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * reactivate card
     * 
     * @param reactivateRequest reactivateRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardReactivateUsingPost(CardBaseRequestCO reactivateRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardReactivateUsingPostWithHttpInfo(reactivateRequest);
        return resp.getData();
    }

    /**
     * reactivate card
     * 
     * @param reactivateRequest reactivateRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardReactivateUsingPostWithHttpInfo(CardBaseRequestCO reactivateRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardReactivateUsingPostValidateBeforeCall(reactivateRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * reactivate card (asynchronously)
     * 
     * @param reactivateRequest reactivateRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardReactivateUsingPostAsync(CardBaseRequestCO reactivateRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardReactivateUsingPostValidateBeforeCall(reactivateRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardReplaceUsingPost
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardReplaceUsingPostCall(CardBaseRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/card/replace";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardReplaceUsingPostValidateBeforeCall(CardBaseRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createCardReplaceUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardReplaceUsingPostCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create card replace
     * 
     * @param request request (required)
     * @return CardReplaceResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardReplaceResponseVO createCardReplaceUsingPost(CardBaseRequestCO request) throws ApiException {
        ApiResponse<CardReplaceResponseVO> resp = createCardReplaceUsingPostWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create card replace
     * 
     * @param request request (required)
     * @return ApiResponse&lt;CardReplaceResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardReplaceResponseVO> createCardReplaceUsingPostWithHttpInfo(CardBaseRequestCO request) throws ApiException {
        com.squareup.okhttp.Call call = createCardReplaceUsingPostValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<CardReplaceResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create card replace (asynchronously)
     * 
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardReplaceUsingPostAsync(CardBaseRequestCO request, final ApiCallback<CardReplaceResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardReplaceUsingPostValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardReplaceResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardSpendingControlUsingPost
     * @param request request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardSpendingControlUsingPostCall(CardSpendingControlRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/card/spending_control";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardSpendingControlUsingPostValidateBeforeCall(CardSpendingControlRequestCO request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling createCardSpendingControlUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardSpendingControlUsingPostCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create card spending control
     * 
     * @param request request (required)
     * @return CardSpendingControlResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardSpendingControlResponseVO createCardSpendingControlUsingPost(CardSpendingControlRequestCO request) throws ApiException {
        ApiResponse<CardSpendingControlResponseVO> resp = createCardSpendingControlUsingPostWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * Create card spending control
     * 
     * @param request request (required)
     * @return ApiResponse&lt;CardSpendingControlResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardSpendingControlResponseVO> createCardSpendingControlUsingPostWithHttpInfo(CardSpendingControlRequestCO request) throws ApiException {
        com.squareup.okhttp.Call call = createCardSpendingControlUsingPostValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<CardSpendingControlResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create card spending control (asynchronously)
     * 
     * @param request request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardSpendingControlUsingPostAsync(CardSpendingControlRequestCO request, final ApiCallback<CardSpendingControlResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardSpendingControlUsingPostValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardSpendingControlResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardSuspendUsingPost
     * @param suspendRequest suspendRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardSuspendUsingPostCall(CardBaseRequestCO suspendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = suspendRequest;

        // create path and map variables
        String localVarPath = "/card/suspend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardSuspendUsingPostValidateBeforeCall(CardBaseRequestCO suspendRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'suspendRequest' is set
        if (suspendRequest == null) {
            throw new ApiException("Missing the required parameter 'suspendRequest' when calling createCardSuspendUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardSuspendUsingPostCall(suspendRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * suspend card
     * 
     * @param suspendRequest suspendRequest (required)
     * @return BaseResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BaseResponseVO createCardSuspendUsingPost(CardBaseRequestCO suspendRequest) throws ApiException {
        ApiResponse<BaseResponseVO> resp = createCardSuspendUsingPostWithHttpInfo(suspendRequest);
        return resp.getData();
    }

    /**
     * suspend card
     * 
     * @param suspendRequest suspendRequest (required)
     * @return ApiResponse&lt;BaseResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BaseResponseVO> createCardSuspendUsingPostWithHttpInfo(CardBaseRequestCO suspendRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardSuspendUsingPostValidateBeforeCall(suspendRequest, null, null);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * suspend card (asynchronously)
     * 
     * @param suspendRequest suspendRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardSuspendUsingPostAsync(CardBaseRequestCO suspendRequest, final ApiCallback<BaseResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardSuspendUsingPostValidateBeforeCall(suspendRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BaseResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createCardUnloadUsingPost
     * @param reloadRequest reloadRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCardUnloadUsingPostCall(CardUnloadRequestCO reloadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reloadRequest;

        // create path and map variables
        String localVarPath = "/card/unload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCardUnloadUsingPostValidateBeforeCall(CardUnloadRequestCO reloadRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reloadRequest' is set
        if (reloadRequest == null) {
            throw new ApiException("Missing the required parameter 'reloadRequest' when calling createCardUnloadUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createCardUnloadUsingPostCall(reloadRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a card upload
     * 
     * @param reloadRequest reloadRequest (required)
     * @return CardLoadUnloadResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardLoadUnloadResponseVO createCardUnloadUsingPost(CardUnloadRequestCO reloadRequest) throws ApiException {
        ApiResponse<CardLoadUnloadResponseVO> resp = createCardUnloadUsingPostWithHttpInfo(reloadRequest);
        return resp.getData();
    }

    /**
     * Create a card upload
     * 
     * @param reloadRequest reloadRequest (required)
     * @return ApiResponse&lt;CardLoadUnloadResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardLoadUnloadResponseVO> createCardUnloadUsingPostWithHttpInfo(CardUnloadRequestCO reloadRequest) throws ApiException {
        com.squareup.okhttp.Call call = createCardUnloadUsingPostValidateBeforeCall(reloadRequest, null, null);
        Type localVarReturnType = new TypeToken<CardLoadUnloadResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a card upload (asynchronously)
     * 
     * @param reloadRequest reloadRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCardUnloadUsingPostAsync(CardUnloadRequestCO reloadRequest, final ApiCallback<CardLoadUnloadResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCardUnloadUsingPostValidateBeforeCall(reloadRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardLoadUnloadResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClientCardUsingPost
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClientCardUsingPostCall(CardClientRequestCO cardClientRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardClientRequestCO;

        // create path and map variables
        String localVarPath = "/card/client";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClientCardUsingPostValidateBeforeCall(CardClientRequestCO cardClientRequestCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardClientRequestCO' is set
        if (cardClientRequestCO == null) {
            throw new ApiException("Missing the required parameter 'cardClientRequestCO' when calling createClientCardUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createClientCardUsingPostCall(cardClientRequestCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a card client
     * 
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @return CreateCardClientResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateCardClientResponseVO createClientCardUsingPost(CardClientRequestCO cardClientRequestCO) throws ApiException {
        ApiResponse<CreateCardClientResponseVO> resp = createClientCardUsingPostWithHttpInfo(cardClientRequestCO);
        return resp.getData();
    }

    /**
     * Create a card client
     * 
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @return ApiResponse&lt;CreateCardClientResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateCardClientResponseVO> createClientCardUsingPostWithHttpInfo(CardClientRequestCO cardClientRequestCO) throws ApiException {
        com.squareup.okhttp.Call call = createClientCardUsingPostValidateBeforeCall(cardClientRequestCO, null, null);
        Type localVarReturnType = new TypeToken<CreateCardClientResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a card client (asynchronously)
     * 
     * @param cardClientRequestCO cardClientRequestCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClientCardUsingPostAsync(CardClientRequestCO cardClientRequestCO, final ApiCallback<CreateCardClientResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClientCardUsingPostValidateBeforeCall(cardClientRequestCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateCardClientResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCardReserveAccountDetailsUsingGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCardReserveAccountDetailsUsingGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/reserve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCardReserveAccountDetailsUsingGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getCardReserveAccountDetailsUsingGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Card reserve account
     * 
     * @return CardReserveAccountResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardReserveAccountResponseVO getCardReserveAccountDetailsUsingGet() throws ApiException {
        ApiResponse<CardReserveAccountResponseVO> resp = getCardReserveAccountDetailsUsingGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Card reserve account
     * 
     * @return ApiResponse&lt;CardReserveAccountResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardReserveAccountResponseVO> getCardReserveAccountDetailsUsingGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCardReserveAccountDetailsUsingGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<CardReserveAccountResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Card reserve account (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCardReserveAccountDetailsUsingGetAsync(final ApiCallback<CardReserveAccountResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCardReserveAccountDetailsUsingGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardReserveAccountResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCardSpendingControlUsingPut
     * @param nucleusSpendingControlId nucleus_spending_control_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCardSpendingControlUsingPutCall(UUID nucleusSpendingControlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/spending_control/{nucleus_spending_control_id}"
            .replaceAll("\\{" + "nucleus_spending_control_id" + "\\}", apiClient.escapeString(nucleusSpendingControlId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCardSpendingControlUsingPutValidateBeforeCall(UUID nucleusSpendingControlId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusSpendingControlId' is set
        if (nucleusSpendingControlId == null) {
            throw new ApiException("Missing the required parameter 'nucleusSpendingControlId' when calling updateCardSpendingControlUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCardSpendingControlUsingPutCall(nucleusSpendingControlId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a card spending control
     * 
     * @param nucleusSpendingControlId nucleus_spending_control_id (required)
     * @return CardSpendingControlResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CardSpendingControlResponseVO updateCardSpendingControlUsingPut(UUID nucleusSpendingControlId) throws ApiException {
        ApiResponse<CardSpendingControlResponseVO> resp = updateCardSpendingControlUsingPutWithHttpInfo(nucleusSpendingControlId);
        return resp.getData();
    }

    /**
     * Update a card spending control
     * 
     * @param nucleusSpendingControlId nucleus_spending_control_id (required)
     * @return ApiResponse&lt;CardSpendingControlResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CardSpendingControlResponseVO> updateCardSpendingControlUsingPutWithHttpInfo(UUID nucleusSpendingControlId) throws ApiException {
        com.squareup.okhttp.Call call = updateCardSpendingControlUsingPutValidateBeforeCall(nucleusSpendingControlId, null, null);
        Type localVarReturnType = new TypeToken<CardSpendingControlResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a card spending control (asynchronously)
     * 
     * @param nucleusSpendingControlId nucleus_spending_control_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCardSpendingControlUsingPutAsync(UUID nucleusSpendingControlId, final ApiCallback<CardSpendingControlResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCardSpendingControlUsingPutValidateBeforeCall(nucleusSpendingControlId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CardSpendingControlResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateClientCardUsingPut
     * @param nucleusClientId nucleus_client_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClientCardUsingPutCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/card/client/{nucleus_client_id}"
            .replaceAll("\\{" + "nucleus_client_id" + "\\}", apiClient.escapeString(nucleusClientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClientCardUsingPutValidateBeforeCall(UUID nucleusClientId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nucleusClientId' is set
        if (nucleusClientId == null) {
            throw new ApiException("Missing the required parameter 'nucleusClientId' when calling updateClientCardUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClientCardUsingPutCall(nucleusClientId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a card client
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return UpdateCardClientResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateCardClientResponseVO updateClientCardUsingPut(UUID nucleusClientId) throws ApiException {
        ApiResponse<UpdateCardClientResponseVO> resp = updateClientCardUsingPutWithHttpInfo(nucleusClientId);
        return resp.getData();
    }

    /**
     * Update a card client
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @return ApiResponse&lt;UpdateCardClientResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateCardClientResponseVO> updateClientCardUsingPutWithHttpInfo(UUID nucleusClientId) throws ApiException {
        com.squareup.okhttp.Call call = updateClientCardUsingPutValidateBeforeCall(nucleusClientId, null, null);
        Type localVarReturnType = new TypeToken<UpdateCardClientResponseVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a card client (asynchronously)
     * 
     * @param nucleusClientId nucleus_client_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClientCardUsingPutAsync(UUID nucleusClientId, final ApiCallback<UpdateCardClientResponseVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClientCardUsingPutValidateBeforeCall(nucleusClientId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateCardClientResponseVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
