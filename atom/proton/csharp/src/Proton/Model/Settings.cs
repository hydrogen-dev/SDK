/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// Settings
    /// </summary>
    [DataContract]
    public partial class Settings :  IEquatable<Settings>, IValidatableObject
    {
        /// <summary>
        /// Defines TaxEfficiencyId
        /// </summary>
        public enum TaxEfficiencyIdEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            
            NUMBER_4 = 4
        }

        /// <summary>
        /// Gets or Sets TaxEfficiencyId
        /// </summary>
        [DataMember(Name="tax_efficiency_id", EmitDefaultValue=false)]
        public TaxEfficiencyIdEnum? TaxEfficiencyId { get; set; }
        /// <summary>
        /// Defines RebalancePeriod
        /// </summary>
        public enum RebalancePeriodEnum
        {
            
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            
            NUMBER_0 = 0,
            
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            
            NUMBER_1 = 1,
            
            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            
            NUMBER_2 = 2,
            
            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            
            NUMBER_3 = 3,
            
            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            
            NUMBER_4 = 4
        }

        /// <summary>
        /// Gets or Sets RebalancePeriod
        /// </summary>
        [DataMember(Name="rebalance_period", EmitDefaultValue=false)]
        public RebalancePeriodEnum? RebalancePeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Settings" /> class.
        /// </summary>
        /// <param name="defaultDriftFactor">defaultDriftFactor.</param>
        /// <param name="driftRebal">driftRebal.</param>
        /// <param name="downside">downside.</param>
        /// <param name="taxEfficiencyId">taxEfficiencyId.</param>
        /// <param name="periodRebal">periodRebal.</param>
        /// <param name="rebalancePeriod">rebalancePeriod.</param>
        public Settings(float? defaultDriftFactor = default(float?), bool? driftRebal = default(bool?), bool? downside = default(bool?), TaxEfficiencyIdEnum? taxEfficiencyId = default(TaxEfficiencyIdEnum?), bool? periodRebal = default(bool?), RebalancePeriodEnum? rebalancePeriod = default(RebalancePeriodEnum?))
        {
            this.DefaultDriftFactor = defaultDriftFactor;
            this.DriftRebal = driftRebal;
            this.Downside = downside;
            this.TaxEfficiencyId = taxEfficiencyId;
            this.PeriodRebal = periodRebal;
            this.RebalancePeriod = rebalancePeriod;
        }
        
        /// <summary>
        /// Gets or Sets DefaultDriftFactor
        /// </summary>
        [DataMember(Name="default_drift_factor", EmitDefaultValue=false)]
        public float? DefaultDriftFactor { get; set; }

        /// <summary>
        /// Gets or Sets DriftRebal
        /// </summary>
        [DataMember(Name="drift_rebal", EmitDefaultValue=false)]
        public bool? DriftRebal { get; set; }

        /// <summary>
        /// Gets or Sets Downside
        /// </summary>
        [DataMember(Name="downside", EmitDefaultValue=false)]
        public bool? Downside { get; set; }


        /// <summary>
        /// Gets or Sets PeriodRebal
        /// </summary>
        [DataMember(Name="period_rebal", EmitDefaultValue=false)]
        public bool? PeriodRebal { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Settings {\n");
            sb.Append("  DefaultDriftFactor: ").Append(DefaultDriftFactor).Append("\n");
            sb.Append("  DriftRebal: ").Append(DriftRebal).Append("\n");
            sb.Append("  Downside: ").Append(Downside).Append("\n");
            sb.Append("  TaxEfficiencyId: ").Append(TaxEfficiencyId).Append("\n");
            sb.Append("  PeriodRebal: ").Append(PeriodRebal).Append("\n");
            sb.Append("  RebalancePeriod: ").Append(RebalancePeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Settings);
        }

        /// <summary>
        /// Returns true if Settings instances are equal
        /// </summary>
        /// <param name="input">Instance of Settings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Settings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultDriftFactor == input.DefaultDriftFactor ||
                    (this.DefaultDriftFactor != null &&
                    this.DefaultDriftFactor.Equals(input.DefaultDriftFactor))
                ) && 
                (
                    this.DriftRebal == input.DriftRebal ||
                    (this.DriftRebal != null &&
                    this.DriftRebal.Equals(input.DriftRebal))
                ) && 
                (
                    this.Downside == input.Downside ||
                    (this.Downside != null &&
                    this.Downside.Equals(input.Downside))
                ) && 
                (
                    this.TaxEfficiencyId == input.TaxEfficiencyId ||
                    (this.TaxEfficiencyId != null &&
                    this.TaxEfficiencyId.Equals(input.TaxEfficiencyId))
                ) && 
                (
                    this.PeriodRebal == input.PeriodRebal ||
                    (this.PeriodRebal != null &&
                    this.PeriodRebal.Equals(input.PeriodRebal))
                ) && 
                (
                    this.RebalancePeriod == input.RebalancePeriod ||
                    (this.RebalancePeriod != null &&
                    this.RebalancePeriod.Equals(input.RebalancePeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultDriftFactor != null)
                    hashCode = hashCode * 59 + this.DefaultDriftFactor.GetHashCode();
                if (this.DriftRebal != null)
                    hashCode = hashCode * 59 + this.DriftRebal.GetHashCode();
                if (this.Downside != null)
                    hashCode = hashCode * 59 + this.Downside.GetHashCode();
                if (this.TaxEfficiencyId != null)
                    hashCode = hashCode * 59 + this.TaxEfficiencyId.GetHashCode();
                if (this.PeriodRebal != null)
                    hashCode = hashCode * 59 + this.PeriodRebal.GetHashCode();
                if (this.RebalancePeriod != null)
                    hashCode = hashCode * 59 + this.RebalancePeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DefaultDriftFactor (float?) minimum
            if(this.DefaultDriftFactor < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DefaultDriftFactor, must be a value greater than or equal to 0.", new [] { "DefaultDriftFactor" });
            }

            yield break;
        }
    }

}
