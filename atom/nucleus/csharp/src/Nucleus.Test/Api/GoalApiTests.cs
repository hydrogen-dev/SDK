/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing GoalApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GoalApiTests
    {
        private GoalApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GoalApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GoalApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GoalApi
            //Assert.IsInstanceOfType(typeof(GoalApi), instance, "instance is a GoalApi");
        }

        
        /// <summary>
        /// Test CreateGoalTrackUsingPost
        /// </summary>
        [Test]
        public void CreateGoalTrackUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalTrack goalTrack = null;
            //var response = instance.CreateGoalTrackUsingPost(goalTrack);
            //Assert.IsInstanceOf<GoalTrack> (response, "response is GoalTrack");
        }
        
        /// <summary>
        /// Test CreateGoalUsingPost
        /// </summary>
        [Test]
        public void CreateGoalUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Goal goalRequest = null;
            //var response = instance.CreateGoalUsingPost(goalRequest);
            //Assert.IsInstanceOf<Goal> (response, "response is Goal");
        }
        
        /// <summary>
        /// Test DeleteGoalTrackUsingDelete
        /// </summary>
        [Test]
        public void DeleteGoalTrackUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? goalTrackId = null;
            //instance.DeleteGoalTrackUsingDelete(goalTrackId);
            
        }
        
        /// <summary>
        /// Test DeleteGoalUsingDelete
        /// </summary>
        [Test]
        public void DeleteGoalUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? goalId = null;
            //instance.DeleteGoalUsingDelete(goalId);
            
        }
        
        /// <summary>
        /// Test GetGoalAllUsingGet
        /// </summary>
        [Test]
        public void GetGoalAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetGoalAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageGoal> (response, "response is PageGoal");
        }
        
        /// <summary>
        /// Test GetGoalAssetSizeAllUsingGet
        /// </summary>
        [Test]
        public void GetGoalAssetSizeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //Guid? goalId = null;
            //string currencyConversion = null;
            //DateTime? endDate = null;
            //bool? getLatest = null;
            //bool? portfolioGoal = null;
            //string sortType = null;
            //DateTime? startDate = null;
            //var response = instance.GetGoalAssetSizeAllUsingGet(clientId, goalId, currencyConversion, endDate, getLatest, portfolioGoal, sortType, startDate);
            //Assert.IsInstanceOf<List<AvailableDateDoubleVO>> (response, "response is List<AvailableDateDoubleVO>");
        }
        
        /// <summary>
        /// Test GetGoalHoldingAllUsingGet
        /// </summary>
        [Test]
        public void GetGoalHoldingAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //Guid? goalId = null;
            //bool? ascending = null;
            //string currencyConversion = null;
            //DateTime? endDate = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //bool? portfolioGoal = null;
            //int? size = null;
            //DateTime? startDate = null;
            //var response = instance.GetGoalHoldingAllUsingGet(clientId, goalId, ascending, currencyConversion, endDate, filter, orderBy, page, portfolioGoal, size, startDate);
            //Assert.IsInstanceOf<PagePortfolioHoldingAgg> (response, "response is PagePortfolioHoldingAgg");
        }
        
        /// <summary>
        /// Test GetGoalTrackAllUsingGet
        /// </summary>
        [Test]
        public void GetGoalTrackAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string endDate = null;
            //string filter = null;
            //bool? getLatest = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //string startDate = null;
            //var response = instance.GetGoalTrackAllUsingGet(ascending, endDate, filter, getLatest, orderBy, page, size, startDate);
            //Assert.IsInstanceOf<PageGoalTrack> (response, "response is PageGoalTrack");
        }
        
        /// <summary>
        /// Test GetGoalTrackUsingGet
        /// </summary>
        [Test]
        public void GetGoalTrackUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? goalTrackId = null;
            //var response = instance.GetGoalTrackUsingGet(goalTrackId);
            //Assert.IsInstanceOf<GoalTrack> (response, "response is GoalTrack");
        }
        
        /// <summary>
        /// Test GetGoalTransactionAllUsingGet
        /// </summary>
        [Test]
        public void GetGoalTransactionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //Guid? goalId = null;
            //bool? ascending = null;
            //string currencyConversion = null;
            //DateTime? endDate = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //bool? portfolioGoal = null;
            //int? size = null;
            //DateTime? startDate = null;
            //var response = instance.GetGoalTransactionAllUsingGet(clientId, goalId, ascending, currencyConversion, endDate, filter, orderBy, page, portfolioGoal, size, startDate);
            //Assert.IsInstanceOf<PagePortfolioTransaction> (response, "response is PagePortfolioTransaction");
        }
        
        /// <summary>
        /// Test GetGoalUsingGet
        /// </summary>
        [Test]
        public void GetGoalUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? goalId = null;
            //var response = instance.GetGoalUsingGet(goalId);
            //Assert.IsInstanceOf<Goal> (response, "response is Goal");
        }
        
        /// <summary>
        /// Test UpdateGoalTrackUsingPut
        /// </summary>
        [Test]
        public void UpdateGoalTrackUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object goalTrack = null;
            //Guid? goalTrackId = null;
            //var response = instance.UpdateGoalTrackUsingPut(goalTrack, goalTrackId);
            //Assert.IsInstanceOf<GoalTrack> (response, "response is GoalTrack");
        }
        
        /// <summary>
        /// Test UpdateGoalUsingPut
        /// </summary>
        [Test]
        public void UpdateGoalUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object goal = null;
            //Guid? goalId = null;
            //var response = instance.UpdateGoalUsingPut(goal, goalId);
            //Assert.IsInstanceOf<Goal> (response, "response is Goal");
        }
        
    }

}
