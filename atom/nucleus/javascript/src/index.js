/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'api/AuthApi', 'model/Account', 'model/AccountAllocationMapping', 'model/AccountPermissionVO',
      'model/AccountPortfolioRebalanceRequest', 'model/AccountStatus', 'model/AccountType', 'model/AclClientPermissionVO',
      'model/AggregationAccount', 'model/AggregationAccountBalance', 'model/AggregationAccountHolding',
      'model/AggregationAccountTransaction', 'model/Allocation', 'model/AllocationAggregatedVO', 'model/AllocationComposition',
      'model/AllocationCompositionAggregatedVO', 'model/AllocationCompositionModelHoldingsVO', 'model/AllocationNodeMap', 'model/Answer',
      'model/AnswerMap', 'model/Application', 'model/AuditLog', 'model/AvailableDateDoubleVO', 'model/BankCredit', 'model/BankLink',
      'model/Benchmark', 'model/BenchmarkComposition', 'model/Brokers', 'model/Budget', 'model/BudgetAggregationAccount', 'model/BudgetObject',
      'model/BulkTransaction', 'model/BulkTransactionVO', 'model/Business', 'model/BusinessAddress', 'model/Card', 'model/CardAddress',
      'model/CardBalanceVO', 'model/CardDetailsVO', 'model/CardProgram', 'model/Cash', 'model/Check', 'model/CheckImages', 'model/Client',
      'model/ClientAccountMapping', 'model/ClientAddress', 'model/ClientCardVO', 'model/ClientRelationship',
      'model/ClientResponse', 'model/ClientStatus', 'model/ClientTotalCardBalanceVO', 'model/ClientViewGoalData', 'model/Country', 'model/Currency',
      'model/DateDoubleVO', 'model/DecisionTree', 'model/DecisionTreeCO', 'model/DecisionTreeResultVO', 'model/Document', 'model/Employment',
      'model/ExternalAccountTransfer', 'model/Feature', 'model/FeatureTrack', 'model/Funding', 'model/FundingTransaction', 'model/FxRate',
      'model/FxRateView', 'model/Goal', 'model/GoalAccountMapping', 'model/GoalTrack', 'model/GoalTrackAccounts', 'model/Household',
      'model/Institution', 'model/Investment', 'model/JsonNode', 'model/Location', 'model/MXMerchantRes', 'model/Member',
      'model/MerchantCategoryCode', 'model/Model', 'model/ModelAssetSize', 'model/ModelComment', 'model/ModelHolding', 'model/ModelHoldingVO',
      'model/ModelTransaction', 'model/Node', 'model/NodeRelationship', 'model/Notification', 'model/NotificationClient',
      'model/NotificationSetting', 'model/Order', 'model/OrderBulk', 'model/OrderReconcileRequest', 'model/OrderReconcileReturnObject',
      'model/OrderStatus', 'model/OrderTrack', 'model/OrderVoClone',  'model/Ownership', 'model/PageAccount', 'model/PageAccountAllocationMapping',
      'model/PageAccountPermissionVO', 'model/PageAccountStatus', 'model/PageAccountType', 'model/PageAggregationAccount',
      'model/PageAggregationAccountBalance', 'model/PageAggregationAccountHolding', 'model/PageAggregationAccountTransaction', 'model/PageAllocation',
      'model/PageAllocationComposition', 'model/PageAnswer', 'model/PageApplication', 'model/PageAuditLog', 'model/PageBankLink', 'model/PageBenchmark',
      'model/PageBudget', 'model/PageBusiness', 'model/PageCard', 'model/PageCardProgram', 'model/PageClient', 'model/PageClientCardVO', 'model/PageClientResponse'
      , 'model/PageClientStatus', 'model/PageDecisionTree', 'model/PageDocument', 'model/PageExternalAccountTransfer', 'model/PageFeature',
      'model/PageFeatureTrack',  'model/PageFunding', 'model/PageFundingTransaction', 'model/PageGoal', 'model/PageGoalTrack', 'model/PageHousehold',
      'model/PageInstitution', 'model/PageMXMerchantRes', 'model/PageModel', 'model/PageModelAssetSize', 'model/PageModelComment', 'model/PageModelHolding',
      'model/PageModelTransaction', 'model/PageNode', 'model/PageNodeRelationship', 'model/PageNotification', 'model/PageNotificationClient',
      'model/PageNotificationSetting', 'model/PageOrder', 'model/PageOrderBulk', 'model/PageOrderStatus', 'model/PageOrderTrack',
       'model/PagePortfolio', 'model/PagePortfolioAssetSizeLog', 'model/PagePortfolioComment', 'model/PagePortfolioGoal',
      'model/PagePortfolioHoldingAgg', 'model/PagePortfolioHoldingLog', 'model/PagePortfolioTransaction', 'model/PageQuestion', 'model/PageQuestionnaire',
      'model/PageReasonCode', 'model/PageRiskProfile', 'model/PageScore', 'model/PageSecurity', 'model/PageSecurityExclusion', 'model/PageSecurityPrice',
      'model/PageSpendingControl', 'model/PageStage', 'model/PageTransactionCode', 'model/PageWebhook', 'model/Pageable', 'model/PermissionVO', 'model/Portfolio',
      'model/PortfolioAssetSizeLog', 'model/PortfolioComment', 'model/PortfolioGoal', 'model/PortfolioGoalMap', 'model/PortfolioHoldingAgg',
      'model/PortfolioHoldingLog', 'model/PortfolioTransaction', 'model/Question', 'model/Questionnaire', 'model/ReasonCode', 'model/RiskProfile',
      'model/Score', 'model/SecuritiesComposition', 'model/SecuritiesCountry', 'model/Security', 'model/SecurityCompositionVO', 'model/SecurityCountryVO',
      'model/SecurityExclusion', 'model/SecurityPrice', 'model/Sort', 'model/SpendingControl', 'model/Stage', 'model/State', 'model/StatisticResourceVO', 'model/TokenDateRequest', 'model/TransactionCode', 'model/VAccountVO', 'model/VClientGoalViewData', 'model/VPortfolioVO', 'model/Webhook',
      'api/AccountApi', 'api/AggregationAccountApi', 'api/AllocationApi', 'api/BenchmarkApi', 'api/BudgetApi', 'api/BulkApi', 'api/BusinessApi', 'api/CardApi', 'api/ClientApi',
      'api/DecisionTreeApi', 'api/DocumentApi', 'api/FundingApi', 'api/GoalApi', 'api/HouseholdApi',
      'api/ModelApi', 'api/OrderApi', 'api/PortfolioApi', 'api/QuestionnaireApi', 'api/ResourceApi', 'api/RiskProfileApi',
      'api/ScoreApi', 'api/SecuritiesApi', 'api/SpendingControlApi', 'api/UtilsApi', 'api/WebhookApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./api/AuthApi'), require('./model/Account'), require('./model/AccountAllocationMapping'),
         require('./model/AccountPermissionVO'), require('./model/AccountPortfolioRebalanceRequest'), require('./model/AccountStatus'),
        require('./model/AccountType'), require('./model/AclClientPermissionVO'), require('./model/AggregationAccount'),
        require('./model/AggregationAccountBalance'), require('./model/AggregationAccountHolding'), require('./model/AggregationAccountTransaction'),
        require('./model/Allocation'), require('./model/AllocationAggregatedVO'), require('./model/AllocationComposition'),
        require('./model/AllocationCompositionAggregatedVO'), require('./model/AllocationCompositionModelHoldingsVO'), require('./model/AllocationNodeMap'),
        require('./model/Answer'), require('./model/AnswerMap'), require('./model/Application'), require('./model/AuditLog'), require('./model/AvailableDateDoubleVO'),
        require('./model/BankCredit'), require('./model/BankLink'), require('./model/Benchmark'), require('./model/BenchmarkComposition'),
        require('./model/Brokers'), require('./model/Budget'), require('./model/BudgetAggregationAccount'), require('./model/BudgetObject'),
        require('./model/BulkTransaction'), require('./model/BulkTransactionVO'), require('./model/Business'), require('./model/BusinessAddress'),
        require('./model/Card'), require('./model/CardAddress'), require('./model/CardBalanceVO'), require('./model/CardDetailsVO'),
        require('./model/CardProgram'), require('./model/Cash'),  require('./model/Check'), require('./model/CheckImages'), require('./model/Client'),
        require('./model/ClientAccountMapping'), require('./model/ClientAddress'), require('./model/ClientCardVO'),
        require('./model/ClientRelationship'), require('./model/ClientResponse'), require('./model/ClientStatus'), require('./model/ClientTotalCardBalanceVO'),
        require('./model/ClientViewGoalData'), require('./model/Country'), require('./model/Currency'), require('./model/DateDoubleVO'),
        require('./model/DecisionTree'), require('./model/DecisionTreeCO'), require('./model/DecisionTreeResultVO'), require('./model/Document'),
        require('./model/Employment'), require('./model/ExternalAccountTransfer'), require('./model/Feature'), require('./model/FeatureTrack'),
        require('./model/Funding'), require('./model/FundingTransaction'), require('./model/FxRate'), require('./model/FxRateView'), require('./model/Goal'),
        require('./model/GoalAccountMapping'), require('./model/GoalTrack'), require('./model/GoalTrackAccounts'), require('./model/Household'),
        require('./model/Institution'), require('./model/Investment'), require('./model/JsonNode'), require('./model/Location'),
        require('./model/MXMerchantRes'), require('./model/Member'), require('./model/MerchantCategoryCode'),  require('./model/Model'),
        require('./model/ModelAssetSize'), require('./model/ModelComment'), require('./model/ModelHolding'), require('./model/ModelHoldingVO'),
        require('./model/ModelTransaction'), require('./model/Node'), require('./model/NodeRelationship'), require('./model/Notification'),
        require('./model/NotificationClient'), require('./model/NotificationSetting'), require('./model/Order'), require('./model/OrderBulk'),
        require('./model/OrderReconcileRequest'), require('./model/OrderReconcileReturnObject'), require('./model/OrderStatus'), require('./model/OrderTrack'),
        require('./model/OrderVoClone'),  require('./model/Ownership'), require('./model/PageAccount'), require('./model/PageAccountAllocationMapping'),
        require('./model/PageAccountPermissionVO'), require('./model/PageAccountStatus'), require('./model/PageAccountType'),
        require('./model/PageAggregationAccount'), require('./model/PageAggregationAccountBalance'), require('./model/PageAggregationAccountHolding'),
        require('./model/PageAggregationAccountTransaction'), require('./model/PageAllocation'), require('./model/PageAllocationComposition'),
        require('./model/PageAnswer'), require('./model/PageApplication'), require('./model/PageAuditLog'), require('./model/PageBankLink'),
        require('./model/PageBenchmark'), require('./model/PageBudget'), require('./model/PageBusiness'), require('./model/PageCard'),
        require('./model/PageCardProgram'), require('./model/PageClient'), require('./model/PageClientCardVO'), require('./model/PageClientResponse'),
        require('./model/PageClientStatus'), require('./model/PageDecisionTree'), require('./model/PageDocument'), require('./model/PageExternalAccountTransfer'),
        require('./model/PageFeature'), require('./model/PageFeatureTrack'), require('./model/PageFunding'), require('./model/PageFundingTransaction'),
        require('./model/PageGoal'), require('./model/PageGoalTrack'), require('./model/PageHousehold'), require('./model/PageInstitution'),
        require('./model/PageMXMerchantRes'), require('./model/PageModel'), require('./model/PageModelAssetSize'), require('./model/PageModelComment'),
        require('./model/PageModelHolding'), require('./model/PageModelTransaction'), require('./model/PageNode'), require('./model/PageNodeRelationship'),
        require('./model/PageNotification'), require('./model/PageNotificationClient'), require('./model/PageNotificationSetting'), require('./model/PageOrder'),
        require('./model/PageOrderBulk'), require('./model/PageOrderStatus'), require('./model/PageOrderTrack'),
        require('./model/PagePortfolio'), require('./model/PagePortfolioAssetSizeLog'), require('./model/PagePortfolioComment'),
        require('./model/PagePortfolioGoal'), require('./model/PagePortfolioHoldingAgg'), require('./model/PagePortfolioHoldingLog'),
        require('./model/PagePortfolioTransaction'), require('./model/PageQuestion'), require('./model/PageQuestionnaire'),
        require('./model/PageReasonCode'), require('./model/PageRiskProfile'), require('./model/PageScore'), require('./model/PageSecurity'), require('./model/PageSecurityExclusion'), require('./model/PageSecurityPrice'), require('./model/PageSpendingControl'), require('./model/PageStage'), require('./model/PageTransactionCode'), require('./model/PageWebhook'), require('./model/Pageable'), require('./model/PermissionVO'), require('./model/Portfolio'), require('./model/PortfolioAssetSizeLog'), require('./model/PortfolioComment'), require('./model/PortfolioGoal'), require('./model/PortfolioGoalMap'), require('./model/PortfolioHoldingAgg'), require('./model/PortfolioHoldingLog'), require('./model/PortfolioTransaction'), require('./model/Question'), require('./model/Questionnaire'), require('./model/ReasonCode'), require('./model/RiskProfile'), require('./model/Roundup'), require('./model/RoundupCO'), require('./model/RoundupSettings'), require('./model/Score'), require('./model/SecuritiesComposition'), require('./model/SecuritiesCountry'), require('./model/Security'), require('./model/SecurityCompositionVO'), require('./model/SecurityCountryVO'), require('./model/SecurityExclusion'), require('./model/SecurityPrice'), require('./model/Sort'), require('./model/SpendingControl'), require('./model/Stage'), require('./model/Stat'), require('./model/State'), require('./model/StatisticResourceVO'), require('./model/TokenDateRequest'), require('./model/TransactionCode'), require('./model/VAccountVO'), require('./model/VClientGoalViewData'), require('./model/VPortfolioVO'), require('./model/Webhook'),
        require('./api/AccountApi'), require('./api/AggregationAccountApi'), require('./api/AllocationApi'),
        require('./api/BenchmarkApi'), require('./api/BudgetApi'), require('./api/BulkApi'), require('./api/BusinessApi'), require('./api/CardApi'),
        require('./api/ClientApi'), require('./api/DecisionTreeApi'), require('./api/DocumentApi'), require('./api/FundingApi'), require('./api/GoalApi'),
        require('./api/HouseholdApi'), require('./api/ModelApi'), require('./api/OrderApi'), require('./api/PortfolioApi'), require('./api/QuestionnaireApi'),
        require('./api/ResourceApi'), require('./api/RiskProfileApi'), require('./api/ScoreApi'), require('./api/SecuritiesApi'), require('./api/SpendingControlApi'),
        require('./api/UtilsApi'), require('./api/WebhookApi'));
  }
}(function(ApiClient, AuthApi, Account, AccountAllocationMapping, AccountPermissionVO, AccountPortfolioRebalanceRequest, AccountStatus, AccountType,
           AclClientPermissionVO, AggregationAccount, AggregationAccountBalance, AggregationAccountHolding, AggregationAccountTransaction,
           Allocation, AllocationAggregatedVO, AllocationComposition, AllocationCompositionAggregatedVO, AllocationCompositionModelHoldingsVO, AllocationNodeMap,
           Answer, AnswerMap, Application, AuditLog, AvailableDateDoubleVO, BankCredit, BankLink, Benchmark, BenchmarkComposition, Brokers, Budget,
           BudgetAggregationAccount, BudgetObject, BulkTransaction, BulkTransactionVO, Business, BusinessAddress, Card, CardAddress, CardBalanceVO,
           CardDetailsVO, CardProgram, Cash, Check, CheckImages, Client, ClientAccountMapping, ClientAddress, ClientCardVO, ClientRelationship,
           ClientResponse, ClientStatus, ClientTotalCardBalanceVO, ClientViewGoalData, Country, Currency, DateDoubleVO, DecisionTree, DecisionTreeCO,
           DecisionTreeResultVO, Document, Employment, ExternalAccountTransfer, Feature, FeatureTrack, Funding, FundingTransaction, FxRate, FxRateView, Goal,
           GoalAccountMapping, GoalTrack, GoalTrackAccounts, Household, Institution, Investment, JsonNode, Location, MXMerchantRes, Member, MerchantCategoryCode,
           Model, ModelAssetSize, ModelComment, ModelHolding, ModelHoldingVO, ModelTransaction, Node, NodeRelationship, Notification, NotificationClient,
           NotificationSetting, Order, OrderBulk, OrderReconcileRequest, OrderReconcileReturnObject, OrderStatus, OrderTrack, OrderVoClone,
           Ownership, PageAccount, PageAccountAllocationMapping, PageAccountPermissionVO, PageAccountStatus, PageAccountType,
           PageAggregationAccount, PageAggregationAccountBalance, PageAggregationAccountHolding, PageAggregationAccountTransaction, PageAllocation,
           PageAllocationComposition, PageAnswer, PageApplication, PageAuditLog, PageBankLink, PageBenchmark, PageBudget, PageBusiness, PageCard,
           PageCardProgram, PageClient, PageClientCardVO, PageClientResponse, PageClientStatus, PageDecisionTree, PageDocument, PageExternalAccountTransfer,
           PageFeature, PageFeatureTrack, PageFunding, PageFundingTransaction, PageGoal, PageGoalTrack, PageHousehold, PageInstitution,
           PageMXMerchantRes, PageModel, PageModelAssetSize, PageModelComment, PageModelHolding, PageModelTransaction, PageNode, PageNodeRelationship,
           PageNotification, PageNotificationClient, PageNotificationSetting, PageOrder, PageOrderBulk, PageOrderStatus, PageOrderTrack,
           PagePortfolio, PagePortfolioAssetSizeLog, PagePortfolioComment, PagePortfolioGoal, PagePortfolioHoldingAgg, PagePortfolioHoldingLog,
           PagePortfolioTransaction, PageQuestion, PageQuestionnaire, PageReasonCode, PageRiskProfile, PageScore, PageSecurity, PageSecurityExclusion,
           PageSecurityPrice, PageSpendingControl, PageStage, PageTransactionCode, PageWebhook, Pageable, PermissionVO, Portfolio, PortfolioAssetSizeLog,
           PortfolioComment, PortfolioGoal, PortfolioGoalMap, PortfolioHoldingAgg, PortfolioHoldingLog, PortfolioTransaction, Question, Questionnaire,
           ReasonCode, RiskProfile, Score, SecuritiesComposition, SecuritiesCountry, Security, SecurityCompositionVO, SecurityCountryVO, SecurityExclusion,
           SecurityPrice, Sort, SpendingControl, Stage, State, StatisticResourceVO, TokenDateRequest, TransactionCode, VAccountVO, VClientGoalViewData,
           VPortfolioVO, Webhook, AccountApi, AggregationAccountApi, AllocationApi, BenchmarkApi, BudgetApi, BulkApi, BusinessApi, CardApi,
           ClientApi, DecisionTreeApi, DocumentApi, FundingApi, GoalApi, HouseholdApi, ModelApi, OrderApi, PortfolioApi, QuestionnaireApi, ResourceApi,
           RiskProfileApi, ScoreApi, SecuritiesApi, SpendingControlApi, UtilsApi, WebhookApi) {
  'use strict';

  /**
   * The_Hydrogen_Nucleus_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var HydrogenNucleusApi = require('index'); // See note below*.
   * var xxxSvc = new HydrogenNucleusApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new HydrogenNucleusApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new HydrogenNucleusApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new HydrogenNucleusApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.9.5
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,

    /**
     * The AuthApi constructor.
     * @property {module:api/AuthApi}
     */
    AuthApi: AuthApi,

    /**
     * The Account model constructor.
     * @property {module:model/Account}
     */
    Account: Account,
    /**
     * The AccountAllocationMapping model constructor.
     * @property {module:model/AccountAllocationMapping}
     */
    AccountAllocationMapping: AccountAllocationMapping,
    /**
     * The AccountPermissionVO model constructor.
     * @property {module:model/AccountPermissionVO}
     */
    AccountPermissionVO: AccountPermissionVO,
    /**
     * The AccountPortfolioRebalanceRequest model constructor.
     * @property {module:model/AccountPortfolioRebalanceRequest}
     */
    AccountPortfolioRebalanceRequest: AccountPortfolioRebalanceRequest,
    /**
     * The AccountStatus model constructor.
     * @property {module:model/AccountStatus}
     */
    AccountStatus: AccountStatus,
    /**
     * The AccountType model constructor.
     * @property {module:model/AccountType}
     */
    AccountType: AccountType,
    /**
     * The AclClientPermissionVO model constructor.
     * @property {module:model/AclClientPermissionVO}
     */
    AclClientPermissionVO: AclClientPermissionVO,
    /**
     * The AggregationAccount model constructor.
     * @property {module:model/AggregationAccount}
     */
    AggregationAccount: AggregationAccount,
    /**
     * The AggregationAccountBalance model constructor.
     * @property {module:model/AggregationAccountBalance}
     */
    AggregationAccountBalance: AggregationAccountBalance,
    /**
     * The AggregationAccountHolding model constructor.
     * @property {module:model/AggregationAccountHolding}
     */
    AggregationAccountHolding: AggregationAccountHolding,
    /**
     * The AggregationAccountTransaction model constructor.
     * @property {module:model/AggregationAccountTransaction}
     */
    AggregationAccountTransaction: AggregationAccountTransaction,
    /**
     * The Allocation model constructor.
     * @property {module:model/Allocation}
     */
    Allocation: Allocation,
    /**
     * The AllocationAggregatedVO model constructor.
     * @property {module:model/AllocationAggregatedVO}
     */
    AllocationAggregatedVO: AllocationAggregatedVO,
    /**
     * The AllocationComposition model constructor.
     * @property {module:model/AllocationComposition}
     */
    AllocationComposition: AllocationComposition,
    /**
     * The AllocationCompositionAggregatedVO model constructor.
     * @property {module:model/AllocationCompositionAggregatedVO}
     */
    AllocationCompositionAggregatedVO: AllocationCompositionAggregatedVO,
    /**
     * The AllocationCompositionModelHoldingsVO model constructor.
     * @property {module:model/AllocationCompositionModelHoldingsVO}
     */
    AllocationCompositionModelHoldingsVO: AllocationCompositionModelHoldingsVO,
    /**
     * The AllocationNodeMap model constructor.
     * @property {module:model/AllocationNodeMap}
     */
    AllocationNodeMap: AllocationNodeMap,
    /**
     * The Answer model constructor.
     * @property {module:model/Answer}
     */
    Answer: Answer,
    /**
     * The AnswerMap model constructor.
     * @property {module:model/AnswerMap}
     */
    AnswerMap: AnswerMap,
    /**
     * The Application model constructor.
     * @property {module:model/Application}
     */
    Application: Application,
    /**
     * The AuditLog model constructor.
     * @property {module:model/AuditLog}
     */
    AuditLog: AuditLog,
    /**
     * The AvailableDateDoubleVO model constructor.
     * @property {module:model/AvailableDateDoubleVO}
     */
    AvailableDateDoubleVO: AvailableDateDoubleVO,
    /**
     * The BankCredit model constructor.
     * @property {module:model/BankCredit}
     */
    BankCredit: BankCredit,
    /**
     * The BankLink model constructor.
     * @property {module:model/BankLink}
     */
    BankLink: BankLink,
    /**
     * The Benchmark model constructor.
     * @property {module:model/Benchmark}
     */
    Benchmark: Benchmark,
    /**
     * The BenchmarkComposition model constructor.
     * @property {module:model/BenchmarkComposition}
     */
    BenchmarkComposition: BenchmarkComposition,
    /**
     * The Brokers model constructor.
     * @property {module:model/Brokers}
     */
    Brokers: Brokers,
    /**
     * The Budget model constructor.
     * @property {module:model/Budget}
     */
    Budget: Budget,
    /**
     * The BudgetAggregationAccount model constructor.
     * @property {module:model/BudgetAggregationAccount}
     */
    BudgetAggregationAccount: BudgetAggregationAccount,
    /**
     * The BudgetObject model constructor.
     * @property {module:model/BudgetObject}
     */
    BudgetObject: BudgetObject,
    /**
     * The BulkTransaction model constructor.
     * @property {module:model/BulkTransaction}
     */
    BulkTransaction: BulkTransaction,
    /**
     * The BulkTransactionVO model constructor.
     * @property {module:model/BulkTransactionVO}
     */
    BulkTransactionVO: BulkTransactionVO,
    /**
     * The Business model constructor.
     * @property {module:model/Business}
     */
    Business: Business,
    /**
     * The BusinessAddress model constructor.
     * @property {module:model/BusinessAddress}
     */
    BusinessAddress: BusinessAddress,
    /**
     * The Card model constructor.
     * @property {module:model/Card}
     */
    Card: Card,
    /**
     * The CardAddress model constructor.
     * @property {module:model/CardAddress}
     */
    CardAddress: CardAddress,
    /**
     * The CardBalanceVO model constructor.
     * @property {module:model/CardBalanceVO}
     */
    CardBalanceVO: CardBalanceVO,
    /**
     * The CardDetailsVO model constructor.
     * @property {module:model/CardDetailsVO}
     */
    CardDetailsVO: CardDetailsVO,
    /**
     * The CardProgram model constructor.
     * @property {module:model/CardProgram}
     */
    CardProgram: CardProgram,
    /**
     * The Cash model constructor.
     * @property {module:model/Cash}
     */
    Cash: Cash,
    /**
     * The CategoriesMap model constructor.
     * @property {module:model/CategoriesMap}
     */
    CategoriesMap: CategoriesMap,
    /**
     * The Check model constructor.
     * @property {module:model/Check}
     */
    Check: Check,
    /**
     * The CheckImages model constructor.
     * @property {module:model/CheckImages}
     */
    CheckImages: CheckImages,
    /**
     * The Client model constructor.
     * @property {module:model/Client}
     */
    Client: Client,
    /**
     * The ClientAccountMapping model constructor.
     * @property {module:model/ClientAccountMapping}
     */
    ClientAccountMapping: ClientAccountMapping,
    /**
     * The ClientAddress model constructor.
     * @property {module:model/ClientAddress}
     */
    ClientAddress: ClientAddress,
    /**
     * The ClientCardVO model constructor.
     * @property {module:model/ClientCardVO}
     */
    ClientCardVO: ClientCardVO,
    /**
     * The ClientRelationship model constructor.
     * @property {module:model/ClientRelationship}
     */
    ClientRelationship: ClientRelationship,
    /**
     * The ClientResponse model constructor.
     * @property {module:model/ClientResponse}
     */
    ClientResponse: ClientResponse,
    /**
     * The ClientStatus model constructor.
     * @property {module:model/ClientStatus}
     */
    ClientStatus: ClientStatus,
    /**
     * The ClientTotalCardBalanceVO model constructor.
     * @property {module:model/ClientTotalCardBalanceVO}
     */
    ClientTotalCardBalanceVO: ClientTotalCardBalanceVO,
    /**
     * The ClientViewGoalData model constructor.
     * @property {module:model/ClientViewGoalData}
     */
    ClientViewGoalData: ClientViewGoalData,
    /**
     * The Country model constructor.
     * @property {module:model/Country}
     */
    Country: Country,
    /**
     * The Currency model constructor.
     * @property {module:model/Currency}
     */
    Currency: Currency,
    /**
     * The DateDoubleVO model constructor.
     * @property {module:model/DateDoubleVO}
     */
    DateDoubleVO: DateDoubleVO,
    /**
     * The DecisionTree model constructor.
     * @property {module:model/DecisionTree}
     */
    DecisionTree: DecisionTree,
    /**
     * The DecisionTreeCO model constructor.
     * @property {module:model/DecisionTreeCO}
     */
    DecisionTreeCO: DecisionTreeCO,
    /**
     * The DecisionTreeResultVO model constructor.
     * @property {module:model/DecisionTreeResultVO}
     */
    DecisionTreeResultVO: DecisionTreeResultVO,
    /**
     * The Document model constructor.
     * @property {module:model/Document}
     */
    Document: Document,
    /**
     * The Employment model constructor.
     * @property {module:model/Employment}
     */
    Employment: Employment,
    /**
     * The ExternalAccountTransfer model constructor.
     * @property {module:model/ExternalAccountTransfer}
     */
    ExternalAccountTransfer: ExternalAccountTransfer,
    /**
     * The Feature model constructor.
     * @property {module:model/Feature}
     */
    Feature: Feature,
    /**
     * The FeatureTrack model constructor.
     * @property {module:model/FeatureTrack}
     */
    FeatureTrack: FeatureTrack,
    /**
     * The Funding model constructor.
     * @property {module:model/Funding}
     */
    Funding: Funding,
    /**
     * The FundingRequestMap model constructor.
     * @property {module:model/FundingRequestMap}
     */
    FundingRequestMap: FundingRequestMap,
    /**
     * The FundingTransaction model constructor.
     * @property {module:model/FundingTransaction}
     */
    FundingTransaction: FundingTransaction,
    /**
     * The FxRate model constructor.
     * @property {module:model/FxRate}
     */
    FxRate: FxRate,
    /**
     * The FxRateView model constructor.
     * @property {module:model/FxRateView}
     */
    FxRateView: FxRateView,
    /**
     * The Goal model constructor.
     * @property {module:model/Goal}
     */
    Goal: Goal,
    /**
     * The GoalAccountMapping model constructor.
     * @property {module:model/GoalAccountMapping}
     */
    GoalAccountMapping: GoalAccountMapping,
    /**
     * The GoalTrack model constructor.
     * @property {module:model/GoalTrack}
     */
    GoalTrack: GoalTrack,
    /**
     * The GoalTrackAccounts model constructor.
     * @property {module:model/GoalTrackAccounts}
     */
    GoalTrackAccounts: GoalTrackAccounts,
    /**
     * The Household model constructor.
     * @property {module:model/Household}
     */
    Household: Household,
    /**
     * The Institution model constructor.
     * @property {module:model/Institution}
     */
    Institution: Institution,
    /**
     * The Investment model constructor.
     * @property {module:model/Investment}
     */
    Investment: Investment,
    /**
     * The JsonNode model constructor.
     * @property {module:model/JsonNode}
     */
    JsonNode: JsonNode,
    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location: Location,
    /**
     * The MXMerchantRes model constructor.
     * @property {module:model/MXMerchantRes}
     */
    MXMerchantRes: MXMerchantRes,
    /**
     * The Member model constructor.
     * @property {module:model/Member}
     */
    Member: Member,
    /**
     * The MerchantCategoryCode model constructor.
     * @property {module:model/MerchantCategoryCode}
     */
    MerchantCategoryCode: MerchantCategoryCode,
    /**
     * The Model model constructor.
     * @property {module:model/Model}
     */
    Model: Model,
    /**
     * The ModelAssetSize model constructor.
     * @property {module:model/ModelAssetSize}
     */
    ModelAssetSize: ModelAssetSize,
    /**
     * The ModelComment model constructor.
     * @property {module:model/ModelComment}
     */
    ModelComment: ModelComment,
    /**
     * The ModelHolding model constructor.
     * @property {module:model/ModelHolding}
     */
    ModelHolding: ModelHolding,
    /**
     * The ModelHoldingVO model constructor.
     * @property {module:model/ModelHoldingVO}
     */
    ModelHoldingVO: ModelHoldingVO,
    /**
     * The ModelTransaction model constructor.
     * @property {module:model/ModelTransaction}
     */
    ModelTransaction: ModelTransaction,
    /**
     * The Node model constructor.
     * @property {module:model/Node}
     */
    Node: Node,
    /**
     * The NodeRelationship model constructor.
     * @property {module:model/NodeRelationship}
     */
    NodeRelationship: NodeRelationship,
    /**
     * The Notification model constructor.
     * @property {module:model/Notification}
     */
    Notification: Notification,
    /**
     * The NotificationClient model constructor.
     * @property {module:model/NotificationClient}
     */
    NotificationClient: NotificationClient,
    /**
     * The NotificationSetting model constructor.
     * @property {module:model/NotificationSetting}
     */
    NotificationSetting: NotificationSetting,
    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order: Order,
    /**
     * The OrderBulk model constructor.
     * @property {module:model/OrderBulk}
     */
    OrderBulk: OrderBulk,
    /**
     * The OrderReconcileRequest model constructor.
     * @property {module:model/OrderReconcileRequest}
     */
    OrderReconcileRequest: OrderReconcileRequest,
    /**
     * The OrderReconcileReturnObject model constructor.
     * @property {module:model/OrderReconcileReturnObject}
     */
    OrderReconcileReturnObject: OrderReconcileReturnObject,
    /**
     * The OrderStatus model constructor.
     * @property {module:model/OrderStatus}
     */
    OrderStatus: OrderStatus,
    /**
     * The OrderTrack model constructor.
     * @property {module:model/OrderTrack}
     */
    OrderTrack: OrderTrack,
    /**
     * The OrderVoClone model constructor.
     * @property {module:model/OrderVoClone}
     */
    OrderVoClone: OrderVoClone,
    /**
     * The Ownership model constructor.
     * @property {module:model/Ownership}
     */
    Ownership: Ownership,
    /**
     * The PageAccount model constructor.
     * @property {module:model/PageAccount}
     */
    PageAccount: PageAccount,
    /**
     * The PageAccountAllocationMapping model constructor.
     * @property {module:model/PageAccountAllocationMapping}
     */
    PageAccountAllocationMapping: PageAccountAllocationMapping,
    /**
     * The PageAccountPermissionVO model constructor.
     * @property {module:model/PageAccountPermissionVO}
     */
    PageAccountPermissionVO: PageAccountPermissionVO,
    /**
     * The PageAccountStatus model constructor.
     * @property {module:model/PageAccountStatus}
     */
    PageAccountStatus: PageAccountStatus,
    /**
     * The PageAccountType model constructor.
     * @property {module:model/PageAccountType}
     */
    PageAccountType: PageAccountType,
    /**
     * The PageAggregationAccount model constructor.
     * @property {module:model/PageAggregationAccount}
     */
    PageAggregationAccount: PageAggregationAccount,
    /**
     * The PageAggregationAccountBalance model constructor.
     * @property {module:model/PageAggregationAccountBalance}
     */
    PageAggregationAccountBalance: PageAggregationAccountBalance,
    /**
     * The PageAggregationAccountHolding model constructor.
     * @property {module:model/PageAggregationAccountHolding}
     */
    PageAggregationAccountHolding: PageAggregationAccountHolding,
    /**
     * The PageAggregationAccountTransaction model constructor.
     * @property {module:model/PageAggregationAccountTransaction}
     */
    PageAggregationAccountTransaction: PageAggregationAccountTransaction,
    /**
     * The PageAllocation model constructor.
     * @property {module:model/PageAllocation}
     */
    PageAllocation: PageAllocation,
    /**
     * The PageAllocationComposition model constructor.
     * @property {module:model/PageAllocationComposition}
     */
    PageAllocationComposition: PageAllocationComposition,
    /**
     * The PageAnswer model constructor.
     * @property {module:model/PageAnswer}
     */
    PageAnswer: PageAnswer,
    /**
     * The PageApplication model constructor.
     * @property {module:model/PageApplication}
     */
    PageApplication: PageApplication,
    /**
     * The PageAuditLog model constructor.
     * @property {module:model/PageAuditLog}
     */
    PageAuditLog: PageAuditLog,
    /**
     * The PageBankLink model constructor.
     * @property {module:model/PageBankLink}
     */
    PageBankLink: PageBankLink,
    /**
     * The PageBenchmark model constructor.
     * @property {module:model/PageBenchmark}
     */
    PageBenchmark: PageBenchmark,
    /**
     * The PageBudget model constructor.
     * @property {module:model/PageBudget}
     */
    PageBudget: PageBudget,
    /**
     * The PageBusiness model constructor.
     * @property {module:model/PageBusiness}
     */
    PageBusiness: PageBusiness,
    /**
     * The PageCard model constructor.
     * @property {module:model/PageCard}
     */
    PageCard: PageCard,
    /**
     * The PageCardProgram model constructor.
     * @property {module:model/PageCardProgram}
     */
    PageCardProgram: PageCardProgram,
    /**
     * The PageClient model constructor.
     * @property {module:model/PageClient}
     */
    PageClient: PageClient,
    /**
     * The PageClientCardVO model constructor.
     * @property {module:model/PageClientCardVO}
     */
    PageClientCardVO: PageClientCardVO,
    /**
     * The PageClientResponse model constructor.
     * @property {module:model/PageClientResponse}
     */
    PageClientResponse: PageClientResponse,
    /**
     * The PageClientStatus model constructor.
     * @property {module:model/PageClientStatus}
     */
    PageClientStatus: PageClientStatus,
    /**
     * The PageDecisionTree model constructor.
     * @property {module:model/PageDecisionTree}
     */
    PageDecisionTree: PageDecisionTree,
    /**
     * The PageDocument model constructor.
     * @property {module:model/PageDocument}
     */
    PageDocument: PageDocument,
    /**
     * The PageExternalAccountTransfer model constructor.
     * @property {module:model/PageExternalAccountTransfer}
     */
    PageExternalAccountTransfer: PageExternalAccountTransfer,
    /**
     * The PageFeature model constructor.
     * @property {module:model/PageFeature}
     */
    PageFeature: PageFeature,
    /**
     * The PageFeatureTrack model constructor.
     * @property {module:model/PageFeatureTrack}
     */
    PageFeatureTrack: PageFeatureTrack,
    /**
     * The PageFunding model constructor.
     * @property {module:model/PageFunding}
     */
    PageFunding: PageFunding,
    /**
     * The PageFundingTransaction model constructor.
     * @property {module:model/PageFundingTransaction}
     */
    PageFundingTransaction: PageFundingTransaction,
    /**
     * The PageGoal model constructor.
     * @property {module:model/PageGoal}
     */
    PageGoal: PageGoal,
    /**
     * The PageGoalTrack model constructor.
     * @property {module:model/PageGoalTrack}
     */
    PageGoalTrack: PageGoalTrack,
    /**
     * The PageHousehold model constructor.
     * @property {module:model/PageHousehold}
     */
    PageHousehold: PageHousehold,
    /**
     * The PageInstitution model constructor.
     * @property {module:model/PageInstitution}
     */
    PageInstitution: PageInstitution,
    /**
     * The PageMXMerchantRes model constructor.
     * @property {module:model/PageMXMerchantRes}
     */
    PageMXMerchantRes: PageMXMerchantRes,
    /**
     * The PageModel model constructor.
     * @property {module:model/PageModel}
     */
    PageModel: PageModel,
    /**
     * The PageModelAssetSize model constructor.
     * @property {module:model/PageModelAssetSize}
     */
    PageModelAssetSize: PageModelAssetSize,
    /**
     * The PageModelComment model constructor.
     * @property {module:model/PageModelComment}
     */
    PageModelComment: PageModelComment,
    /**
     * The PageModelHolding model constructor.
     * @property {module:model/PageModelHolding}
     */
    PageModelHolding: PageModelHolding,
    /**
     * The PageModelTransaction model constructor.
     * @property {module:model/PageModelTransaction}
     */
    PageModelTransaction: PageModelTransaction,
    /**
     * The PageNode model constructor.
     * @property {module:model/PageNode}
     */
    PageNode: PageNode,
    /**
     * The PageNodeRelationship model constructor.
     * @property {module:model/PageNodeRelationship}
     */
    PageNodeRelationship: PageNodeRelationship,
    /**
     * The PageNotification model constructor.
     * @property {module:model/PageNotification}
     */
    PageNotification: PageNotification,
    /**
     * The PageNotificationClient model constructor.
     * @property {module:model/PageNotificationClient}
     */
    PageNotificationClient: PageNotificationClient,
    /**
     * The PageNotificationSetting model constructor.
     * @property {module:model/PageNotificationSetting}
     */
    PageNotificationSetting: PageNotificationSetting,
    /**
     * The PageOrder model constructor.
     * @property {module:model/PageOrder}
     */
    PageOrder: PageOrder,
    /**
     * The PageOrderBulk model constructor.
     * @property {module:model/PageOrderBulk}
     */
    PageOrderBulk: PageOrderBulk,
    /**
     * The PageOrderStatus model constructor.
     * @property {module:model/PageOrderStatus}
     */
    PageOrderStatus: PageOrderStatus,
    /**
     * The PageOrderTrack model constructor.
     * @property {module:model/PageOrderTrack}
     */
    PageOrderTrack: PageOrderTrack,
    /**
     * The PagePortfolio model constructor.
     * @property {module:model/PagePortfolio}
     */
    PagePortfolio: PagePortfolio,
    /**
     * The PagePortfolioAssetSizeLog model constructor.
     * @property {module:model/PagePortfolioAssetSizeLog}
     */
    PagePortfolioAssetSizeLog: PagePortfolioAssetSizeLog,
    /**
     * The PagePortfolioComment model constructor.
     * @property {module:model/PagePortfolioComment}
     */
    PagePortfolioComment: PagePortfolioComment,
    /**
     * The PagePortfolioGoal model constructor.
     * @property {module:model/PagePortfolioGoal}
     */
    PagePortfolioGoal: PagePortfolioGoal,
    /**
     * The PagePortfolioHoldingAgg model constructor.
     * @property {module:model/PagePortfolioHoldingAgg}
     */
    PagePortfolioHoldingAgg: PagePortfolioHoldingAgg,
    /**
     * The PagePortfolioHoldingLog model constructor.
     * @property {module:model/PagePortfolioHoldingLog}
     */
    PagePortfolioHoldingLog: PagePortfolioHoldingLog,
    /**
     * The PagePortfolioTransaction model constructor.
     * @property {module:model/PagePortfolioTransaction}
     */
    PagePortfolioTransaction: PagePortfolioTransaction,
    /**
     * The PageQuestion model constructor.
     * @property {module:model/PageQuestion}
     */
    PageQuestion: PageQuestion,
    /**
     * The PageQuestionnaire model constructor.
     * @property {module:model/PageQuestionnaire}
     */
    PageQuestionnaire: PageQuestionnaire,
    /**
     * The PageReasonCode model constructor.
     * @property {module:model/PageReasonCode}
     */
    PageReasonCode: PageReasonCode,
    /**
     * The PageRiskProfile model constructor.
     * @property {module:model/PageRiskProfile}
     */
    PageRiskProfile: PageRiskProfile,
    /**
     * The PageScore model constructor.
     * @property {module:model/PageScore}
     */
    PageScore: PageScore,
    /**
     * The PageSecurity model constructor.
     * @property {module:model/PageSecurity}
     */
    PageSecurity: PageSecurity,
    /**
     * The PageSecurityExclusion model constructor.
     * @property {module:model/PageSecurityExclusion}
     */
    PageSecurityExclusion: PageSecurityExclusion,
    /**
     * The PageSecurityPrice model constructor.
     * @property {module:model/PageSecurityPrice}
     */
    PageSecurityPrice: PageSecurityPrice,
    /**
     * The PageSpendingControl model constructor.
     * @property {module:model/PageSpendingControl}
     */
    PageSpendingControl: PageSpendingControl,
    /**
     * The PageStage model constructor.
     * @property {module:model/PageStage}
     */
    PageStage: PageStage,
    /**
     * The PageTransactionCode model constructor.
     * @property {module:model/PageTransactionCode}
     */
    PageTransactionCode: PageTransactionCode,
    /**
     * The PageWebhook model constructor.
     * @property {module:model/PageWebhook}
     */
    PageWebhook: PageWebhook,
    /**
     * The Pageable model constructor.
     * @property {module:model/Pageable}
     */
    Pageable: Pageable,
    /**
     * The PermissionVO model constructor.
     * @property {module:model/PermissionVO}
     */
    PermissionVO: PermissionVO,
    /**
     * The Portfolio model constructor.
     * @property {module:model/Portfolio}
     */
    Portfolio: Portfolio,
    /**
     * The PortfolioAssetSizeLog model constructor.
     * @property {module:model/PortfolioAssetSizeLog}
     */
    PortfolioAssetSizeLog: PortfolioAssetSizeLog,
    /**
     * The PortfolioComment model constructor.
     * @property {module:model/PortfolioComment}
     */
    PortfolioComment: PortfolioComment,
    /**
     * The PortfolioGoal model constructor.
     * @property {module:model/PortfolioGoal}
     */
    PortfolioGoal: PortfolioGoal,
    /**
     * The PortfolioGoalMap model constructor.
     * @property {module:model/PortfolioGoalMap}
     */
    PortfolioGoalMap: PortfolioGoalMap,
    /**
     * The PortfolioHoldingAgg model constructor.
     * @property {module:model/PortfolioHoldingAgg}
     */
    PortfolioHoldingAgg: PortfolioHoldingAgg,
    /**
     * The PortfolioHoldingLog model constructor.
     * @property {module:model/PortfolioHoldingLog}
     */
    PortfolioHoldingLog: PortfolioHoldingLog,
    /**
     * The PortfolioTransaction model constructor.
     * @property {module:model/PortfolioTransaction}
     */
    PortfolioTransaction: PortfolioTransaction,
    /**
     * The Question model constructor.
     * @property {module:model/Question}
     */
    Question: Question,
    /**
     * The Questionnaire model constructor.
     * @property {module:model/Questionnaire}
     */
    Questionnaire: Questionnaire,
    /**
     * The ReasonCode model constructor.
     * @property {module:model/ReasonCode}
     */
    ReasonCode: ReasonCode,
    /**
     * The RiskProfile model constructor.
     * @property {module:model/RiskProfile}
     */
    RiskProfile: RiskProfile,
    /**
     * The Score model constructor.
     * @property {module:model/Score}
     */
    Score: Score,
    /**
     * The SecuritiesComposition model constructor.
     * @property {module:model/SecuritiesComposition}
     */
    SecuritiesComposition: SecuritiesComposition,
    /**
     * The SecuritiesCountry model constructor.
     * @property {module:model/SecuritiesCountry}
     */
    SecuritiesCountry: SecuritiesCountry,
    /**
     * The Security model constructor.
     * @property {module:model/Security}
     */
    Security: Security,
    /**
     * The SecurityCompositionVO model constructor.
     * @property {module:model/SecurityCompositionVO}
     */
    SecurityCompositionVO: SecurityCompositionVO,
    /**
     * The SecurityCountryVO model constructor.
     * @property {module:model/SecurityCountryVO}
     */
    SecurityCountryVO: SecurityCountryVO,
    /**
     * The SecurityExclusion model constructor.
     * @property {module:model/SecurityExclusion}
     */
    SecurityExclusion: SecurityExclusion,
    /**
     * The SecurityPrice model constructor.
     * @property {module:model/SecurityPrice}
     */
    SecurityPrice: SecurityPrice,
    /**
     * The Sort model constructor.
     * @property {module:model/Sort}
     */
    Sort: Sort,
    /**
     * The SpendingControl model constructor.
     * @property {module:model/SpendingControl}
     */
    SpendingControl: SpendingControl,
    /**
     * The Stage model constructor.
     * @property {module:model/Stage}
     */
    Stage: Stage,
    /**
     * The State model constructor.
     * @property {module:model/State}
     */
    State: State,
    /**
     * The StatisticResourceVO model constructor.
     * @property {module:model/StatisticResourceVO}
     */
    StatisticResourceVO: StatisticResourceVO,
    /**
     * The TokenDateRequest model constructor.
     * @property {module:model/TokenDateRequest}
     */
    TokenDateRequest: TokenDateRequest,
    /**
     * The TransactionCode model constructor.
     * @property {module:model/TransactionCode}
     */
    TransactionCode: TransactionCode,
    /**
     * The VAccountVO model constructor.
     * @property {module:model/VAccountVO}
     */
    VAccountVO: VAccountVO,
    /**
     * The VClientGoalViewData model constructor.
     * @property {module:model/VClientGoalViewData}
     */
    VClientGoalViewData: VClientGoalViewData,
    /**
     * The VPortfolioVO model constructor.
     * @property {module:model/VPortfolioVO}
     */
    VPortfolioVO: VPortfolioVO,
    /**
     * The Webhook model constructor.
     * @property {module:model/Webhook}
     */
    Webhook: Webhook,
    /**
     * The AccountApi service constructor.
     * @property {module:api/AccountApi}
     */
    AccountApi: AccountApi,
    /**
     * The AggregationAccountApi service constructor.
     * @property {module:api/AggregationAccountApi}
     */
    AggregationAccountApi: AggregationAccountApi,
    /**
     * The AllocationApi service constructor.
     * @property {module:api/AllocationApi}
     */
    AllocationApi: AllocationApi,
    /**
     * The BenchmarkApi service constructor.
     * @property {module:api/BenchmarkApi}
     */
    BenchmarkApi: BenchmarkApi,
    /**
     * The BudgetApi service constructor.
     * @property {module:api/BudgetApi}
     */
    BudgetApi: BudgetApi,
    /**
     * The BulkApi service constructor.
     * @property {module:api/BulkApi}
     */
    BulkApi: BulkApi,
    /**
     * The BusinessApi service constructor.
     * @property {module:api/BusinessApi}
     */
    BusinessApi: BusinessApi,
    /**
     * The CardApi service constructor.
     * @property {module:api/CardApi}
     */
    CardApi: CardApi,
    /**
     * The ClientApi service constructor.
     * @property {module:api/ClientApi}
     */
    ClientApi: ClientApi,
    /**
     * The DecisionTreeApi service constructor.
     * @property {module:api/DecisionTreeApi}
     */
    DecisionTreeApi: DecisionTreeApi,
    /**
     * The DocumentApi service constructor.
     * @property {module:api/DocumentApi}
     */
    DocumentApi: DocumentApi,
    /**
     * The FundingApi service constructor.
     * @property {module:api/FundingApi}
     */
    FundingApi: FundingApi,
    /**
     * The GoalApi service constructor.
     * @property {module:api/GoalApi}
     */
    GoalApi: GoalApi,
    /**
     * The HouseholdApi service constructor.
     * @property {module:api/HouseholdApi}
     */
    HouseholdApi: HouseholdApi,
    /**
     * The ModelApi service constructor.
     * @property {module:api/ModelApi}
     */
    ModelApi: ModelApi,
    /**
     * The OrderApi service constructor.
     * @property {module:api/OrderApi}
     */
    OrderApi: OrderApi,
    /**
     * The PortfolioApi service constructor.
     * @property {module:api/PortfolioApi}
     */
    PortfolioApi: PortfolioApi,
    /**
     * The QuestionnaireApi service constructor.
     * @property {module:api/QuestionnaireApi}
     */
    QuestionnaireApi: QuestionnaireApi,
    /**
     * The ResourceApi service constructor.
     * @property {module:api/ResourceApi}
     */
    ResourceApi: ResourceApi,
    /**
     * The RiskProfileApi service constructor.
     * @property {module:api/RiskProfileApi}
     */
    RiskProfileApi: RiskProfileApi,
    /**
     * The ScoreApi service constructor.
     * @property {module:api/ScoreApi}
     */
    ScoreApi: ScoreApi,
    /**
     * The SecuritiesApi service constructor.
     * @property {module:api/SecuritiesApi}
     */
    SecuritiesApi: SecuritiesApi,
    /**
     * The SpendingControlApi service constructor.
     * @property {module:api/SpendingControlApi}
     */
    SpendingControlApi: SpendingControlApi,
    /**
     * The UtilsApi service constructor.
     * @property {module:api/UtilsApi}
     */
    UtilsApi: UtilsApi,
    /**
     * The WebhookApi service constructor.
     * @property {module:api/WebhookApi}
     */
    WebhookApi: WebhookApi
  };

  return exports;
}));
