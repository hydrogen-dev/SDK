/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Business Details Mapping Object
    /// </summary>
    [DataContract]
    public partial class BusinessDetailsVO :  IEquatable<BusinessDetailsVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessDetailsVO" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="businessId">businessId.</param>
        /// <param name="dbaName">dbaName.</param>
        /// <param name="email">email.</param>
        /// <param name="legalName">legalName.</param>
        /// <param name="website">website.</param>
        public BusinessDetailsVO(List<BusinessAddress> address = default(List<BusinessAddress>), Guid? businessId = default(Guid?), string dbaName = default(string), string email = default(string), string legalName = default(string), string website = default(string))
        {
            this.Address = address;
            this.BusinessId = businessId;
            this.DbaName = dbaName;
            this.Email = email;
            this.LegalName = legalName;
            this.Website = website;
        }
        
        /// <summary>
        /// address
        /// </summary>
        /// <value>address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public List<BusinessAddress> Address { get; set; }

        /// <summary>
        /// businessId
        /// </summary>
        /// <value>businessId</value>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// dbaName
        /// </summary>
        /// <value>dbaName</value>
        [DataMember(Name="dba_name", EmitDefaultValue=false)]
        public string DbaName { get; set; }

        /// <summary>
        /// email
        /// </summary>
        /// <value>email</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// legalName
        /// </summary>
        /// <value>legalName</value>
        [DataMember(Name="legal_name", EmitDefaultValue=false)]
        public string LegalName { get; set; }

        /// <summary>
        /// website
        /// </summary>
        /// <value>website</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessDetailsVO {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  DbaName: ").Append(DbaName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessDetailsVO);
        }

        /// <summary>
        /// Returns true if BusinessDetailsVO instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessDetailsVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessDetailsVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    this.Address != null &&
                    this.Address.SequenceEqual(input.Address)
                ) && 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.DbaName == input.DbaName ||
                    (this.DbaName != null &&
                    this.DbaName.Equals(input.DbaName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.DbaName != null)
                    hashCode = hashCode * 59 + this.DbaName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
