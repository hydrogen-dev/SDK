/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.AccountAllocationPayload = factory(root.atom_api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The AccountAllocationPayload model module.
   * @module model/AccountAllocationPayload
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>AccountAllocationPayload</code>.
   * @alias module:model/AccountAllocationPayload
   * @class
   * @param allocationId {String} The ID of the allocation that is part of the account-allocation mapping
   * @param currentWeight {Number} Current percentage of the account’s total value that should be directed towards the allocation; ex. 20 representing 20%. The current weights for all allocations below an account must add up to 100. If the allocation is the only one, enter 100
   * @param strategicWeight {Number} Strategic percentage of the account’s total value that should be directed towards the allocation; ex. 20 representing 20%. The strategic weights for all allocations below an account must add up to 100. If the allocation is the only one, enter 100
   * @param accountId {String} The ID of the account that is part of the account-allocation mapping
   * @param _date {Date} Date of the account-allocation mapping used for historical tracking
   */
  var exports = function(allocationId, currentWeight, strategicWeight, accountId, _date) {
    var _this = this;

    _this['allocation_id'] = allocationId;
    _this['current_weight'] = currentWeight;
    _this['strategic_weight'] = strategicWeight;
    _this['account_id'] = accountId;
    _this['date'] = _date;

  };

  /**
   * Constructs a <code>AccountAllocationPayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountAllocationPayload} obj Optional instance to populate.
   * @return {module:model/AccountAllocationPayload} The populated <code>AccountAllocationPayload</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('allocation_id')) {
        obj['allocation_id'] = ApiClient.convertToType(data['allocation_id'], 'String');
      }
      if (data.hasOwnProperty('current_weight')) {
        obj['current_weight'] = ApiClient.convertToType(data['current_weight'], 'Number');
      }
      if (data.hasOwnProperty('strategic_weight')) {
        obj['strategic_weight'] = ApiClient.convertToType(data['strategic_weight'], 'Number');
      }
      if (data.hasOwnProperty('account_id')) {
        obj['account_id'] = ApiClient.convertToType(data['account_id'], 'String');
      }
      if (data.hasOwnProperty('date')) {
        obj['date'] = ApiClient.convertToType(data['date'], 'Date');
      }
      if (data.hasOwnProperty('goal_id')) {
        obj['goal_id'] = ApiClient.convertToType(data['goal_id'], 'String');
      }
    }
    return obj;
  }

  /**
   * The ID of the allocation that is part of the account-allocation mapping
   * @member {String} allocation_id
   */
  exports.prototype['allocation_id'] = undefined;
  /**
   * Current percentage of the account’s total value that should be directed towards the allocation; ex. 20 representing 20%. The current weights for all allocations below an account must add up to 100. If the allocation is the only one, enter 100
   * @member {Number} current_weight
   */
  exports.prototype['current_weight'] = undefined;
  /**
   * Strategic percentage of the account’s total value that should be directed towards the allocation; ex. 20 representing 20%. The strategic weights for all allocations below an account must add up to 100. If the allocation is the only one, enter 100
   * @member {Number} strategic_weight
   */
  exports.prototype['strategic_weight'] = undefined;
  /**
   * The ID of the account that is part of the account-allocation mapping
   * @member {String} account_id
   */
  exports.prototype['account_id'] = undefined;
  /**
   * Date of the account-allocation mapping used for historical tracking
   * @member {Date} date
   */
  exports.prototype['date'] = undefined;
  /**
   * The ID of the goal that is associated with this account-allocation mapping
   * @member {String} goal_id
   */
  exports.prototype['goal_id'] = undefined;



  return exports;
}));


