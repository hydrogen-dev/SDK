# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.education_config import EducationConfig  # noqa: F401,E501


class ChildrenEducationConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_age': 'int',
        'education_config': 'list[EducationConfig]'
    }

    attribute_map = {
        'current_age': 'current_age',
        'education_config': 'education_config'
    }

    def __init__(self, current_age=None, education_config=None):  # noqa: E501
        """ChildrenEducationConfig - a model defined in Swagger"""  # noqa: E501

        self._current_age = None
        self._education_config = None
        self.discriminator = None

        self.current_age = current_age
        self.education_config = education_config

    @property
    def current_age(self):
        """Gets the current_age of this ChildrenEducationConfig.  # noqa: E501

        The current age  # noqa: E501

        :return: The current_age of this ChildrenEducationConfig.  # noqa: E501
        :rtype: int
        """
        return self._current_age

    @current_age.setter
    def current_age(self, current_age):
        """Sets the current_age of this ChildrenEducationConfig.

        The current age  # noqa: E501

        :param current_age: The current_age of this ChildrenEducationConfig.  # noqa: E501
        :type: int
        """
        if current_age is None:
            raise ValueError("Invalid value for `current_age`, must not be `None`")  # noqa: E501
        if current_age is not None and current_age < 0:  # noqa: E501
            raise ValueError("Invalid value for `current_age`, must be a value greater than or equal to `0`")  # noqa: E501

        self._current_age = current_age

    @property
    def education_config(self):
        """Gets the education_config of this ChildrenEducationConfig.  # noqa: E501

        The education configuration  # noqa: E501

        :return: The education_config of this ChildrenEducationConfig.  # noqa: E501
        :rtype: list[EducationConfig]
        """
        return self._education_config

    @education_config.setter
    def education_config(self, education_config):
        """Sets the education_config of this ChildrenEducationConfig.

        The education configuration  # noqa: E501

        :param education_config: The education_config of this ChildrenEducationConfig.  # noqa: E501
        :type: list[EducationConfig]
        """
        if education_config is None:
            raise ValueError("Invalid value for `education_config`, must not be `None`")  # noqa: E501

        self._education_config = education_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChildrenEducationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChildrenEducationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
