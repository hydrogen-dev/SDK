/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// CardTransactionAuthorizationRequest
    /// </summary>
    [DataContract]
    public partial class CardTransactionAuthorizationRequest :  IEquatable<CardTransactionAuthorizationRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines TransactionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            
            /// <summary>
            /// Enum Atmwithdrawal for value: atm_withdrawal
            /// </summary>
            [EnumMember(Value = "atm_withdrawal")]
            Atmwithdrawal = 1,
            
            /// <summary>
            /// Enum Purchase for value: purchase
            /// </summary>
            [EnumMember(Value = "purchase")]
            Purchase = 2,
            
            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 3
        }

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name="transaction_type", EmitDefaultValue=false)]
        public TransactionTypeEnum TransactionType { get; set; }
        /// <summary>
        /// Defines AuthType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthTypeEnum
        {
            
            /// <summary>
            /// Enum Spendingcontrol for value: spending_control
            /// </summary>
            [EnumMember(Value = "spending_control")]
            Spendingcontrol = 1
        }


        /// <summary>
        /// Gets or Sets AuthType
        /// </summary>
        [DataMember(Name="auth_type", EmitDefaultValue=false)]
        public List<AuthTypeEnum> AuthType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardTransactionAuthorizationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardTransactionAuthorizationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardTransactionAuthorizationRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode (required).</param>
        /// <param name="memo">memo (default to &quot;null&quot;).</param>
        /// <param name="partialAuth">partialAuth (default to false).</param>
        /// <param name="transactionType">transactionType (required).</param>
        /// <param name="description">description (default to &quot;null&quot;).</param>
        /// <param name="transactionCategoryId">transactionCategoryId.</param>
        /// <param name="useAuditLog">useAuditLog (default to false).</param>
        /// <param name="merchantCategoryCode">merchantCategoryCode.</param>
        /// <param name="cardId">cardId (required).</param>
        /// <param name="transactionCategory">transactionCategory (default to &quot;null&quot;).</param>
        /// <param name="cleanseData">cleanseData (default to false).</param>
        /// <param name="authType">authType.</param>
        /// <param name="mid">mid (default to &quot;null&quot;).</param>
        /// <param name="transactionStatusScope">transactionStatusScope.</param>
        /// <param name="location">location.</param>
        /// <param name="merchant">merchant (default to &quot;null&quot;).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="date">date (required).</param>
        /// <param name="merchantId">merchantId.</param>
        public CardTransactionAuthorizationRequest(string currencyCode = default(string), string memo = "null", bool? partialAuth = false, TransactionTypeEnum transactionType = default(TransactionTypeEnum), string description = "null", Guid? transactionCategoryId = default(Guid?), bool? useAuditLog = false, string merchantCategoryCode = default(string), Guid? cardId = default(Guid?), string transactionCategory = "null", bool? cleanseData = false, List<AuthTypeEnum> authType = default(List<AuthTypeEnum>), string mid = "null", List<string> transactionStatusScope = default(List<string>), Location location = default(Location), string merchant = "null", float? amount = default(float?), DateTime? date = default(DateTime?), Guid? merchantId = default(Guid?))
        {
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for CardTransactionAuthorizationRequest and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "transactionType" is required (not null)
            if (transactionType == null)
            {
                throw new InvalidDataException("transactionType is a required property for CardTransactionAuthorizationRequest and cannot be null");
            }
            else
            {
                this.TransactionType = transactionType;
            }
            // to ensure "cardId" is required (not null)
            if (cardId == null)
            {
                throw new InvalidDataException("cardId is a required property for CardTransactionAuthorizationRequest and cannot be null");
            }
            else
            {
                this.CardId = cardId;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for CardTransactionAuthorizationRequest and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for CardTransactionAuthorizationRequest and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // use default value if no "memo" provided
            if (memo == null)
            {
                this.Memo = "null";
            }
            else
            {
                this.Memo = memo;
            }
            // use default value if no "partialAuth" provided
            if (partialAuth == null)
            {
                this.PartialAuth = false;
            }
            else
            {
                this.PartialAuth = partialAuth;
            }
            // use default value if no "description" provided
            if (description == null)
            {
                this.Description = "null";
            }
            else
            {
                this.Description = description;
            }
            this.TransactionCategoryId = transactionCategoryId;
            // use default value if no "useAuditLog" provided
            if (useAuditLog == null)
            {
                this.UseAuditLog = false;
            }
            else
            {
                this.UseAuditLog = useAuditLog;
            }
            this.MerchantCategoryCode = merchantCategoryCode;
            // use default value if no "transactionCategory" provided
            if (transactionCategory == null)
            {
                this.TransactionCategory = "null";
            }
            else
            {
                this.TransactionCategory = transactionCategory;
            }
            // use default value if no "cleanseData" provided
            if (cleanseData == null)
            {
                this.CleanseData = false;
            }
            else
            {
                this.CleanseData = cleanseData;
            }
            this.AuthType = authType;
            // use default value if no "mid" provided
            if (mid == null)
            {
                this.Mid = "null";
            }
            else
            {
                this.Mid = mid;
            }
            this.TransactionStatusScope = transactionStatusScope;
            this.Location = location;
            // use default value if no "merchant" provided
            if (merchant == null)
            {
                this.Merchant = "null";
            }
            else
            {
                this.Merchant = merchant;
            }
            this.MerchantId = merchantId;
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Memo
        /// </summary>
        [DataMember(Name="memo", EmitDefaultValue=false)]
        public string Memo { get; set; }

        /// <summary>
        /// Gets or Sets PartialAuth
        /// </summary>
        [DataMember(Name="partial_auth", EmitDefaultValue=false)]
        public bool? PartialAuth { get; set; }


        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCategoryId
        /// </summary>
        [DataMember(Name="transaction_category_id", EmitDefaultValue=false)]
        public Guid? TransactionCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets UseAuditLog
        /// </summary>
        [DataMember(Name="use_audit_log", EmitDefaultValue=false)]
        public bool? UseAuditLog { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCategoryCode
        /// </summary>
        [DataMember(Name="merchant_category_code", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// Gets or Sets CardId
        /// </summary>
        [DataMember(Name="card_id", EmitDefaultValue=false)]
        public Guid? CardId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCategory
        /// </summary>
        [DataMember(Name="transaction_category", EmitDefaultValue=false)]
        public string TransactionCategory { get; set; }

        /// <summary>
        /// Gets or Sets CleanseData
        /// </summary>
        [DataMember(Name="cleanse_data", EmitDefaultValue=false)]
        public bool? CleanseData { get; set; }


        /// <summary>
        /// Gets or Sets Mid
        /// </summary>
        [DataMember(Name="mid", EmitDefaultValue=false)]
        public string Mid { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusScope
        /// </summary>
        [DataMember(Name="transaction_status_scope", EmitDefaultValue=false)]
        public List<string> TransactionStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name="merchant", EmitDefaultValue=false)]
        public string Merchant { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public float? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public Guid? MerchantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardTransactionAuthorizationRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  PartialAuth: ").Append(PartialAuth).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TransactionCategoryId: ").Append(TransactionCategoryId).Append("\n");
            sb.Append("  UseAuditLog: ").Append(UseAuditLog).Append("\n");
            sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  TransactionCategory: ").Append(TransactionCategory).Append("\n");
            sb.Append("  CleanseData: ").Append(CleanseData).Append("\n");
            sb.Append("  AuthType: ").Append(AuthType).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  TransactionStatusScope: ").Append(TransactionStatusScope).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardTransactionAuthorizationRequest);
        }

        /// <summary>
        /// Returns true if CardTransactionAuthorizationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CardTransactionAuthorizationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardTransactionAuthorizationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.PartialAuth == input.PartialAuth ||
                    (this.PartialAuth != null &&
                    this.PartialAuth.Equals(input.PartialAuth))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TransactionCategoryId == input.TransactionCategoryId ||
                    (this.TransactionCategoryId != null &&
                    this.TransactionCategoryId.Equals(input.TransactionCategoryId))
                ) && 
                (
                    this.UseAuditLog == input.UseAuditLog ||
                    (this.UseAuditLog != null &&
                    this.UseAuditLog.Equals(input.UseAuditLog))
                ) && 
                (
                    this.MerchantCategoryCode == input.MerchantCategoryCode ||
                    (this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(input.MerchantCategoryCode))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.TransactionCategory == input.TransactionCategory ||
                    (this.TransactionCategory != null &&
                    this.TransactionCategory.Equals(input.TransactionCategory))
                ) && 
                (
                    this.CleanseData == input.CleanseData ||
                    (this.CleanseData != null &&
                    this.CleanseData.Equals(input.CleanseData))
                ) && 
                (
                    this.AuthType == input.AuthType ||
                    this.AuthType != null &&
                    this.AuthType.SequenceEqual(input.AuthType)
                ) && 
                (
                    this.Mid == input.Mid ||
                    (this.Mid != null &&
                    this.Mid.Equals(input.Mid))
                ) && 
                (
                    this.TransactionStatusScope == input.TransactionStatusScope ||
                    this.TransactionStatusScope != null &&
                    this.TransactionStatusScope.SequenceEqual(input.TransactionStatusScope)
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Merchant == input.Merchant ||
                    (this.Merchant != null &&
                    this.Merchant.Equals(input.Merchant))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.PartialAuth != null)
                    hashCode = hashCode * 59 + this.PartialAuth.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TransactionCategoryId != null)
                    hashCode = hashCode * 59 + this.TransactionCategoryId.GetHashCode();
                if (this.UseAuditLog != null)
                    hashCode = hashCode * 59 + this.UseAuditLog.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hashCode = hashCode * 59 + this.MerchantCategoryCode.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.TransactionCategory != null)
                    hashCode = hashCode * 59 + this.TransactionCategory.GetHashCode();
                if (this.CleanseData != null)
                    hashCode = hashCode * 59 + this.CleanseData.GetHashCode();
                if (this.AuthType != null)
                    hashCode = hashCode * 59 + this.AuthType.GetHashCode();
                if (this.Mid != null)
                    hashCode = hashCode * 59 + this.Mid.GetHashCode();
                if (this.TransactionStatusScope != null)
                    hashCode = hashCode * 59 + this.TransactionStatusScope.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Merchant != null)
                    hashCode = hashCode * 59 + this.Merchant.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
