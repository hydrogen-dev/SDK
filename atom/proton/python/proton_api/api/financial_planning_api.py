# coding: utf-8

"""
    Hydrogen Proton API

    Financial engineering module of Hydrogen Atom  # noqa: E501

    OpenAPI spec version: 1.9.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from proton_api.api_client import ApiClient


class FinancialPlanningApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def education_calculator_annual_cost(self, education_calculator_annual_cost_request, **kwargs):  # noqa: E501
        """Education Calculator - Annual Cost  # noqa: E501

        Calculate the achievable education costs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.education_calculator_annual_cost(education_calculator_annual_cost_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EducationCalculatorAnnualCostRequest education_calculator_annual_cost_request: Request payload for Education Calculator - Annual Cost (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.education_calculator_annual_cost_with_http_info(education_calculator_annual_cost_request, **kwargs)  # noqa: E501
        else:
            (data) = self.education_calculator_annual_cost_with_http_info(education_calculator_annual_cost_request, **kwargs)  # noqa: E501
            return data

    def education_calculator_annual_cost_with_http_info(self, education_calculator_annual_cost_request, **kwargs):  # noqa: E501
        """Education Calculator - Annual Cost  # noqa: E501

        Calculate the achievable education costs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.education_calculator_annual_cost_with_http_info(education_calculator_annual_cost_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EducationCalculatorAnnualCostRequest education_calculator_annual_cost_request: Request payload for Education Calculator - Annual Cost (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['education_calculator_annual_cost_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method education_calculator_annual_cost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'education_calculator_annual_cost_request' is set
        if self.api_client.client_side_validation and ('education_calculator_annual_cost_request' not in params or
                                                       params['education_calculator_annual_cost_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `education_calculator_annual_cost_request` when calling `education_calculator_annual_cost`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'education_calculator_annual_cost_request' in params:
            body_params = params['education_calculator_annual_cost_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/education_calculator/annual_cost', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def education_calculator_deposit_amount(self, education_calculator_deposit_amount_request, **kwargs):  # noqa: E501
        """Education Calculator - Deposit Amount  # noqa: E501

        Calculate the necessary periodic deposit amount to achieve education costs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.education_calculator_deposit_amount(education_calculator_deposit_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EducationCalculatorDepositAmountRequest education_calculator_deposit_amount_request: Request payload for Education Calculator - Deposit Amount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.education_calculator_deposit_amount_with_http_info(education_calculator_deposit_amount_request, **kwargs)  # noqa: E501
        else:
            (data) = self.education_calculator_deposit_amount_with_http_info(education_calculator_deposit_amount_request, **kwargs)  # noqa: E501
            return data

    def education_calculator_deposit_amount_with_http_info(self, education_calculator_deposit_amount_request, **kwargs):  # noqa: E501
        """Education Calculator - Deposit Amount  # noqa: E501

        Calculate the necessary periodic deposit amount to achieve education costs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.education_calculator_deposit_amount_with_http_info(education_calculator_deposit_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EducationCalculatorDepositAmountRequest education_calculator_deposit_amount_request: Request payload for Education Calculator - Deposit Amount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['education_calculator_deposit_amount_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method education_calculator_deposit_amount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'education_calculator_deposit_amount_request' is set
        if self.api_client.client_side_validation and ('education_calculator_deposit_amount_request' not in params or
                                                       params['education_calculator_deposit_amount_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `education_calculator_deposit_amount_request` when calling `education_calculator_deposit_amount`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'education_calculator_deposit_amount_request' in params:
            body_params = params['education_calculator_deposit_amount_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/education_calculator/deposit_amount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def education_calculator_percent_covered(self, education_calculator_percent_covered_request, **kwargs):  # noqa: E501
        """Education Calculator - Percent Covered  # noqa: E501

        Calculate the achievable percentage of education costs that can be covered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.education_calculator_percent_covered(education_calculator_percent_covered_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EducationCalculatorPercentCoveredRequest education_calculator_percent_covered_request: Request payload for Education Calculator - Percent Covered (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.education_calculator_percent_covered_with_http_info(education_calculator_percent_covered_request, **kwargs)  # noqa: E501
        else:
            (data) = self.education_calculator_percent_covered_with_http_info(education_calculator_percent_covered_request, **kwargs)  # noqa: E501
            return data

    def education_calculator_percent_covered_with_http_info(self, education_calculator_percent_covered_request, **kwargs):  # noqa: E501
        """Education Calculator - Percent Covered  # noqa: E501

        Calculate the achievable percentage of education costs that can be covered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.education_calculator_percent_covered_with_http_info(education_calculator_percent_covered_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EducationCalculatorPercentCoveredRequest education_calculator_percent_covered_request: Request payload for Education Calculator - Percent Covered (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['education_calculator_percent_covered_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method education_calculator_percent_covered" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'education_calculator_percent_covered_request' is set
        if self.api_client.client_side_validation and ('education_calculator_percent_covered_request' not in params or
                                                       params['education_calculator_percent_covered_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `education_calculator_percent_covered_request` when calling `education_calculator_percent_covered`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'education_calculator_percent_covered_request' in params:
            body_params = params['education_calculator_percent_covered_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/education_calculator/percent_covered', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mortgage_calculator_down_payment(self, mortgage_calculator_down_payment_request, **kwargs):  # noqa: E501
        """Mortgage Calculator - Down Payment  # noqa: E501

        Calculate the necessary down payment for the mortgage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mortgage_calculator_down_payment(mortgage_calculator_down_payment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MortgageCalculatorDownPaymentRequest mortgage_calculator_down_payment_request: Request payload for Mortgage Calculator - Down Payment (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mortgage_calculator_down_payment_with_http_info(mortgage_calculator_down_payment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.mortgage_calculator_down_payment_with_http_info(mortgage_calculator_down_payment_request, **kwargs)  # noqa: E501
            return data

    def mortgage_calculator_down_payment_with_http_info(self, mortgage_calculator_down_payment_request, **kwargs):  # noqa: E501
        """Mortgage Calculator - Down Payment  # noqa: E501

        Calculate the necessary down payment for the mortgage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mortgage_calculator_down_payment_with_http_info(mortgage_calculator_down_payment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MortgageCalculatorDownPaymentRequest mortgage_calculator_down_payment_request: Request payload for Mortgage Calculator - Down Payment (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mortgage_calculator_down_payment_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mortgage_calculator_down_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mortgage_calculator_down_payment_request' is set
        if self.api_client.client_side_validation and ('mortgage_calculator_down_payment_request' not in params or
                                                       params['mortgage_calculator_down_payment_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mortgage_calculator_down_payment_request` when calling `mortgage_calculator_down_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mortgage_calculator_down_payment_request' in params:
            body_params = params['mortgage_calculator_down_payment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/mortgage_calculator/down_payment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mortgage_calculator_home_price(self, mortgage_calculator_home_price_request, **kwargs):  # noqa: E501
        """Mortgage Calculator - Home Price  # noqa: E501

        Calculate the achievable home price for the mortgage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mortgage_calculator_home_price(mortgage_calculator_home_price_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MortgageCalculatorHomePriceRequest mortgage_calculator_home_price_request: Request payload for Mortgage Calculator - Home Price (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mortgage_calculator_home_price_with_http_info(mortgage_calculator_home_price_request, **kwargs)  # noqa: E501
        else:
            (data) = self.mortgage_calculator_home_price_with_http_info(mortgage_calculator_home_price_request, **kwargs)  # noqa: E501
            return data

    def mortgage_calculator_home_price_with_http_info(self, mortgage_calculator_home_price_request, **kwargs):  # noqa: E501
        """Mortgage Calculator - Home Price  # noqa: E501

        Calculate the achievable home price for the mortgage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mortgage_calculator_home_price_with_http_info(mortgage_calculator_home_price_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MortgageCalculatorHomePriceRequest mortgage_calculator_home_price_request: Request payload for Mortgage Calculator - Home Price (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mortgage_calculator_home_price_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mortgage_calculator_home_price" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mortgage_calculator_home_price_request' is set
        if self.api_client.client_side_validation and ('mortgage_calculator_home_price_request' not in params or
                                                       params['mortgage_calculator_home_price_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mortgage_calculator_home_price_request` when calling `mortgage_calculator_home_price`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mortgage_calculator_home_price_request' in params:
            body_params = params['mortgage_calculator_home_price_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/mortgage_calculator/home_price', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mortgage_calculator_periodic_payment(self, mortgage_calculator_periodic_payment_request, **kwargs):  # noqa: E501
        """Mortgage Calculator - Periodic Payment  # noqa: E501

        Calculate the periodic payment for the mortgage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mortgage_calculator_periodic_payment(mortgage_calculator_periodic_payment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MortgageCalculatorPeriodicPaymentRequest mortgage_calculator_periodic_payment_request: Request payload for Mortgage Calculator - Periodic Payment (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mortgage_calculator_periodic_payment_with_http_info(mortgage_calculator_periodic_payment_request, **kwargs)  # noqa: E501
        else:
            (data) = self.mortgage_calculator_periodic_payment_with_http_info(mortgage_calculator_periodic_payment_request, **kwargs)  # noqa: E501
            return data

    def mortgage_calculator_periodic_payment_with_http_info(self, mortgage_calculator_periodic_payment_request, **kwargs):  # noqa: E501
        """Mortgage Calculator - Periodic Payment  # noqa: E501

        Calculate the periodic payment for the mortgage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mortgage_calculator_periodic_payment_with_http_info(mortgage_calculator_periodic_payment_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MortgageCalculatorPeriodicPaymentRequest mortgage_calculator_periodic_payment_request: Request payload for Mortgage Calculator - Periodic Payment (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mortgage_calculator_periodic_payment_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mortgage_calculator_periodic_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mortgage_calculator_periodic_payment_request' is set
        if self.api_client.client_side_validation and ('mortgage_calculator_periodic_payment_request' not in params or
                                                       params['mortgage_calculator_periodic_payment_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `mortgage_calculator_periodic_payment_request` when calling `mortgage_calculator_periodic_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mortgage_calculator_periodic_payment_request' in params:
            body_params = params['mortgage_calculator_periodic_payment_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/mortgage_calculator/periodic_payment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchase_calculator_amount(self, purchase_calculator_amount_request, **kwargs):  # noqa: E501
        """Purchase Calculator - Amount  # noqa: E501

        Calculate the achievable purchase amount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_calculator_amount(purchase_calculator_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PurchaseCalculatorAmountRequest purchase_calculator_amount_request: Request payload for Purchase Calculator - Amount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchase_calculator_amount_with_http_info(purchase_calculator_amount_request, **kwargs)  # noqa: E501
        else:
            (data) = self.purchase_calculator_amount_with_http_info(purchase_calculator_amount_request, **kwargs)  # noqa: E501
            return data

    def purchase_calculator_amount_with_http_info(self, purchase_calculator_amount_request, **kwargs):  # noqa: E501
        """Purchase Calculator - Amount  # noqa: E501

        Calculate the achievable purchase amount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_calculator_amount_with_http_info(purchase_calculator_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PurchaseCalculatorAmountRequest purchase_calculator_amount_request: Request payload for Purchase Calculator - Amount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['purchase_calculator_amount_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchase_calculator_amount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'purchase_calculator_amount_request' is set
        if self.api_client.client_side_validation and ('purchase_calculator_amount_request' not in params or
                                                       params['purchase_calculator_amount_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `purchase_calculator_amount_request` when calling `purchase_calculator_amount`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'purchase_calculator_amount_request' in params:
            body_params = params['purchase_calculator_amount_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/purchase_calculator/amount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchase_calculator_deposit_amount(self, purchase_calculator_deposit_amount_request, **kwargs):  # noqa: E501
        """Purchase Calculator - Deposit Amount  # noqa: E501

        Calculate the necessary periodic deposit amount to achieve the purchase amount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_calculator_deposit_amount(purchase_calculator_deposit_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PurchaseCalculatorDepositAmountRequest purchase_calculator_deposit_amount_request: Request payload for Purchase Calculator - Deposit Amount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchase_calculator_deposit_amount_with_http_info(purchase_calculator_deposit_amount_request, **kwargs)  # noqa: E501
        else:
            (data) = self.purchase_calculator_deposit_amount_with_http_info(purchase_calculator_deposit_amount_request, **kwargs)  # noqa: E501
            return data

    def purchase_calculator_deposit_amount_with_http_info(self, purchase_calculator_deposit_amount_request, **kwargs):  # noqa: E501
        """Purchase Calculator - Deposit Amount  # noqa: E501

        Calculate the necessary periodic deposit amount to achieve the purchase amount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_calculator_deposit_amount_with_http_info(purchase_calculator_deposit_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PurchaseCalculatorDepositAmountRequest purchase_calculator_deposit_amount_request: Request payload for Purchase Calculator - Deposit Amount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['purchase_calculator_deposit_amount_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchase_calculator_deposit_amount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'purchase_calculator_deposit_amount_request' is set
        if self.api_client.client_side_validation and ('purchase_calculator_deposit_amount_request' not in params or
                                                       params['purchase_calculator_deposit_amount_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `purchase_calculator_deposit_amount_request` when calling `purchase_calculator_deposit_amount`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'purchase_calculator_deposit_amount_request' in params:
            body_params = params['purchase_calculator_deposit_amount_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/purchase_calculator/deposit_amount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchase_calculator_horizon(self, purchase_calculator_horizon_request, **kwargs):  # noqa: E501
        """Purchase Calculator - Horizon  # noqa: E501

        Calculate the necessary time horizon to achieve the purchase amount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_calculator_horizon(purchase_calculator_horizon_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PurchaseCalculatorHorizonRequest purchase_calculator_horizon_request: Request payload for Purchase Calculator - Horizon (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchase_calculator_horizon_with_http_info(purchase_calculator_horizon_request, **kwargs)  # noqa: E501
        else:
            (data) = self.purchase_calculator_horizon_with_http_info(purchase_calculator_horizon_request, **kwargs)  # noqa: E501
            return data

    def purchase_calculator_horizon_with_http_info(self, purchase_calculator_horizon_request, **kwargs):  # noqa: E501
        """Purchase Calculator - Horizon  # noqa: E501

        Calculate the necessary time horizon to achieve the purchase amount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_calculator_horizon_with_http_info(purchase_calculator_horizon_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PurchaseCalculatorHorizonRequest purchase_calculator_horizon_request: Request payload for Purchase Calculator - Horizon (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['purchase_calculator_horizon_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchase_calculator_horizon" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'purchase_calculator_horizon_request' is set
        if self.api_client.client_side_validation and ('purchase_calculator_horizon_request' not in params or
                                                       params['purchase_calculator_horizon_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `purchase_calculator_horizon_request` when calling `purchase_calculator_horizon`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'purchase_calculator_horizon_request' in params:
            body_params = params['purchase_calculator_horizon_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/purchase_calculator/horizon', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retirement_calculator_deposit_amount(self, retirement_calculator_deposit_amount_request, **kwargs):  # noqa: E501
        """Retirement Calculator - Deposit Amount  # noqa: E501

        Calculate the necessary period deposit amount to achieve the retirement expenses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retirement_calculator_deposit_amount(retirement_calculator_deposit_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetirementCalculatorDepositAmountRequest retirement_calculator_deposit_amount_request: Request payload for Retirement Calculator - Deposit AMount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retirement_calculator_deposit_amount_with_http_info(retirement_calculator_deposit_amount_request, **kwargs)  # noqa: E501
        else:
            (data) = self.retirement_calculator_deposit_amount_with_http_info(retirement_calculator_deposit_amount_request, **kwargs)  # noqa: E501
            return data

    def retirement_calculator_deposit_amount_with_http_info(self, retirement_calculator_deposit_amount_request, **kwargs):  # noqa: E501
        """Retirement Calculator - Deposit Amount  # noqa: E501

        Calculate the necessary period deposit amount to achieve the retirement expenses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retirement_calculator_deposit_amount_with_http_info(retirement_calculator_deposit_amount_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetirementCalculatorDepositAmountRequest retirement_calculator_deposit_amount_request: Request payload for Retirement Calculator - Deposit AMount (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['retirement_calculator_deposit_amount_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retirement_calculator_deposit_amount" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'retirement_calculator_deposit_amount_request' is set
        if self.api_client.client_side_validation and ('retirement_calculator_deposit_amount_request' not in params or
                                                       params['retirement_calculator_deposit_amount_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `retirement_calculator_deposit_amount_request` when calling `retirement_calculator_deposit_amount`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'retirement_calculator_deposit_amount_request' in params:
            body_params = params['retirement_calculator_deposit_amount_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/retirement_calculator/deposit_amount', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retirement_calculator_expenses(self, retirement_calculator_expenses_request, **kwargs):  # noqa: E501
        """Retirement Calculator - Expenses  # noqa: E501

        Calculate the achievable retirement expenses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retirement_calculator_expenses(retirement_calculator_expenses_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetirementCalculatorExpensesRequest retirement_calculator_expenses_request: Request payload for Retirement Calculator - Expenses (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retirement_calculator_expenses_with_http_info(retirement_calculator_expenses_request, **kwargs)  # noqa: E501
        else:
            (data) = self.retirement_calculator_expenses_with_http_info(retirement_calculator_expenses_request, **kwargs)  # noqa: E501
            return data

    def retirement_calculator_expenses_with_http_info(self, retirement_calculator_expenses_request, **kwargs):  # noqa: E501
        """Retirement Calculator - Expenses  # noqa: E501

        Calculate the achievable retirement expenses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retirement_calculator_expenses_with_http_info(retirement_calculator_expenses_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetirementCalculatorExpensesRequest retirement_calculator_expenses_request: Request payload for Retirement Calculator - Expenses (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['retirement_calculator_expenses_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retirement_calculator_expenses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'retirement_calculator_expenses_request' is set
        if self.api_client.client_side_validation and ('retirement_calculator_expenses_request' not in params or
                                                       params['retirement_calculator_expenses_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `retirement_calculator_expenses_request` when calling `retirement_calculator_expenses`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'retirement_calculator_expenses_request' in params:
            body_params = params['retirement_calculator_expenses_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/retirement_calculator/expenses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retirement_calculator_percent_covered(self, retirement_calculator_percent_covered_request, **kwargs):  # noqa: E501
        """Retirement Calculator - Percent Covered  # noqa: E501

        Calculate the achievable percentage of retirement expenses that can be covered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retirement_calculator_percent_covered(retirement_calculator_percent_covered_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetirementCalculatorPercentCoveredRequest retirement_calculator_percent_covered_request: Request payload for Retirement Calculator - Percent Covered (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retirement_calculator_percent_covered_with_http_info(retirement_calculator_percent_covered_request, **kwargs)  # noqa: E501
        else:
            (data) = self.retirement_calculator_percent_covered_with_http_info(retirement_calculator_percent_covered_request, **kwargs)  # noqa: E501
            return data

    def retirement_calculator_percent_covered_with_http_info(self, retirement_calculator_percent_covered_request, **kwargs):  # noqa: E501
        """Retirement Calculator - Percent Covered  # noqa: E501

        Calculate the achievable percentage of retirement expenses that can be covered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retirement_calculator_percent_covered_with_http_info(retirement_calculator_percent_covered_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RetirementCalculatorPercentCoveredRequest retirement_calculator_percent_covered_request: Request payload for Retirement Calculator - Percent Covered (required)
        :return: dict(str, object)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['retirement_calculator_percent_covered_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retirement_calculator_percent_covered" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'retirement_calculator_percent_covered_request' is set
        if self.api_client.client_side_validation and ('retirement_calculator_percent_covered_request' not in params or
                                                       params['retirement_calculator_percent_covered_request'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `retirement_calculator_percent_covered_request` when calling `retirement_calculator_percent_covered`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'retirement_calculator_percent_covered_request' in params:
            body_params = params['retirement_calculator_percent_covered_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/retirement_calculator/percent_covered', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
