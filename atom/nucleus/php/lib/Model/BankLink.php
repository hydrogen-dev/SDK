<?php
/**
 * BankLink
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * BankLink Class Doc Comment
 *
 * @category Class
 * @description BankLink Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankLink implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'available_balance' => 'double',
        'balance' => 'double',
        'bank_account_holder' => 'string',
        'bank_account_name' => 'string',
        'bank_account_number' => 'string',
        'business_id' => 'string',
        'client_id' => 'string',
        'create_date' => '\DateTime',
        'currency_code' => 'string',
        'id' => 'string',
        'institution_id' => 'string',
        'institution_name' => 'string',
        'is_active' => 'bool',
        'is_default' => 'bool',
        'is_link_verified' => 'bool',
        'link_verified_date' => '\DateTime',
        'mask' => 'string',
        'metadata' => 'map[string,string]',
        'routing' => 'string',
        'routing_wire' => 'string',
        'secondary_id' => 'string',
        'type' => 'string',
        'update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => 'uuid',
        'available_balance' => 'double',
        'balance' => 'double',
        'bank_account_holder' => null,
        'bank_account_name' => null,
        'bank_account_number' => null,
        'business_id' => 'uuid',
        'client_id' => 'uuid',
        'create_date' => 'date-time',
        'currency_code' => null,
        'id' => 'uuid',
        'institution_id' => 'uuid',
        'institution_name' => null,
        'is_active' => null,
        'is_default' => null,
        'is_link_verified' => null,
        'link_verified_date' => 'date',
        'mask' => null,
        'metadata' => null,
        'routing' => null,
        'routing_wire' => null,
        'secondary_id' => null,
        'type' => null,
        'update_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'available_balance' => 'available_balance',
        'balance' => 'balance',
        'bank_account_holder' => 'bank_account_holder',
        'bank_account_name' => 'bank_account_name',
        'bank_account_number' => 'bank_account_number',
        'business_id' => 'business_id',
        'client_id' => 'client_id',
        'create_date' => 'create_date',
        'currency_code' => 'currency_code',
        'id' => 'id',
        'institution_id' => 'institution_id',
        'institution_name' => 'institution_name',
        'is_active' => 'is_active',
        'is_default' => 'is_default',
        'is_link_verified' => 'is_link_verified',
        'link_verified_date' => 'link_verified_date',
        'mask' => 'mask',
        'metadata' => 'metadata',
        'routing' => 'routing',
        'routing_wire' => 'routing_wire',
        'secondary_id' => 'secondary_id',
        'type' => 'type',
        'update_date' => 'update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'available_balance' => 'setAvailableBalance',
        'balance' => 'setBalance',
        'bank_account_holder' => 'setBankAccountHolder',
        'bank_account_name' => 'setBankAccountName',
        'bank_account_number' => 'setBankAccountNumber',
        'business_id' => 'setBusinessId',
        'client_id' => 'setClientId',
        'create_date' => 'setCreateDate',
        'currency_code' => 'setCurrencyCode',
        'id' => 'setId',
        'institution_id' => 'setInstitutionId',
        'institution_name' => 'setInstitutionName',
        'is_active' => 'setIsActive',
        'is_default' => 'setIsDefault',
        'is_link_verified' => 'setIsLinkVerified',
        'link_verified_date' => 'setLinkVerifiedDate',
        'mask' => 'setMask',
        'metadata' => 'setMetadata',
        'routing' => 'setRouting',
        'routing_wire' => 'setRoutingWire',
        'secondary_id' => 'setSecondaryId',
        'type' => 'setType',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'available_balance' => 'getAvailableBalance',
        'balance' => 'getBalance',
        'bank_account_holder' => 'getBankAccountHolder',
        'bank_account_name' => 'getBankAccountName',
        'bank_account_number' => 'getBankAccountNumber',
        'business_id' => 'getBusinessId',
        'client_id' => 'getClientId',
        'create_date' => 'getCreateDate',
        'currency_code' => 'getCurrencyCode',
        'id' => 'getId',
        'institution_id' => 'getInstitutionId',
        'institution_name' => 'getInstitutionName',
        'is_active' => 'getIsActive',
        'is_default' => 'getIsDefault',
        'is_link_verified' => 'getIsLinkVerified',
        'link_verified_date' => 'getLinkVerifiedDate',
        'mask' => 'getMask',
        'metadata' => 'getMetadata',
        'routing' => 'getRouting',
        'routing_wire' => 'getRoutingWire',
        'secondary_id' => 'getSecondaryId',
        'type' => 'getType',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['available_balance'] = isset($data['available_balance']) ? $data['available_balance'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['bank_account_holder'] = isset($data['bank_account_holder']) ? $data['bank_account_holder'] : null;
        $this->container['bank_account_name'] = isset($data['bank_account_name']) ? $data['bank_account_name'] : null;
        $this->container['bank_account_number'] = isset($data['bank_account_number']) ? $data['bank_account_number'] : null;
        $this->container['business_id'] = isset($data['business_id']) ? $data['business_id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['institution_id'] = isset($data['institution_id']) ? $data['institution_id'] : null;
        $this->container['institution_name'] = isset($data['institution_name']) ? $data['institution_name'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['is_link_verified'] = isset($data['is_link_verified']) ? $data['is_link_verified'] : null;
        $this->container['link_verified_date'] = isset($data['link_verified_date']) ? $data['link_verified_date'] : null;
        $this->container['mask'] = isset($data['mask']) ? $data['mask'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['routing'] = isset($data['routing']) ? $data['routing'] : null;
        $this->container['routing_wire'] = isset($data['routing_wire']) ? $data['routing_wire'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bank_account_holder'] === null) {
            $invalidProperties[] = "'bank_account_holder' can't be null";
        }
        if ($this->container['bank_account_number'] === null) {
            $invalidProperties[] = "'bank_account_number' can't be null";
        }
        if ($this->container['institution_name'] === null) {
            $invalidProperties[] = "'institution_name' can't be null";
        }
        if ($this->container['routing'] === null) {
            $invalidProperties[] = "'routing' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id accountId
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return double
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param double $available_balance availableBalance
     *
     * @return $this
     */
    public function setAvailableBalance($available_balance)
    {
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets bank_account_holder
     *
     * @return string
     */
    public function getBankAccountHolder()
    {
        return $this->container['bank_account_holder'];
    }

    /**
     * Sets bank_account_holder
     *
     * @param string $bank_account_holder bankAccountHolder
     *
     * @return $this
     */
    public function setBankAccountHolder($bank_account_holder)
    {
        $this->container['bank_account_holder'] = $bank_account_holder;

        return $this;
    }

    /**
     * Gets bank_account_name
     *
     * @return string
     */
    public function getBankAccountName()
    {
        return $this->container['bank_account_name'];
    }

    /**
     * Sets bank_account_name
     *
     * @param string $bank_account_name bankAccountName
     *
     * @return $this
     */
    public function setBankAccountName($bank_account_name)
    {
        $this->container['bank_account_name'] = $bank_account_name;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string $bank_account_number bankAccountNumber
     *
     * @return $this
     */
    public function setBankAccountNumber($bank_account_number)
    {
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets business_id
     *
     * @return string
     */
    public function getBusinessId()
    {
        return $this->container['business_id'];
    }

    /**
     * Sets business_id
     *
     * @param string $business_id businessId
     *
     * @return $this
     */
    public function setBusinessId($business_id)
    {
        $this->container['business_id'] = $business_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id clientId
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets institution_id
     *
     * @return string
     */
    public function getInstitutionId()
    {
        return $this->container['institution_id'];
    }

    /**
     * Sets institution_id
     *
     * @param string $institution_id institutionId
     *
     * @return $this
     */
    public function setInstitutionId($institution_id)
    {
        $this->container['institution_id'] = $institution_id;

        return $this;
    }

    /**
     * Gets institution_name
     *
     * @return string
     */
    public function getInstitutionName()
    {
        return $this->container['institution_name'];
    }

    /**
     * Sets institution_name
     *
     * @param string $institution_name institutionName
     *
     * @return $this
     */
    public function setInstitutionName($institution_name)
    {
        $this->container['institution_name'] = $institution_name;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active isActive
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default isDefault
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_link_verified
     *
     * @return bool
     */
    public function getIsLinkVerified()
    {
        return $this->container['is_link_verified'];
    }

    /**
     * Sets is_link_verified
     *
     * @param bool $is_link_verified isLinkVerified
     *
     * @return $this
     */
    public function setIsLinkVerified($is_link_verified)
    {
        $this->container['is_link_verified'] = $is_link_verified;

        return $this;
    }

    /**
     * Gets link_verified_date
     *
     * @return \DateTime
     */
    public function getLinkVerifiedDate()
    {
        return $this->container['link_verified_date'];
    }

    /**
     * Sets link_verified_date
     *
     * @param \DateTime $link_verified_date linkVerifiedDate
     *
     * @return $this
     */
    public function setLinkVerifiedDate($link_verified_date)
    {
        $this->container['link_verified_date'] = $link_verified_date;

        return $this;
    }

    /**
     * Gets mask
     *
     * @return string
     */
    public function getMask()
    {
        return $this->container['mask'];
    }

    /**
     * Sets mask
     *
     * @param string $mask mask
     *
     * @return $this
     */
    public function setMask($mask)
    {
        $this->container['mask'] = $mask;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets routing
     *
     * @return string
     */
    public function getRouting()
    {
        return $this->container['routing'];
    }

    /**
     * Sets routing
     *
     * @param string $routing routing
     *
     * @return $this
     */
    public function setRouting($routing)
    {
        $this->container['routing'] = $routing;

        return $this;
    }

    /**
     * Gets routing_wire
     *
     * @return string
     */
    public function getRoutingWire()
    {
        return $this->container['routing_wire'];
    }

    /**
     * Sets routing_wire
     *
     * @param string $routing_wire routingWire
     *
     * @return $this
     */
    public function setRoutingWire($routing_wire)
    {
        $this->container['routing_wire'] = $routing_wire;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


