# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnnuityHorizon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'years': 'int',
        'months': 'int',
        'days': 'int'
    }

    attribute_map = {
        'years': 'years',
        'months': 'months',
        'days': 'days'
    }

    def __init__(self, years=None, months=None, days=None):  # noqa: E501
        """AnnuityHorizon - a model defined in Swagger"""  # noqa: E501

        self._years = None
        self._months = None
        self._days = None
        self.discriminator = None

        self.years = years
        self.months = months
        self.days = days

    @property
    def years(self):
        """Gets the years of this AnnuityHorizon.  # noqa: E501

        The number of years in the horizon.  # noqa: E501

        :return: The years of this AnnuityHorizon.  # noqa: E501
        :rtype: int
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this AnnuityHorizon.

        The number of years in the horizon.  # noqa: E501

        :param years: The years of this AnnuityHorizon.  # noqa: E501
        :type: int
        """
        if years is None:
            raise ValueError("Invalid value for `years`, must not be `None`")  # noqa: E501
        if years is not None and years < 0:  # noqa: E501
            raise ValueError("Invalid value for `years`, must be a value greater than or equal to `0`")  # noqa: E501

        self._years = years

    @property
    def months(self):
        """Gets the months of this AnnuityHorizon.  # noqa: E501

        The number of months in the horizon.  # noqa: E501

        :return: The months of this AnnuityHorizon.  # noqa: E501
        :rtype: int
        """
        return self._months

    @months.setter
    def months(self, months):
        """Sets the months of this AnnuityHorizon.

        The number of months in the horizon.  # noqa: E501

        :param months: The months of this AnnuityHorizon.  # noqa: E501
        :type: int
        """
        if months is None:
            raise ValueError("Invalid value for `months`, must not be `None`")  # noqa: E501
        if months is not None and months > 12:  # noqa: E501
            raise ValueError("Invalid value for `months`, must be a value less than or equal to `12`")  # noqa: E501
        if months is not None and months < 0:  # noqa: E501
            raise ValueError("Invalid value for `months`, must be a value greater than or equal to `0`")  # noqa: E501

        self._months = months

    @property
    def days(self):
        """Gets the days of this AnnuityHorizon.  # noqa: E501

        The number of days in the horizon.  # noqa: E501

        :return: The days of this AnnuityHorizon.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this AnnuityHorizon.

        The number of days in the horizon.  # noqa: E501

        :param days: The days of this AnnuityHorizon.  # noqa: E501
        :type: int
        """
        if days is None:
            raise ValueError("Invalid value for `days`, must not be `None`")  # noqa: E501
        if days is not None and days > 31:  # noqa: E501
            raise ValueError("Invalid value for `days`, must be a value less than or equal to `31`")  # noqa: E501
        if days is not None and days < 0:  # noqa: E501
            raise ValueError("Invalid value for `days`, must be a value greater than or equal to `0`")  # noqa: E501

        self._days = days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnuityHorizon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnuityHorizon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
