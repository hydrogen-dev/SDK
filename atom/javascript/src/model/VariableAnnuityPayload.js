/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AnnuityDepositSchedule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AnnuityDepositSchedule'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.VariableAnnuityPayload = factory(root.atom_api.ApiClient, root.atom_api.AnnuityDepositSchedule);
  }
}(this, function(ApiClient, AnnuityDepositSchedule) {
  'use strict';




  /**
   * The VariableAnnuityPayload model module.
   * @module model/VariableAnnuityPayload
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>VariableAnnuityPayload</code>.
   * @alias module:model/VariableAnnuityPayload
   * @class
   * @param portfolioTickers {Array.<String>} Portfolio tickers, referencing securities defined in the Nucleus API.
   * @param portfolioWeights {Array.<Number>} Portfolio weights, corresponding to portfolio_tickers. Must sum to 1.0.
   * @param accumulationHorizon {Number} The number of years until the payout phase begins.
   * @param decumulationHorizon {Number} The number of years in the payout or decumulation phase.
   * @param initialBalance {Number} The starting balance in the annuity plan, prior to any ongoing contributions. Must be greater than or equal to 0.
   */
  var exports = function(portfolioTickers, portfolioWeights, accumulationHorizon, decumulationHorizon, initialBalance) {
    var _this = this;

    _this['portfolio_tickers'] = portfolioTickers;
    _this['portfolio_weights'] = portfolioWeights;
    _this['accumulation_horizon'] = accumulationHorizon;
    _this['decumulation_horizon'] = decumulationHorizon;
    _this['initial_balance'] = initialBalance;


  };

  /**
   * Constructs a <code>VariableAnnuityPayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/VariableAnnuityPayload} obj Optional instance to populate.
   * @return {module:model/VariableAnnuityPayload} The populated <code>VariableAnnuityPayload</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('portfolio_tickers')) {
        obj['portfolio_tickers'] = ApiClient.convertToType(data['portfolio_tickers'], ['String']);
      }
      if (data.hasOwnProperty('portfolio_weights')) {
        obj['portfolio_weights'] = ApiClient.convertToType(data['portfolio_weights'], ['Number']);
      }
      if (data.hasOwnProperty('accumulation_horizon')) {
        obj['accumulation_horizon'] = ApiClient.convertToType(data['accumulation_horizon'], 'Number');
      }
      if (data.hasOwnProperty('decumulation_horizon')) {
        obj['decumulation_horizon'] = ApiClient.convertToType(data['decumulation_horizon'], 'Number');
      }
      if (data.hasOwnProperty('initial_balance')) {
        obj['initial_balance'] = ApiClient.convertToType(data['initial_balance'], 'Number');
      }
      if (data.hasOwnProperty('frequency_interval')) {
        obj['frequency_interval'] = ApiClient.convertToType(data['frequency_interval'], 'String');
      }
      if (data.hasOwnProperty('deposit_schedule')) {
        obj['deposit_schedule'] = AnnuityDepositSchedule.constructFromObject(data['deposit_schedule']);
      }
    }
    return obj;
  }

  /**
   * Portfolio tickers, referencing securities defined in the Nucleus API.
   * @member {Array.<String>} portfolio_tickers
   */
  exports.prototype['portfolio_tickers'] = undefined;
  /**
   * Portfolio weights, corresponding to portfolio_tickers. Must sum to 1.0.
   * @member {Array.<Number>} portfolio_weights
   */
  exports.prototype['portfolio_weights'] = undefined;
  /**
   * The number of years until the payout phase begins.
   * @member {Number} accumulation_horizon
   */
  exports.prototype['accumulation_horizon'] = undefined;
  /**
   * The number of years in the payout or decumulation phase.
   * @member {Number} decumulation_horizon
   */
  exports.prototype['decumulation_horizon'] = undefined;
  /**
   * The starting balance in the annuity plan, prior to any ongoing contributions. Must be greater than or equal to 0.
   * @member {Number} initial_balance
   */
  exports.prototype['initial_balance'] = undefined;
  /**
   * Unit of time associated with accumulation_horizon, decumulation_horizon, start, end, and annuity payments.
   * @member {String} frequency_interval
   */
  exports.prototype['frequency_interval'] = undefined;
  /**
   * @member {module:model/AnnuityDepositSchedule} deposit_schedule
   */
  exports.prototype['deposit_schedule'] = undefined;



  return exports;
}));


