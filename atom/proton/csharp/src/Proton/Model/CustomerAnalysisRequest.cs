/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// CustomerAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class CustomerAnalysisRequest :  IEquatable<CustomerAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAnalysisRequest" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="responseLimit">responseLimit (default to 10).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="benchmarkEndDate">benchmarkEndDate.</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="customerIds">customerIds.</param>
        /// <param name="businessId">businessId.</param>
        /// <param name="benchmarkStartDate">benchmarkStartDate.</param>
        /// <param name="onlyActiveCustomers">onlyActiveCustomers (default to false).</param>
        public CustomerAnalysisRequest(string currencyCode = default(string), Guid? clientId = default(Guid?), int? responseLimit = 10, DateTime? endDate = default(DateTime?), DateTime? benchmarkEndDate = default(DateTime?), string currencyConversion = default(string), DateTime? startDate = default(DateTime?), List<Guid?> customerIds = default(List<Guid?>), Guid? businessId = default(Guid?), DateTime? benchmarkStartDate = default(DateTime?), bool? onlyActiveCustomers = false)
        {
            this.CurrencyCode = currencyCode;
            this.ClientId = clientId;
            // use default value if no "responseLimit" provided
            if (responseLimit == null)
            {
                this.ResponseLimit = 10;
            }
            else
            {
                this.ResponseLimit = responseLimit;
            }
            this.EndDate = endDate;
            this.BenchmarkEndDate = benchmarkEndDate;
            this.CurrencyConversion = currencyConversion;
            this.StartDate = startDate;
            this.CustomerIds = customerIds;
            this.BusinessId = businessId;
            this.BenchmarkStartDate = benchmarkStartDate;
            // use default value if no "onlyActiveCustomers" provided
            if (onlyActiveCustomers == null)
            {
                this.OnlyActiveCustomers = false;
            }
            else
            {
                this.OnlyActiveCustomers = onlyActiveCustomers;
            }
        }
        
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ResponseLimit
        /// </summary>
        [DataMember(Name="response_limit", EmitDefaultValue=false)]
        public int? ResponseLimit { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkEndDate
        /// </summary>
        [DataMember(Name="benchmark_end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BenchmarkEndDate { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerIds
        /// </summary>
        [DataMember(Name="customer_ids", EmitDefaultValue=false)]
        public List<Guid?> CustomerIds { get; set; }

        /// <summary>
        /// Gets or Sets BusinessId
        /// </summary>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkStartDate
        /// </summary>
        [DataMember(Name="benchmark_start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? BenchmarkStartDate { get; set; }

        /// <summary>
        /// Gets or Sets OnlyActiveCustomers
        /// </summary>
        [DataMember(Name="only_active_customers", EmitDefaultValue=false)]
        public bool? OnlyActiveCustomers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomerAnalysisRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ResponseLimit: ").Append(ResponseLimit).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  BenchmarkEndDate: ").Append(BenchmarkEndDate).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  CustomerIds: ").Append(CustomerIds).Append("\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  BenchmarkStartDate: ").Append(BenchmarkStartDate).Append("\n");
            sb.Append("  OnlyActiveCustomers: ").Append(OnlyActiveCustomers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomerAnalysisRequest);
        }

        /// <summary>
        /// Returns true if CustomerAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomerAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomerAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ResponseLimit == input.ResponseLimit ||
                    (this.ResponseLimit != null &&
                    this.ResponseLimit.Equals(input.ResponseLimit))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.BenchmarkEndDate == input.BenchmarkEndDate ||
                    (this.BenchmarkEndDate != null &&
                    this.BenchmarkEndDate.Equals(input.BenchmarkEndDate))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.CustomerIds == input.CustomerIds ||
                    this.CustomerIds != null &&
                    this.CustomerIds.SequenceEqual(input.CustomerIds)
                ) && 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.BenchmarkStartDate == input.BenchmarkStartDate ||
                    (this.BenchmarkStartDate != null &&
                    this.BenchmarkStartDate.Equals(input.BenchmarkStartDate))
                ) && 
                (
                    this.OnlyActiveCustomers == input.OnlyActiveCustomers ||
                    (this.OnlyActiveCustomers != null &&
                    this.OnlyActiveCustomers.Equals(input.OnlyActiveCustomers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ResponseLimit != null)
                    hashCode = hashCode * 59 + this.ResponseLimit.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.BenchmarkEndDate != null)
                    hashCode = hashCode * 59 + this.BenchmarkEndDate.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.CustomerIds != null)
                    hashCode = hashCode * 59 + this.CustomerIds.GetHashCode();
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.BenchmarkStartDate != null)
                    hashCode = hashCode * 59 + this.BenchmarkStartDate.GetHashCode();
                if (this.OnlyActiveCustomers != null)
                    hashCode = hashCode * 59 + this.OnlyActiveCustomers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ResponseLimit (int?) minimum
            if(this.ResponseLimit < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResponseLimit, must be a value greater than or equal to 1.", new [] { "ResponseLimit" });
            }

            yield break;
        }
    }

}
