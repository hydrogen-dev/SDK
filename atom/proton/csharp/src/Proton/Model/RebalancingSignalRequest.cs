/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// RebalancingSignalRequest
    /// </summary>
    [DataContract]
    public partial class RebalancingSignalRequest :  IEquatable<RebalancingSignalRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RebalancingSignalRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RebalancingSignalRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RebalancingSignalRequest" /> class.
        /// </summary>
        /// <param name="endDate">endDate (required).</param>
        /// <param name="updateModel">updateModel (default to false).</param>
        /// <param name="modelId">modelId.</param>
        /// <param name="startDate">startDate (required).</param>
        /// <param name="initialWeights">initialWeights.</param>
        /// <param name="settings">settings.</param>
        public RebalancingSignalRequest(DateTime? endDate = default(DateTime?), bool? updateModel = false, Guid? modelId = default(Guid?), DateTime? startDate = default(DateTime?), Object initialWeights = default(Object), Settings settings = default(Settings))
        {
            // to ensure "endDate" is required (not null)
            if (endDate == null)
            {
                throw new InvalidDataException("endDate is a required property for RebalancingSignalRequest and cannot be null");
            }
            else
            {
                this.EndDate = endDate;
            }
            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for RebalancingSignalRequest and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }
            // use default value if no "updateModel" provided
            if (updateModel == null)
            {
                this.UpdateModel = false;
            }
            else
            {
                this.UpdateModel = updateModel;
            }
            this.ModelId = modelId;
            this.InitialWeights = initialWeights;
            this.Settings = settings;
        }
        
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets UpdateModel
        /// </summary>
        [DataMember(Name="update_model", EmitDefaultValue=false)]
        public bool? UpdateModel { get; set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name="model_id", EmitDefaultValue=false)]
        public Guid? ModelId { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets InitialWeights
        /// </summary>
        [DataMember(Name="initial_weights", EmitDefaultValue=false)]
        public Object InitialWeights { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public Settings Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RebalancingSignalRequest {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  UpdateModel: ").Append(UpdateModel).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  InitialWeights: ").Append(InitialWeights).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RebalancingSignalRequest);
        }

        /// <summary>
        /// Returns true if RebalancingSignalRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RebalancingSignalRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RebalancingSignalRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.UpdateModel == input.UpdateModel ||
                    (this.UpdateModel != null &&
                    this.UpdateModel.Equals(input.UpdateModel))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.InitialWeights == input.InitialWeights ||
                    (this.InitialWeights != null &&
                    this.InitialWeights.Equals(input.InitialWeights))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.UpdateModel != null)
                    hashCode = hashCode * 59 + this.UpdateModel.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.InitialWeights != null)
                    hashCode = hashCode * 59 + this.InitialWeights.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
