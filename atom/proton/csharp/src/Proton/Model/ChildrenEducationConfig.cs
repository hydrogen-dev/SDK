/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// ChildrenEducationConfig
    /// </summary>
    [DataContract]
    public partial class ChildrenEducationConfig :  IEquatable<ChildrenEducationConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChildrenEducationConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChildrenEducationConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChildrenEducationConfig" /> class.
        /// </summary>
        /// <param name="educationConfig">educationConfig (required).</param>
        /// <param name="currentAge">currentAge (required).</param>
        public ChildrenEducationConfig(List<EducationConfig> educationConfig = default(List<EducationConfig>), int? currentAge = default(int?))
        {
            // to ensure "educationConfig" is required (not null)
            if (educationConfig == null)
            {
                throw new InvalidDataException("educationConfig is a required property for ChildrenEducationConfig and cannot be null");
            }
            else
            {
                this.EducationConfig = educationConfig;
            }
            // to ensure "currentAge" is required (not null)
            if (currentAge == null)
            {
                throw new InvalidDataException("currentAge is a required property for ChildrenEducationConfig and cannot be null");
            }
            else
            {
                this.CurrentAge = currentAge;
            }
        }
        
        /// <summary>
        /// Gets or Sets EducationConfig
        /// </summary>
        [DataMember(Name="education_config", EmitDefaultValue=false)]
        public List<EducationConfig> EducationConfig { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAge
        /// </summary>
        [DataMember(Name="current_age", EmitDefaultValue=false)]
        public int? CurrentAge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChildrenEducationConfig {\n");
            sb.Append("  EducationConfig: ").Append(EducationConfig).Append("\n");
            sb.Append("  CurrentAge: ").Append(CurrentAge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChildrenEducationConfig);
        }

        /// <summary>
        /// Returns true if ChildrenEducationConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ChildrenEducationConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChildrenEducationConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EducationConfig == input.EducationConfig ||
                    this.EducationConfig != null &&
                    this.EducationConfig.SequenceEqual(input.EducationConfig)
                ) && 
                (
                    this.CurrentAge == input.CurrentAge ||
                    (this.CurrentAge != null &&
                    this.CurrentAge.Equals(input.CurrentAge))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EducationConfig != null)
                    hashCode = hashCode * 59 + this.EducationConfig.GetHashCode();
                if (this.CurrentAge != null)
                    hashCode = hashCode * 59 + this.CurrentAge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CurrentAge (int?) minimum
            if(this.CurrentAge < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentAge, must be a value greater than or equal to 0.", new [] { "CurrentAge" });
            }

            yield break;
        }
    }

}
