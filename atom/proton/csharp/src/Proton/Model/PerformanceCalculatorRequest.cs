/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// PerformanceCalculatorRequest
    /// </summary>
    [DataContract]
    public partial class PerformanceCalculatorRequest :  IEquatable<PerformanceCalculatorRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines AnnualizedReturnPeriod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AnnualizedReturnPeriodEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum Q for value: Q
            /// </summary>
            [EnumMember(Value = "Q")]
            Q = 2,
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 3,
            
            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4
        }

        /// <summary>
        /// Gets or Sets AnnualizedReturnPeriod
        /// </summary>
        [DataMember(Name="annualized_return_period", EmitDefaultValue=false)]
        public AnnualizedReturnPeriodEnum? AnnualizedReturnPeriod { get; set; }
        /// <summary>
        /// Defines ActivePremiumPeriod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActivePremiumPeriodEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum Q for value: Q
            /// </summary>
            [EnumMember(Value = "Q")]
            Q = 2,
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 3,
            
            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4
        }

        /// <summary>
        /// Gets or Sets ActivePremiumPeriod
        /// </summary>
        [DataMember(Name="active_premium_period", EmitDefaultValue=false)]
        public ActivePremiumPeriodEnum? ActivePremiumPeriod { get; set; }
        /// <summary>
        /// Defines PeriodType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodTypeEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum Q for value: Q
            /// </summary>
            [EnumMember(Value = "Q")]
            Q = 2,
            
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 3,
            
            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4
        }

        /// <summary>
        /// Gets or Sets PeriodType
        /// </summary>
        [DataMember(Name="period_type", EmitDefaultValue=false)]
        public PeriodTypeEnum? PeriodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceCalculatorRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PerformanceCalculatorRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PerformanceCalculatorRequest" /> class.
        /// </summary>
        /// <param name="annualizedReturnPeriod">annualizedReturnPeriod (default to AnnualizedReturnPeriodEnum.D).</param>
        /// <param name="riskFreeAlpha">riskFreeAlpha (default to 0.0F).</param>
        /// <param name="allocationId">allocationId.</param>
        /// <param name="meanPercentileMonteCarlo">meanPercentileMonteCarlo (default to 50.0F).</param>
        /// <param name="modelId">modelId.</param>
        /// <param name="marDownsideDeviation">marDownsideDeviation (default to 0.0F).</param>
        /// <param name="riskFreeSharpe">riskFreeSharpe (default to 0.0F).</param>
        /// <param name="benchmarkId">benchmarkId.</param>
        /// <param name="riskFreeSortino">riskFreeSortino (default to 0.0F).</param>
        /// <param name="householdId">householdId.</param>
        /// <param name="minPercentileMonteCarlo">minPercentileMonteCarlo (default to 20.0F).</param>
        /// <param name="movingAverageNDay">movingAverageNDay (default to 7).</param>
        /// <param name="activePremiumPeriod">activePremiumPeriod (default to ActivePremiumPeriodEnum.D).</param>
        /// <param name="statName">statName (required).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="nDayReturns">nDayReturns (default to 7).</param>
        /// <param name="varConfInterval">varConfInterval (default to 95.0F).</param>
        /// <param name="periodType">periodType (default to PeriodTypeEnum.D).</param>
        /// <param name="riskFreeTreynor">riskFreeTreynor (default to 0.0F).</param>
        /// <param name="nRollingMaxDrawdown">nRollingMaxDrawdown (default to 7).</param>
        /// <param name="portfolioId">portfolioId.</param>
        /// <param name="numSimMonteCarlo">numSimMonteCarlo (default to 1000).</param>
        /// <param name="goalId">goalId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="securityId">securityId.</param>
        /// <param name="nPathMonteCarlo">nPathMonteCarlo (default to 100).</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="nRollingVolatility">nRollingVolatility (default to 7).</param>
        /// <param name="histFactor">histFactor (default to 5.0F).</param>
        /// <param name="maxPercentileMonteCarlo">maxPercentileMonteCarlo (default to 80.0F).</param>
        public PerformanceCalculatorRequest(AnnualizedReturnPeriodEnum? annualizedReturnPeriod = AnnualizedReturnPeriodEnum.D, float? riskFreeAlpha = 0.0F, Guid? allocationId = default(Guid?), float? meanPercentileMonteCarlo = 50.0F, Guid? modelId = default(Guid?), float? marDownsideDeviation = 0.0F, float? riskFreeSharpe = 0.0F, Guid? benchmarkId = default(Guid?), float? riskFreeSortino = 0.0F, Guid? householdId = default(Guid?), float? minPercentileMonteCarlo = 20.0F, int? movingAverageNDay = 7, ActivePremiumPeriodEnum? activePremiumPeriod = ActivePremiumPeriodEnum.D, string statName = default(string), DateTime? endDate = default(DateTime?), DateTime? startDate = default(DateTime?), int? nDayReturns = 7, float? varConfInterval = 95.0F, PeriodTypeEnum? periodType = PeriodTypeEnum.D, float? riskFreeTreynor = 0.0F, int? nRollingMaxDrawdown = 7, Guid? portfolioId = default(Guid?), int? numSimMonteCarlo = 1000, Guid? goalId = default(Guid?), Guid? accountId = default(Guid?), Guid? securityId = default(Guid?), int? nPathMonteCarlo = 100, Guid? clientId = default(Guid?), int? nRollingVolatility = 7, float? histFactor = 5.0F, float? maxPercentileMonteCarlo = 80.0F)
        {
            // to ensure "statName" is required (not null)
            if (statName == null)
            {
                throw new InvalidDataException("statName is a required property for PerformanceCalculatorRequest and cannot be null");
            }
            else
            {
                this.StatName = statName;
            }
            // use default value if no "annualizedReturnPeriod" provided
            if (annualizedReturnPeriod == null)
            {
                this.AnnualizedReturnPeriod = AnnualizedReturnPeriodEnum.D;
            }
            else
            {
                this.AnnualizedReturnPeriod = annualizedReturnPeriod;
            }
            // use default value if no "riskFreeAlpha" provided
            if (riskFreeAlpha == null)
            {
                this.RiskFreeAlpha = 0.0F;
            }
            else
            {
                this.RiskFreeAlpha = riskFreeAlpha;
            }
            this.AllocationId = allocationId;
            // use default value if no "meanPercentileMonteCarlo" provided
            if (meanPercentileMonteCarlo == null)
            {
                this.MeanPercentileMonteCarlo = 50.0F;
            }
            else
            {
                this.MeanPercentileMonteCarlo = meanPercentileMonteCarlo;
            }
            this.ModelId = modelId;
            // use default value if no "marDownsideDeviation" provided
            if (marDownsideDeviation == null)
            {
                this.MarDownsideDeviation = 0.0F;
            }
            else
            {
                this.MarDownsideDeviation = marDownsideDeviation;
            }
            // use default value if no "riskFreeSharpe" provided
            if (riskFreeSharpe == null)
            {
                this.RiskFreeSharpe = 0.0F;
            }
            else
            {
                this.RiskFreeSharpe = riskFreeSharpe;
            }
            this.BenchmarkId = benchmarkId;
            // use default value if no "riskFreeSortino" provided
            if (riskFreeSortino == null)
            {
                this.RiskFreeSortino = 0.0F;
            }
            else
            {
                this.RiskFreeSortino = riskFreeSortino;
            }
            this.HouseholdId = householdId;
            // use default value if no "minPercentileMonteCarlo" provided
            if (minPercentileMonteCarlo == null)
            {
                this.MinPercentileMonteCarlo = 20.0F;
            }
            else
            {
                this.MinPercentileMonteCarlo = minPercentileMonteCarlo;
            }
            // use default value if no "movingAverageNDay" provided
            if (movingAverageNDay == null)
            {
                this.MovingAverageNDay = 7;
            }
            else
            {
                this.MovingAverageNDay = movingAverageNDay;
            }
            // use default value if no "activePremiumPeriod" provided
            if (activePremiumPeriod == null)
            {
                this.ActivePremiumPeriod = ActivePremiumPeriodEnum.D;
            }
            else
            {
                this.ActivePremiumPeriod = activePremiumPeriod;
            }
            this.EndDate = endDate;
            this.StartDate = startDate;
            // use default value if no "nDayReturns" provided
            if (nDayReturns == null)
            {
                this.NDayReturns = 7;
            }
            else
            {
                this.NDayReturns = nDayReturns;
            }
            // use default value if no "varConfInterval" provided
            if (varConfInterval == null)
            {
                this.VarConfInterval = 95.0F;
            }
            else
            {
                this.VarConfInterval = varConfInterval;
            }
            // use default value if no "periodType" provided
            if (periodType == null)
            {
                this.PeriodType = PeriodTypeEnum.D;
            }
            else
            {
                this.PeriodType = periodType;
            }
            // use default value if no "riskFreeTreynor" provided
            if (riskFreeTreynor == null)
            {
                this.RiskFreeTreynor = 0.0F;
            }
            else
            {
                this.RiskFreeTreynor = riskFreeTreynor;
            }
            // use default value if no "nRollingMaxDrawdown" provided
            if (nRollingMaxDrawdown == null)
            {
                this.NRollingMaxDrawdown = 7;
            }
            else
            {
                this.NRollingMaxDrawdown = nRollingMaxDrawdown;
            }
            this.PortfolioId = portfolioId;
            // use default value if no "numSimMonteCarlo" provided
            if (numSimMonteCarlo == null)
            {
                this.NumSimMonteCarlo = 1000;
            }
            else
            {
                this.NumSimMonteCarlo = numSimMonteCarlo;
            }
            this.GoalId = goalId;
            this.AccountId = accountId;
            this.SecurityId = securityId;
            // use default value if no "nPathMonteCarlo" provided
            if (nPathMonteCarlo == null)
            {
                this.NPathMonteCarlo = 100;
            }
            else
            {
                this.NPathMonteCarlo = nPathMonteCarlo;
            }
            this.ClientId = clientId;
            // use default value if no "nRollingVolatility" provided
            if (nRollingVolatility == null)
            {
                this.NRollingVolatility = 7;
            }
            else
            {
                this.NRollingVolatility = nRollingVolatility;
            }
            // use default value if no "histFactor" provided
            if (histFactor == null)
            {
                this.HistFactor = 5.0F;
            }
            else
            {
                this.HistFactor = histFactor;
            }
            // use default value if no "maxPercentileMonteCarlo" provided
            if (maxPercentileMonteCarlo == null)
            {
                this.MaxPercentileMonteCarlo = 80.0F;
            }
            else
            {
                this.MaxPercentileMonteCarlo = maxPercentileMonteCarlo;
            }
        }
        

        /// <summary>
        /// Gets or Sets RiskFreeAlpha
        /// </summary>
        [DataMember(Name="risk_free_alpha", EmitDefaultValue=false)]
        public float? RiskFreeAlpha { get; set; }

        /// <summary>
        /// Gets or Sets AllocationId
        /// </summary>
        [DataMember(Name="allocation_id", EmitDefaultValue=false)]
        public Guid? AllocationId { get; set; }

        /// <summary>
        /// Gets or Sets MeanPercentileMonteCarlo
        /// </summary>
        [DataMember(Name="mean_percentile_monte_carlo", EmitDefaultValue=false)]
        public float? MeanPercentileMonteCarlo { get; set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name="model_id", EmitDefaultValue=false)]
        public Guid? ModelId { get; set; }

        /// <summary>
        /// Gets or Sets MarDownsideDeviation
        /// </summary>
        [DataMember(Name="mar_downside_deviation", EmitDefaultValue=false)]
        public float? MarDownsideDeviation { get; set; }

        /// <summary>
        /// Gets or Sets RiskFreeSharpe
        /// </summary>
        [DataMember(Name="risk_free_sharpe", EmitDefaultValue=false)]
        public float? RiskFreeSharpe { get; set; }

        /// <summary>
        /// Gets or Sets BenchmarkId
        /// </summary>
        [DataMember(Name="benchmark_id", EmitDefaultValue=false)]
        public Guid? BenchmarkId { get; set; }

        /// <summary>
        /// Gets or Sets RiskFreeSortino
        /// </summary>
        [DataMember(Name="risk_free_sortino", EmitDefaultValue=false)]
        public float? RiskFreeSortino { get; set; }

        /// <summary>
        /// Gets or Sets HouseholdId
        /// </summary>
        [DataMember(Name="household_id", EmitDefaultValue=false)]
        public Guid? HouseholdId { get; set; }

        /// <summary>
        /// Gets or Sets MinPercentileMonteCarlo
        /// </summary>
        [DataMember(Name="min_percentile_monte_carlo", EmitDefaultValue=false)]
        public float? MinPercentileMonteCarlo { get; set; }

        /// <summary>
        /// Gets or Sets MovingAverageNDay
        /// </summary>
        [DataMember(Name="moving_average_n_day", EmitDefaultValue=false)]
        public int? MovingAverageNDay { get; set; }


        /// <summary>
        /// Gets or Sets StatName
        /// </summary>
        [DataMember(Name="stat_name", EmitDefaultValue=false)]
        public string StatName { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets NDayReturns
        /// </summary>
        [DataMember(Name="n_day_returns", EmitDefaultValue=false)]
        public int? NDayReturns { get; set; }

        /// <summary>
        /// Gets or Sets VarConfInterval
        /// </summary>
        [DataMember(Name="var_conf_interval", EmitDefaultValue=false)]
        public float? VarConfInterval { get; set; }


        /// <summary>
        /// Gets or Sets RiskFreeTreynor
        /// </summary>
        [DataMember(Name="risk_free_treynor", EmitDefaultValue=false)]
        public float? RiskFreeTreynor { get; set; }

        /// <summary>
        /// Gets or Sets NRollingMaxDrawdown
        /// </summary>
        [DataMember(Name="n_rolling_max_drawdown", EmitDefaultValue=false)]
        public int? NRollingMaxDrawdown { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioId
        /// </summary>
        [DataMember(Name="portfolio_id", EmitDefaultValue=false)]
        public Guid? PortfolioId { get; set; }

        /// <summary>
        /// Gets or Sets NumSimMonteCarlo
        /// </summary>
        [DataMember(Name="num_sim_monte_carlo", EmitDefaultValue=false)]
        public int? NumSimMonteCarlo { get; set; }

        /// <summary>
        /// Gets or Sets GoalId
        /// </summary>
        [DataMember(Name="goal_id", EmitDefaultValue=false)]
        public Guid? GoalId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets SecurityId
        /// </summary>
        [DataMember(Name="security_id", EmitDefaultValue=false)]
        public Guid? SecurityId { get; set; }

        /// <summary>
        /// Gets or Sets NPathMonteCarlo
        /// </summary>
        [DataMember(Name="n_path_monte_carlo", EmitDefaultValue=false)]
        public int? NPathMonteCarlo { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets NRollingVolatility
        /// </summary>
        [DataMember(Name="n_rolling_volatility", EmitDefaultValue=false)]
        public int? NRollingVolatility { get; set; }

        /// <summary>
        /// Gets or Sets HistFactor
        /// </summary>
        [DataMember(Name="hist_factor", EmitDefaultValue=false)]
        public float? HistFactor { get; set; }

        /// <summary>
        /// Gets or Sets MaxPercentileMonteCarlo
        /// </summary>
        [DataMember(Name="max_percentile_monte_carlo", EmitDefaultValue=false)]
        public float? MaxPercentileMonteCarlo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerformanceCalculatorRequest {\n");
            sb.Append("  AnnualizedReturnPeriod: ").Append(AnnualizedReturnPeriod).Append("\n");
            sb.Append("  RiskFreeAlpha: ").Append(RiskFreeAlpha).Append("\n");
            sb.Append("  AllocationId: ").Append(AllocationId).Append("\n");
            sb.Append("  MeanPercentileMonteCarlo: ").Append(MeanPercentileMonteCarlo).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  MarDownsideDeviation: ").Append(MarDownsideDeviation).Append("\n");
            sb.Append("  RiskFreeSharpe: ").Append(RiskFreeSharpe).Append("\n");
            sb.Append("  BenchmarkId: ").Append(BenchmarkId).Append("\n");
            sb.Append("  RiskFreeSortino: ").Append(RiskFreeSortino).Append("\n");
            sb.Append("  HouseholdId: ").Append(HouseholdId).Append("\n");
            sb.Append("  MinPercentileMonteCarlo: ").Append(MinPercentileMonteCarlo).Append("\n");
            sb.Append("  MovingAverageNDay: ").Append(MovingAverageNDay).Append("\n");
            sb.Append("  ActivePremiumPeriod: ").Append(ActivePremiumPeriod).Append("\n");
            sb.Append("  StatName: ").Append(StatName).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  NDayReturns: ").Append(NDayReturns).Append("\n");
            sb.Append("  VarConfInterval: ").Append(VarConfInterval).Append("\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  RiskFreeTreynor: ").Append(RiskFreeTreynor).Append("\n");
            sb.Append("  NRollingMaxDrawdown: ").Append(NRollingMaxDrawdown).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  NumSimMonteCarlo: ").Append(NumSimMonteCarlo).Append("\n");
            sb.Append("  GoalId: ").Append(GoalId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  NPathMonteCarlo: ").Append(NPathMonteCarlo).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  NRollingVolatility: ").Append(NRollingVolatility).Append("\n");
            sb.Append("  HistFactor: ").Append(HistFactor).Append("\n");
            sb.Append("  MaxPercentileMonteCarlo: ").Append(MaxPercentileMonteCarlo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PerformanceCalculatorRequest);
        }

        /// <summary>
        /// Returns true if PerformanceCalculatorRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PerformanceCalculatorRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerformanceCalculatorRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AnnualizedReturnPeriod == input.AnnualizedReturnPeriod ||
                    (this.AnnualizedReturnPeriod != null &&
                    this.AnnualizedReturnPeriod.Equals(input.AnnualizedReturnPeriod))
                ) && 
                (
                    this.RiskFreeAlpha == input.RiskFreeAlpha ||
                    (this.RiskFreeAlpha != null &&
                    this.RiskFreeAlpha.Equals(input.RiskFreeAlpha))
                ) && 
                (
                    this.AllocationId == input.AllocationId ||
                    (this.AllocationId != null &&
                    this.AllocationId.Equals(input.AllocationId))
                ) && 
                (
                    this.MeanPercentileMonteCarlo == input.MeanPercentileMonteCarlo ||
                    (this.MeanPercentileMonteCarlo != null &&
                    this.MeanPercentileMonteCarlo.Equals(input.MeanPercentileMonteCarlo))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.MarDownsideDeviation == input.MarDownsideDeviation ||
                    (this.MarDownsideDeviation != null &&
                    this.MarDownsideDeviation.Equals(input.MarDownsideDeviation))
                ) && 
                (
                    this.RiskFreeSharpe == input.RiskFreeSharpe ||
                    (this.RiskFreeSharpe != null &&
                    this.RiskFreeSharpe.Equals(input.RiskFreeSharpe))
                ) && 
                (
                    this.BenchmarkId == input.BenchmarkId ||
                    (this.BenchmarkId != null &&
                    this.BenchmarkId.Equals(input.BenchmarkId))
                ) && 
                (
                    this.RiskFreeSortino == input.RiskFreeSortino ||
                    (this.RiskFreeSortino != null &&
                    this.RiskFreeSortino.Equals(input.RiskFreeSortino))
                ) && 
                (
                    this.HouseholdId == input.HouseholdId ||
                    (this.HouseholdId != null &&
                    this.HouseholdId.Equals(input.HouseholdId))
                ) && 
                (
                    this.MinPercentileMonteCarlo == input.MinPercentileMonteCarlo ||
                    (this.MinPercentileMonteCarlo != null &&
                    this.MinPercentileMonteCarlo.Equals(input.MinPercentileMonteCarlo))
                ) && 
                (
                    this.MovingAverageNDay == input.MovingAverageNDay ||
                    (this.MovingAverageNDay != null &&
                    this.MovingAverageNDay.Equals(input.MovingAverageNDay))
                ) && 
                (
                    this.ActivePremiumPeriod == input.ActivePremiumPeriod ||
                    (this.ActivePremiumPeriod != null &&
                    this.ActivePremiumPeriod.Equals(input.ActivePremiumPeriod))
                ) && 
                (
                    this.StatName == input.StatName ||
                    (this.StatName != null &&
                    this.StatName.Equals(input.StatName))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.NDayReturns == input.NDayReturns ||
                    (this.NDayReturns != null &&
                    this.NDayReturns.Equals(input.NDayReturns))
                ) && 
                (
                    this.VarConfInterval == input.VarConfInterval ||
                    (this.VarConfInterval != null &&
                    this.VarConfInterval.Equals(input.VarConfInterval))
                ) && 
                (
                    this.PeriodType == input.PeriodType ||
                    (this.PeriodType != null &&
                    this.PeriodType.Equals(input.PeriodType))
                ) && 
                (
                    this.RiskFreeTreynor == input.RiskFreeTreynor ||
                    (this.RiskFreeTreynor != null &&
                    this.RiskFreeTreynor.Equals(input.RiskFreeTreynor))
                ) && 
                (
                    this.NRollingMaxDrawdown == input.NRollingMaxDrawdown ||
                    (this.NRollingMaxDrawdown != null &&
                    this.NRollingMaxDrawdown.Equals(input.NRollingMaxDrawdown))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.NumSimMonteCarlo == input.NumSimMonteCarlo ||
                    (this.NumSimMonteCarlo != null &&
                    this.NumSimMonteCarlo.Equals(input.NumSimMonteCarlo))
                ) && 
                (
                    this.GoalId == input.GoalId ||
                    (this.GoalId != null &&
                    this.GoalId.Equals(input.GoalId))
                ) && 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.NPathMonteCarlo == input.NPathMonteCarlo ||
                    (this.NPathMonteCarlo != null &&
                    this.NPathMonteCarlo.Equals(input.NPathMonteCarlo))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.NRollingVolatility == input.NRollingVolatility ||
                    (this.NRollingVolatility != null &&
                    this.NRollingVolatility.Equals(input.NRollingVolatility))
                ) && 
                (
                    this.HistFactor == input.HistFactor ||
                    (this.HistFactor != null &&
                    this.HistFactor.Equals(input.HistFactor))
                ) && 
                (
                    this.MaxPercentileMonteCarlo == input.MaxPercentileMonteCarlo ||
                    (this.MaxPercentileMonteCarlo != null &&
                    this.MaxPercentileMonteCarlo.Equals(input.MaxPercentileMonteCarlo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AnnualizedReturnPeriod != null)
                    hashCode = hashCode * 59 + this.AnnualizedReturnPeriod.GetHashCode();
                if (this.RiskFreeAlpha != null)
                    hashCode = hashCode * 59 + this.RiskFreeAlpha.GetHashCode();
                if (this.AllocationId != null)
                    hashCode = hashCode * 59 + this.AllocationId.GetHashCode();
                if (this.MeanPercentileMonteCarlo != null)
                    hashCode = hashCode * 59 + this.MeanPercentileMonteCarlo.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.MarDownsideDeviation != null)
                    hashCode = hashCode * 59 + this.MarDownsideDeviation.GetHashCode();
                if (this.RiskFreeSharpe != null)
                    hashCode = hashCode * 59 + this.RiskFreeSharpe.GetHashCode();
                if (this.BenchmarkId != null)
                    hashCode = hashCode * 59 + this.BenchmarkId.GetHashCode();
                if (this.RiskFreeSortino != null)
                    hashCode = hashCode * 59 + this.RiskFreeSortino.GetHashCode();
                if (this.HouseholdId != null)
                    hashCode = hashCode * 59 + this.HouseholdId.GetHashCode();
                if (this.MinPercentileMonteCarlo != null)
                    hashCode = hashCode * 59 + this.MinPercentileMonteCarlo.GetHashCode();
                if (this.MovingAverageNDay != null)
                    hashCode = hashCode * 59 + this.MovingAverageNDay.GetHashCode();
                if (this.ActivePremiumPeriod != null)
                    hashCode = hashCode * 59 + this.ActivePremiumPeriod.GetHashCode();
                if (this.StatName != null)
                    hashCode = hashCode * 59 + this.StatName.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.NDayReturns != null)
                    hashCode = hashCode * 59 + this.NDayReturns.GetHashCode();
                if (this.VarConfInterval != null)
                    hashCode = hashCode * 59 + this.VarConfInterval.GetHashCode();
                if (this.PeriodType != null)
                    hashCode = hashCode * 59 + this.PeriodType.GetHashCode();
                if (this.RiskFreeTreynor != null)
                    hashCode = hashCode * 59 + this.RiskFreeTreynor.GetHashCode();
                if (this.NRollingMaxDrawdown != null)
                    hashCode = hashCode * 59 + this.NRollingMaxDrawdown.GetHashCode();
                if (this.PortfolioId != null)
                    hashCode = hashCode * 59 + this.PortfolioId.GetHashCode();
                if (this.NumSimMonteCarlo != null)
                    hashCode = hashCode * 59 + this.NumSimMonteCarlo.GetHashCode();
                if (this.GoalId != null)
                    hashCode = hashCode * 59 + this.GoalId.GetHashCode();
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.SecurityId != null)
                    hashCode = hashCode * 59 + this.SecurityId.GetHashCode();
                if (this.NPathMonteCarlo != null)
                    hashCode = hashCode * 59 + this.NPathMonteCarlo.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.NRollingVolatility != null)
                    hashCode = hashCode * 59 + this.NRollingVolatility.GetHashCode();
                if (this.HistFactor != null)
                    hashCode = hashCode * 59 + this.HistFactor.GetHashCode();
                if (this.MaxPercentileMonteCarlo != null)
                    hashCode = hashCode * 59 + this.MaxPercentileMonteCarlo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MeanPercentileMonteCarlo (float?) minimum
            if(this.MeanPercentileMonteCarlo < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MeanPercentileMonteCarlo, must be a value greater than or equal to 0.", new [] { "MeanPercentileMonteCarlo" });
            }

            // MinPercentileMonteCarlo (float?) minimum
            if(this.MinPercentileMonteCarlo < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MinPercentileMonteCarlo, must be a value greater than or equal to 0.", new [] { "MinPercentileMonteCarlo" });
            }

            // MovingAverageNDay (int?) minimum
            if(this.MovingAverageNDay < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MovingAverageNDay, must be a value greater than or equal to 1.", new [] { "MovingAverageNDay" });
            }

            // NDayReturns (int?) minimum
            if(this.NDayReturns < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NDayReturns, must be a value greater than or equal to 1.", new [] { "NDayReturns" });
            }

            // NRollingMaxDrawdown (int?) minimum
            if(this.NRollingMaxDrawdown < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NRollingMaxDrawdown, must be a value greater than or equal to 1.", new [] { "NRollingMaxDrawdown" });
            }

            // NumSimMonteCarlo (int?) minimum
            if(this.NumSimMonteCarlo < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumSimMonteCarlo, must be a value greater than or equal to 1.", new [] { "NumSimMonteCarlo" });
            }

            // NPathMonteCarlo (int?) minimum
            if(this.NPathMonteCarlo < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NPathMonteCarlo, must be a value greater than or equal to 1.", new [] { "NPathMonteCarlo" });
            }

            // NRollingVolatility (int?) minimum
            if(this.NRollingVolatility < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NRollingVolatility, must be a value greater than or equal to 1.", new [] { "NRollingVolatility" });
            }

            // MaxPercentileMonteCarlo (float?) minimum
            if(this.MaxPercentileMonteCarlo < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MaxPercentileMonteCarlo, must be a value greater than or equal to 0.", new [] { "MaxPercentileMonteCarlo" });
            }

            yield break;
        }
    }

}
