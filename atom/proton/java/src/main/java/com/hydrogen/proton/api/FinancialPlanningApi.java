/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiCallback;
import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.ApiResponse;
import com.hydrogen.proton.Configuration;
import com.hydrogen.proton.Pair;
import com.hydrogen.proton.ProgressRequestBody;
import com.hydrogen.proton.model.EducationCalculatorAnnualCostRequest;
import com.hydrogen.proton.model.EducationCalculatorDepositAmountRequest;
import com.hydrogen.proton.model.EducationCalculatorPercentCoveredRequest;
import com.hydrogen.proton.model.MortgageCalculatorDownPaymentRequest;
import com.hydrogen.proton.model.MortgageCalculatorHomePriceRequest;
import com.hydrogen.proton.model.MortgageCalculatorPeriodicPaymentRequest;
import com.hydrogen.proton.model.PurchaseCalculatorAmountRequest;
import com.hydrogen.proton.model.PurchaseCalculatorDepositAmountRequest;
import com.hydrogen.proton.model.PurchaseCalculatorHorizonRequest;
import com.hydrogen.proton.model.RetirementCalculatorDepositAmountRequest;
import com.hydrogen.proton.model.RetirementCalculatorExpensesRequest;
import com.hydrogen.proton.model.RetirementCalculatorPercentCoveredRequest;
import com.hydrogen.proton.ApiClient;
import com.hydrogen.proton.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FinancialPlanningApi {
    private ApiClient apiClient;

    public FinancialPlanningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FinancialPlanningApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for educationCalculatorAnnualCost
     * @param educationCalculatorAnnualCostRequest Request payload for Education Calculator - Annual Cost (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call educationCalculatorAnnualCostCall(EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = educationCalculatorAnnualCostRequest;

        // create path and map variables
        String localVarPath = "/education_calculator/annual_cost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call educationCalculatorAnnualCostValidateBeforeCall(EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'educationCalculatorAnnualCostRequest' is set
        if (educationCalculatorAnnualCostRequest == null) {
            throw new ApiException("Missing the required parameter 'educationCalculatorAnnualCostRequest' when calling educationCalculatorAnnualCost(Async)");
        }
        

        com.squareup.okhttp.Call call = educationCalculatorAnnualCostCall(educationCalculatorAnnualCostRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Education Calculator - Annual Cost
     * Calculate the achievable education costs
     * @param educationCalculatorAnnualCostRequest Request payload for Education Calculator - Annual Cost (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> educationCalculatorAnnualCost(EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = educationCalculatorAnnualCostWithHttpInfo(educationCalculatorAnnualCostRequest);
        return resp.getData();
    }

    /**
     * Education Calculator - Annual Cost
     * Calculate the achievable education costs
     * @param educationCalculatorAnnualCostRequest Request payload for Education Calculator - Annual Cost (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> educationCalculatorAnnualCostWithHttpInfo(EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest) throws ApiException {
        com.squareup.okhttp.Call call = educationCalculatorAnnualCostValidateBeforeCall(educationCalculatorAnnualCostRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Education Calculator - Annual Cost (asynchronously)
     * Calculate the achievable education costs
     * @param educationCalculatorAnnualCostRequest Request payload for Education Calculator - Annual Cost (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call educationCalculatorAnnualCostAsync(EducationCalculatorAnnualCostRequest educationCalculatorAnnualCostRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = educationCalculatorAnnualCostValidateBeforeCall(educationCalculatorAnnualCostRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for educationCalculatorDepositAmount
     * @param educationCalculatorDepositAmountRequest Request payload for Education Calculator - Deposit Amount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call educationCalculatorDepositAmountCall(EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = educationCalculatorDepositAmountRequest;

        // create path and map variables
        String localVarPath = "/education_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call educationCalculatorDepositAmountValidateBeforeCall(EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'educationCalculatorDepositAmountRequest' is set
        if (educationCalculatorDepositAmountRequest == null) {
            throw new ApiException("Missing the required parameter 'educationCalculatorDepositAmountRequest' when calling educationCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = educationCalculatorDepositAmountCall(educationCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Education Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount to achieve education costs
     * @param educationCalculatorDepositAmountRequest Request payload for Education Calculator - Deposit Amount (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> educationCalculatorDepositAmount(EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = educationCalculatorDepositAmountWithHttpInfo(educationCalculatorDepositAmountRequest);
        return resp.getData();
    }

    /**
     * Education Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount to achieve education costs
     * @param educationCalculatorDepositAmountRequest Request payload for Education Calculator - Deposit Amount (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> educationCalculatorDepositAmountWithHttpInfo(EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest) throws ApiException {
        com.squareup.okhttp.Call call = educationCalculatorDepositAmountValidateBeforeCall(educationCalculatorDepositAmountRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Education Calculator - Deposit Amount (asynchronously)
     * Calculate the necessary periodic deposit amount to achieve education costs
     * @param educationCalculatorDepositAmountRequest Request payload for Education Calculator - Deposit Amount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call educationCalculatorDepositAmountAsync(EducationCalculatorDepositAmountRequest educationCalculatorDepositAmountRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = educationCalculatorDepositAmountValidateBeforeCall(educationCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for educationCalculatorPercentCovered
     * @param educationCalculatorPercentCoveredRequest Request payload for Education Calculator - Percent Covered (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call educationCalculatorPercentCoveredCall(EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = educationCalculatorPercentCoveredRequest;

        // create path and map variables
        String localVarPath = "/education_calculator/percent_covered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call educationCalculatorPercentCoveredValidateBeforeCall(EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'educationCalculatorPercentCoveredRequest' is set
        if (educationCalculatorPercentCoveredRequest == null) {
            throw new ApiException("Missing the required parameter 'educationCalculatorPercentCoveredRequest' when calling educationCalculatorPercentCovered(Async)");
        }
        

        com.squareup.okhttp.Call call = educationCalculatorPercentCoveredCall(educationCalculatorPercentCoveredRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Education Calculator - Percent Covered
     * Calculate the achievable percentage of education costs that can be covered
     * @param educationCalculatorPercentCoveredRequest Request payload for Education Calculator - Percent Covered (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> educationCalculatorPercentCovered(EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = educationCalculatorPercentCoveredWithHttpInfo(educationCalculatorPercentCoveredRequest);
        return resp.getData();
    }

    /**
     * Education Calculator - Percent Covered
     * Calculate the achievable percentage of education costs that can be covered
     * @param educationCalculatorPercentCoveredRequest Request payload for Education Calculator - Percent Covered (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> educationCalculatorPercentCoveredWithHttpInfo(EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest) throws ApiException {
        com.squareup.okhttp.Call call = educationCalculatorPercentCoveredValidateBeforeCall(educationCalculatorPercentCoveredRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Education Calculator - Percent Covered (asynchronously)
     * Calculate the achievable percentage of education costs that can be covered
     * @param educationCalculatorPercentCoveredRequest Request payload for Education Calculator - Percent Covered (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call educationCalculatorPercentCoveredAsync(EducationCalculatorPercentCoveredRequest educationCalculatorPercentCoveredRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = educationCalculatorPercentCoveredValidateBeforeCall(educationCalculatorPercentCoveredRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mortgageCalculatorDownPayment
     * @param mortgageCalculatorDownPaymentRequest Request payload for Mortgage Calculator - Down Payment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mortgageCalculatorDownPaymentCall(MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mortgageCalculatorDownPaymentRequest;

        // create path and map variables
        String localVarPath = "/mortgage_calculator/down_payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mortgageCalculatorDownPaymentValidateBeforeCall(MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mortgageCalculatorDownPaymentRequest' is set
        if (mortgageCalculatorDownPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'mortgageCalculatorDownPaymentRequest' when calling mortgageCalculatorDownPayment(Async)");
        }
        

        com.squareup.okhttp.Call call = mortgageCalculatorDownPaymentCall(mortgageCalculatorDownPaymentRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mortgage Calculator - Down Payment
     * Calculate the necessary down payment for the mortgage
     * @param mortgageCalculatorDownPaymentRequest Request payload for Mortgage Calculator - Down Payment (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> mortgageCalculatorDownPayment(MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = mortgageCalculatorDownPaymentWithHttpInfo(mortgageCalculatorDownPaymentRequest);
        return resp.getData();
    }

    /**
     * Mortgage Calculator - Down Payment
     * Calculate the necessary down payment for the mortgage
     * @param mortgageCalculatorDownPaymentRequest Request payload for Mortgage Calculator - Down Payment (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> mortgageCalculatorDownPaymentWithHttpInfo(MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest) throws ApiException {
        com.squareup.okhttp.Call call = mortgageCalculatorDownPaymentValidateBeforeCall(mortgageCalculatorDownPaymentRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mortgage Calculator - Down Payment (asynchronously)
     * Calculate the necessary down payment for the mortgage
     * @param mortgageCalculatorDownPaymentRequest Request payload for Mortgage Calculator - Down Payment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mortgageCalculatorDownPaymentAsync(MortgageCalculatorDownPaymentRequest mortgageCalculatorDownPaymentRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mortgageCalculatorDownPaymentValidateBeforeCall(mortgageCalculatorDownPaymentRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mortgageCalculatorHomePrice
     * @param mortgageCalculatorHomePriceRequest Request payload for Mortgage Calculator - Home Price (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mortgageCalculatorHomePriceCall(MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mortgageCalculatorHomePriceRequest;

        // create path and map variables
        String localVarPath = "/mortgage_calculator/home_price";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mortgageCalculatorHomePriceValidateBeforeCall(MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mortgageCalculatorHomePriceRequest' is set
        if (mortgageCalculatorHomePriceRequest == null) {
            throw new ApiException("Missing the required parameter 'mortgageCalculatorHomePriceRequest' when calling mortgageCalculatorHomePrice(Async)");
        }
        

        com.squareup.okhttp.Call call = mortgageCalculatorHomePriceCall(mortgageCalculatorHomePriceRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mortgage Calculator - Home Price
     * Calculate the achievable home price for the mortgage
     * @param mortgageCalculatorHomePriceRequest Request payload for Mortgage Calculator - Home Price (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> mortgageCalculatorHomePrice(MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = mortgageCalculatorHomePriceWithHttpInfo(mortgageCalculatorHomePriceRequest);
        return resp.getData();
    }

    /**
     * Mortgage Calculator - Home Price
     * Calculate the achievable home price for the mortgage
     * @param mortgageCalculatorHomePriceRequest Request payload for Mortgage Calculator - Home Price (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> mortgageCalculatorHomePriceWithHttpInfo(MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest) throws ApiException {
        com.squareup.okhttp.Call call = mortgageCalculatorHomePriceValidateBeforeCall(mortgageCalculatorHomePriceRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mortgage Calculator - Home Price (asynchronously)
     * Calculate the achievable home price for the mortgage
     * @param mortgageCalculatorHomePriceRequest Request payload for Mortgage Calculator - Home Price (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mortgageCalculatorHomePriceAsync(MortgageCalculatorHomePriceRequest mortgageCalculatorHomePriceRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mortgageCalculatorHomePriceValidateBeforeCall(mortgageCalculatorHomePriceRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mortgageCalculatorPeriodicPayment
     * @param mortgageCalculatorPeriodicPaymentRequest Request payload for Mortgage Calculator - Periodic Payment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mortgageCalculatorPeriodicPaymentCall(MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = mortgageCalculatorPeriodicPaymentRequest;

        // create path and map variables
        String localVarPath = "/mortgage_calculator/periodic_payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mortgageCalculatorPeriodicPaymentValidateBeforeCall(MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'mortgageCalculatorPeriodicPaymentRequest' is set
        if (mortgageCalculatorPeriodicPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'mortgageCalculatorPeriodicPaymentRequest' when calling mortgageCalculatorPeriodicPayment(Async)");
        }
        

        com.squareup.okhttp.Call call = mortgageCalculatorPeriodicPaymentCall(mortgageCalculatorPeriodicPaymentRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Mortgage Calculator - Periodic Payment
     * Calculate the periodic payment for the mortgage
     * @param mortgageCalculatorPeriodicPaymentRequest Request payload for Mortgage Calculator - Periodic Payment (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> mortgageCalculatorPeriodicPayment(MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = mortgageCalculatorPeriodicPaymentWithHttpInfo(mortgageCalculatorPeriodicPaymentRequest);
        return resp.getData();
    }

    /**
     * Mortgage Calculator - Periodic Payment
     * Calculate the periodic payment for the mortgage
     * @param mortgageCalculatorPeriodicPaymentRequest Request payload for Mortgage Calculator - Periodic Payment (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> mortgageCalculatorPeriodicPaymentWithHttpInfo(MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest) throws ApiException {
        com.squareup.okhttp.Call call = mortgageCalculatorPeriodicPaymentValidateBeforeCall(mortgageCalculatorPeriodicPaymentRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Mortgage Calculator - Periodic Payment (asynchronously)
     * Calculate the periodic payment for the mortgage
     * @param mortgageCalculatorPeriodicPaymentRequest Request payload for Mortgage Calculator - Periodic Payment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mortgageCalculatorPeriodicPaymentAsync(MortgageCalculatorPeriodicPaymentRequest mortgageCalculatorPeriodicPaymentRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mortgageCalculatorPeriodicPaymentValidateBeforeCall(mortgageCalculatorPeriodicPaymentRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purchaseCalculatorAmount
     * @param purchaseCalculatorAmountRequest Request payload for Purchase Calculator - Amount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call purchaseCalculatorAmountCall(PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = purchaseCalculatorAmountRequest;

        // create path and map variables
        String localVarPath = "/purchase_calculator/amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purchaseCalculatorAmountValidateBeforeCall(PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'purchaseCalculatorAmountRequest' is set
        if (purchaseCalculatorAmountRequest == null) {
            throw new ApiException("Missing the required parameter 'purchaseCalculatorAmountRequest' when calling purchaseCalculatorAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = purchaseCalculatorAmountCall(purchaseCalculatorAmountRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purchase Calculator - Amount
     * Calculate the achievable purchase amount
     * @param purchaseCalculatorAmountRequest Request payload for Purchase Calculator - Amount (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> purchaseCalculatorAmount(PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = purchaseCalculatorAmountWithHttpInfo(purchaseCalculatorAmountRequest);
        return resp.getData();
    }

    /**
     * Purchase Calculator - Amount
     * Calculate the achievable purchase amount
     * @param purchaseCalculatorAmountRequest Request payload for Purchase Calculator - Amount (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> purchaseCalculatorAmountWithHttpInfo(PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest) throws ApiException {
        com.squareup.okhttp.Call call = purchaseCalculatorAmountValidateBeforeCall(purchaseCalculatorAmountRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Purchase Calculator - Amount (asynchronously)
     * Calculate the achievable purchase amount
     * @param purchaseCalculatorAmountRequest Request payload for Purchase Calculator - Amount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call purchaseCalculatorAmountAsync(PurchaseCalculatorAmountRequest purchaseCalculatorAmountRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purchaseCalculatorAmountValidateBeforeCall(purchaseCalculatorAmountRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purchaseCalculatorDepositAmount
     * @param purchaseCalculatorDepositAmountRequest Request payload for Purchase Calculator - Deposit Amount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call purchaseCalculatorDepositAmountCall(PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = purchaseCalculatorDepositAmountRequest;

        // create path and map variables
        String localVarPath = "/purchase_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purchaseCalculatorDepositAmountValidateBeforeCall(PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'purchaseCalculatorDepositAmountRequest' is set
        if (purchaseCalculatorDepositAmountRequest == null) {
            throw new ApiException("Missing the required parameter 'purchaseCalculatorDepositAmountRequest' when calling purchaseCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = purchaseCalculatorDepositAmountCall(purchaseCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purchase Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount to achieve the purchase amount
     * @param purchaseCalculatorDepositAmountRequest Request payload for Purchase Calculator - Deposit Amount (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> purchaseCalculatorDepositAmount(PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = purchaseCalculatorDepositAmountWithHttpInfo(purchaseCalculatorDepositAmountRequest);
        return resp.getData();
    }

    /**
     * Purchase Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount to achieve the purchase amount
     * @param purchaseCalculatorDepositAmountRequest Request payload for Purchase Calculator - Deposit Amount (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> purchaseCalculatorDepositAmountWithHttpInfo(PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest) throws ApiException {
        com.squareup.okhttp.Call call = purchaseCalculatorDepositAmountValidateBeforeCall(purchaseCalculatorDepositAmountRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Purchase Calculator - Deposit Amount (asynchronously)
     * Calculate the necessary periodic deposit amount to achieve the purchase amount
     * @param purchaseCalculatorDepositAmountRequest Request payload for Purchase Calculator - Deposit Amount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call purchaseCalculatorDepositAmountAsync(PurchaseCalculatorDepositAmountRequest purchaseCalculatorDepositAmountRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purchaseCalculatorDepositAmountValidateBeforeCall(purchaseCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for purchaseCalculatorHorizon
     * @param purchaseCalculatorHorizonRequest Request payload for Purchase Calculator - Horizon (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call purchaseCalculatorHorizonCall(PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = purchaseCalculatorHorizonRequest;

        // create path and map variables
        String localVarPath = "/purchase_calculator/horizon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call purchaseCalculatorHorizonValidateBeforeCall(PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'purchaseCalculatorHorizonRequest' is set
        if (purchaseCalculatorHorizonRequest == null) {
            throw new ApiException("Missing the required parameter 'purchaseCalculatorHorizonRequest' when calling purchaseCalculatorHorizon(Async)");
        }
        

        com.squareup.okhttp.Call call = purchaseCalculatorHorizonCall(purchaseCalculatorHorizonRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Purchase Calculator - Horizon
     * Calculate the necessary time horizon to achieve the purchase amount
     * @param purchaseCalculatorHorizonRequest Request payload for Purchase Calculator - Horizon (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> purchaseCalculatorHorizon(PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = purchaseCalculatorHorizonWithHttpInfo(purchaseCalculatorHorizonRequest);
        return resp.getData();
    }

    /**
     * Purchase Calculator - Horizon
     * Calculate the necessary time horizon to achieve the purchase amount
     * @param purchaseCalculatorHorizonRequest Request payload for Purchase Calculator - Horizon (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> purchaseCalculatorHorizonWithHttpInfo(PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest) throws ApiException {
        com.squareup.okhttp.Call call = purchaseCalculatorHorizonValidateBeforeCall(purchaseCalculatorHorizonRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Purchase Calculator - Horizon (asynchronously)
     * Calculate the necessary time horizon to achieve the purchase amount
     * @param purchaseCalculatorHorizonRequest Request payload for Purchase Calculator - Horizon (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call purchaseCalculatorHorizonAsync(PurchaseCalculatorHorizonRequest purchaseCalculatorHorizonRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = purchaseCalculatorHorizonValidateBeforeCall(purchaseCalculatorHorizonRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retirementCalculatorDepositAmount
     * @param retirementCalculatorDepositAmountRequest Request payload for Retirement Calculator - Deposit AMount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retirementCalculatorDepositAmountCall(RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = retirementCalculatorDepositAmountRequest;

        // create path and map variables
        String localVarPath = "/retirement_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retirementCalculatorDepositAmountValidateBeforeCall(RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'retirementCalculatorDepositAmountRequest' is set
        if (retirementCalculatorDepositAmountRequest == null) {
            throw new ApiException("Missing the required parameter 'retirementCalculatorDepositAmountRequest' when calling retirementCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = retirementCalculatorDepositAmountCall(retirementCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retirement Calculator - Deposit Amount
     * Calculate the necessary period deposit amount to achieve the retirement expenses
     * @param retirementCalculatorDepositAmountRequest Request payload for Retirement Calculator - Deposit AMount (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> retirementCalculatorDepositAmount(RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = retirementCalculatorDepositAmountWithHttpInfo(retirementCalculatorDepositAmountRequest);
        return resp.getData();
    }

    /**
     * Retirement Calculator - Deposit Amount
     * Calculate the necessary period deposit amount to achieve the retirement expenses
     * @param retirementCalculatorDepositAmountRequest Request payload for Retirement Calculator - Deposit AMount (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> retirementCalculatorDepositAmountWithHttpInfo(RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest) throws ApiException {
        com.squareup.okhttp.Call call = retirementCalculatorDepositAmountValidateBeforeCall(retirementCalculatorDepositAmountRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retirement Calculator - Deposit Amount (asynchronously)
     * Calculate the necessary period deposit amount to achieve the retirement expenses
     * @param retirementCalculatorDepositAmountRequest Request payload for Retirement Calculator - Deposit AMount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retirementCalculatorDepositAmountAsync(RetirementCalculatorDepositAmountRequest retirementCalculatorDepositAmountRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retirementCalculatorDepositAmountValidateBeforeCall(retirementCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retirementCalculatorExpenses
     * @param retirementCalculatorExpensesRequest Request payload for Retirement Calculator - Expenses (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retirementCalculatorExpensesCall(RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = retirementCalculatorExpensesRequest;

        // create path and map variables
        String localVarPath = "/retirement_calculator/expenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retirementCalculatorExpensesValidateBeforeCall(RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'retirementCalculatorExpensesRequest' is set
        if (retirementCalculatorExpensesRequest == null) {
            throw new ApiException("Missing the required parameter 'retirementCalculatorExpensesRequest' when calling retirementCalculatorExpenses(Async)");
        }
        

        com.squareup.okhttp.Call call = retirementCalculatorExpensesCall(retirementCalculatorExpensesRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retirement Calculator - Expenses
     * Calculate the achievable retirement expenses
     * @param retirementCalculatorExpensesRequest Request payload for Retirement Calculator - Expenses (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> retirementCalculatorExpenses(RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = retirementCalculatorExpensesWithHttpInfo(retirementCalculatorExpensesRequest);
        return resp.getData();
    }

    /**
     * Retirement Calculator - Expenses
     * Calculate the achievable retirement expenses
     * @param retirementCalculatorExpensesRequest Request payload for Retirement Calculator - Expenses (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> retirementCalculatorExpensesWithHttpInfo(RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest) throws ApiException {
        com.squareup.okhttp.Call call = retirementCalculatorExpensesValidateBeforeCall(retirementCalculatorExpensesRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retirement Calculator - Expenses (asynchronously)
     * Calculate the achievable retirement expenses
     * @param retirementCalculatorExpensesRequest Request payload for Retirement Calculator - Expenses (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retirementCalculatorExpensesAsync(RetirementCalculatorExpensesRequest retirementCalculatorExpensesRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retirementCalculatorExpensesValidateBeforeCall(retirementCalculatorExpensesRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for retirementCalculatorPercentCovered
     * @param retirementCalculatorPercentCoveredRequest Request payload for Retirement Calculator - Percent Covered (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retirementCalculatorPercentCoveredCall(RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = retirementCalculatorPercentCoveredRequest;

        // create path and map variables
        String localVarPath = "/retirement_calculator/percent_covered";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retirementCalculatorPercentCoveredValidateBeforeCall(RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'retirementCalculatorPercentCoveredRequest' is set
        if (retirementCalculatorPercentCoveredRequest == null) {
            throw new ApiException("Missing the required parameter 'retirementCalculatorPercentCoveredRequest' when calling retirementCalculatorPercentCovered(Async)");
        }
        

        com.squareup.okhttp.Call call = retirementCalculatorPercentCoveredCall(retirementCalculatorPercentCoveredRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retirement Calculator - Percent Covered
     * Calculate the achievable percentage of retirement expenses that can be covered
     * @param retirementCalculatorPercentCoveredRequest Request payload for Retirement Calculator - Percent Covered (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> retirementCalculatorPercentCovered(RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = retirementCalculatorPercentCoveredWithHttpInfo(retirementCalculatorPercentCoveredRequest);
        return resp.getData();
    }

    /**
     * Retirement Calculator - Percent Covered
     * Calculate the achievable percentage of retirement expenses that can be covered
     * @param retirementCalculatorPercentCoveredRequest Request payload for Retirement Calculator - Percent Covered (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> retirementCalculatorPercentCoveredWithHttpInfo(RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest) throws ApiException {
        com.squareup.okhttp.Call call = retirementCalculatorPercentCoveredValidateBeforeCall(retirementCalculatorPercentCoveredRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retirement Calculator - Percent Covered (asynchronously)
     * Calculate the achievable percentage of retirement expenses that can be covered
     * @param retirementCalculatorPercentCoveredRequest Request payload for Retirement Calculator - Percent Covered (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retirementCalculatorPercentCoveredAsync(RetirementCalculatorPercentCoveredRequest retirementCalculatorPercentCoveredRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retirementCalculatorPercentCoveredValidateBeforeCall(retirementCalculatorPercentCoveredRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
