/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GoalAccumulationAllocationRequest', 'model/GoalAccumulationRecommendationRequest', 'model/GoalAccumulationStatusRequest', 'model/GoalDecumulationAllocationRequest', 'model/GoalDecumulationRecommendationRequest', 'model/GoalDecumulationStatusRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GoalAccumulationAllocationRequest'), require('../model/GoalAccumulationRecommendationRequest'), require('../model/GoalAccumulationStatusRequest'), require('../model/GoalDecumulationAllocationRequest'), require('../model/GoalDecumulationRecommendationRequest'), require('../model/GoalDecumulationStatusRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenProtonApi) {
      root.HydrogenProtonApi = {};
    }
    root.HydrogenProtonApi.GoalsApi = factory(root.HydrogenProtonApi.ApiClient, root.HydrogenProtonApi.GoalAccumulationAllocationRequest, root.HydrogenProtonApi.GoalAccumulationRecommendationRequest, root.HydrogenProtonApi.GoalAccumulationStatusRequest, root.HydrogenProtonApi.GoalDecumulationAllocationRequest, root.HydrogenProtonApi.GoalDecumulationRecommendationRequest, root.HydrogenProtonApi.GoalDecumulationStatusRequest);
  }
}(this, function(ApiClient, GoalAccumulationAllocationRequest, GoalAccumulationRecommendationRequest, GoalAccumulationStatusRequest, GoalDecumulationAllocationRequest, GoalDecumulationRecommendationRequest, GoalDecumulationStatusRequest) {
  'use strict';

  /**
   * Goals service.
   * @module api/GoalsApi
   * @version 1.9.2
   */

  /**
   * Constructs a new GoalsApi. 
   * @alias module:api/GoalsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the goalAccumulationAllocation operation.
     * @callback module:api/GoalsApi~goalAccumulationAllocationCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal Accumulation Allocation
     * Allocate based on an accumulation goal
     * @param {module:model/GoalAccumulationAllocationRequest} goalAccumulationAllocationRequest Request payload for Goal Accumulation Allocation
     * @param {module:api/GoalsApi~goalAccumulationAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.goalAccumulationAllocation = function(goalAccumulationAllocationRequest, callback) {
      var postBody = goalAccumulationAllocationRequest;

      // verify the required parameter 'goalAccumulationAllocationRequest' is set
      if (goalAccumulationAllocationRequest === undefined || goalAccumulationAllocationRequest === null) {
        throw new Error("Missing the required parameter 'goalAccumulationAllocationRequest' when calling goalAccumulationAllocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/goal_accumulation/allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAccumulationRecommendation operation.
     * @callback module:api/GoalsApi~goalAccumulationRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal Accumulation Recommendation
     * Generate recommendations to achieve an accumulation goal
     * @param {module:model/GoalAccumulationRecommendationRequest} goalAccumulationRecommendationRequest Request payload for Goal Accumulation Recommendation
     * @param {module:api/GoalsApi~goalAccumulationRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.goalAccumulationRecommendation = function(goalAccumulationRecommendationRequest, callback) {
      var postBody = goalAccumulationRecommendationRequest;

      // verify the required parameter 'goalAccumulationRecommendationRequest' is set
      if (goalAccumulationRecommendationRequest === undefined || goalAccumulationRecommendationRequest === null) {
        throw new Error("Missing the required parameter 'goalAccumulationRecommendationRequest' when calling goalAccumulationRecommendation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/goal_accumulation/recommendation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalAccumulationStatus operation.
     * @callback module:api/GoalsApi~goalAccumulationStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal Accumulation Status
     * Track the status of an accumulation goal
     * @param {module:model/GoalAccumulationStatusRequest} goalAccumulationStatusRequest Request payload for Goal Accumulation Status
     * @param {module:api/GoalsApi~goalAccumulationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.goalAccumulationStatus = function(goalAccumulationStatusRequest, callback) {
      var postBody = goalAccumulationStatusRequest;

      // verify the required parameter 'goalAccumulationStatusRequest' is set
      if (goalAccumulationStatusRequest === undefined || goalAccumulationStatusRequest === null) {
        throw new Error("Missing the required parameter 'goalAccumulationStatusRequest' when calling goalAccumulationStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/goal_accumulation/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalDecumulationAllocation operation.
     * @callback module:api/GoalsApi~goalDecumulationAllocationCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal Decumulation Allocation
     * Allocate based on a decumulation goal
     * @param {module:model/GoalDecumulationAllocationRequest} goalDecumulationAllocationRequest Request payload for Goal Decumulation Allocation
     * @param {module:api/GoalsApi~goalDecumulationAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.goalDecumulationAllocation = function(goalDecumulationAllocationRequest, callback) {
      var postBody = goalDecumulationAllocationRequest;

      // verify the required parameter 'goalDecumulationAllocationRequest' is set
      if (goalDecumulationAllocationRequest === undefined || goalDecumulationAllocationRequest === null) {
        throw new Error("Missing the required parameter 'goalDecumulationAllocationRequest' when calling goalDecumulationAllocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/goal_decumulation/allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalDecumulationRecommendation operation.
     * @callback module:api/GoalsApi~goalDecumulationRecommendationCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal Decumulation Recommendation
     * Generate recommendations to achieve a decumulation goal
     * @param {module:model/GoalDecumulationRecommendationRequest} goalDecumulationRecommendationRequest Request payload for Goal Decumulation Recommendation
     * @param {module:api/GoalsApi~goalDecumulationRecommendationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.goalDecumulationRecommendation = function(goalDecumulationRecommendationRequest, callback) {
      var postBody = goalDecumulationRecommendationRequest;

      // verify the required parameter 'goalDecumulationRecommendationRequest' is set
      if (goalDecumulationRecommendationRequest === undefined || goalDecumulationRecommendationRequest === null) {
        throw new Error("Missing the required parameter 'goalDecumulationRecommendationRequest' when calling goalDecumulationRecommendation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/goal_decumulation/recommendation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the goalDecumulationStatus operation.
     * @callback module:api/GoalsApi~goalDecumulationStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Goal Decumulation Status
     * Track the status of a decumulation goal
     * @param {module:model/GoalDecumulationStatusRequest} goalDecumulationStatusRequest Request payload for Goal Decumulation Status
     * @param {module:api/GoalsApi~goalDecumulationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {'String': Object}>}
     */
    this.goalDecumulationStatus = function(goalDecumulationStatusRequest, callback) {
      var postBody = goalDecumulationStatusRequest;

      // verify the required parameter 'goalDecumulationStatusRequest' is set
      if (goalDecumulationStatusRequest === undefined || goalDecumulationStatusRequest === null) {
        throw new Error("Missing the required parameter 'goalDecumulationStatusRequest' when calling goalDecumulationStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = {'String': Object};

      return this.apiClient.callApi(
        '/goal_decumulation/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
