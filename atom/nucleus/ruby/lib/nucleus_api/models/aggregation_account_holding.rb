=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module NucleusApi
  # Aggregation Account Holding Object
  class AggregationAccountHolding
    # aggregationAccountId
    attr_accessor :aggregation_account_id

    attr_accessor :amount

    attr_accessor :asset_class

    attr_accessor :cost_basis

    attr_accessor :create_date

    attr_accessor :currency_code

    attr_accessor :cusip

    attr_accessor :exchange

    # holdingDate
    attr_accessor :holding_date

    attr_accessor :holding_type

    attr_accessor :id

    # isin
    attr_accessor :isin

    attr_accessor :metadata

    attr_accessor :price

    attr_accessor :secondary_id

    attr_accessor :shares

    # ticker
    attr_accessor :ticker

    # tickerName
    attr_accessor :ticker_name

    attr_accessor :update_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aggregation_account_id' => :'aggregation_account_id',
        :'amount' => :'amount',
        :'asset_class' => :'asset_class',
        :'cost_basis' => :'cost_basis',
        :'create_date' => :'create_date',
        :'currency_code' => :'currency_code',
        :'cusip' => :'cusip',
        :'exchange' => :'exchange',
        :'holding_date' => :'holding_date',
        :'holding_type' => :'holding_type',
        :'id' => :'id',
        :'isin' => :'isin',
        :'metadata' => :'metadata',
        :'price' => :'price',
        :'secondary_id' => :'secondary_id',
        :'shares' => :'shares',
        :'ticker' => :'ticker',
        :'ticker_name' => :'ticker_name',
        :'update_date' => :'update_date'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'aggregation_account_id' => :'String',
        :'amount' => :'Float',
        :'asset_class' => :'String',
        :'cost_basis' => :'Float',
        :'create_date' => :'DateTime',
        :'currency_code' => :'String',
        :'cusip' => :'String',
        :'exchange' => :'String',
        :'holding_date' => :'DateTime',
        :'holding_type' => :'String',
        :'id' => :'String',
        :'isin' => :'String',
        :'metadata' => :'Hash<String, String>',
        :'price' => :'Float',
        :'secondary_id' => :'String',
        :'shares' => :'Float',
        :'ticker' => :'String',
        :'ticker_name' => :'String',
        :'update_date' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'aggregation_account_id')
        self.aggregation_account_id = attributes[:'aggregation_account_id']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'asset_class')
        self.asset_class = attributes[:'asset_class']
      end

      if attributes.has_key?(:'cost_basis')
        self.cost_basis = attributes[:'cost_basis']
      end

      if attributes.has_key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'cusip')
        self.cusip = attributes[:'cusip']
      end

      if attributes.has_key?(:'exchange')
        self.exchange = attributes[:'exchange']
      end

      if attributes.has_key?(:'holding_date')
        self.holding_date = attributes[:'holding_date']
      end

      if attributes.has_key?(:'holding_type')
        self.holding_type = attributes[:'holding_type']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'isin')
        self.isin = attributes[:'isin']
      end

      if attributes.has_key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end

      if attributes.has_key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end

      if attributes.has_key?(:'shares')
        self.shares = attributes[:'shares']
      end

      if attributes.has_key?(:'ticker')
        self.ticker = attributes[:'ticker']
      end

      if attributes.has_key?(:'ticker_name')
        self.ticker_name = attributes[:'ticker_name']
      end

      if attributes.has_key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @shares.nil?
        invalid_properties.push('invalid value for "shares", shares cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @shares.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aggregation_account_id == o.aggregation_account_id &&
          amount == o.amount &&
          asset_class == o.asset_class &&
          cost_basis == o.cost_basis &&
          create_date == o.create_date &&
          currency_code == o.currency_code &&
          cusip == o.cusip &&
          exchange == o.exchange &&
          holding_date == o.holding_date &&
          holding_type == o.holding_type &&
          id == o.id &&
          isin == o.isin &&
          metadata == o.metadata &&
          price == o.price &&
          secondary_id == o.secondary_id &&
          shares == o.shares &&
          ticker == o.ticker &&
          ticker_name == o.ticker_name &&
          update_date == o.update_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [aggregation_account_id, amount, asset_class, cost_basis, create_date, currency_code, cusip, exchange, holding_date, holding_type, id, isin, metadata, price, secondary_id, shares, ticker, ticker_name, update_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        (value)
      when :Date
        (value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = NucleusApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end


    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
