/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * GoalWithdrawalConfig
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-07-31T19:17:39.885-04:00")
public class GoalWithdrawalConfig {
  /**
   * The reference for the starting point of the withdrawal
   */
  @JsonAdapter(WithStartReferenceEnum.Adapter.class)
  public enum WithStartReferenceEnum {
    A_END("a_end"),
    
    D_END("d_end");

    private String value;

    WithStartReferenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WithStartReferenceEnum fromValue(String text) {
      for (WithStartReferenceEnum b : WithStartReferenceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WithStartReferenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WithStartReferenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WithStartReferenceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WithStartReferenceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("with_start_reference")
  private WithStartReferenceEnum withStartReference = WithStartReferenceEnum.A_END;

  @SerializedName("with_start_period")
  private Integer withStartPeriod = null;

  /**
   * The reference for the ending point of the withdrawal
   */
  @JsonAdapter(WithEndReferenceEnum.Adapter.class)
  public enum WithEndReferenceEnum {
    A_END("a_end"),
    
    D_END("d_end");

    private String value;

    WithEndReferenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WithEndReferenceEnum fromValue(String text) {
      for (WithEndReferenceEnum b : WithEndReferenceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WithEndReferenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WithEndReferenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WithEndReferenceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WithEndReferenceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("with_end_reference")
  private WithEndReferenceEnum withEndReference = WithEndReferenceEnum.D_END;

  @SerializedName("with_end_period")
  private Integer withEndPeriod = null;

  @SerializedName("with_amount")
  private BigDecimal withAmount = null;

  /**
   * The frequency of the withdrawal
   */
  @JsonAdapter(WithFrequencyEnum.Adapter.class)
  public enum WithFrequencyEnum {
    YEAR("year"),
    
    SIX_MONTHS("six_months"),
    
    QUARTER("quarter"),
    
    MONTH("month"),
    
    TWO_WEEKS("two_weeks"),
    
    WEEK("week"),
    
    DAY("day");

    private String value;

    WithFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WithFrequencyEnum fromValue(String text) {
      for (WithFrequencyEnum b : WithFrequencyEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WithFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WithFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WithFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WithFrequencyEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("with_frequency")
  private WithFrequencyEnum withFrequency = WithFrequencyEnum.YEAR;

  @SerializedName("with_inflation")
  private BigDecimal withInflation = null;

  public GoalWithdrawalConfig withStartReference(WithStartReferenceEnum withStartReference) {
    this.withStartReference = withStartReference;
    return this;
  }

   /**
   * The reference for the starting point of the withdrawal
   * @return withStartReference
  **/
  @ApiModelProperty(value = "The reference for the starting point of the withdrawal")
  public WithStartReferenceEnum getWithStartReference() {
    return withStartReference;
  }

  public void setWithStartReference(WithStartReferenceEnum withStartReference) {
    this.withStartReference = withStartReference;
  }

  public GoalWithdrawalConfig withStartPeriod(Integer withStartPeriod) {
    this.withStartPeriod = withStartPeriod;
    return this;
  }

   /**
   * The starting period for the withdrawal
   * @return withStartPeriod
  **/
  @ApiModelProperty(value = "The starting period for the withdrawal")
  public Integer getWithStartPeriod() {
    return withStartPeriod;
  }

  public void setWithStartPeriod(Integer withStartPeriod) {
    this.withStartPeriod = withStartPeriod;
  }

  public GoalWithdrawalConfig withEndReference(WithEndReferenceEnum withEndReference) {
    this.withEndReference = withEndReference;
    return this;
  }

   /**
   * The reference for the ending point of the withdrawal
   * @return withEndReference
  **/
  @ApiModelProperty(value = "The reference for the ending point of the withdrawal")
  public WithEndReferenceEnum getWithEndReference() {
    return withEndReference;
  }

  public void setWithEndReference(WithEndReferenceEnum withEndReference) {
    this.withEndReference = withEndReference;
  }

  public GoalWithdrawalConfig withEndPeriod(Integer withEndPeriod) {
    this.withEndPeriod = withEndPeriod;
    return this;
  }

   /**
   * The ending point for the withdrawal
   * @return withEndPeriod
  **/
  @ApiModelProperty(value = "The ending point for the withdrawal")
  public Integer getWithEndPeriod() {
    return withEndPeriod;
  }

  public void setWithEndPeriod(Integer withEndPeriod) {
    this.withEndPeriod = withEndPeriod;
  }

  public GoalWithdrawalConfig withAmount(BigDecimal withAmount) {
    this.withAmount = withAmount;
    return this;
  }

   /**
   * The withdrawal amount in today&#39;s dollars
   * minimum: 0
   * @return withAmount
  **/
  @ApiModelProperty(required = true, value = "The withdrawal amount in today's dollars")
  public BigDecimal getWithAmount() {
    return withAmount;
  }

  public void setWithAmount(BigDecimal withAmount) {
    this.withAmount = withAmount;
  }

  public GoalWithdrawalConfig withFrequency(WithFrequencyEnum withFrequency) {
    this.withFrequency = withFrequency;
    return this;
  }

   /**
   * The frequency of the withdrawal
   * @return withFrequency
  **/
  @ApiModelProperty(value = "The frequency of the withdrawal")
  public WithFrequencyEnum getWithFrequency() {
    return withFrequency;
  }

  public void setWithFrequency(WithFrequencyEnum withFrequency) {
    this.withFrequency = withFrequency;
  }

  public GoalWithdrawalConfig withInflation(BigDecimal withInflation) {
    this.withInflation = withInflation;
    return this;
  }

   /**
   * The annualized inflation for the withdrawals
   * minimum: -1
   * maximum: 20
   * @return withInflation
  **/
  @ApiModelProperty(value = "The annualized inflation for the withdrawals")
  public BigDecimal getWithInflation() {
    return withInflation;
  }

  public void setWithInflation(BigDecimal withInflation) {
    this.withInflation = withInflation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoalWithdrawalConfig goalWithdrawalConfig = (GoalWithdrawalConfig) o;
    return Objects.equals(this.withStartReference, goalWithdrawalConfig.withStartReference) &&
        Objects.equals(this.withStartPeriod, goalWithdrawalConfig.withStartPeriod) &&
        Objects.equals(this.withEndReference, goalWithdrawalConfig.withEndReference) &&
        Objects.equals(this.withEndPeriod, goalWithdrawalConfig.withEndPeriod) &&
        Objects.equals(this.withAmount, goalWithdrawalConfig.withAmount) &&
        Objects.equals(this.withFrequency, goalWithdrawalConfig.withFrequency) &&
        Objects.equals(this.withInflation, goalWithdrawalConfig.withInflation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(withStartReference, withStartPeriod, withEndReference, withEndPeriod, withAmount, withFrequency, withInflation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoalWithdrawalConfig {\n");
    
    sb.append("    withStartReference: ").append(toIndentedString(withStartReference)).append("\n");
    sb.append("    withStartPeriod: ").append(toIndentedString(withStartPeriod)).append("\n");
    sb.append("    withEndReference: ").append(toIndentedString(withEndReference)).append("\n");
    sb.append("    withEndPeriod: ").append(toIndentedString(withEndPeriod)).append("\n");
    sb.append("    withAmount: ").append(toIndentedString(withAmount)).append("\n");
    sb.append("    withFrequency: ").append(toIndentedString(withFrequency)).append("\n");
    sb.append("    withInflation: ").append(toIndentedString(withInflation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

