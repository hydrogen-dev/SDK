# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from nucleus_api.api_client import ApiClient


class AggregationAccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_aggregation_account_balance_bulk_using_post(self, aggregation_account_balance, **kwargs):  # noqa: E501
        """Create a bulk aggregation account balance  # noqa: E501

        Create a balance records under an aggregation accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_balance_bulk_using_post(aggregation_account_balance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccountBalance] aggregation_account_balance: aggregationAccountBalance (required)
        :return: list[AggregationAccountBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_balance_bulk_using_post_with_http_info(aggregation_account_balance, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_balance_bulk_using_post_with_http_info(aggregation_account_balance, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_balance_bulk_using_post_with_http_info(self, aggregation_account_balance, **kwargs):  # noqa: E501
        """Create a bulk aggregation account balance  # noqa: E501

        Create a balance records under an aggregation accounts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_balance_bulk_using_post_with_http_info(aggregation_account_balance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccountBalance] aggregation_account_balance: aggregationAccountBalance (required)
        :return: list[AggregationAccountBalance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_balance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_balance_bulk_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_balance' is set
        if self.api_client.client_side_validation and ('aggregation_account_balance' not in params or
                                                       params['aggregation_account_balance'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_balance` when calling `create_aggregation_account_balance_bulk_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_balance' in params:
            body_params = params['aggregation_account_balance']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/bulk_aggregation_account_balance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountBalance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aggregation_account_balance_using_post(self, aggregation_account_balance, **kwargs):  # noqa: E501
        """Create an aggregation account balance  # noqa: E501

        Create a balance record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_balance_using_post(aggregation_account_balance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccountBalance aggregation_account_balance: aggregationAccountBalance (required)
        :return: AggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_balance_using_post_with_http_info(aggregation_account_balance, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_balance_using_post_with_http_info(aggregation_account_balance, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_balance_using_post_with_http_info(self, aggregation_account_balance, **kwargs):  # noqa: E501
        """Create an aggregation account balance  # noqa: E501

        Create a balance record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_balance_using_post_with_http_info(aggregation_account_balance, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccountBalance aggregation_account_balance: aggregationAccountBalance (required)
        :return: AggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_balance']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_balance_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_balance' is set
        if self.api_client.client_side_validation and ('aggregation_account_balance' not in params or
                                                       params['aggregation_account_balance'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_balance` when calling `create_aggregation_account_balance_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_balance' in params:
            body_params = params['aggregation_account_balance']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_balance', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aggregation_account_bulk_using_post(self, aggregation_account_list, **kwargs):  # noqa: E501
        """Create a bulk aggregation account  # noqa: E501

        Create a bulk aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_bulk_using_post(aggregation_account_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccount] aggregation_account_list: aggregationAccountList (required)
        :return: list[AggregationAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_bulk_using_post_with_http_info(aggregation_account_list, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_bulk_using_post_with_http_info(aggregation_account_list, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_bulk_using_post_with_http_info(self, aggregation_account_list, **kwargs):  # noqa: E501
        """Create a bulk aggregation account  # noqa: E501

        Create a bulk aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_bulk_using_post_with_http_info(aggregation_account_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccount] aggregation_account_list: aggregationAccountList (required)
        :return: list[AggregationAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_bulk_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_list' is set
        if self.api_client.client_side_validation and ('aggregation_account_list' not in params or
                                                       params['aggregation_account_list'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_list` when calling `create_aggregation_account_bulk_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_list' in params:
            body_params = params['aggregation_account_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/bulk_aggregation_account', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aggregation_account_holding_bulk_using_post(self, aggregation_transaction, **kwargs):  # noqa: E501
        """Create a bulk aggregation account holding  # noqa: E501

        Create a bulk aggregation account holding.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_holding_bulk_using_post(aggregation_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccountHolding] aggregation_transaction: aggregationTransaction (required)
        :return: list[AggregationAccountHolding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_holding_bulk_using_post_with_http_info(aggregation_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_holding_bulk_using_post_with_http_info(aggregation_transaction, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_holding_bulk_using_post_with_http_info(self, aggregation_transaction, **kwargs):  # noqa: E501
        """Create a bulk aggregation account holding  # noqa: E501

        Create a bulk aggregation account holding.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_holding_bulk_using_post_with_http_info(aggregation_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccountHolding] aggregation_transaction: aggregationTransaction (required)
        :return: list[AggregationAccountHolding]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_transaction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_holding_bulk_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_transaction' is set
        if self.api_client.client_side_validation and ('aggregation_transaction' not in params or
                                                       params['aggregation_transaction'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_transaction` when calling `create_aggregation_account_holding_bulk_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_transaction' in params:
            body_params = params['aggregation_transaction']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/bulk_aggregation_account_holding', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountHolding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aggregation_account_holding_using_post(self, aggregation_account_holding, **kwargs):  # noqa: E501
        """Create an aggregation account holding  # noqa: E501

        Create a holding record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_holding_using_post(aggregation_account_holding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccountHolding aggregation_account_holding: aggregationAccountHolding (required)
        :return: AggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_holding_using_post_with_http_info(aggregation_account_holding, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_holding_using_post_with_http_info(aggregation_account_holding, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_holding_using_post_with_http_info(self, aggregation_account_holding, **kwargs):  # noqa: E501
        """Create an aggregation account holding  # noqa: E501

        Create a holding record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_holding_using_post_with_http_info(aggregation_account_holding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccountHolding aggregation_account_holding: aggregationAccountHolding (required)
        :return: AggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_holding']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_holding_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_holding' is set
        if self.api_client.client_side_validation and ('aggregation_account_holding' not in params or
                                                       params['aggregation_account_holding'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_holding` when calling `create_aggregation_account_holding_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_holding' in params:
            body_params = params['aggregation_account_holding']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_holding', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountHolding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aggregation_account_transaction_bulk_using_post(self, aggregation_account_transactions, **kwargs):  # noqa: E501
        """Create a bulk aggregation account transaction  # noqa: E501

        Create a bulk transaction record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_transaction_bulk_using_post(aggregation_account_transactions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccountTransaction] aggregation_account_transactions: aggregationAccountTransactions (required)
        :return: list[AggregationAccountTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_transaction_bulk_using_post_with_http_info(aggregation_account_transactions, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_transaction_bulk_using_post_with_http_info(aggregation_account_transactions, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_transaction_bulk_using_post_with_http_info(self, aggregation_account_transactions, **kwargs):  # noqa: E501
        """Create a bulk aggregation account transaction  # noqa: E501

        Create a bulk transaction record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_transaction_bulk_using_post_with_http_info(aggregation_account_transactions, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AggregationAccountTransaction] aggregation_account_transactions: aggregationAccountTransactions (required)
        :return: list[AggregationAccountTransaction]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_transactions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_transaction_bulk_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_transactions' is set
        if self.api_client.client_side_validation and ('aggregation_account_transactions' not in params or
                                                       params['aggregation_account_transactions'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_transactions` when calling `create_aggregation_account_transaction_bulk_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_transactions' in params:
            body_params = params['aggregation_account_transactions']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/bulk_aggregation_account_transaction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountTransaction]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aggregation_account_transaction_using_post(self, aggregation_account_transaction, **kwargs):  # noqa: E501
        """Create an aggregation account transaction  # noqa: E501

        Create a transaction record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_transaction_using_post(aggregation_account_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccountTransaction aggregation_account_transaction: aggregationAccountTransaction (required)
        :return: AggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_transaction_using_post_with_http_info(aggregation_account_transaction, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_transaction_using_post_with_http_info(aggregation_account_transaction, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_transaction_using_post_with_http_info(self, aggregation_account_transaction, **kwargs):  # noqa: E501
        """Create an aggregation account transaction  # noqa: E501

        Create a transaction record under an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_transaction_using_post_with_http_info(aggregation_account_transaction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccountTransaction aggregation_account_transaction: aggregationAccountTransaction (required)
        :return: AggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_transaction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_transaction_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_transaction' is set
        if self.api_client.client_side_validation and ('aggregation_account_transaction' not in params or
                                                       params['aggregation_account_transaction'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_transaction` when calling `create_aggregation_account_transaction_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_transaction' in params:
            body_params = params['aggregation_account_transaction']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_transaction', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountTransaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_aggregation_account_using_post(self, aggregation_account, **kwargs):  # noqa: E501
        """Create an aggregation account  # noqa: E501

        Create an aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_using_post(aggregation_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccount aggregation_account: aggregationAccount (required)
        :return: AggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aggregation_account_using_post_with_http_info(aggregation_account, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aggregation_account_using_post_with_http_info(aggregation_account, **kwargs)  # noqa: E501
            return data

    def create_aggregation_account_using_post_with_http_info(self, aggregation_account, **kwargs):  # noqa: E501
        """Create an aggregation account  # noqa: E501

        Create an aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aggregation_account_using_post_with_http_info(aggregation_account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AggregationAccount aggregation_account: aggregationAccount (required)
        :return: AggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aggregation_account_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account' is set
        if self.api_client.client_side_validation and ('aggregation_account' not in params or
                                                       params['aggregation_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account` when calling `create_aggregation_account_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account' in params:
            body_params = params['aggregation_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aggregation_account_balance_using_delete(self, aggregation_account_balance_id, **kwargs):  # noqa: E501
        """Delete an aggregation account balance  # noqa: E501

        Permanently delete a balance record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_balance_using_delete(aggregation_account_balance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_balance_id: UUID aggregation_account_balance_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aggregation_account_balance_using_delete_with_http_info(aggregation_account_balance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aggregation_account_balance_using_delete_with_http_info(aggregation_account_balance_id, **kwargs)  # noqa: E501
            return data

    def delete_aggregation_account_balance_using_delete_with_http_info(self, aggregation_account_balance_id, **kwargs):  # noqa: E501
        """Delete an aggregation account balance  # noqa: E501

        Permanently delete a balance record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_balance_using_delete_with_http_info(aggregation_account_balance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_balance_id: UUID aggregation_account_balance_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_balance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aggregation_account_balance_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_balance_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_balance_id' not in params or
                                                       params['aggregation_account_balance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_balance_id` when calling `delete_aggregation_account_balance_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_balance_id' in params:
            path_params['aggregation_account_balance_id'] = params['aggregation_account_balance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aggregation_account_holding_using_delete(self, aggregation_account_holding_id, **kwargs):  # noqa: E501
        """Delete an aggregation account holding  # noqa: E501

        Permanently delete a holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_holding_using_delete(aggregation_account_holding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_holding_id: UUID aggregation_account_holding_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aggregation_account_holding_using_delete_with_http_info(aggregation_account_holding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aggregation_account_holding_using_delete_with_http_info(aggregation_account_holding_id, **kwargs)  # noqa: E501
            return data

    def delete_aggregation_account_holding_using_delete_with_http_info(self, aggregation_account_holding_id, **kwargs):  # noqa: E501
        """Delete an aggregation account holding  # noqa: E501

        Permanently delete a holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_holding_using_delete_with_http_info(aggregation_account_holding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_holding_id: UUID aggregation_account_holding_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_holding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aggregation_account_holding_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_holding_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_holding_id' not in params or
                                                       params['aggregation_account_holding_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_holding_id` when calling `delete_aggregation_account_holding_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_holding_id' in params:
            path_params['aggregation_account_holding_id'] = params['aggregation_account_holding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aggregation_account_transaction_using_delete(self, aggregation_account_transaction_id, **kwargs):  # noqa: E501
        """Delete an aggregation account transaction  # noqa: E501

        Permanently delete a transaction record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_transaction_using_delete(aggregation_account_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_transaction_id: UUID aggregation_account_transaction_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aggregation_account_transaction_using_delete_with_http_info(aggregation_account_transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aggregation_account_transaction_using_delete_with_http_info(aggregation_account_transaction_id, **kwargs)  # noqa: E501
            return data

    def delete_aggregation_account_transaction_using_delete_with_http_info(self, aggregation_account_transaction_id, **kwargs):  # noqa: E501
        """Delete an aggregation account transaction  # noqa: E501

        Permanently delete a transaction record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_transaction_using_delete_with_http_info(aggregation_account_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_transaction_id: UUID aggregation_account_transaction_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aggregation_account_transaction_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_transaction_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_transaction_id' not in params or
                                                       params['aggregation_account_transaction_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_transaction_id` when calling `delete_aggregation_account_transaction_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_transaction_id' in params:
            path_params['aggregation_account_transaction_id'] = params['aggregation_account_transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aggregation_account_using_delete(self, aggregation_account_id, **kwargs):  # noqa: E501
        """Delete an aggregation account  # noqa: E501

        Permanently delete an aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_using_delete(aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aggregation_account_using_delete_with_http_info(aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aggregation_account_using_delete_with_http_info(aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def delete_aggregation_account_using_delete_with_http_info(self, aggregation_account_id, **kwargs):  # noqa: E501
        """Delete an aggregation account  # noqa: E501

        Permanently delete an aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aggregation_account_using_delete_with_http_info(aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aggregation_account_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_id' not in params or
                                                       params['aggregation_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_id` when calling `delete_aggregation_account_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_id' in params:
            path_params['aggregation_account_id'] = params['aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_aggregate_data_using_get(self, aggregation_account_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account aggregate data  # noqa: E501

        Retrieve the information for a specific aggregation account associated with a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_aggregate_data_using_get(aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :param str currency_conversion: USD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_aggregate_data_using_get_with_http_info(aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_aggregate_data_using_get_with_http_info(aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_aggregate_data_using_get_with_http_info(self, aggregation_account_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account aggregate data  # noqa: E501

        Retrieve the information for a specific aggregation account associated with a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_aggregate_data_using_get_with_http_info(aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :param str currency_conversion: USD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_id', 'currency_conversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_aggregate_data_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_id' not in params or
                                                       params['aggregation_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_id` when calling `get_aggregation_account_aggregate_data_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_id' in params:
            path_params['aggregation_account_id'] = params['aggregation_account_id']  # noqa: E501

        query_params = []
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account/{aggregation_account_id}/aggregate_data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_all_using_get(self, **kwargs):  # noqa: E501
        """List all aggregation accounts  # noqa: E501

        Get information for all aggregation accounts for all clients defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aggregation_account_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all aggregation accounts  # noqa: E501

        Get information for all aggregation accounts for all clients defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageAggregationAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_balance_all_using_get(self, **kwargs):  # noqa: E501
        """List all aggregation account balances  # noqa: E501

        Get all of the balance records for all aggregation accounts defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_balance_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_balance_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aggregation_account_balance_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all aggregation account balances  # noqa: E501

        Get all of the balance records for all aggregation accounts defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'currency_conversion', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_balance_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_balance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageAggregationAccountBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_balance_using_get(self, aggregation_account_balance_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account balance  # noqa: E501

        Retrieve the information for a specific balance record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_using_get(aggregation_account_balance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_balance_id: UUID aggregation_account_balance_id (required)
        :param str currency_conversion: USD
        :return: AggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_balance_using_get_with_http_info(aggregation_account_balance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_balance_using_get_with_http_info(aggregation_account_balance_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_balance_using_get_with_http_info(self, aggregation_account_balance_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account balance  # noqa: E501

        Retrieve the information for a specific balance record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_balance_using_get_with_http_info(aggregation_account_balance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_balance_id: UUID aggregation_account_balance_id (required)
        :param str currency_conversion: USD
        :return: AggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_balance_id', 'currency_conversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_balance_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_balance_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_balance_id' not in params or
                                                       params['aggregation_account_balance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_balance_id` when calling `get_aggregation_account_balance_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_balance_id' in params:
            path_params['aggregation_account_balance_id'] = params['aggregation_account_balance_id']  # noqa: E501

        query_params = []
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_holding_all_using_get(self, **kwargs):  # noqa: E501
        """List all aggregation account holdings  # noqa: E501

        Get all of the holding records for all aggregation accounts defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_holding_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_holding_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aggregation_account_holding_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all aggregation account holdings  # noqa: E501

        Get all of the holding records for all aggregation accounts defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'currency_conversion', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_holding_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_holding', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageAggregationAccountHolding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_holding_using_get(self, aggregation_account_holding_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account holding  # noqa: E501

        Retrieve the information for a specific holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_using_get(aggregation_account_holding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_holding_id: UUID aggregation_account_holding_id (required)
        :param str currency_conversion: USD
        :return: AggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_holding_using_get_with_http_info(aggregation_account_holding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_holding_using_get_with_http_info(aggregation_account_holding_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_holding_using_get_with_http_info(self, aggregation_account_holding_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account holding  # noqa: E501

        Retrieve the information for a specific holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_holding_using_get_with_http_info(aggregation_account_holding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_holding_id: UUID aggregation_account_holding_id (required)
        :param str currency_conversion: USD
        :return: AggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_holding_id', 'currency_conversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_holding_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_holding_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_holding_id' not in params or
                                                       params['aggregation_account_holding_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_holding_id` when calling `get_aggregation_account_holding_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_holding_id' in params:
            path_params['aggregation_account_holding_id'] = params['aggregation_account_holding_id']  # noqa: E501

        query_params = []
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountHolding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_overview_by_business_id_using_get(self, business_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account aggregate data  # noqa: E501

        Retrieve the information for a specific aggregation account with aggregate data for a business.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_overview_by_business_id_using_get(business_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_id: UUID business_id (required)
        :param str currency_conversion: USD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_overview_by_business_id_using_get_with_http_info(business_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_overview_by_business_id_using_get_with_http_info(business_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_overview_by_business_id_using_get_with_http_info(self, business_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account aggregate data  # noqa: E501

        Retrieve the information for a specific aggregation account with aggregate data for a business.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_overview_by_business_id_using_get_with_http_info(business_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str business_id: UUID business_id (required)
        :param str currency_conversion: USD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['business_id', 'currency_conversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_overview_by_business_id_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'business_id' is set
        if self.api_client.client_side_validation and ('business_id' not in params or
                                                       params['business_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `business_id` when calling `get_aggregation_account_overview_by_business_id_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'business_id' in params:
            path_params['business_id'] = params['business_id']  # noqa: E501

        query_params = []
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/business/{business_id}/aggregation_account_overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_overview_using_get(self, client_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account aggregate data  # noqa: E501

        Retrieve the information for a specific aggregation account with aggregate data for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_overview_using_get(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: UUID client_id (required)
        :param str currency_conversion: USD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_overview_using_get_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_overview_using_get_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_overview_using_get_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account aggregate data  # noqa: E501

        Retrieve the information for a specific aggregation account with aggregate data for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_overview_using_get_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: UUID client_id (required)
        :param str currency_conversion: USD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'currency_conversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_overview_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `get_aggregation_account_overview_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501

        query_params = []
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/client/{client_id}/aggregation_account_overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_transaction_all_using_get(self, **kwargs):  # noqa: E501
        """List all aggregation account transactions  # noqa: E501

        Get all of the transaction records for all aggregation accounts defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_all_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_transaction_all_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_transaction_all_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aggregation_account_transaction_all_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all aggregation account transactions  # noqa: E501

        Get all of the transaction records for all aggregation accounts defined for your firm.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_all_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool ascending: ascending
        :param str currency_conversion: currency_conversion
        :param str filter: filter
        :param str order_by: order_by
        :param int page: page
        :param int size: size
        :return: PageAggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ascending', 'currency_conversion', 'filter', 'order_by', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_transaction_all_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_transaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PageAggregationAccountTransaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_transaction_using_get(self, aggregation_account_transaction_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account transaction  # noqa: E501

        Retrieve the information for a specific transaction record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_using_get(aggregation_account_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_transaction_id: UUID aggregation_account_transaction_id (required)
        :param str currency_conversion: USD
        :return: AggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_transaction_using_get_with_http_info(aggregation_account_transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_transaction_using_get_with_http_info(aggregation_account_transaction_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_transaction_using_get_with_http_info(self, aggregation_account_transaction_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account transaction  # noqa: E501

        Retrieve the information for a specific transaction record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_transaction_using_get_with_http_info(aggregation_account_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_transaction_id: UUID aggregation_account_transaction_id (required)
        :param str currency_conversion: USD
        :return: AggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_transaction_id', 'currency_conversion']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_transaction_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_transaction_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_transaction_id' not in params or
                                                       params['aggregation_account_transaction_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_transaction_id` when calling `get_aggregation_account_transaction_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_transaction_id' in params:
            path_params['aggregation_account_transaction_id'] = params['aggregation_account_transaction_id']  # noqa: E501

        query_params = []
        if 'currency_conversion' in params:
            query_params.append(('currency_conversion', params['currency_conversion']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountTransaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggregation_account_using_get(self, aggregation_account_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account  # noqa: E501

        Retrieve the information for a specific aggregation account associated with a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_using_get(aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :return: AggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggregation_account_using_get_with_http_info(aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggregation_account_using_get_with_http_info(aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def get_aggregation_account_using_get_with_http_info(self, aggregation_account_id, **kwargs):  # noqa: E501
        """Retrieve an aggregation account  # noqa: E501

        Retrieve the information for a specific aggregation account associated with a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggregation_account_using_get_with_http_info(aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :return: AggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggregation_account_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_id' not in params or
                                                       params['aggregation_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_id` when calling `get_aggregation_account_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_id' in params:
            path_params['aggregation_account_id'] = params['aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aggregation_account_balance_using_put(self, aggregation_account_balance, aggregation_account_balance_id, **kwargs):  # noqa: E501
        """Update an aggregation account balance  # noqa: E501

        Update a balance record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_balance_using_put(aggregation_account_balance, aggregation_account_balance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account_balance: aggregation_account_balance (required)
        :param str aggregation_account_balance_id: UUID aggregation_account_balance_id (required)
        :return: AggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aggregation_account_balance_using_put_with_http_info(aggregation_account_balance, aggregation_account_balance_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aggregation_account_balance_using_put_with_http_info(aggregation_account_balance, aggregation_account_balance_id, **kwargs)  # noqa: E501
            return data

    def update_aggregation_account_balance_using_put_with_http_info(self, aggregation_account_balance, aggregation_account_balance_id, **kwargs):  # noqa: E501
        """Update an aggregation account balance  # noqa: E501

        Update a balance record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_balance_using_put_with_http_info(aggregation_account_balance, aggregation_account_balance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account_balance: aggregation_account_balance (required)
        :param str aggregation_account_balance_id: UUID aggregation_account_balance_id (required)
        :return: AggregationAccountBalance
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_balance', 'aggregation_account_balance_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aggregation_account_balance_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_balance' is set
        if self.api_client.client_side_validation and ('aggregation_account_balance' not in params or
                                                       params['aggregation_account_balance'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_balance` when calling `update_aggregation_account_balance_using_put`")  # noqa: E501
        # verify the required parameter 'aggregation_account_balance_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_balance_id' not in params or
                                                       params['aggregation_account_balance_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_balance_id` when calling `update_aggregation_account_balance_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_balance_id' in params:
            path_params['aggregation_account_balance_id'] = params['aggregation_account_balance_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_balance' in params:
            body_params = params['aggregation_account_balance']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountBalance',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aggregation_account_bulk_using_put(self, aggregation_account_list, **kwargs):  # noqa: E501
        """Update a bulk aggregation account  # noqa: E501

        Update a bulk aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_bulk_using_put(aggregation_account_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] aggregation_account_list: aggregationAccountList (required)
        :return: list[AggregationAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aggregation_account_bulk_using_put_with_http_info(aggregation_account_list, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aggregation_account_bulk_using_put_with_http_info(aggregation_account_list, **kwargs)  # noqa: E501
            return data

    def update_aggregation_account_bulk_using_put_with_http_info(self, aggregation_account_list, **kwargs):  # noqa: E501
        """Update a bulk aggregation account  # noqa: E501

        Update a bulk aggregation account under a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_bulk_using_put_with_http_info(aggregation_account_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] aggregation_account_list: aggregationAccountList (required)
        :return: list[AggregationAccount]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aggregation_account_bulk_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_list' is set
        if self.api_client.client_side_validation and ('aggregation_account_list' not in params or
                                                       params['aggregation_account_list'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_list` when calling `update_aggregation_account_bulk_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_list' in params:
            body_params = params['aggregation_account_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/bulk_aggregation_account', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccount]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aggregation_account_holding_bulk_using_put(self, aggregation_account_holding, **kwargs):  # noqa: E501
        """Update an bulk aggregation account holding  # noqa: E501

        Update a bulk holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_holding_bulk_using_put(aggregation_account_holding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] aggregation_account_holding: aggregationAccountHolding (required)
        :return: list[AggregationAccountHolding]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aggregation_account_holding_bulk_using_put_with_http_info(aggregation_account_holding, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aggregation_account_holding_bulk_using_put_with_http_info(aggregation_account_holding, **kwargs)  # noqa: E501
            return data

    def update_aggregation_account_holding_bulk_using_put_with_http_info(self, aggregation_account_holding, **kwargs):  # noqa: E501
        """Update an bulk aggregation account holding  # noqa: E501

        Update a bulk holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_holding_bulk_using_put_with_http_info(aggregation_account_holding, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[object] aggregation_account_holding: aggregationAccountHolding (required)
        :return: list[AggregationAccountHolding]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_holding']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aggregation_account_holding_bulk_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_holding' is set
        if self.api_client.client_side_validation and ('aggregation_account_holding' not in params or
                                                       params['aggregation_account_holding'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_holding` when calling `update_aggregation_account_holding_bulk_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_holding' in params:
            body_params = params['aggregation_account_holding']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/bulk_aggregation_account_holding', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AggregationAccountHolding]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aggregation_account_holding_using_put(self, aggregation_account_holding, aggregation_account_holding_id, **kwargs):  # noqa: E501
        """Update an aggregation account holding  # noqa: E501

        Update a holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_holding_using_put(aggregation_account_holding, aggregation_account_holding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account_holding: aggregation_account_holding (required)
        :param str aggregation_account_holding_id: UUID aggregation_account_holding_id (required)
        :return: AggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aggregation_account_holding_using_put_with_http_info(aggregation_account_holding, aggregation_account_holding_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aggregation_account_holding_using_put_with_http_info(aggregation_account_holding, aggregation_account_holding_id, **kwargs)  # noqa: E501
            return data

    def update_aggregation_account_holding_using_put_with_http_info(self, aggregation_account_holding, aggregation_account_holding_id, **kwargs):  # noqa: E501
        """Update an aggregation account holding  # noqa: E501

        Update a holding record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_holding_using_put_with_http_info(aggregation_account_holding, aggregation_account_holding_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account_holding: aggregation_account_holding (required)
        :param str aggregation_account_holding_id: UUID aggregation_account_holding_id (required)
        :return: AggregationAccountHolding
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_holding', 'aggregation_account_holding_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aggregation_account_holding_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_holding' is set
        if self.api_client.client_side_validation and ('aggregation_account_holding' not in params or
                                                       params['aggregation_account_holding'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_holding` when calling `update_aggregation_account_holding_using_put`")  # noqa: E501
        # verify the required parameter 'aggregation_account_holding_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_holding_id' not in params or
                                                       params['aggregation_account_holding_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_holding_id` when calling `update_aggregation_account_holding_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_holding_id' in params:
            path_params['aggregation_account_holding_id'] = params['aggregation_account_holding_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_holding' in params:
            body_params = params['aggregation_account_holding']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountHolding',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aggregation_account_transaction_using_put(self, aggregation_account_transaction, aggregation_account_transaction_id, **kwargs):  # noqa: E501
        """Update an aggregation account transaction  # noqa: E501

        Update a transaction record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_transaction_using_put(aggregation_account_transaction, aggregation_account_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account_transaction: aggregation_account_transaction (required)
        :param str aggregation_account_transaction_id: UUID aggregation_account_transaction_id (required)
        :return: AggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aggregation_account_transaction_using_put_with_http_info(aggregation_account_transaction, aggregation_account_transaction_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aggregation_account_transaction_using_put_with_http_info(aggregation_account_transaction, aggregation_account_transaction_id, **kwargs)  # noqa: E501
            return data

    def update_aggregation_account_transaction_using_put_with_http_info(self, aggregation_account_transaction, aggregation_account_transaction_id, **kwargs):  # noqa: E501
        """Update an aggregation account transaction  # noqa: E501

        Update a transaction record for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_transaction_using_put_with_http_info(aggregation_account_transaction, aggregation_account_transaction_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account_transaction: aggregation_account_transaction (required)
        :param str aggregation_account_transaction_id: UUID aggregation_account_transaction_id (required)
        :return: AggregationAccountTransaction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account_transaction', 'aggregation_account_transaction_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aggregation_account_transaction_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account_transaction' is set
        if self.api_client.client_side_validation and ('aggregation_account_transaction' not in params or
                                                       params['aggregation_account_transaction'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_transaction` when calling `update_aggregation_account_transaction_using_put`")  # noqa: E501
        # verify the required parameter 'aggregation_account_transaction_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_transaction_id' not in params or
                                                       params['aggregation_account_transaction_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_transaction_id` when calling `update_aggregation_account_transaction_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_transaction_id' in params:
            path_params['aggregation_account_transaction_id'] = params['aggregation_account_transaction_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account_transaction' in params:
            body_params = params['aggregation_account_transaction']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccountTransaction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aggregation_account_using_put(self, aggregation_account, aggregation_account_id, **kwargs):  # noqa: E501
        """Update an aggregation account  # noqa: E501

        Update the information for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_using_put(aggregation_account, aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account: aggregation_account (required)
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :return: AggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aggregation_account_using_put_with_http_info(aggregation_account, aggregation_account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aggregation_account_using_put_with_http_info(aggregation_account, aggregation_account_id, **kwargs)  # noqa: E501
            return data

    def update_aggregation_account_using_put_with_http_info(self, aggregation_account, aggregation_account_id, **kwargs):  # noqa: E501
        """Update an aggregation account  # noqa: E501

        Update the information for an aggregation account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aggregation_account_using_put_with_http_info(aggregation_account, aggregation_account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object aggregation_account: aggregation_account (required)
        :param str aggregation_account_id: UUID aggregation_account_id (required)
        :return: AggregationAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aggregation_account', 'aggregation_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aggregation_account_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aggregation_account' is set
        if self.api_client.client_side_validation and ('aggregation_account' not in params or
                                                       params['aggregation_account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account` when calling `update_aggregation_account_using_put`")  # noqa: E501
        # verify the required parameter 'aggregation_account_id' is set
        if self.api_client.client_side_validation and ('aggregation_account_id' not in params or
                                                       params['aggregation_account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `aggregation_account_id` when calling `update_aggregation_account_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aggregation_account_id' in params:
            path_params['aggregation_account_id'] = params['aggregation_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'aggregation_account' in params:
            body_params = params['aggregation_account']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggregationAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
