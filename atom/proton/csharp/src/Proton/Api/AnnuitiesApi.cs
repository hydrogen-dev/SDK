/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Proton.Client;
using Proton.ModelEntity;

namespace Proton.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnuitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Annuity Calculator - Accumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary fixed annuity contribution period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> AnnuityCalculatorAccumulationHorizon (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest);

        /// <summary>
        /// Annuity Calculator - Accumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary fixed annuity contribution period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> AnnuityCalculatorAccumulationHorizonWithHttpInfo (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest);
        /// <summary>
        /// Annuity Calculator - Annuity Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> AnnuityCalculatorAnnuityAmount (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest);

        /// <summary>
        /// Annuity Calculator - Annuity Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> AnnuityCalculatorAnnuityAmountWithHttpInfo (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest);
        /// <summary>
        /// Annuity Calculator - Decumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity payout period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> AnnuityCalculatorDecumulationHorizon (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest);

        /// <summary>
        /// Annuity Calculator - Decumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity payout period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> AnnuityCalculatorDecumulationHorizonWithHttpInfo (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest);
        /// <summary>
        /// Annuity Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> AnnuityCalculatorDepositAmount (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest);

        /// <summary>
        /// Annuity Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> AnnuityCalculatorDepositAmountWithHttpInfo (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest);
        /// <summary>
        /// Annuity Calculator - Initial Balance
        /// </summary>
        /// <remarks>
        /// Calculate the necessary initial balance for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> AnnuityCalculatorInitialBalance (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest);

        /// <summary>
        /// Annuity Calculator - Initial Balance
        /// </summary>
        /// <remarks>
        /// Calculate the necessary initial balance for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> AnnuityCalculatorInitialBalanceWithHttpInfo (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest);
        /// <summary>
        /// Variable Annuity
        /// </summary>
        /// <remarks>
        /// Project the behavior of a variable annuity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> VariableAnnuity (VariableAnnuityRequest variableAnnuityRequest);

        /// <summary>
        /// Variable Annuity
        /// </summary>
        /// <remarks>
        /// Project the behavior of a variable annuity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> VariableAnnuityWithHttpInfo (VariableAnnuityRequest variableAnnuityRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Annuity Calculator - Accumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary fixed annuity contribution period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorAccumulationHorizonAsync (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest);

        /// <summary>
        /// Annuity Calculator - Accumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the necessary fixed annuity contribution period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorAccumulationHorizonAsyncWithHttpInfo (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest);
        /// <summary>
        /// Annuity Calculator - Annuity Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorAnnuityAmountAsync (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest);

        /// <summary>
        /// Annuity Calculator - Annuity Amount
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity amount
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorAnnuityAmountAsyncWithHttpInfo (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest);
        /// <summary>
        /// Annuity Calculator - Decumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity payout period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorDecumulationHorizonAsync (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest);

        /// <summary>
        /// Annuity Calculator - Decumulation Horizon
        /// </summary>
        /// <remarks>
        /// Calculate the achievable fixed annuity payout period
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorDecumulationHorizonAsyncWithHttpInfo (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest);
        /// <summary>
        /// Annuity Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorDepositAmountAsync (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest);

        /// <summary>
        /// Annuity Calculator - Deposit Amount
        /// </summary>
        /// <remarks>
        /// Calculate the necessary periodic deposit amount for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorDepositAmountAsyncWithHttpInfo (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest);
        /// <summary>
        /// Annuity Calculator - Initial Balance
        /// </summary>
        /// <remarks>
        /// Calculate the necessary initial balance for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorInitialBalanceAsync (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest);

        /// <summary>
        /// Annuity Calculator - Initial Balance
        /// </summary>
        /// <remarks>
        /// Calculate the necessary initial balance for a fixed annuity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorInitialBalanceAsyncWithHttpInfo (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest);
        /// <summary>
        /// Variable Annuity
        /// </summary>
        /// <remarks>
        /// Project the behavior of a variable annuity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> VariableAnnuityAsync (VariableAnnuityRequest variableAnnuityRequest);

        /// <summary>
        /// Variable Annuity
        /// </summary>
        /// <remarks>
        /// Project the behavior of a variable annuity over time
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> VariableAnnuityAsyncWithHttpInfo (VariableAnnuityRequest variableAnnuityRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnnuitiesApi : IAnnuitiesApi
    {
        private Proton.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnuitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnnuitiesApi(String basePath)
        {
            this.Configuration = new Proton.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnuitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnnuitiesApi(Proton.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Proton.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Proton.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Proton.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Annuity Calculator - Accumulation Horizon Calculate the necessary fixed annuity contribution period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> AnnuityCalculatorAccumulationHorizon (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = AnnuityCalculatorAccumulationHorizonWithHttpInfo(annuityCalculatorAccumulationHorizonRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Annuity Calculator - Accumulation Horizon Calculate the necessary fixed annuity contribution period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > AnnuityCalculatorAccumulationHorizonWithHttpInfo (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest)
        {
            // verify the required parameter 'annuityCalculatorAccumulationHorizonRequest' is set
            if (annuityCalculatorAccumulationHorizonRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorAccumulationHorizonRequest' when calling AnnuitiesApi->AnnuityCalculatorAccumulationHorizon");

            var localVarPath = "/annuity_calculator/accumulation_horizon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorAccumulationHorizonRequest != null && annuityCalculatorAccumulationHorizonRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorAccumulationHorizonRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorAccumulationHorizonRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorAccumulationHorizon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Accumulation Horizon Calculate the necessary fixed annuity contribution period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorAccumulationHorizonAsync (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await AnnuityCalculatorAccumulationHorizonAsyncWithHttpInfo(annuityCalculatorAccumulationHorizonRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Annuity Calculator - Accumulation Horizon Calculate the necessary fixed annuity contribution period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAccumulationHorizonRequest">Request payload for Annuity Calculator - Accumulation Horizon</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorAccumulationHorizonAsyncWithHttpInfo (AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest)
        {
            // verify the required parameter 'annuityCalculatorAccumulationHorizonRequest' is set
            if (annuityCalculatorAccumulationHorizonRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorAccumulationHorizonRequest' when calling AnnuitiesApi->AnnuityCalculatorAccumulationHorizon");

            var localVarPath = "/annuity_calculator/accumulation_horizon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorAccumulationHorizonRequest != null && annuityCalculatorAccumulationHorizonRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorAccumulationHorizonRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorAccumulationHorizonRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorAccumulationHorizon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Annuity Amount Calculate the achievable fixed annuity amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> AnnuityCalculatorAnnuityAmount (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = AnnuityCalculatorAnnuityAmountWithHttpInfo(annuityCalculatorAnnuityAmountRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Annuity Calculator - Annuity Amount Calculate the achievable fixed annuity amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > AnnuityCalculatorAnnuityAmountWithHttpInfo (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest)
        {
            // verify the required parameter 'annuityCalculatorAnnuityAmountRequest' is set
            if (annuityCalculatorAnnuityAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorAnnuityAmountRequest' when calling AnnuitiesApi->AnnuityCalculatorAnnuityAmount");

            var localVarPath = "/annuity_calculator/annuity_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorAnnuityAmountRequest != null && annuityCalculatorAnnuityAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorAnnuityAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorAnnuityAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorAnnuityAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Annuity Amount Calculate the achievable fixed annuity amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorAnnuityAmountAsync (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await AnnuityCalculatorAnnuityAmountAsyncWithHttpInfo(annuityCalculatorAnnuityAmountRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Annuity Calculator - Annuity Amount Calculate the achievable fixed annuity amount
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorAnnuityAmountRequest">Request payload for Annuity Calculator - Annuity Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorAnnuityAmountAsyncWithHttpInfo (AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest)
        {
            // verify the required parameter 'annuityCalculatorAnnuityAmountRequest' is set
            if (annuityCalculatorAnnuityAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorAnnuityAmountRequest' when calling AnnuitiesApi->AnnuityCalculatorAnnuityAmount");

            var localVarPath = "/annuity_calculator/annuity_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorAnnuityAmountRequest != null && annuityCalculatorAnnuityAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorAnnuityAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorAnnuityAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorAnnuityAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Decumulation Horizon Calculate the achievable fixed annuity payout period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> AnnuityCalculatorDecumulationHorizon (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = AnnuityCalculatorDecumulationHorizonWithHttpInfo(annuityCalculatorDecumulationHorizonRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Annuity Calculator - Decumulation Horizon Calculate the achievable fixed annuity payout period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > AnnuityCalculatorDecumulationHorizonWithHttpInfo (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest)
        {
            // verify the required parameter 'annuityCalculatorDecumulationHorizonRequest' is set
            if (annuityCalculatorDecumulationHorizonRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorDecumulationHorizonRequest' when calling AnnuitiesApi->AnnuityCalculatorDecumulationHorizon");

            var localVarPath = "/annuity_calculator/decumulation_horizon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorDecumulationHorizonRequest != null && annuityCalculatorDecumulationHorizonRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorDecumulationHorizonRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorDecumulationHorizonRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorDecumulationHorizon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Decumulation Horizon Calculate the achievable fixed annuity payout period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorDecumulationHorizonAsync (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await AnnuityCalculatorDecumulationHorizonAsyncWithHttpInfo(annuityCalculatorDecumulationHorizonRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Annuity Calculator - Decumulation Horizon Calculate the achievable fixed annuity payout period
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDecumulationHorizonRequest">Request payload for Annuity Calculator - Decumulation Horizon</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorDecumulationHorizonAsyncWithHttpInfo (AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest)
        {
            // verify the required parameter 'annuityCalculatorDecumulationHorizonRequest' is set
            if (annuityCalculatorDecumulationHorizonRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorDecumulationHorizonRequest' when calling AnnuitiesApi->AnnuityCalculatorDecumulationHorizon");

            var localVarPath = "/annuity_calculator/decumulation_horizon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorDecumulationHorizonRequest != null && annuityCalculatorDecumulationHorizonRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorDecumulationHorizonRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorDecumulationHorizonRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorDecumulationHorizon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Deposit Amount Calculate the necessary periodic deposit amount for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> AnnuityCalculatorDepositAmount (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = AnnuityCalculatorDepositAmountWithHttpInfo(annuityCalculatorDepositAmountRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Annuity Calculator - Deposit Amount Calculate the necessary periodic deposit amount for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > AnnuityCalculatorDepositAmountWithHttpInfo (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'annuityCalculatorDepositAmountRequest' is set
            if (annuityCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorDepositAmountRequest' when calling AnnuitiesApi->AnnuityCalculatorDepositAmount");

            var localVarPath = "/annuity_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorDepositAmountRequest != null && annuityCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Deposit Amount Calculate the necessary periodic deposit amount for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorDepositAmountAsync (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await AnnuityCalculatorDepositAmountAsyncWithHttpInfo(annuityCalculatorDepositAmountRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Annuity Calculator - Deposit Amount Calculate the necessary periodic deposit amount for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorDepositAmountRequest">Request payload for Annuity Calculator - Deposit Amount</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorDepositAmountAsyncWithHttpInfo (AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest)
        {
            // verify the required parameter 'annuityCalculatorDepositAmountRequest' is set
            if (annuityCalculatorDepositAmountRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorDepositAmountRequest' when calling AnnuitiesApi->AnnuityCalculatorDepositAmount");

            var localVarPath = "/annuity_calculator/deposit_amount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorDepositAmountRequest != null && annuityCalculatorDepositAmountRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorDepositAmountRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorDepositAmountRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorDepositAmount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Initial Balance Calculate the necessary initial balance for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> AnnuityCalculatorInitialBalance (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = AnnuityCalculatorInitialBalanceWithHttpInfo(annuityCalculatorInitialBalanceRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Annuity Calculator - Initial Balance Calculate the necessary initial balance for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > AnnuityCalculatorInitialBalanceWithHttpInfo (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest)
        {
            // verify the required parameter 'annuityCalculatorInitialBalanceRequest' is set
            if (annuityCalculatorInitialBalanceRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorInitialBalanceRequest' when calling AnnuitiesApi->AnnuityCalculatorInitialBalance");

            var localVarPath = "/annuity_calculator/initial_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorInitialBalanceRequest != null && annuityCalculatorInitialBalanceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorInitialBalanceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorInitialBalanceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorInitialBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Annuity Calculator - Initial Balance Calculate the necessary initial balance for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> AnnuityCalculatorInitialBalanceAsync (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await AnnuityCalculatorInitialBalanceAsyncWithHttpInfo(annuityCalculatorInitialBalanceRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Annuity Calculator - Initial Balance Calculate the necessary initial balance for a fixed annuity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="annuityCalculatorInitialBalanceRequest">Request payload for Annuity Calculator - Initial Balance</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> AnnuityCalculatorInitialBalanceAsyncWithHttpInfo (AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest)
        {
            // verify the required parameter 'annuityCalculatorInitialBalanceRequest' is set
            if (annuityCalculatorInitialBalanceRequest == null)
                throw new ApiException(400, "Missing required parameter 'annuityCalculatorInitialBalanceRequest' when calling AnnuitiesApi->AnnuityCalculatorInitialBalance");

            var localVarPath = "/annuity_calculator/initial_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (annuityCalculatorInitialBalanceRequest != null && annuityCalculatorInitialBalanceRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(annuityCalculatorInitialBalanceRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = annuityCalculatorInitialBalanceRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnuityCalculatorInitialBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Variable Annuity Project the behavior of a variable annuity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> VariableAnnuity (VariableAnnuityRequest variableAnnuityRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = VariableAnnuityWithHttpInfo(variableAnnuityRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Variable Annuity Project the behavior of a variable annuity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > VariableAnnuityWithHttpInfo (VariableAnnuityRequest variableAnnuityRequest)
        {
            // verify the required parameter 'variableAnnuityRequest' is set
            if (variableAnnuityRequest == null)
                throw new ApiException(400, "Missing required parameter 'variableAnnuityRequest' when calling AnnuitiesApi->VariableAnnuity");

            var localVarPath = "/variable_annuity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (variableAnnuityRequest != null && variableAnnuityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableAnnuityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableAnnuityRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableAnnuity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Variable Annuity Project the behavior of a variable annuity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> VariableAnnuityAsync (VariableAnnuityRequest variableAnnuityRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await VariableAnnuityAsyncWithHttpInfo(variableAnnuityRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Variable Annuity Project the behavior of a variable annuity over time
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="variableAnnuityRequest">Request payload for Variable Annuity</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> VariableAnnuityAsyncWithHttpInfo (VariableAnnuityRequest variableAnnuityRequest)
        {
            // verify the required parameter 'variableAnnuityRequest' is set
            if (variableAnnuityRequest == null)
                throw new ApiException(400, "Missing required parameter 'variableAnnuityRequest' when calling AnnuitiesApi->VariableAnnuity");

            var localVarPath = "/variable_annuity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (variableAnnuityRequest != null && variableAnnuityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(variableAnnuityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = variableAnnuityRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VariableAnnuity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

    }
}
