# coding: utf-8

"""
    Hydrogen Admin API

    The Hydrogen Admin API  # noqa: E501

    OpenAPI spec version: 1.0.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AppToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'app_token': 'str',
        'create_date': 'datetime',
        'id': 'str',
        'is_valid': 'bool',
        'tenant_name': 'str',
        'update_date': 'datetime',
        'username': 'str'
    }

    attribute_map = {
        'app_name': 'app_name',
        'app_token': 'app_token',
        'create_date': 'create_date',
        'id': 'id',
        'is_valid': 'is_valid',
        'tenant_name': 'tenant_name',
        'update_date': 'update_date',
        'username': 'username'
    }

    def __init__(self, app_name=None, app_token=None, create_date=None, id=None, is_valid=None, tenant_name=None, update_date=None, username=None):  # noqa: E501
        """AppToken - a model defined in Swagger"""  # noqa: E501

        self._app_name = None
        self._app_token = None
        self._create_date = None
        self._id = None
        self._is_valid = None
        self._tenant_name = None
        self._update_date = None
        self._username = None
        self.discriminator = None

        if app_name is not None:
            self.app_name = app_name
        if app_token is not None:
            self.app_token = app_token
        if create_date is not None:
            self.create_date = create_date
        if id is not None:
            self.id = id
        if is_valid is not None:
            self.is_valid = is_valid
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if update_date is not None:
            self.update_date = update_date
        if username is not None:
            self.username = username

    @property
    def app_name(self):
        """Gets the app_name of this AppToken.  # noqa: E501


        :return: The app_name of this AppToken.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this AppToken.


        :param app_name: The app_name of this AppToken.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def app_token(self):
        """Gets the app_token of this AppToken.  # noqa: E501


        :return: The app_token of this AppToken.  # noqa: E501
        :rtype: str
        """
        return self._app_token

    @app_token.setter
    def app_token(self, app_token):
        """Sets the app_token of this AppToken.


        :param app_token: The app_token of this AppToken.  # noqa: E501
        :type: str
        """

        self._app_token = app_token

    @property
    def create_date(self):
        """Gets the create_date of this AppToken.  # noqa: E501


        :return: The create_date of this AppToken.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this AppToken.


        :param create_date: The create_date of this AppToken.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    @property
    def id(self):
        """Gets the id of this AppToken.  # noqa: E501


        :return: The id of this AppToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppToken.


        :param id: The id of this AppToken.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_valid(self):
        """Gets the is_valid of this AppToken.  # noqa: E501


        :return: The is_valid of this AppToken.  # noqa: E501
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """Sets the is_valid of this AppToken.


        :param is_valid: The is_valid of this AppToken.  # noqa: E501
        :type: bool
        """

        self._is_valid = is_valid

    @property
    def tenant_name(self):
        """Gets the tenant_name of this AppToken.  # noqa: E501


        :return: The tenant_name of this AppToken.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this AppToken.


        :param tenant_name: The tenant_name of this AppToken.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    @property
    def update_date(self):
        """Gets the update_date of this AppToken.  # noqa: E501


        :return: The update_date of this AppToken.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this AppToken.


        :param update_date: The update_date of this AppToken.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def username(self):
        """Gets the username of this AppToken.  # noqa: E501


        :return: The username of this AppToken.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AppToken.


        :param username: The username of this AppToken.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
