=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'spec_helper'
require 'json'

# Unit tests for NucleusApi::ModelApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ModelApi' do
  before do
    # run before each test
    @instance = NucleusApi::ModelApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ModelApi' do
    it 'should create an instance of ModelApi' do
      expect(@instance).to be_instance_of(NucleusApi::ModelApi)
    end
  end

  # unit tests for create_model_asset_size_using_post
  # Create a model asset size
  # Create a new asset size record for a model.
  # @param req req
  # @param [Hash] opts the optional parameters
  # @return [ModelAssetSize]
  describe 'create_model_asset_size_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_model_change_using_post
  # Change a model composition
  # Model composition changes represent a change in a modelâ€™s holdings.
  # @param change_request changeRequest
  # @param model_id UUID model_id
  # @param [Hash] opts the optional parameters
  # @return [Array<ModelTransaction>]
  describe 'create_model_change_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_model_comment_using_post
  # Create a model commentary
  # Create a new comment for a model available for your firm.
  # @param model_comment_request modelCommentRequest
  # @param [Hash] opts the optional parameters
  # @return [ModelComment]
  describe 'create_model_comment_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_model_holding_using_post
  # Create a model holding
  # Create a new model holding record for a specific model and date.
  # @param model_holding_request modelHoldingRequest
  # @param [Hash] opts the optional parameters
  # @return [ModelHolding]
  describe 'create_model_holding_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_model_transaction_using_post
  # Create a model transaction
  # Create a new transaction record for a security under a model for a specific date.
  # @param model_transaction_request modelTransactionRequest
  # @param [Hash] opts the optional parameters
  # @return [ModelTransaction]
  describe 'create_model_transaction_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_model_using_post
  # Create a model
  # Create a new model for your firm to which a portfolios can later subscribe.
  # @param model_info_request modelInfoRequest
  # @param [Hash] opts the optional parameters
  # @return [Model]
  describe 'create_model_using_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_asset_size_using_delete
  # Delete a model asset size
  # Permanently delete a model asset size record for a model. 
  # @param model_asset_size_id UUID model_asset_size_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_asset_size_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_comment_using_delete
  # Delete a model commentary
  # Permanently delete a model comment for a model
  # @param model_comment_id UUID model_comment_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_comment_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_holding_using_delete
  # Delete a model holding
  # Permanently delete a model holding record for a model.
  # @param model_holding_id UUID model_holding_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_holding_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_transaction_using_delete
  # Delete a model transaction
  # Permanently delete a model transaction for a model.
  # @param model_transaction_id UUID model_transaction_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_transaction_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_using_delete
  # Delete a model
  # Permanently delete a model for your firm.
  # @param model_id UUID model_id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_using_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_all_using_get
  # List all models
  # Get details for all models defined for your firm to which portfolios can subscribe.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageModel]
  describe 'get_model_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_asset_size_all_using_get
  # List all model asset sizes
  # Get a list of asset sizes per date for all models defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :currency_conversion currency_conversion
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageModelAssetSize]
  describe 'get_model_asset_size_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_asset_size_using_get
  # Retrieve a model asset size
  # Retrieve the information for a model asset size record for a model.
  # @param model_asset_size_id UUID model_asset_size_id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :currency_conversion USD
  # @return [ModelAssetSize]
  describe 'get_model_asset_size_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_comment_all_using_get
  # List all model commentaries
  # List all comments for all models defined by your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageModelComment]
  describe 'get_model_comment_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_comment_using_get
  # Retrieve a model commentary
  # Retrieve the information for a model comment for a model.
  # @param model_comment_id UUID model_comment_id
  # @param [Hash] opts the optional parameters
  # @return [ModelComment]
  describe 'get_model_comment_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_holding_all_using_get
  # List all model holdings
  # Get all model holding records for all models defined for your firm.
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageModelHolding]
  describe 'get_model_holding_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_holding_using_get
  # Retrieve a model holding
  # Retrieve the information for a model holding record for a model.
  # @param model_holding_id UUID model_holding_id
  # @param [Hash] opts the optional parameters
  # @return [ModelHolding]
  describe 'get_model_holding_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_transaction_all_using_get
  # List all model transactions
  # Get details for all transaction records for all models defined by your firm. 
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :ascending ascending
  # @option opts [String] :filter filter
  # @option opts [String] :order_by order_by
  # @option opts [Integer] :page page
  # @option opts [Integer] :size size
  # @return [PageModelTransaction]
  describe 'get_model_transaction_all_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_transaction_using_get
  # Retrieve a model transaction
  # Retrieve the information for a model transaction for a model.
  # @param model_transaction_id UUID model_transaction_id
  # @param [Hash] opts the optional parameters
  # @return [ModelTransaction]
  describe 'get_model_transaction_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_using_get
  # Retrieve a model
  # Get the information for a model for your firm.
  # @param model_id UUID model_id
  # @param [Hash] opts the optional parameters
  # @return [Model]
  describe 'get_model_using_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_asset_size_using_put
  # Update a model asset size
  # Update a model asset size record for a model.
  # @param model_asset_size model_asset_size
  # @param model_asset_size_id UUID model_asset_size_id
  # @param [Hash] opts the optional parameters
  # @return [ModelAssetSize]
  describe 'update_model_asset_size_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_comment_using_put
  # Update a model commentary
  # Update a model comment for a model.
  # @param model_comment model_comment
  # @param model_comment_id UUID model_comment_id
  # @param [Hash] opts the optional parameters
  # @return [ModelComment]
  describe 'update_model_comment_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_holding_using_put
  # Update a model holding
  # Update a model holding record for a model.
  # @param model_holding model_holding
  # @param model_holding_id UUID model_holding_id
  # @param [Hash] opts the optional parameters
  # @return [ModelHolding]
  describe 'update_model_holding_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_transaction_using_put
  # Update a model transaction
  # Update a model transaction for a model.
  # @param model_transaction model_transaction
  # @param model_transaction_id UUID model_transaction_id
  # @param [Hash] opts the optional parameters
  # @return [ModelTransaction]
  describe 'update_model_transaction_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_using_put
  # Update a model
  # Update a model for your firm.
  # @param model model
  # @param model_id UUID model_id
  # @param [Hash] opts the optional parameters
  # @return [Model]
  describe 'update_model_using_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
