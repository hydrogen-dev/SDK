/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// TokenDateRequest Object
    /// </summary>
    [DataContract]
    public partial class TokenDateRequest :  IEquatable<TokenDateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDateRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="buyTransactionCodeId">buyTransactionCodeId.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="date">date.</param>
        /// <param name="sellTransactionCodeId">sellTransactionCodeId.</param>
        /// <param name="tenantId">tenantId.</param>
        public TokenDateRequest(Guid? accountId = default(Guid?), Guid? buyTransactionCodeId = default(Guid?), Guid? clientId = default(Guid?), DateTime? date = default(DateTime?), Guid? sellTransactionCodeId = default(Guid?), Guid? tenantId = default(Guid?))
        {
            this.AccountId = accountId;
            this.BuyTransactionCodeId = buyTransactionCodeId;
            this.ClientId = clientId;
            this.Date = date;
            this.SellTransactionCodeId = sellTransactionCodeId;
            this.TenantId = tenantId;
        }
        
        /// <summary>
        /// accountId
        /// </summary>
        /// <value>accountId</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// buyTransactionCodeId
        /// </summary>
        /// <value>buyTransactionCodeId</value>
        [DataMember(Name="buy_transaction_code_id", EmitDefaultValue=false)]
        public Guid? BuyTransactionCodeId { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// date
        /// </summary>
        /// <value>date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// sellTransactionCodeId
        /// </summary>
        /// <value>sellTransactionCodeId</value>
        [DataMember(Name="sell_transaction_code_id", EmitDefaultValue=false)]
        public Guid? SellTransactionCodeId { get; set; }

        /// <summary>
        /// tenantId
        /// </summary>
        /// <value>tenantId</value>
        [DataMember(Name="tenant_id", EmitDefaultValue=false)]
        public Guid? TenantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenDateRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  BuyTransactionCodeId: ").Append(BuyTransactionCodeId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SellTransactionCodeId: ").Append(SellTransactionCodeId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenDateRequest);
        }

        /// <summary>
        /// Returns true if TokenDateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenDateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenDateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.BuyTransactionCodeId == input.BuyTransactionCodeId ||
                    (this.BuyTransactionCodeId != null &&
                    this.BuyTransactionCodeId.Equals(input.BuyTransactionCodeId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.SellTransactionCodeId == input.SellTransactionCodeId ||
                    (this.SellTransactionCodeId != null &&
                    this.SellTransactionCodeId.Equals(input.SellTransactionCodeId))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.BuyTransactionCodeId != null)
                    hashCode = hashCode * 59 + this.BuyTransactionCodeId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.SellTransactionCodeId != null)
                    hashCode = hashCode * 59 + this.SellTransactionCodeId.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
