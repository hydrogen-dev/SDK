/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing AggregationAccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AggregationAccountApiTests
    {
        private AggregationAccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AggregationAccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AggregationAccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AggregationAccountApi
            //Assert.IsInstanceOfType(typeof(AggregationAccountApi), instance, "instance is a AggregationAccountApi");
        }

        
        /// <summary>
        /// Test CreateAggregationAccountBalanceBulkUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountBalanceBulkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<AggregationAccountBalance> aggregationAccountBalance = null;
            //var response = instance.CreateAggregationAccountBalanceBulkUsingPost(aggregationAccountBalance);
            //Assert.IsInstanceOf<List<AggregationAccountBalance>> (response, "response is List<AggregationAccountBalance>");
        }
        
        /// <summary>
        /// Test CreateAggregationAccountBalanceUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountBalanceUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AggregationAccountBalance aggregationAccountBalance = null;
            //var response = instance.CreateAggregationAccountBalanceUsingPost(aggregationAccountBalance);
            //Assert.IsInstanceOf<AggregationAccountBalance> (response, "response is AggregationAccountBalance");
        }
        
        /// <summary>
        /// Test CreateAggregationAccountBulkUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountBulkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<AggregationAccount> aggregationAccountList = null;
            //var response = instance.CreateAggregationAccountBulkUsingPost(aggregationAccountList);
            //Assert.IsInstanceOf<List<AggregationAccount>> (response, "response is List<AggregationAccount>");
        }
        
        /// <summary>
        /// Test CreateAggregationAccountHoldingBulkUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountHoldingBulkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<AggregationAccountHolding> aggregationTransaction = null;
            //var response = instance.CreateAggregationAccountHoldingBulkUsingPost(aggregationTransaction);
            //Assert.IsInstanceOf<List<AggregationAccountHolding>> (response, "response is List<AggregationAccountHolding>");
        }
        
        /// <summary>
        /// Test CreateAggregationAccountHoldingUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountHoldingUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AggregationAccountHolding aggregationAccountHolding = null;
            //var response = instance.CreateAggregationAccountHoldingUsingPost(aggregationAccountHolding);
            //Assert.IsInstanceOf<AggregationAccountHolding> (response, "response is AggregationAccountHolding");
        }
        
        /// <summary>
        /// Test CreateAggregationAccountTransactionBulkUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountTransactionBulkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<AggregationAccountTransaction> aggregationAccountTransactions = null;
            //var response = instance.CreateAggregationAccountTransactionBulkUsingPost(aggregationAccountTransactions);
            //Assert.IsInstanceOf<List<AggregationAccountTransaction>> (response, "response is List<AggregationAccountTransaction>");
        }
        
        /// <summary>
        /// Test CreateAggregationAccountTransactionUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountTransactionUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AggregationAccountTransaction aggregationAccountTransaction = null;
            //var response = instance.CreateAggregationAccountTransactionUsingPost(aggregationAccountTransaction);
            //Assert.IsInstanceOf<AggregationAccountTransaction> (response, "response is AggregationAccountTransaction");
        }
        
        /// <summary>
        /// Test CreateAggregationAccountUsingPost
        /// </summary>
        [Test]
        public void CreateAggregationAccountUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AggregationAccount aggregationAccount = null;
            //var response = instance.CreateAggregationAccountUsingPost(aggregationAccount);
            //Assert.IsInstanceOf<AggregationAccount> (response, "response is AggregationAccount");
        }
        
        /// <summary>
        /// Test DeleteAggregationAccountBalanceUsingDelete
        /// </summary>
        [Test]
        public void DeleteAggregationAccountBalanceUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountBalanceId = null;
            //instance.DeleteAggregationAccountBalanceUsingDelete(aggregationAccountBalanceId);
            
        }
        
        /// <summary>
        /// Test DeleteAggregationAccountHoldingUsingDelete
        /// </summary>
        [Test]
        public void DeleteAggregationAccountHoldingUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountHoldingId = null;
            //instance.DeleteAggregationAccountHoldingUsingDelete(aggregationAccountHoldingId);
            
        }
        
        /// <summary>
        /// Test DeleteAggregationAccountTransactionUsingDelete
        /// </summary>
        [Test]
        public void DeleteAggregationAccountTransactionUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountTransactionId = null;
            //instance.DeleteAggregationAccountTransactionUsingDelete(aggregationAccountTransactionId);
            
        }
        
        /// <summary>
        /// Test DeleteAggregationAccountUsingDelete
        /// </summary>
        [Test]
        public void DeleteAggregationAccountUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountId = null;
            //instance.DeleteAggregationAccountUsingDelete(aggregationAccountId);
            
        }
        
        /// <summary>
        /// Test GetAggregationAccountAggregateDataUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountAggregateDataUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountId = null;
            //string currencyConversion = null;
            //var response = instance.GetAggregationAccountAggregateDataUsingGet(aggregationAccountId, currencyConversion);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAggregationAccountAllUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAggregationAccountAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAggregationAccount> (response, "response is PageAggregationAccount");
        }
        
        /// <summary>
        /// Test GetAggregationAccountBalanceAllUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountBalanceAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAggregationAccountBalanceAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAggregationAccountBalance> (response, "response is PageAggregationAccountBalance");
        }
        
        /// <summary>
        /// Test GetAggregationAccountBalanceUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountBalanceUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountBalanceId = null;
            //string currencyConversion = null;
            //var response = instance.GetAggregationAccountBalanceUsingGet(aggregationAccountBalanceId, currencyConversion);
            //Assert.IsInstanceOf<AggregationAccountBalance> (response, "response is AggregationAccountBalance");
        }
        
        /// <summary>
        /// Test GetAggregationAccountHoldingAllUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountHoldingAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAggregationAccountHoldingAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAggregationAccountHolding> (response, "response is PageAggregationAccountHolding");
        }
        
        /// <summary>
        /// Test GetAggregationAccountHoldingUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountHoldingUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountHoldingId = null;
            //string currencyConversion = null;
            //var response = instance.GetAggregationAccountHoldingUsingGet(aggregationAccountHoldingId, currencyConversion);
            //Assert.IsInstanceOf<AggregationAccountHolding> (response, "response is AggregationAccountHolding");
        }
        
        /// <summary>
        /// Test GetAggregationAccountOverviewByBusinessIdUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountOverviewByBusinessIdUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? businessId = null;
            //string currencyConversion = null;
            //var response = instance.GetAggregationAccountOverviewByBusinessIdUsingGet(businessId, currencyConversion);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAggregationAccountOverviewUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountOverviewUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //string currencyConversion = null;
            //var response = instance.GetAggregationAccountOverviewUsingGet(clientId, currencyConversion);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetAggregationAccountTransactionAllUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountTransactionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAggregationAccountTransactionAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAggregationAccountTransaction> (response, "response is PageAggregationAccountTransaction");
        }
        
        /// <summary>
        /// Test GetAggregationAccountTransactionUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountTransactionUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountTransactionId = null;
            //string currencyConversion = null;
            //var response = instance.GetAggregationAccountTransactionUsingGet(aggregationAccountTransactionId, currencyConversion);
            //Assert.IsInstanceOf<AggregationAccountTransaction> (response, "response is AggregationAccountTransaction");
        }
        
        /// <summary>
        /// Test GetAggregationAccountUsingGet
        /// </summary>
        [Test]
        public void GetAggregationAccountUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? aggregationAccountId = null;
            //var response = instance.GetAggregationAccountUsingGet(aggregationAccountId);
            //Assert.IsInstanceOf<AggregationAccount> (response, "response is AggregationAccount");
        }
        
        /// <summary>
        /// Test UpdateAggregationAccountBalanceUsingPut
        /// </summary>
        [Test]
        public void UpdateAggregationAccountBalanceUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object aggregationAccountBalance = null;
            //Guid? aggregationAccountBalanceId = null;
            //var response = instance.UpdateAggregationAccountBalanceUsingPut(aggregationAccountBalance, aggregationAccountBalanceId);
            //Assert.IsInstanceOf<AggregationAccountBalance> (response, "response is AggregationAccountBalance");
        }
        
        /// <summary>
        /// Test UpdateAggregationAccountBulkUsingPut
        /// </summary>
        [Test]
        public void UpdateAggregationAccountBulkUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Object> aggregationAccountList = null;
            //var response = instance.UpdateAggregationAccountBulkUsingPut(aggregationAccountList);
            //Assert.IsInstanceOf<List<AggregationAccount>> (response, "response is List<AggregationAccount>");
        }
        
        /// <summary>
        /// Test UpdateAggregationAccountHoldingBulkUsingPut
        /// </summary>
        [Test]
        public void UpdateAggregationAccountHoldingBulkUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Object> aggregationAccountHolding = null;
            //var response = instance.UpdateAggregationAccountHoldingBulkUsingPut(aggregationAccountHolding);
            //Assert.IsInstanceOf<List<AggregationAccountHolding>> (response, "response is List<AggregationAccountHolding>");
        }
        
        /// <summary>
        /// Test UpdateAggregationAccountHoldingUsingPut
        /// </summary>
        [Test]
        public void UpdateAggregationAccountHoldingUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object aggregationAccountHolding = null;
            //Guid? aggregationAccountHoldingId = null;
            //var response = instance.UpdateAggregationAccountHoldingUsingPut(aggregationAccountHolding, aggregationAccountHoldingId);
            //Assert.IsInstanceOf<AggregationAccountHolding> (response, "response is AggregationAccountHolding");
        }
        
        /// <summary>
        /// Test UpdateAggregationAccountTransactionUsingPut
        /// </summary>
        [Test]
        public void UpdateAggregationAccountTransactionUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object aggregationAccountTransaction = null;
            //Guid? aggregationAccountTransactionId = null;
            //var response = instance.UpdateAggregationAccountTransactionUsingPut(aggregationAccountTransaction, aggregationAccountTransactionId);
            //Assert.IsInstanceOf<AggregationAccountTransaction> (response, "response is AggregationAccountTransaction");
        }
        
        /// <summary>
        /// Test UpdateAggregationAccountUsingPut
        /// </summary>
        [Test]
        public void UpdateAggregationAccountUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object aggregationAccount = null;
            //Guid? aggregationAccountId = null;
            //var response = instance.UpdateAggregationAccountUsingPut(aggregationAccount, aggregationAccountId);
            //Assert.IsInstanceOf<AggregationAccount> (response, "response is AggregationAccount");
        }
        
    }

}
