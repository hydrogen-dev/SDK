<?php
/**
 * MonteCarloRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * MonteCarloRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MonteCarloRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'monteCarloRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'min_bal' => 'float[]',
        'max_bal' => 'float[]',
        'p' => 'float[]',
        'allocation_id' => 'string',
        'init_bal' => 'float',
        'max_sample' => 'float[]',
        'model_id' => 'string',
        'cf' => 'float[][]',
        'create_log' => 'bool',
        'aggregation_account_id' => 'string',
        'n' => 'int',
        'remove_outliers' => 'bool',
        'sigma' => 'float[]',
        'mu' => 'float[]',
        'portfolio_id' => 'string',
        'result_type' => 'string',
        'account_id' => 'string',
        'use_proxy_data' => 'bool',
        'market_data_source' => 'string',
        'ret_mod' => 'float[]',
        'frequency_interval' => 'string',
        'min_sample' => 'float[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'min_bal' => null,
        'max_bal' => null,
        'p' => null,
        'allocation_id' => 'uuid',
        'init_bal' => null,
        'max_sample' => 'float',
        'model_id' => 'uuid',
        'cf' => null,
        'create_log' => null,
        'aggregation_account_id' => 'uuid',
        'n' => 'int32',
        'remove_outliers' => null,
        'sigma' => 'float',
        'mu' => 'float',
        'portfolio_id' => 'uuid',
        'result_type' => null,
        'account_id' => 'uuid',
        'use_proxy_data' => null,
        'market_data_source' => null,
        'ret_mod' => 'float',
        'frequency_interval' => null,
        'min_sample' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_bal' => 'min_bal',
        'max_bal' => 'max_bal',
        'p' => 'p',
        'allocation_id' => 'allocation_id',
        'init_bal' => 'init_bal',
        'max_sample' => 'max_sample',
        'model_id' => 'model_id',
        'cf' => 'cf',
        'create_log' => 'create_log',
        'aggregation_account_id' => 'aggregation_account_id',
        'n' => 'n',
        'remove_outliers' => 'remove_outliers',
        'sigma' => 'sigma',
        'mu' => 'mu',
        'portfolio_id' => 'portfolio_id',
        'result_type' => 'result_type',
        'account_id' => 'account_id',
        'use_proxy_data' => 'use_proxy_data',
        'market_data_source' => 'market_data_source',
        'ret_mod' => 'ret_mod',
        'frequency_interval' => 'frequency_interval',
        'min_sample' => 'min_sample'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_bal' => 'setMinBal',
        'max_bal' => 'setMaxBal',
        'p' => 'setP',
        'allocation_id' => 'setAllocationId',
        'init_bal' => 'setInitBal',
        'max_sample' => 'setMaxSample',
        'model_id' => 'setModelId',
        'cf' => 'setCf',
        'create_log' => 'setCreateLog',
        'aggregation_account_id' => 'setAggregationAccountId',
        'n' => 'setN',
        'remove_outliers' => 'setRemoveOutliers',
        'sigma' => 'setSigma',
        'mu' => 'setMu',
        'portfolio_id' => 'setPortfolioId',
        'result_type' => 'setResultType',
        'account_id' => 'setAccountId',
        'use_proxy_data' => 'setUseProxyData',
        'market_data_source' => 'setMarketDataSource',
        'ret_mod' => 'setRetMod',
        'frequency_interval' => 'setFrequencyInterval',
        'min_sample' => 'setMinSample'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_bal' => 'getMinBal',
        'max_bal' => 'getMaxBal',
        'p' => 'getP',
        'allocation_id' => 'getAllocationId',
        'init_bal' => 'getInitBal',
        'max_sample' => 'getMaxSample',
        'model_id' => 'getModelId',
        'cf' => 'getCf',
        'create_log' => 'getCreateLog',
        'aggregation_account_id' => 'getAggregationAccountId',
        'n' => 'getN',
        'remove_outliers' => 'getRemoveOutliers',
        'sigma' => 'getSigma',
        'mu' => 'getMu',
        'portfolio_id' => 'getPortfolioId',
        'result_type' => 'getResultType',
        'account_id' => 'getAccountId',
        'use_proxy_data' => 'getUseProxyData',
        'market_data_source' => 'getMarketDataSource',
        'ret_mod' => 'getRetMod',
        'frequency_interval' => 'getFrequencyInterval',
        'min_sample' => 'getMinSample'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESULT_TYPE_RAW = 'raw';
    const RESULT_TYPE_CUSTOM = 'custom';
    const RESULT_TYPE_MEDIAN = 'median';
    const RESULT_TYPE_MEAN = 'mean';
    const RESULT_TYPE_TENS = 'tens';
    const MARKET_DATA_SOURCE_NUCLEUS = 'nucleus';
    const MARKET_DATA_SOURCE_INTEGRATION = 'integration';
    const FREQUENCY_INTERVAL_YEAR = 'year';
    const FREQUENCY_INTERVAL_SIX_MONTHS = 'six_months';
    const FREQUENCY_INTERVAL_QUARTER = 'quarter';
    const FREQUENCY_INTERVAL_MONTH = 'month';
    const FREQUENCY_INTERVAL_TWO_WEEKS = 'two_weeks';
    const FREQUENCY_INTERVAL_WEEK = 'week';
    const FREQUENCY_INTERVAL_DAY = 'day';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultTypeAllowableValues()
    {
        return [
            self::RESULT_TYPE_RAW,
            self::RESULT_TYPE_CUSTOM,
            self::RESULT_TYPE_MEDIAN,
            self::RESULT_TYPE_MEAN,
            self::RESULT_TYPE_TENS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMarketDataSourceAllowableValues()
    {
        return [
            self::MARKET_DATA_SOURCE_NUCLEUS,
            self::MARKET_DATA_SOURCE_INTEGRATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFrequencyIntervalAllowableValues()
    {
        return [
            self::FREQUENCY_INTERVAL_YEAR,
            self::FREQUENCY_INTERVAL_SIX_MONTHS,
            self::FREQUENCY_INTERVAL_QUARTER,
            self::FREQUENCY_INTERVAL_MONTH,
            self::FREQUENCY_INTERVAL_TWO_WEEKS,
            self::FREQUENCY_INTERVAL_WEEK,
            self::FREQUENCY_INTERVAL_DAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_bal'] = isset($data['min_bal']) ? $data['min_bal'] : null;
        $this->container['max_bal'] = isset($data['max_bal']) ? $data['max_bal'] : null;
        $this->container['p'] = isset($data['p']) ? $data['p'] : null;
        $this->container['allocation_id'] = isset($data['allocation_id']) ? $data['allocation_id'] : null;
        $this->container['init_bal'] = isset($data['init_bal']) ? $data['init_bal'] : null;
        $this->container['max_sample'] = isset($data['max_sample']) ? $data['max_sample'] : null;
        $this->container['model_id'] = isset($data['model_id']) ? $data['model_id'] : null;
        $this->container['cf'] = isset($data['cf']) ? $data['cf'] : null;
        $this->container['create_log'] = isset($data['create_log']) ? $data['create_log'] : false;
        $this->container['aggregation_account_id'] = isset($data['aggregation_account_id']) ? $data['aggregation_account_id'] : null;
        $this->container['n'] = isset($data['n']) ? $data['n'] : 1000;
        $this->container['remove_outliers'] = isset($data['remove_outliers']) ? $data['remove_outliers'] : false;
        $this->container['sigma'] = isset($data['sigma']) ? $data['sigma'] : null;
        $this->container['mu'] = isset($data['mu']) ? $data['mu'] : null;
        $this->container['portfolio_id'] = isset($data['portfolio_id']) ? $data['portfolio_id'] : null;
        $this->container['result_type'] = isset($data['result_type']) ? $data['result_type'] : 'raw';
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['use_proxy_data'] = isset($data['use_proxy_data']) ? $data['use_proxy_data'] : false;
        $this->container['market_data_source'] = isset($data['market_data_source']) ? $data['market_data_source'] : 'nucleus';
        $this->container['ret_mod'] = isset($data['ret_mod']) ? $data['ret_mod'] : null;
        $this->container['frequency_interval'] = isset($data['frequency_interval']) ? $data['frequency_interval'] : 'year';
        $this->container['min_sample'] = isset($data['min_sample']) ? $data['min_sample'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['init_bal']) && ($this->container['init_bal'] < 0)) {
            $invalidProperties[] = "invalid value for 'init_bal', must be bigger than or equal to 0.";
        }

        if ($this->container['cf'] === null) {
            $invalidProperties[] = "'cf' can't be null";
        }
        if (!is_null($this->container['n']) && ($this->container['n'] > 10000)) {
            $invalidProperties[] = "invalid value for 'n', must be smaller than or equal to 10000.";
        }

        if (!is_null($this->container['n']) && ($this->container['n'] < 1)) {
            $invalidProperties[] = "invalid value for 'n', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getResultTypeAllowableValues();
        if (!is_null($this->container['result_type']) && !in_array($this->container['result_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'result_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMarketDataSourceAllowableValues();
        if (!is_null($this->container['market_data_source']) && !in_array($this->container['market_data_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'market_data_source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFrequencyIntervalAllowableValues();
        if (!is_null($this->container['frequency_interval']) && !in_array($this->container['frequency_interval'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'frequency_interval', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_bal
     *
     * @return float[]
     */
    public function getMinBal()
    {
        return $this->container['min_bal'];
    }

    /**
     * Sets min_bal
     *
     * @param float[] $min_bal min_bal
     *
     * @return $this
     */
    public function setMinBal($min_bal)
    {
        $this->container['min_bal'] = $min_bal;

        return $this;
    }

    /**
     * Gets max_bal
     *
     * @return float[]
     */
    public function getMaxBal()
    {
        return $this->container['max_bal'];
    }

    /**
     * Sets max_bal
     *
     * @param float[] $max_bal max_bal
     *
     * @return $this
     */
    public function setMaxBal($max_bal)
    {
        $this->container['max_bal'] = $max_bal;

        return $this;
    }

    /**
     * Gets p
     *
     * @return float[]
     */
    public function getP()
    {
        return $this->container['p'];
    }

    /**
     * Sets p
     *
     * @param float[] $p p
     *
     * @return $this
     */
    public function setP($p)
    {
        $this->container['p'] = $p;

        return $this;
    }

    /**
     * Gets allocation_id
     *
     * @return string
     */
    public function getAllocationId()
    {
        return $this->container['allocation_id'];
    }

    /**
     * Sets allocation_id
     *
     * @param string $allocation_id allocation_id
     *
     * @return $this
     */
    public function setAllocationId($allocation_id)
    {
        $this->container['allocation_id'] = $allocation_id;

        return $this;
    }

    /**
     * Gets init_bal
     *
     * @return float
     */
    public function getInitBal()
    {
        return $this->container['init_bal'];
    }

    /**
     * Sets init_bal
     *
     * @param float $init_bal init_bal
     *
     * @return $this
     */
    public function setInitBal($init_bal)
    {

        if (!is_null($init_bal) && ($init_bal < 0)) {
            throw new \InvalidArgumentException('invalid value for $init_bal when calling MonteCarloRequest., must be bigger than or equal to 0.');
        }

        $this->container['init_bal'] = $init_bal;

        return $this;
    }

    /**
     * Gets max_sample
     *
     * @return float[]
     */
    public function getMaxSample()
    {
        return $this->container['max_sample'];
    }

    /**
     * Sets max_sample
     *
     * @param float[] $max_sample max_sample
     *
     * @return $this
     */
    public function setMaxSample($max_sample)
    {
        $this->container['max_sample'] = $max_sample;

        return $this;
    }

    /**
     * Gets model_id
     *
     * @return string
     */
    public function getModelId()
    {
        return $this->container['model_id'];
    }

    /**
     * Sets model_id
     *
     * @param string $model_id model_id
     *
     * @return $this
     */
    public function setModelId($model_id)
    {
        $this->container['model_id'] = $model_id;

        return $this;
    }

    /**
     * Gets cf
     *
     * @return float[][]
     */
    public function getCf()
    {
        return $this->container['cf'];
    }

    /**
     * Sets cf
     *
     * @param float[][] $cf cf
     *
     * @return $this
     */
    public function setCf($cf)
    {
        $this->container['cf'] = $cf;

        return $this;
    }

    /**
     * Gets create_log
     *
     * @return bool
     */
    public function getCreateLog()
    {
        return $this->container['create_log'];
    }

    /**
     * Sets create_log
     *
     * @param bool $create_log create_log
     *
     * @return $this
     */
    public function setCreateLog($create_log)
    {
        $this->container['create_log'] = $create_log;

        return $this;
    }

    /**
     * Gets aggregation_account_id
     *
     * @return string
     */
    public function getAggregationAccountId()
    {
        return $this->container['aggregation_account_id'];
    }

    /**
     * Sets aggregation_account_id
     *
     * @param string $aggregation_account_id aggregation_account_id
     *
     * @return $this
     */
    public function setAggregationAccountId($aggregation_account_id)
    {
        $this->container['aggregation_account_id'] = $aggregation_account_id;

        return $this;
    }

    /**
     * Gets n
     *
     * @return int
     */
    public function getN()
    {
        return $this->container['n'];
    }

    /**
     * Sets n
     *
     * @param int $n n
     *
     * @return $this
     */
    public function setN($n)
    {

        if (!is_null($n) && ($n > 10000)) {
            throw new \InvalidArgumentException('invalid value for $n when calling MonteCarloRequest., must be smaller than or equal to 10000.');
        }
        if (!is_null($n) && ($n < 1)) {
            throw new \InvalidArgumentException('invalid value for $n when calling MonteCarloRequest., must be bigger than or equal to 1.');
        }

        $this->container['n'] = $n;

        return $this;
    }

    /**
     * Gets remove_outliers
     *
     * @return bool
     */
    public function getRemoveOutliers()
    {
        return $this->container['remove_outliers'];
    }

    /**
     * Sets remove_outliers
     *
     * @param bool $remove_outliers remove_outliers
     *
     * @return $this
     */
    public function setRemoveOutliers($remove_outliers)
    {
        $this->container['remove_outliers'] = $remove_outliers;

        return $this;
    }

    /**
     * Gets sigma
     *
     * @return float[]
     */
    public function getSigma()
    {
        return $this->container['sigma'];
    }

    /**
     * Sets sigma
     *
     * @param float[] $sigma sigma
     *
     * @return $this
     */
    public function setSigma($sigma)
    {
        $this->container['sigma'] = $sigma;

        return $this;
    }

    /**
     * Gets mu
     *
     * @return float[]
     */
    public function getMu()
    {
        return $this->container['mu'];
    }

    /**
     * Sets mu
     *
     * @param float[] $mu mu
     *
     * @return $this
     */
    public function setMu($mu)
    {
        $this->container['mu'] = $mu;

        return $this;
    }

    /**
     * Gets portfolio_id
     *
     * @return string
     */
    public function getPortfolioId()
    {
        return $this->container['portfolio_id'];
    }

    /**
     * Sets portfolio_id
     *
     * @param string $portfolio_id portfolio_id
     *
     * @return $this
     */
    public function setPortfolioId($portfolio_id)
    {
        $this->container['portfolio_id'] = $portfolio_id;

        return $this;
    }

    /**
     * Gets result_type
     *
     * @return string
     */
    public function getResultType()
    {
        return $this->container['result_type'];
    }

    /**
     * Sets result_type
     *
     * @param string $result_type result_type
     *
     * @return $this
     */
    public function setResultType($result_type)
    {
        $allowedValues = $this->getResultTypeAllowableValues();
        if (!is_null($result_type) && !in_array($result_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'result_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result_type'] = $result_type;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets use_proxy_data
     *
     * @return bool
     */
    public function getUseProxyData()
    {
        return $this->container['use_proxy_data'];
    }

    /**
     * Sets use_proxy_data
     *
     * @param bool $use_proxy_data use_proxy_data
     *
     * @return $this
     */
    public function setUseProxyData($use_proxy_data)
    {
        $this->container['use_proxy_data'] = $use_proxy_data;

        return $this;
    }

    /**
     * Gets market_data_source
     *
     * @return string
     */
    public function getMarketDataSource()
    {
        return $this->container['market_data_source'];
    }

    /**
     * Sets market_data_source
     *
     * @param string $market_data_source market_data_source
     *
     * @return $this
     */
    public function setMarketDataSource($market_data_source)
    {
        $allowedValues = $this->getMarketDataSourceAllowableValues();
        if (!is_null($market_data_source) && !in_array($market_data_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'market_data_source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['market_data_source'] = $market_data_source;

        return $this;
    }

    /**
     * Gets ret_mod
     *
     * @return float[]
     */
    public function getRetMod()
    {
        return $this->container['ret_mod'];
    }

    /**
     * Sets ret_mod
     *
     * @param float[] $ret_mod ret_mod
     *
     * @return $this
     */
    public function setRetMod($ret_mod)
    {
        $this->container['ret_mod'] = $ret_mod;

        return $this;
    }

    /**
     * Gets frequency_interval
     *
     * @return string
     */
    public function getFrequencyInterval()
    {
        return $this->container['frequency_interval'];
    }

    /**
     * Sets frequency_interval
     *
     * @param string $frequency_interval frequency_interval
     *
     * @return $this
     */
    public function setFrequencyInterval($frequency_interval)
    {
        $allowedValues = $this->getFrequencyIntervalAllowableValues();
        if (!is_null($frequency_interval) && !in_array($frequency_interval, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'frequency_interval', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['frequency_interval'] = $frequency_interval;

        return $this;
    }

    /**
     * Gets min_sample
     *
     * @return float[]
     */
    public function getMinSample()
    {
        return $this->container['min_sample'];
    }

    /**
     * Sets min_sample
     *
     * @param float[] $min_sample min_sample
     *
     * @return $this
     */
    public function setMinSample($min_sample)
    {
        $this->container['min_sample'] = $min_sample;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


