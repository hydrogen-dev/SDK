<?php
/**
 * BeneficiaryBequestConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * BeneficiaryBequestConfig Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BeneficiaryBequestConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BeneficiaryBequestConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bequest_amount' => 'float',
        'bequest_duration' => 'int',
        'years_until_bequest' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bequest_amount' => null,
        'bequest_duration' => 'int32',
        'years_until_bequest' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bequest_amount' => 'bequest_amount',
        'bequest_duration' => 'bequest_duration',
        'years_until_bequest' => 'years_until_bequest'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bequest_amount' => 'setBequestAmount',
        'bequest_duration' => 'setBequestDuration',
        'years_until_bequest' => 'setYearsUntilBequest'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bequest_amount' => 'getBequestAmount',
        'bequest_duration' => 'getBequestDuration',
        'years_until_bequest' => 'getYearsUntilBequest'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bequest_amount'] = isset($data['bequest_amount']) ? $data['bequest_amount'] : null;
        $this->container['bequest_duration'] = isset($data['bequest_duration']) ? $data['bequest_duration'] : 10;
        $this->container['years_until_bequest'] = isset($data['years_until_bequest']) ? $data['years_until_bequest'] : 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bequest_amount'] === null) {
            $invalidProperties[] = "'bequest_amount' can't be null";
        }
        if (($this->container['bequest_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'bequest_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bequest_duration']) && ($this->container['bequest_duration'] < 1)) {
            $invalidProperties[] = "invalid value for 'bequest_duration', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['years_until_bequest']) && ($this->container['years_until_bequest'] < 0)) {
            $invalidProperties[] = "invalid value for 'years_until_bequest', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bequest_amount
     *
     * @return float
     */
    public function getBequestAmount()
    {
        return $this->container['bequest_amount'];
    }

    /**
     * Sets bequest_amount
     *
     * @param float $bequest_amount bequest_amount
     *
     * @return $this
     */
    public function setBequestAmount($bequest_amount)
    {

        if (($bequest_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $bequest_amount when calling BeneficiaryBequestConfig., must be bigger than or equal to 0.');
        }

        $this->container['bequest_amount'] = $bequest_amount;

        return $this;
    }

    /**
     * Gets bequest_duration
     *
     * @return int
     */
    public function getBequestDuration()
    {
        return $this->container['bequest_duration'];
    }

    /**
     * Sets bequest_duration
     *
     * @param int $bequest_duration bequest_duration
     *
     * @return $this
     */
    public function setBequestDuration($bequest_duration)
    {

        if (!is_null($bequest_duration) && ($bequest_duration < 1)) {
            throw new \InvalidArgumentException('invalid value for $bequest_duration when calling BeneficiaryBequestConfig., must be bigger than or equal to 1.');
        }

        $this->container['bequest_duration'] = $bequest_duration;

        return $this;
    }

    /**
     * Gets years_until_bequest
     *
     * @return int
     */
    public function getYearsUntilBequest()
    {
        return $this->container['years_until_bequest'];
    }

    /**
     * Sets years_until_bequest
     *
     * @param int $years_until_bequest years_until_bequest
     *
     * @return $this
     */
    public function setYearsUntilBequest($years_until_bequest)
    {

        if (!is_null($years_until_bequest) && ($years_until_bequest < 0)) {
            throw new \InvalidArgumentException('invalid value for $years_until_bequest when calling BeneficiaryBequestConfig., must be bigger than or equal to 0.');
        }

        $this->container['years_until_bequest'] = $years_until_bequest;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


