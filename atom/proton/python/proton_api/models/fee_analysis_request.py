# coding: utf-8

"""
    Hydrogen Proton API

    Financial engineering module of Hydrogen Atom  # noqa: E501

    OpenAPI spec version: 1.9.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from proton_api.configuration import Configuration


class FeeAnalysisRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency_code': 'str',
        'client_id': 'str',
        'end_date': 'date',
        'currency_conversion': 'str',
        'start_date': 'date',
        'transaction_status_scope': 'list[str]',
        'aggregation_account_ids': 'list[str]'
    }

    attribute_map = {
        'currency_code': 'currency_code',
        'client_id': 'client_id',
        'end_date': 'end_date',
        'currency_conversion': 'currency_conversion',
        'start_date': 'start_date',
        'transaction_status_scope': 'transaction_status_scope',
        'aggregation_account_ids': 'aggregation_account_ids'
    }

    def __init__(self, currency_code=None, client_id=None, end_date=None, currency_conversion=None, start_date=None, transaction_status_scope=None, aggregation_account_ids=None, _configuration=None):  # noqa: E501
        """FeeAnalysisRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._currency_code = None
        self._client_id = None
        self._end_date = None
        self._currency_conversion = None
        self._start_date = None
        self._transaction_status_scope = None
        self._aggregation_account_ids = None
        self.discriminator = None

        if currency_code is not None:
            self.currency_code = currency_code
        if client_id is not None:
            self.client_id = client_id
        if end_date is not None:
            self.end_date = end_date
        if currency_conversion is not None:
            self.currency_conversion = currency_conversion
        if start_date is not None:
            self.start_date = start_date
        if transaction_status_scope is not None:
            self.transaction_status_scope = transaction_status_scope
        if aggregation_account_ids is not None:
            self.aggregation_account_ids = aggregation_account_ids

    @property
    def currency_code(self):
        """Gets the currency_code of this FeeAnalysisRequest.  # noqa: E501


        :return: The currency_code of this FeeAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this FeeAnalysisRequest.


        :param currency_code: The currency_code of this FeeAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def client_id(self):
        """Gets the client_id of this FeeAnalysisRequest.  # noqa: E501


        :return: The client_id of this FeeAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FeeAnalysisRequest.


        :param client_id: The client_id of this FeeAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def end_date(self):
        """Gets the end_date of this FeeAnalysisRequest.  # noqa: E501


        :return: The end_date of this FeeAnalysisRequest.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this FeeAnalysisRequest.


        :param end_date: The end_date of this FeeAnalysisRequest.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def currency_conversion(self):
        """Gets the currency_conversion of this FeeAnalysisRequest.  # noqa: E501


        :return: The currency_conversion of this FeeAnalysisRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency_conversion

    @currency_conversion.setter
    def currency_conversion(self, currency_conversion):
        """Sets the currency_conversion of this FeeAnalysisRequest.


        :param currency_conversion: The currency_conversion of this FeeAnalysisRequest.  # noqa: E501
        :type: str
        """

        self._currency_conversion = currency_conversion

    @property
    def start_date(self):
        """Gets the start_date of this FeeAnalysisRequest.  # noqa: E501


        :return: The start_date of this FeeAnalysisRequest.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this FeeAnalysisRequest.


        :param start_date: The start_date of this FeeAnalysisRequest.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def transaction_status_scope(self):
        """Gets the transaction_status_scope of this FeeAnalysisRequest.  # noqa: E501


        :return: The transaction_status_scope of this FeeAnalysisRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_status_scope

    @transaction_status_scope.setter
    def transaction_status_scope(self, transaction_status_scope):
        """Sets the transaction_status_scope of this FeeAnalysisRequest.


        :param transaction_status_scope: The transaction_status_scope of this FeeAnalysisRequest.  # noqa: E501
        :type: list[str]
        """

        self._transaction_status_scope = transaction_status_scope

    @property
    def aggregation_account_ids(self):
        """Gets the aggregation_account_ids of this FeeAnalysisRequest.  # noqa: E501


        :return: The aggregation_account_ids of this FeeAnalysisRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._aggregation_account_ids

    @aggregation_account_ids.setter
    def aggregation_account_ids(self, aggregation_account_ids):
        """Sets the aggregation_account_ids of this FeeAnalysisRequest.


        :param aggregation_account_ids: The aggregation_account_ids of this FeeAnalysisRequest.  # noqa: E501
        :type: list[str]
        """

        self._aggregation_account_ids = aggregation_account_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeeAnalysisRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeeAnalysisRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeeAnalysisRequest):
            return True

        return self.to_dict() != other.to_dict()
