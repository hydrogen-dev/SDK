/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Aggregation Account Object
    /// </summary>
    [DataContract]
    public partial class AggregationAccount :  IEquatable<AggregationAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AggregationAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregationAccount" /> class.
        /// </summary>
        /// <param name="accountCategoryId">accountCategoryId.</param>
        /// <param name="accountHolder">accountHolder.</param>
        /// <param name="accountName">accountName (required).</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="apr">apr.</param>
        /// <param name="apy">apy.</param>
        /// <param name="bankLinkId">bankLinkId.</param>
        /// <param name="businessId">businessId.</param>
        /// <param name="category">category.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="creditLimit">creditLimit.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="deathBenefit">deathBenefit.</param>
        /// <param name="financialOfferId">financialOfferId.</param>
        /// <param name="id">id.</param>
        /// <param name="institutionId">institutionId.</param>
        /// <param name="institutionName">institutionName (required).</param>
        /// <param name="interestRate">interestRate.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="isAsset">isAsset.</param>
        /// <param name="isBusiness">isBusiness.</param>
        /// <param name="isCash">isCash.</param>
        /// <param name="isInvestment">isInvestment.</param>
        /// <param name="isLinkVerified">isLinkVerified.</param>
        /// <param name="isManual">isManual.</param>
        /// <param name="lastPayment">lastPayment.</param>
        /// <param name="lastPaymentDate">lastPaymentDate.</param>
        /// <param name="mask">mask.</param>
        /// <param name="maturityDate">maturityDate.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="minimumPayment">minimumPayment.</param>
        /// <param name="nextPaymentDate">nextPaymentDate.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="subcategory">subcategory.</param>
        /// <param name="updateDate">updateDate.</param>
        public AggregationAccount(Guid? accountCategoryId = default(Guid?), string accountHolder = default(string), string accountName = default(string), string accountNumber = default(string), float? apr = default(float?), float? apy = default(float?), Guid? bankLinkId = default(Guid?), Guid? businessId = default(Guid?), string category = default(string), Guid? clientId = default(Guid?), DateTime? createDate = default(DateTime?), float? creditLimit = default(float?), string currencyCode = default(string), float? deathBenefit = default(float?), Guid? financialOfferId = default(Guid?), Guid? id = default(Guid?), Guid? institutionId = default(Guid?), string institutionName = default(string), float? interestRate = default(float?), bool? isActive = default(bool?), bool? isAsset = default(bool?), bool? isBusiness = default(bool?), bool? isCash = default(bool?), bool? isInvestment = default(bool?), bool? isLinkVerified = default(bool?), bool? isManual = default(bool?), float? lastPayment = default(float?), DateTime? lastPaymentDate = default(DateTime?), string mask = default(string), DateTime? maturityDate = default(DateTime?), Dictionary<string, string> metadata = default(Dictionary<string, string>), float? minimumPayment = default(float?), DateTime? nextPaymentDate = default(DateTime?), string secondaryId = default(string), string subcategory = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "accountName" is required (not null)
            if (accountName == null)
            {
                throw new InvalidDataException("accountName is a required property for AggregationAccount and cannot be null");
            }
            else
            {
                this.AccountName = accountName;
            }
            // to ensure "institutionName" is required (not null)
            if (institutionName == null)
            {
                throw new InvalidDataException("institutionName is a required property for AggregationAccount and cannot be null");
            }
            else
            {
                this.InstitutionName = institutionName;
            }
            this.AccountCategoryId = accountCategoryId;
            this.AccountHolder = accountHolder;
            this.AccountNumber = accountNumber;
            this.Apr = apr;
            this.Apy = apy;
            this.BankLinkId = bankLinkId;
            this.BusinessId = businessId;
            this.Category = category;
            this.ClientId = clientId;
            this.CreateDate = createDate;
            this.CreditLimit = creditLimit;
            this.CurrencyCode = currencyCode;
            this.DeathBenefit = deathBenefit;
            this.FinancialOfferId = financialOfferId;
            this.Id = id;
            this.InstitutionId = institutionId;
            this.InterestRate = interestRate;
            this.IsActive = isActive;
            this.IsAsset = isAsset;
            this.IsBusiness = isBusiness;
            this.IsCash = isCash;
            this.IsInvestment = isInvestment;
            this.IsLinkVerified = isLinkVerified;
            this.IsManual = isManual;
            this.LastPayment = lastPayment;
            this.LastPaymentDate = lastPaymentDate;
            this.Mask = mask;
            this.MaturityDate = maturityDate;
            this.Metadata = metadata;
            this.MinimumPayment = minimumPayment;
            this.NextPaymentDate = nextPaymentDate;
            this.SecondaryId = secondaryId;
            this.Subcategory = subcategory;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// accountCategoryId
        /// </summary>
        /// <value>accountCategoryId</value>
        [DataMember(Name="account_category_id", EmitDefaultValue=false)]
        public Guid? AccountCategoryId { get; set; }

        /// <summary>
        /// accountHolder
        /// </summary>
        /// <value>accountHolder</value>
        [DataMember(Name="account_holder", EmitDefaultValue=false)]
        public string AccountHolder { get; set; }

        /// <summary>
        /// accountName
        /// </summary>
        /// <value>accountName</value>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name="account_number", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// apr
        /// </summary>
        /// <value>apr</value>
        [DataMember(Name="apr", EmitDefaultValue=false)]
        public float? Apr { get; set; }

        /// <summary>
        /// apy
        /// </summary>
        /// <value>apy</value>
        [DataMember(Name="apy", EmitDefaultValue=false)]
        public float? Apy { get; set; }

        /// <summary>
        /// bankLinkId
        /// </summary>
        /// <value>bankLinkId</value>
        [DataMember(Name="bank_link_id", EmitDefaultValue=false)]
        public Guid? BankLinkId { get; set; }

        /// <summary>
        /// businessId
        /// </summary>
        /// <value>businessId</value>
        [DataMember(Name="business_id", EmitDefaultValue=false)]
        public Guid? BusinessId { get; set; }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// creditLimit
        /// </summary>
        /// <value>creditLimit</value>
        [DataMember(Name="credit_limit", EmitDefaultValue=false)]
        public float? CreditLimit { get; set; }

        /// <summary>
        /// currencyCode
        /// </summary>
        /// <value>currencyCode</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// deathBenefit
        /// </summary>
        /// <value>deathBenefit</value>
        [DataMember(Name="death_benefit", EmitDefaultValue=false)]
        public float? DeathBenefit { get; set; }

        /// <summary>
        /// financialOfferId
        /// </summary>
        /// <value>financialOfferId</value>
        [DataMember(Name="financial_offer_id", EmitDefaultValue=false)]
        public Guid? FinancialOfferId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// institutionId
        /// </summary>
        /// <value>institutionId</value>
        [DataMember(Name="institution_id", EmitDefaultValue=false)]
        public Guid? InstitutionId { get; set; }

        /// <summary>
        /// institutionName
        /// </summary>
        /// <value>institutionName</value>
        [DataMember(Name="institution_name", EmitDefaultValue=false)]
        public string InstitutionName { get; set; }

        /// <summary>
        /// interestRate
        /// </summary>
        /// <value>interestRate</value>
        [DataMember(Name="interest_rate", EmitDefaultValue=false)]
        public float? InterestRate { get; set; }

        /// <summary>
        /// isActive
        /// </summary>
        /// <value>isActive</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets IsAsset
        /// </summary>
        [DataMember(Name="is_asset", EmitDefaultValue=false)]
        public bool? IsAsset { get; set; }

        /// <summary>
        /// Gets or Sets IsBusiness
        /// </summary>
        [DataMember(Name="is_business", EmitDefaultValue=false)]
        public bool? IsBusiness { get; set; }

        /// <summary>
        /// Gets or Sets IsCash
        /// </summary>
        [DataMember(Name="is_cash", EmitDefaultValue=false)]
        public bool? IsCash { get; set; }

        /// <summary>
        /// Gets or Sets IsInvestment
        /// </summary>
        [DataMember(Name="is_investment", EmitDefaultValue=false)]
        public bool? IsInvestment { get; set; }

        /// <summary>
        /// isLinkVerified
        /// </summary>
        /// <value>isLinkVerified</value>
        [DataMember(Name="is_link_verified", EmitDefaultValue=false)]
        public bool? IsLinkVerified { get; set; }

        /// <summary>
        /// isManual
        /// </summary>
        /// <value>isManual</value>
        [DataMember(Name="is_manual", EmitDefaultValue=false)]
        public bool? IsManual { get; set; }

        /// <summary>
        /// lastPayment
        /// </summary>
        /// <value>lastPayment</value>
        [DataMember(Name="last_payment", EmitDefaultValue=false)]
        public float? LastPayment { get; set; }

        /// <summary>
        /// lastPaymentDate
        /// </summary>
        /// <value>lastPaymentDate</value>
        [DataMember(Name="last_payment_date", EmitDefaultValue=false)]
        public DateTime? LastPaymentDate { get; set; }

        /// <summary>
        /// mask
        /// </summary>
        /// <value>mask</value>
        [DataMember(Name="mask", EmitDefaultValue=false)]
        public string Mask { get; set; }

        /// <summary>
        /// maturityDate
        /// </summary>
        /// <value>maturityDate</value>
        [DataMember(Name="maturity_date", EmitDefaultValue=false)]
        public DateTime? MaturityDate { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// minimumPayment
        /// </summary>
        /// <value>minimumPayment</value>
        [DataMember(Name="minimum_payment", EmitDefaultValue=false)]
        public float? MinimumPayment { get; set; }

        /// <summary>
        /// nextPaymentDate
        /// </summary>
        /// <value>nextPaymentDate</value>
        [DataMember(Name="next_payment_date", EmitDefaultValue=false)]
        public DateTime? NextPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// subcategory
        /// </summary>
        /// <value>subcategory</value>
        [DataMember(Name="subcategory", EmitDefaultValue=false)]
        public string Subcategory { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AggregationAccount {\n");
            sb.Append("  AccountCategoryId: ").Append(AccountCategoryId).Append("\n");
            sb.Append("  AccountHolder: ").Append(AccountHolder).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Apr: ").Append(Apr).Append("\n");
            sb.Append("  Apy: ").Append(Apy).Append("\n");
            sb.Append("  BankLinkId: ").Append(BankLinkId).Append("\n");
            sb.Append("  BusinessId: ").Append(BusinessId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CreditLimit: ").Append(CreditLimit).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  DeathBenefit: ").Append(DeathBenefit).Append("\n");
            sb.Append("  FinancialOfferId: ").Append(FinancialOfferId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstitutionId: ").Append(InstitutionId).Append("\n");
            sb.Append("  InstitutionName: ").Append(InstitutionName).Append("\n");
            sb.Append("  InterestRate: ").Append(InterestRate).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsAsset: ").Append(IsAsset).Append("\n");
            sb.Append("  IsBusiness: ").Append(IsBusiness).Append("\n");
            sb.Append("  IsCash: ").Append(IsCash).Append("\n");
            sb.Append("  IsInvestment: ").Append(IsInvestment).Append("\n");
            sb.Append("  IsLinkVerified: ").Append(IsLinkVerified).Append("\n");
            sb.Append("  IsManual: ").Append(IsManual).Append("\n");
            sb.Append("  LastPayment: ").Append(LastPayment).Append("\n");
            sb.Append("  LastPaymentDate: ").Append(LastPaymentDate).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  MinimumPayment: ").Append(MinimumPayment).Append("\n");
            sb.Append("  NextPaymentDate: ").Append(NextPaymentDate).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AggregationAccount);
        }

        /// <summary>
        /// Returns true if AggregationAccount instances are equal
        /// </summary>
        /// <param name="input">Instance of AggregationAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AggregationAccount input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountCategoryId == input.AccountCategoryId ||
                    (this.AccountCategoryId != null &&
                    this.AccountCategoryId.Equals(input.AccountCategoryId))
                ) && 
                (
                    this.AccountHolder == input.AccountHolder ||
                    (this.AccountHolder != null &&
                    this.AccountHolder.Equals(input.AccountHolder))
                ) && 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Apr == input.Apr ||
                    (this.Apr != null &&
                    this.Apr.Equals(input.Apr))
                ) && 
                (
                    this.Apy == input.Apy ||
                    (this.Apy != null &&
                    this.Apy.Equals(input.Apy))
                ) && 
                (
                    this.BankLinkId == input.BankLinkId ||
                    (this.BankLinkId != null &&
                    this.BankLinkId.Equals(input.BankLinkId))
                ) && 
                (
                    this.BusinessId == input.BusinessId ||
                    (this.BusinessId != null &&
                    this.BusinessId.Equals(input.BusinessId))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CreditLimit == input.CreditLimit ||
                    (this.CreditLimit != null &&
                    this.CreditLimit.Equals(input.CreditLimit))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.DeathBenefit == input.DeathBenefit ||
                    (this.DeathBenefit != null &&
                    this.DeathBenefit.Equals(input.DeathBenefit))
                ) && 
                (
                    this.FinancialOfferId == input.FinancialOfferId ||
                    (this.FinancialOfferId != null &&
                    this.FinancialOfferId.Equals(input.FinancialOfferId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstitutionId == input.InstitutionId ||
                    (this.InstitutionId != null &&
                    this.InstitutionId.Equals(input.InstitutionId))
                ) && 
                (
                    this.InstitutionName == input.InstitutionName ||
                    (this.InstitutionName != null &&
                    this.InstitutionName.Equals(input.InstitutionName))
                ) && 
                (
                    this.InterestRate == input.InterestRate ||
                    (this.InterestRate != null &&
                    this.InterestRate.Equals(input.InterestRate))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsAsset == input.IsAsset ||
                    (this.IsAsset != null &&
                    this.IsAsset.Equals(input.IsAsset))
                ) && 
                (
                    this.IsBusiness == input.IsBusiness ||
                    (this.IsBusiness != null &&
                    this.IsBusiness.Equals(input.IsBusiness))
                ) && 
                (
                    this.IsCash == input.IsCash ||
                    (this.IsCash != null &&
                    this.IsCash.Equals(input.IsCash))
                ) && 
                (
                    this.IsInvestment == input.IsInvestment ||
                    (this.IsInvestment != null &&
                    this.IsInvestment.Equals(input.IsInvestment))
                ) && 
                (
                    this.IsLinkVerified == input.IsLinkVerified ||
                    (this.IsLinkVerified != null &&
                    this.IsLinkVerified.Equals(input.IsLinkVerified))
                ) && 
                (
                    this.IsManual == input.IsManual ||
                    (this.IsManual != null &&
                    this.IsManual.Equals(input.IsManual))
                ) && 
                (
                    this.LastPayment == input.LastPayment ||
                    (this.LastPayment != null &&
                    this.LastPayment.Equals(input.LastPayment))
                ) && 
                (
                    this.LastPaymentDate == input.LastPaymentDate ||
                    (this.LastPaymentDate != null &&
                    this.LastPaymentDate.Equals(input.LastPaymentDate))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.MinimumPayment == input.MinimumPayment ||
                    (this.MinimumPayment != null &&
                    this.MinimumPayment.Equals(input.MinimumPayment))
                ) && 
                (
                    this.NextPaymentDate == input.NextPaymentDate ||
                    (this.NextPaymentDate != null &&
                    this.NextPaymentDate.Equals(input.NextPaymentDate))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.Subcategory == input.Subcategory ||
                    (this.Subcategory != null &&
                    this.Subcategory.Equals(input.Subcategory))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountCategoryId != null)
                    hashCode = hashCode * 59 + this.AccountCategoryId.GetHashCode();
                if (this.AccountHolder != null)
                    hashCode = hashCode * 59 + this.AccountHolder.GetHashCode();
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Apr != null)
                    hashCode = hashCode * 59 + this.Apr.GetHashCode();
                if (this.Apy != null)
                    hashCode = hashCode * 59 + this.Apy.GetHashCode();
                if (this.BankLinkId != null)
                    hashCode = hashCode * 59 + this.BankLinkId.GetHashCode();
                if (this.BusinessId != null)
                    hashCode = hashCode * 59 + this.BusinessId.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CreditLimit != null)
                    hashCode = hashCode * 59 + this.CreditLimit.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.DeathBenefit != null)
                    hashCode = hashCode * 59 + this.DeathBenefit.GetHashCode();
                if (this.FinancialOfferId != null)
                    hashCode = hashCode * 59 + this.FinancialOfferId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstitutionId != null)
                    hashCode = hashCode * 59 + this.InstitutionId.GetHashCode();
                if (this.InstitutionName != null)
                    hashCode = hashCode * 59 + this.InstitutionName.GetHashCode();
                if (this.InterestRate != null)
                    hashCode = hashCode * 59 + this.InterestRate.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsAsset != null)
                    hashCode = hashCode * 59 + this.IsAsset.GetHashCode();
                if (this.IsBusiness != null)
                    hashCode = hashCode * 59 + this.IsBusiness.GetHashCode();
                if (this.IsCash != null)
                    hashCode = hashCode * 59 + this.IsCash.GetHashCode();
                if (this.IsInvestment != null)
                    hashCode = hashCode * 59 + this.IsInvestment.GetHashCode();
                if (this.IsLinkVerified != null)
                    hashCode = hashCode * 59 + this.IsLinkVerified.GetHashCode();
                if (this.IsManual != null)
                    hashCode = hashCode * 59 + this.IsManual.GetHashCode();
                if (this.LastPayment != null)
                    hashCode = hashCode * 59 + this.LastPayment.GetHashCode();
                if (this.LastPaymentDate != null)
                    hashCode = hashCode * 59 + this.LastPaymentDate.GetHashCode();
                if (this.Mask != null)
                    hashCode = hashCode * 59 + this.Mask.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.MinimumPayment != null)
                    hashCode = hashCode * 59 + this.MinimumPayment.GetHashCode();
                if (this.NextPaymentDate != null)
                    hashCode = hashCode * 59 + this.NextPaymentDate.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.Subcategory != null)
                    hashCode = hashCode * 59 + this.Subcategory.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
