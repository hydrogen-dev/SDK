/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Location'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Location'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenProtonApi) {
      root.HydrogenProtonApi = {};
    }
    root.HydrogenProtonApi.CardTransactionAuthorizationRequest = factory(root.HydrogenProtonApi.ApiClient, root.HydrogenProtonApi.Location);
  }
}(this, function(ApiClient, Location) {
  'use strict';

  /**
   * The CardTransactionAuthorizationRequest model module.
   * @module model/CardTransactionAuthorizationRequest
   * @version 1.9.2
   */

  /**
   * Constructs a new <code>CardTransactionAuthorizationRequest</code>.
   * @alias module:model/CardTransactionAuthorizationRequest
   * @class
   * @param currencyCode {String} 
   * @param transactionType {module:model/CardTransactionAuthorizationRequest.TransactionTypeEnum} 
   * @param cardId {String} 
   * @param amount {Number} 
   * @param _date {Date} 
   */
  var exports = function(currencyCode, transactionType, cardId, amount, _date) {
    this.currencyCode = currencyCode;
    this.transactionType = transactionType;
    this.cardId = cardId;
    this.amount = amount;
    this._date = _date;
  };

  /**
   * Constructs a <code>CardTransactionAuthorizationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CardTransactionAuthorizationRequest} obj Optional instance to populate.
   * @return {module:model/CardTransactionAuthorizationRequest} The populated <code>CardTransactionAuthorizationRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('currency_code'))
        obj.currencyCode = ApiClient.convertToType(data['currency_code'], 'String');
      if (data.hasOwnProperty('memo'))
        obj.memo = ApiClient.convertToType(data['memo'], 'String');
      if (data.hasOwnProperty('partial_auth'))
        obj.partialAuth = ApiClient.convertToType(data['partial_auth'], 'Boolean');
      if (data.hasOwnProperty('transaction_type'))
        obj.transactionType = ApiClient.convertToType(data['transaction_type'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('transaction_category_id'))
        obj.transactionCategoryId = ApiClient.convertToType(data['transaction_category_id'], 'String');
      if (data.hasOwnProperty('use_audit_log'))
        obj.useAuditLog = ApiClient.convertToType(data['use_audit_log'], 'Boolean');
      if (data.hasOwnProperty('merchant_category_code'))
        obj.merchantCategoryCode = ApiClient.convertToType(data['merchant_category_code'], 'String');
      if (data.hasOwnProperty('card_id'))
        obj.cardId = ApiClient.convertToType(data['card_id'], 'String');
      if (data.hasOwnProperty('transaction_category'))
        obj.transactionCategory = ApiClient.convertToType(data['transaction_category'], 'String');
      if (data.hasOwnProperty('cleanse_data'))
        obj.cleanseData = ApiClient.convertToType(data['cleanse_data'], 'Boolean');
      if (data.hasOwnProperty('auth_type'))
        obj.authType = ApiClient.convertToType(data['auth_type'], ['String']);
      if (data.hasOwnProperty('mid'))
        obj.mid = ApiClient.convertToType(data['mid'], 'String');
      if (data.hasOwnProperty('transaction_status_scope'))
        obj.transactionStatusScope = ApiClient.convertToType(data['transaction_status_scope'], ['String']);
      if (data.hasOwnProperty('location'))
        obj.location = Location.constructFromObject(data['location']);
      if (data.hasOwnProperty('merchant'))
        obj.merchant = ApiClient.convertToType(data['merchant'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'Number');
      if (data.hasOwnProperty('date'))
        obj._date = ApiClient.convertToType(data['date'], 'Date');
      if (data.hasOwnProperty('merchant_id'))
        obj.merchantId = ApiClient.convertToType(data['merchant_id'], 'String');
    }
    return obj;
  }

  /**
   * @member {String} currencyCode
   */
  exports.prototype.currencyCode = undefined;

  /**
   * @member {String} memo
   * @default 'null'
   */
  exports.prototype.memo = 'null';

  /**
   * @member {Boolean} partialAuth
   * @default false
   */
  exports.prototype.partialAuth = false;

  /**
   * @member {module:model/CardTransactionAuthorizationRequest.TransactionTypeEnum} transactionType
   */
  exports.prototype.transactionType = undefined;

  /**
   * @member {String} description
   * @default 'null'
   */
  exports.prototype.description = 'null';

  /**
   * @member {String} transactionCategoryId
   */
  exports.prototype.transactionCategoryId = undefined;

  /**
   * @member {Boolean} useAuditLog
   * @default false
   */
  exports.prototype.useAuditLog = false;

  /**
   * @member {String} merchantCategoryCode
   */
  exports.prototype.merchantCategoryCode = undefined;

  /**
   * @member {String} cardId
   */
  exports.prototype.cardId = undefined;

  /**
   * @member {String} transactionCategory
   * @default 'null'
   */
  exports.prototype.transactionCategory = 'null';

  /**
   * @member {Boolean} cleanseData
   * @default false
   */
  exports.prototype.cleanseData = false;

  /**
   * @member {Array.<module:model/CardTransactionAuthorizationRequest.AuthTypeEnum>} authType
   */
  exports.prototype.authType = undefined;

  /**
   * @member {String} mid
   * @default 'null'
   */
  exports.prototype.mid = 'null';

  /**
   * @member {Array.<String>} transactionStatusScope
   */
  exports.prototype.transactionStatusScope = undefined;

  /**
   * @member {module:model/Location} location
   */
  exports.prototype.location = undefined;

  /**
   * @member {String} merchant
   * @default 'null'
   */
  exports.prototype.merchant = 'null';

  /**
   * @member {Number} amount
   */
  exports.prototype.amount = undefined;

  /**
   * @member {Date} _date
   */
  exports.prototype._date = undefined;

  /**
   * @member {String} merchantId
   */
  exports.prototype.merchantId = undefined;



  /**
   * Allowed values for the <code>transactionType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TransactionTypeEnum = {
    /**
     * value: "atm_withdrawal"
     * @const
     */
    atmWithdrawal: "atm_withdrawal",

    /**
     * value: "purchase"
     * @const
     */
    purchase: "purchase",

    /**
     * value: "other"
     * @const
     */
    other: "other"
  };


  /**
   * Allowed values for the <code>authType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AuthTypeEnum = {
    /**
     * value: "spending_control"
     * @const
     */
    spendingControl: "spending_control"
  };

  return exports;

}));
