/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * RatioTargets
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-06-14T14:44:02.139-04:00")
public class RatioTargets {
  @SerializedName("liquidity_ratio_expenses")
  private BigDecimal liquidityRatioExpenses = null;

  @SerializedName("liquidity_ratio_liabilities")
  private BigDecimal liquidityRatioLiabilities = null;

  @SerializedName("current_ratio")
  private BigDecimal currentRatio = null;

  @SerializedName("asset_allocation_ratio")
  private BigDecimal assetAllocationRatio = null;

  @SerializedName("savings_ratio_gross")
  private BigDecimal savingsRatioGross = null;

  @SerializedName("savings_ratio_net")
  private BigDecimal savingsRatioNet = null;

  public RatioTargets liquidityRatioExpenses(BigDecimal liquidityRatioExpenses) {
    this.liquidityRatioExpenses = liquidityRatioExpenses;
    return this;
  }

   /**
   * Ideal ratio target for expense-based liquidity ratio
   * minimum: 0
   * @return liquidityRatioExpenses
  **/
  @ApiModelProperty(value = "Ideal ratio target for expense-based liquidity ratio")
  public BigDecimal getLiquidityRatioExpenses() {
    return liquidityRatioExpenses;
  }

  public void setLiquidityRatioExpenses(BigDecimal liquidityRatioExpenses) {
    this.liquidityRatioExpenses = liquidityRatioExpenses;
  }

  public RatioTargets liquidityRatioLiabilities(BigDecimal liquidityRatioLiabilities) {
    this.liquidityRatioLiabilities = liquidityRatioLiabilities;
    return this;
  }

   /**
   * Ideal ratio target for liability-based liquidity ratio
   * minimum: 0
   * @return liquidityRatioLiabilities
  **/
  @ApiModelProperty(value = "Ideal ratio target for liability-based liquidity ratio")
  public BigDecimal getLiquidityRatioLiabilities() {
    return liquidityRatioLiabilities;
  }

  public void setLiquidityRatioLiabilities(BigDecimal liquidityRatioLiabilities) {
    this.liquidityRatioLiabilities = liquidityRatioLiabilities;
  }

  public RatioTargets currentRatio(BigDecimal currentRatio) {
    this.currentRatio = currentRatio;
    return this;
  }

   /**
   * Ideal ratio target for current ratio
   * minimum: 0
   * @return currentRatio
  **/
  @ApiModelProperty(value = "Ideal ratio target for current ratio")
  public BigDecimal getCurrentRatio() {
    return currentRatio;
  }

  public void setCurrentRatio(BigDecimal currentRatio) {
    this.currentRatio = currentRatio;
  }

  public RatioTargets assetAllocationRatio(BigDecimal assetAllocationRatio) {
    this.assetAllocationRatio = assetAllocationRatio;
    return this;
  }

   /**
   * Ideal ratio target for asset allocation ratio
   * minimum: 0
   * @return assetAllocationRatio
  **/
  @ApiModelProperty(value = "Ideal ratio target for asset allocation ratio")
  public BigDecimal getAssetAllocationRatio() {
    return assetAllocationRatio;
  }

  public void setAssetAllocationRatio(BigDecimal assetAllocationRatio) {
    this.assetAllocationRatio = assetAllocationRatio;
  }

  public RatioTargets savingsRatioGross(BigDecimal savingsRatioGross) {
    this.savingsRatioGross = savingsRatioGross;
    return this;
  }

   /**
   * Ideal ratio target for gross savings ratio
   * minimum: 0
   * @return savingsRatioGross
  **/
  @ApiModelProperty(value = "Ideal ratio target for gross savings ratio")
  public BigDecimal getSavingsRatioGross() {
    return savingsRatioGross;
  }

  public void setSavingsRatioGross(BigDecimal savingsRatioGross) {
    this.savingsRatioGross = savingsRatioGross;
  }

  public RatioTargets savingsRatioNet(BigDecimal savingsRatioNet) {
    this.savingsRatioNet = savingsRatioNet;
    return this;
  }

   /**
   * Ideal ratio target for net savings ratio ratio
   * minimum: 0
   * @return savingsRatioNet
  **/
  @ApiModelProperty(value = "Ideal ratio target for net savings ratio ratio")
  public BigDecimal getSavingsRatioNet() {
    return savingsRatioNet;
  }

  public void setSavingsRatioNet(BigDecimal savingsRatioNet) {
    this.savingsRatioNet = savingsRatioNet;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RatioTargets ratioTargets = (RatioTargets) o;
    return Objects.equals(this.liquidityRatioExpenses, ratioTargets.liquidityRatioExpenses) &&
        Objects.equals(this.liquidityRatioLiabilities, ratioTargets.liquidityRatioLiabilities) &&
        Objects.equals(this.currentRatio, ratioTargets.currentRatio) &&
        Objects.equals(this.assetAllocationRatio, ratioTargets.assetAllocationRatio) &&
        Objects.equals(this.savingsRatioGross, ratioTargets.savingsRatioGross) &&
        Objects.equals(this.savingsRatioNet, ratioTargets.savingsRatioNet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(liquidityRatioExpenses, liquidityRatioLiabilities, currentRatio, assetAllocationRatio, savingsRatioGross, savingsRatioNet);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RatioTargets {\n");
    
    sb.append("    liquidityRatioExpenses: ").append(toIndentedString(liquidityRatioExpenses)).append("\n");
    sb.append("    liquidityRatioLiabilities: ").append(toIndentedString(liquidityRatioLiabilities)).append("\n");
    sb.append("    currentRatio: ").append(toIndentedString(currentRatio)).append("\n");
    sb.append("    assetAllocationRatio: ").append(toIndentedString(assetAllocationRatio)).append("\n");
    sb.append("    savingsRatioGross: ").append(toIndentedString(savingsRatioGross)).append("\n");
    sb.append("    savingsRatioNet: ").append(toIndentedString(savingsRatioNet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

