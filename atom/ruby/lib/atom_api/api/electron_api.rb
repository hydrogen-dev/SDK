=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'uri'

module AtomApi
  class ElectronApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a marketing campaign
    # @param campaign_id UUID of a marketing campaign
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign(campaign_id, opts = {})
      delete_campaign_with_http_info(campaign_id, opts)
      nil
    end

    # Delete a marketing campaign
    # @param campaign_id UUID of a marketing campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_campaign_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_campaign ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling ElectronApi.delete_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/campaign/{campaign_id}'.sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a marketing campaign data record
    # @param campaign_data_id UUID of a campaign data record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign_data_record(campaign_data_id, opts = {})
      delete_campaign_data_record_with_http_info(campaign_data_id, opts)
      nil
    end

    # Delete a marketing campaign data record
    # @param campaign_data_id UUID of a campaign data record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_campaign_data_record_with_http_info(campaign_data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_campaign_data_record ...'
      end
      # verify the required parameter 'campaign_data_id' is set
      if @api_client.config.client_side_validation && campaign_data_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data_id' when calling ElectronApi.delete_campaign_data_record"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_data/{campaign_data_id}'.sub('{' + 'campaign_data_id' + '}', campaign_data_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_campaign_data_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a marketing campaign plan
    # @param campaign_plan_id UUID of a campaign plan
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_campaign_plan(campaign_plan_id, opts = {})
      delete_campaign_plan_with_http_info(campaign_plan_id, opts)
      nil
    end

    # Delete a marketing campaign plan
    # @param campaign_plan_id UUID of a campaign plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_campaign_plan_with_http_info(campaign_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_campaign_plan ...'
      end
      # verify the required parameter 'campaign_plan_id' is set
      if @api_client.config.client_side_validation && campaign_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan_id' when calling ElectronApi.delete_campaign_plan"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_plan/{campaign_plan_id}'.sub('{' + 'campaign_plan_id' + '}', campaign_plan_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_campaign_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a chat log
    # @param chat_id UUID of a chat record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_chat_log(chat_id, opts = {})
      delete_chat_log_with_http_info(chat_id, opts)
      nil
    end

    # Delete a chat log
    # @param chat_id UUID of a chat record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_chat_log_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_chat_log ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ElectronApi.delete_chat_log"
      end
      # resource path
      local_var_path = '/electron/v1/chat/{chat_id}'.sub('{' + 'chat_id' + '}', chat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_chat_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a client from a campaign
    # @param client_campaign_id UUID of a client campaign record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client_campaign(client_campaign_id, opts = {})
      delete_client_campaign_with_http_info(client_campaign_id, opts)
      nil
    end

    # Remove a client from a campaign
    # @param client_campaign_id UUID of a client campaign record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_campaign_with_http_info(client_campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_client_campaign ...'
      end
      # verify the required parameter 'client_campaign_id' is set
      if @api_client.config.client_side_validation && client_campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_campaign_id' when calling ElectronApi.delete_client_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/client_campaign/{client_campaign_id}'.sub('{' + 'client_campaign_id' + '}', client_campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_client_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a consultation
    # @param consultation_id UUID of a consultation record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_consultation(consultation_id, opts = {})
      delete_consultation_with_http_info(consultation_id, opts)
      nil
    end

    # Delete a consultation
    # @param consultation_id UUID of a consultation record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_consultation_with_http_info(consultation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_consultation ...'
      end
      # verify the required parameter 'consultation_id' is set
      if @api_client.config.client_side_validation && consultation_id.nil?
        fail ArgumentError, "Missing the required parameter 'consultation_id' when calling ElectronApi.delete_consultation"
      end
      # resource path
      local_var_path = '/electron/v1/consultation/{consultation_id}'.sub('{' + 'consultation_id' + '}', consultation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_consultation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a document
    # @param document_id UUID of a document
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_document(document_id, opts = {})
      delete_document_with_http_info(document_id, opts)
      nil
    end

    # Delete a document
    # @param document_id UUID of a document
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling ElectronApi.delete_document"
      end
      # resource path
      local_var_path = '/electron/v1/document/{document_id}'.sub('{' + 'document_id' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a FAQ
    # @param faq_id UUID of a FAQ
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_faq(faq_id, opts = {})
      delete_faq_with_http_info(faq_id, opts)
      nil
    end

    # Delete a FAQ
    # @param faq_id UUID of a FAQ
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_faq_with_http_info(faq_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_faq ...'
      end
      # verify the required parameter 'faq_id' is set
      if @api_client.config.client_side_validation && faq_id.nil?
        fail ArgumentError, "Missing the required parameter 'faq_id' when calling ElectronApi.delete_faq"
      end
      # resource path
      local_var_path = '/electron/v1/faq/{faq_id}'.sub('{' + 'faq_id' + '}', faq_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_faq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a sales inquiry
    # @param sales_id UUID of a sales record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sales_inquiry(sales_id, opts = {})
      delete_sales_inquiry_with_http_info(sales_id, opts)
      nil
    end

    # Delete a sales inquiry
    # @param sales_id UUID of a sales record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_sales_inquiry_with_http_info(sales_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_sales_inquiry ...'
      end
      # verify the required parameter 'sales_id' is set
      if @api_client.config.client_side_validation && sales_id.nil?
        fail ArgumentError, "Missing the required parameter 'sales_id' when calling ElectronApi.delete_sales_inquiry"
      end
      # resource path
      local_var_path = '/electron/v1/sales/{sales_id}'.sub('{' + 'sales_id' + '}', sales_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_sales_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a support ticket
    # @param support_ticket_id UUID of a support ticket
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_support_ticket(support_ticket_id, opts = {})
      delete_support_ticket_with_http_info(support_ticket_id, opts)
      nil
    end

    # Delete a support ticket
    # @param support_ticket_id UUID of a support ticket
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_support_ticket_with_http_info(support_ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_support_ticket ...'
      end
      # verify the required parameter 'support_ticket_id' is set
      if @api_client.config.client_side_validation && support_ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_id' when calling ElectronApi.delete_support_ticket"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket/{support_ticket_id}'.sub('{' + 'support_ticket_id' + '}', support_ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_support_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a support ticket comment
    # @param support_ticket_comment_id UUID of a support ticket comment
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_support_ticket_comment(support_ticket_comment_id, opts = {})
      delete_support_ticket_comment_with_http_info(support_ticket_comment_id, opts)
      nil
    end

    # Delete a support ticket comment
    # @param support_ticket_comment_id UUID of a support ticket comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_support_ticket_comment_with_http_info(support_ticket_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.delete_support_ticket_comment ...'
      end
      # verify the required parameter 'support_ticket_comment_id' is set
      if @api_client.config.client_side_validation && support_ticket_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_comment_id' when calling ElectronApi.delete_support_ticket_comment"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket_comment/{support_ticket_comment_id}'.sub('{' + 'support_ticket_comment_id' + '}', support_ticket_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#delete_support_ticket_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a marketing campaign
    # @param campaign_id UUID of a marketing campaign
    # @param [Hash] opts the optional parameters
    # @return [SpecificCampaignResponse]
    def get_campaign(campaign_id, opts = {})
      data, _status_code, _headers = get_campaign_with_http_info(campaign_id, opts)
      data
    end

    # Retrieve a marketing campaign
    # @param campaign_id UUID of a marketing campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificCampaignResponse, Fixnum, Hash)>] SpecificCampaignResponse data, response status code and response headers
    def get_campaign_with_http_info(campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_campaign ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling ElectronApi.get_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/campaign/{campaign_id}'.sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a marketing campaign data record
    # @param campaign_data_id UUID of a campaign data record
    # @param [Hash] opts the optional parameters
    # @return [SpecificCampaignDataResponse]
    def get_campaign_data_record(campaign_data_id, opts = {})
      data, _status_code, _headers = get_campaign_data_record_with_http_info(campaign_data_id, opts)
      data
    end

    # Retrieve a marketing campaign data record
    # @param campaign_data_id UUID of a campaign data record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificCampaignDataResponse, Fixnum, Hash)>] SpecificCampaignDataResponse data, response status code and response headers
    def get_campaign_data_record_with_http_info(campaign_data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_campaign_data_record ...'
      end
      # verify the required parameter 'campaign_data_id' is set
      if @api_client.config.client_side_validation && campaign_data_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data_id' when calling ElectronApi.get_campaign_data_record"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_data/{campaign_data_id}'.sub('{' + 'campaign_data_id' + '}', campaign_data_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificCampaignDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_campaign_data_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all marketing campaign data records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetCampaignDataResponse]
    def get_campaign_data_records(opts = {})
      data, _status_code, _headers = get_campaign_data_records_with_http_info(opts)
      data
    end

    # List all marketing campaign data records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetCampaignDataResponse, Fixnum, Hash)>] GetCampaignDataResponse data, response status code and response headers
    def get_campaign_data_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_campaign_data_records ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_campaign_data_records, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_campaign_data_records, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/campaign_data'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCampaignDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_campaign_data_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a marketing campaign plan
    # @param campaign_plan_id UUID of a campaign plan
    # @param [Hash] opts the optional parameters
    # @return [SpecificCampaignPlanResponse]
    def get_campaign_plan(campaign_plan_id, opts = {})
      data, _status_code, _headers = get_campaign_plan_with_http_info(campaign_plan_id, opts)
      data
    end

    # Retrieve a marketing campaign plan
    # @param campaign_plan_id UUID of a campaign plan
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificCampaignPlanResponse, Fixnum, Hash)>] SpecificCampaignPlanResponse data, response status code and response headers
    def get_campaign_plan_with_http_info(campaign_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_campaign_plan ...'
      end
      # verify the required parameter 'campaign_plan_id' is set
      if @api_client.config.client_side_validation && campaign_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan_id' when calling ElectronApi.get_campaign_plan"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_plan/{campaign_plan_id}'.sub('{' + 'campaign_plan_id' + '}', campaign_plan_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificCampaignPlanResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_campaign_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all marketing campaign plans
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetCampaignPlanResponse]
    def get_campaign_plans(opts = {})
      data, _status_code, _headers = get_campaign_plans_with_http_info(opts)
      data
    end

    # List all marketing campaign plans
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetCampaignPlanResponse, Fixnum, Hash)>] GetCampaignPlanResponse data, response status code and response headers
    def get_campaign_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_campaign_plans ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_campaign_plans, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_campaign_plans, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/campaign_plan'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCampaignPlanResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_campaign_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all marketing campaigns
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetCampaignResponse]
    def get_campaigns(opts = {})
      data, _status_code, _headers = get_campaigns_with_http_info(opts)
      data
    end

    # List all marketing campaigns
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetCampaignResponse, Fixnum, Hash)>] GetCampaignResponse data, response status code and response headers
    def get_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_campaigns ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_campaigns, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_campaigns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/campaign'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a chat log
    # @param chat_id UUID of a chat record
    # @param [Hash] opts the optional parameters
    # @return [SpecificChatResponse]
    def get_chat_log(chat_id, opts = {})
      data, _status_code, _headers = get_chat_log_with_http_info(chat_id, opts)
      data
    end

    # Retrieve a chat log
    # @param chat_id UUID of a chat record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificChatResponse, Fixnum, Hash)>] SpecificChatResponse data, response status code and response headers
    def get_chat_log_with_http_info(chat_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_chat_log ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ElectronApi.get_chat_log"
      end
      # resource path
      local_var_path = '/electron/v1/chat/{chat_id}'.sub('{' + 'chat_id' + '}', chat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificChatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_chat_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all chat logs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetChatResponse]
    def get_chat_logs(opts = {})
      data, _status_code, _headers = get_chat_logs_with_http_info(opts)
      data
    end

    # List all chat logs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetChatResponse, Fixnum, Hash)>] GetChatResponse data, response status code and response headers
    def get_chat_logs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_chat_logs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_chat_logs, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_chat_logs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/chat'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetChatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_chat_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a client assigned to a campaign
    # @param client_campaign_id UUID of a client campaign record
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientCampaignResponse]
    def get_client_campaign(client_campaign_id, opts = {})
      data, _status_code, _headers = get_client_campaign_with_http_info(client_campaign_id, opts)
      data
    end

    # Retrieve a client assigned to a campaign
    # @param client_campaign_id UUID of a client campaign record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientCampaignResponse, Fixnum, Hash)>] SpecificClientCampaignResponse data, response status code and response headers
    def get_client_campaign_with_http_info(client_campaign_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_client_campaign ...'
      end
      # verify the required parameter 'client_campaign_id' is set
      if @api_client.config.client_side_validation && client_campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_campaign_id' when calling ElectronApi.get_client_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/client_campaign/{client_campaign_id}'.sub('{' + 'client_campaign_id' + '}', client_campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_client_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List information for all clients that are assigned to a marketing campaign defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetClientCampaignResponse]
    def get_client_campaigns(opts = {})
      data, _status_code, _headers = get_client_campaigns_with_http_info(opts)
      data
    end

    # List information for all clients that are assigned to a marketing campaign defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetClientCampaignResponse, Fixnum, Hash)>] GetClientCampaignResponse data, response status code and response headers
    def get_client_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_client_campaigns ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_client_campaigns, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_client_campaigns, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/client_campaign'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClientCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_client_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a consultation
    # @param consultation_id UUID of a consultation record
    # @param [Hash] opts the optional parameters
    # @return [SpecificConsultationResponse]
    def get_consultation(consultation_id, opts = {})
      data, _status_code, _headers = get_consultation_with_http_info(consultation_id, opts)
      data
    end

    # Retrieve a consultation
    # @param consultation_id UUID of a consultation record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificConsultationResponse, Fixnum, Hash)>] SpecificConsultationResponse data, response status code and response headers
    def get_consultation_with_http_info(consultation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_consultation ...'
      end
      # verify the required parameter 'consultation_id' is set
      if @api_client.config.client_side_validation && consultation_id.nil?
        fail ArgumentError, "Missing the required parameter 'consultation_id' when calling ElectronApi.get_consultation"
      end
      # resource path
      local_var_path = '/electron/v1/consultation/{consultation_id}'.sub('{' + 'consultation_id' + '}', consultation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificConsultationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_consultation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all consultations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetConsultationResponse]
    def get_consultations(opts = {})
      data, _status_code, _headers = get_consultations_with_http_info(opts)
      data
    end

    # List all consultations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetConsultationResponse, Fixnum, Hash)>] GetConsultationResponse data, response status code and response headers
    def get_consultations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_consultations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_consultations, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_consultations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/consultation'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetConsultationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_consultations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a document
    # @param document_id UUID of a document
    # @param [Hash] opts the optional parameters
    # @return [SpecificDocumentResponse]
    def get_document(document_id, opts = {})
      data, _status_code, _headers = get_document_with_http_info(document_id, opts)
      data
    end

    # Retrieve a document
    # @param document_id UUID of a document
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificDocumentResponse, Fixnum, Hash)>] SpecificDocumentResponse data, response status code and response headers
    def get_document_with_http_info(document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling ElectronApi.get_document"
      end
      # resource path
      local_var_path = '/electron/v1/document/{document_id}'.sub('{' + 'document_id' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificDocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all documents
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetDocumentResponse]
    def get_documents(opts = {})
      data, _status_code, _headers = get_documents_with_http_info(opts)
      data
    end

    # List all documents
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetDocumentResponse, Fixnum, Hash)>] GetDocumentResponse data, response status code and response headers
    def get_documents_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_documents ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_documents, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_documents, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/document'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a FAQ
    # @param faq_id UUID of a FAQ
    # @param [Hash] opts the optional parameters
    # @return [SpecificFaqResponse]
    def get_faq(faq_id, opts = {})
      data, _status_code, _headers = get_faq_with_http_info(faq_id, opts)
      data
    end

    # Retrieve a FAQ
    # @param faq_id UUID of a FAQ
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificFaqResponse, Fixnum, Hash)>] SpecificFaqResponse data, response status code and response headers
    def get_faq_with_http_info(faq_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_faq ...'
      end
      # verify the required parameter 'faq_id' is set
      if @api_client.config.client_side_validation && faq_id.nil?
        fail ArgumentError, "Missing the required parameter 'faq_id' when calling ElectronApi.get_faq"
      end
      # resource path
      local_var_path = '/electron/v1/faq/{faq_id}'.sub('{' + 'faq_id' + '}', faq_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificFaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_faq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all FAQs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetFaqResponse]
    def get_faqs(opts = {})
      data, _status_code, _headers = get_faqs_with_http_info(opts)
      data
    end

    # List all FAQs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetFaqResponse, Fixnum, Hash)>] GetFaqResponse data, response status code and response headers
    def get_faqs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_faqs ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_faqs, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_faqs, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/faq'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetFaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_faqs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all sales inquiries
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetSalesResponse]
    def get_sales_inquiries(opts = {})
      data, _status_code, _headers = get_sales_inquiries_with_http_info(opts)
      data
    end

    # List all sales inquiries
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetSalesResponse, Fixnum, Hash)>] GetSalesResponse data, response status code and response headers
    def get_sales_inquiries_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_sales_inquiries ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_sales_inquiries, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_sales_inquiries, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/sales'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSalesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_sales_inquiries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a sales inquiry
    # @param sales_id UUID of a sales record
    # @param [Hash] opts the optional parameters
    # @return [SpecificSalesResponse]
    def get_sales_inquiry(sales_id, opts = {})
      data, _status_code, _headers = get_sales_inquiry_with_http_info(sales_id, opts)
      data
    end

    # Retrieve a sales inquiry
    # @param sales_id UUID of a sales record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSalesResponse, Fixnum, Hash)>] SpecificSalesResponse data, response status code and response headers
    def get_sales_inquiry_with_http_info(sales_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_sales_inquiry ...'
      end
      # verify the required parameter 'sales_id' is set
      if @api_client.config.client_side_validation && sales_id.nil?
        fail ArgumentError, "Missing the required parameter 'sales_id' when calling ElectronApi.get_sales_inquiry"
      end
      # resource path
      local_var_path = '/electron/v1/sales/{sales_id}'.sub('{' + 'sales_id' + '}', sales_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSalesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_sales_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a support ticket
    # @param support_ticket_id UUID of a support ticket
    # @param [Hash] opts the optional parameters
    # @return [SpecificSupportTicketResponse]
    def get_support_ticket(support_ticket_id, opts = {})
      data, _status_code, _headers = get_support_ticket_with_http_info(support_ticket_id, opts)
      data
    end

    # Retrieve a support ticket
    # @param support_ticket_id UUID of a support ticket
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSupportTicketResponse, Fixnum, Hash)>] SpecificSupportTicketResponse data, response status code and response headers
    def get_support_ticket_with_http_info(support_ticket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_support_ticket ...'
      end
      # verify the required parameter 'support_ticket_id' is set
      if @api_client.config.client_side_validation && support_ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_id' when calling ElectronApi.get_support_ticket"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket/{support_ticket_id}'.sub('{' + 'support_ticket_id' + '}', support_ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSupportTicketResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_support_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a support ticket comment
    # @param support_ticket_comment_id UUID of a support ticket comment
    # @param [Hash] opts the optional parameters
    # @return [SpecificSupportTicketCommentResponse]
    def get_support_ticket_comment(support_ticket_comment_id, opts = {})
      data, _status_code, _headers = get_support_ticket_comment_with_http_info(support_ticket_comment_id, opts)
      data
    end

    # Retrieve a support ticket comment
    # @param support_ticket_comment_id UUID of a support ticket comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSupportTicketCommentResponse, Fixnum, Hash)>] SpecificSupportTicketCommentResponse data, response status code and response headers
    def get_support_ticket_comment_with_http_info(support_ticket_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_support_ticket_comment ...'
      end
      # verify the required parameter 'support_ticket_comment_id' is set
      if @api_client.config.client_side_validation && support_ticket_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_comment_id' when calling ElectronApi.get_support_ticket_comment"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket_comment/{support_ticket_comment_id}'.sub('{' + 'support_ticket_comment_id' + '}', support_ticket_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSupportTicketCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_support_ticket_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all support ticket comments
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetSupportTicketCommentResponse]
    def get_support_ticket_comments(opts = {})
      data, _status_code, _headers = get_support_ticket_comments_with_http_info(opts)
      data
    end

    # List all support ticket comments
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetSupportTicketCommentResponse, Fixnum, Hash)>] GetSupportTicketCommentResponse data, response status code and response headers
    def get_support_ticket_comments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_support_ticket_comments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_support_ticket_comments, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_support_ticket_comments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/support_ticket_comment'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSupportTicketCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_support_ticket_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all support tickets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetSupportTicketResponse]
    def get_support_tickets(opts = {})
      data, _status_code, _headers = get_support_tickets_with_http_info(opts)
      data
    end

    # List all support tickets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetSupportTicketResponse, Fixnum, Hash)>] GetSupportTicketResponse data, response status code and response headers
    def get_support_tickets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.get_support_tickets ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ElectronApi.get_support_tickets, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling ElectronApi.get_support_tickets, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/electron/v1/support_ticket'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSupportTicketResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#get_support_tickets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a marketing campaign
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateCampaignResponse]
    def post_campaign(payload, opts = {})
      data, _status_code, _headers = post_campaign_with_http_info(payload, opts)
      data
    end

    # Create a marketing campaign
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCampaignResponse, Fixnum, Hash)>] CreateCampaignResponse data, response status code and response headers
    def post_campaign_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_campaign ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/campaign'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a marketing campaign data record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateCampaignDataResponse]
    def post_campaign_data_record(payload, opts = {})
      data, _status_code, _headers = post_campaign_data_record_with_http_info(payload, opts)
      data
    end

    # Create a marketing campaign data record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCampaignDataResponse, Fixnum, Hash)>] CreateCampaignDataResponse data, response status code and response headers
    def post_campaign_data_record_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_campaign_data_record ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_campaign_data_record"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_data'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateCampaignDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_campaign_data_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a marketing campaign plan
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateCampaignPlanResponse]
    def post_campaign_plan(payload, opts = {})
      data, _status_code, _headers = post_campaign_plan_with_http_info(payload, opts)
      data
    end

    # Create a marketing campaign plan
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCampaignPlanResponse, Fixnum, Hash)>] CreateCampaignPlanResponse data, response status code and response headers
    def post_campaign_plan_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_campaign_plan ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_campaign_plan"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_plan'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateCampaignPlanResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_campaign_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a chat log
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateChatResponse]
    def post_chat_log(payload, opts = {})
      data, _status_code, _headers = post_chat_log_with_http_info(payload, opts)
      data
    end

    # Create a chat log
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateChatResponse, Fixnum, Hash)>] CreateChatResponse data, response status code and response headers
    def post_chat_log_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_chat_log ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_chat_log"
      end
      # resource path
      local_var_path = '/electron/v1/chat'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateChatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_chat_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Assign a client to a campaign to indicate the client has registered through the campaign specified
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateClientCampaignResponse]
    def post_client_campaign(payload, opts = {})
      data, _status_code, _headers = post_client_campaign_with_http_info(payload, opts)
      data
    end

    # Assign a client to a campaign to indicate the client has registered through the campaign specified
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClientCampaignResponse, Fixnum, Hash)>] CreateClientCampaignResponse data, response status code and response headers
    def post_client_campaign_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_client_campaign ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_client_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/client_campaign'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateClientCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_client_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a consultation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateConsultationResponse]
    def post_consultation(payload, opts = {})
      data, _status_code, _headers = post_consultation_with_http_info(payload, opts)
      data
    end

    # Create a consultation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateConsultationResponse, Fixnum, Hash)>] CreateConsultationResponse data, response status code and response headers
    def post_consultation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_consultation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_consultation"
      end
      # resource path
      local_var_path = '/electron/v1/consultation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateConsultationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_consultation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a document
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateDocumentResponse]
    def post_document(payload, opts = {})
      data, _status_code, _headers = post_document_with_http_info(payload, opts)
      data
    end

    # Create a document
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDocumentResponse, Fixnum, Hash)>] CreateDocumentResponse data, response status code and response headers
    def post_document_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_document ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_document"
      end
      # resource path
      local_var_path = '/electron/v1/document'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateDocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a faq
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateFaqResponse]
    def post_faq(payload, opts = {})
      data, _status_code, _headers = post_faq_with_http_info(payload, opts)
      data
    end

    # Create a faq
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateFaqResponse, Fixnum, Hash)>] CreateFaqResponse data, response status code and response headers
    def post_faq_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_faq ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_faq"
      end
      # resource path
      local_var_path = '/electron/v1/faq'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateFaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_faq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a sales inquiry
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateSalesResponse]
    def post_sales_inquiry(payload, opts = {})
      data, _status_code, _headers = post_sales_inquiry_with_http_info(payload, opts)
      data
    end

    # Create a sales inquiry
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSalesResponse, Fixnum, Hash)>] CreateSalesResponse data, response status code and response headers
    def post_sales_inquiry_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_sales_inquiry ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_sales_inquiry"
      end
      # resource path
      local_var_path = '/electron/v1/sales'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSalesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_sales_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a support ticket
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateSupportTicketResponse]
    def post_support_ticket(payload, opts = {})
      data, _status_code, _headers = post_support_ticket_with_http_info(payload, opts)
      data
    end

    # Create a support ticket
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSupportTicketResponse, Fixnum, Hash)>] CreateSupportTicketResponse data, response status code and response headers
    def post_support_ticket_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_support_ticket ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_support_ticket"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSupportTicketResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_support_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a support ticket comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateSupportTicketCommentResponse]
    def post_support_ticket_comment(payload, opts = {})
      data, _status_code, _headers = post_support_ticket_comment_with_http_info(payload, opts)
      data
    end

    # Create a support ticket comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSupportTicketCommentResponse, Fixnum, Hash)>] CreateSupportTicketCommentResponse data, response status code and response headers
    def post_support_ticket_comment_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.post_support_ticket_comment ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.post_support_ticket_comment"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket_comment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSupportTicketCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#post_support_ticket_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a marketing campaign
    # @param campaign_id UUID of a marketing campaign
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificCampaignResponse]
    def update_campaign(campaign_id, payload, opts = {})
      data, _status_code, _headers = update_campaign_with_http_info(campaign_id, payload, opts)
      data
    end

    # Update a marketing campaign
    # @param campaign_id UUID of a marketing campaign
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificCampaignResponse, Fixnum, Hash)>] SpecificCampaignResponse data, response status code and response headers
    def update_campaign_with_http_info(campaign_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_campaign ...'
      end
      # verify the required parameter 'campaign_id' is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_id' when calling ElectronApi.update_campaign"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/campaign/{campaign_id}'.sub('{' + 'campaign_id' + '}', campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a marketing campaign data record
    # @param campaign_data_id UUID of a campaign data record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificCampaignDataResponse]
    def update_campaign_data_record(campaign_data_id, payload, opts = {})
      data, _status_code, _headers = update_campaign_data_record_with_http_info(campaign_data_id, payload, opts)
      data
    end

    # Update a marketing campaign data record
    # @param campaign_data_id UUID of a campaign data record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificCampaignDataResponse, Fixnum, Hash)>] SpecificCampaignDataResponse data, response status code and response headers
    def update_campaign_data_record_with_http_info(campaign_data_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_campaign_data_record ...'
      end
      # verify the required parameter 'campaign_data_id' is set
      if @api_client.config.client_side_validation && campaign_data_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_data_id' when calling ElectronApi.update_campaign_data_record"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_campaign_data_record"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_data/{campaign_data_id}'.sub('{' + 'campaign_data_id' + '}', campaign_data_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificCampaignDataResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_campaign_data_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a marketing campaign plan
    # @param campaign_plan_id UUID of a campaign plan
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificCampaignPlanResponse]
    def update_campaign_plan(campaign_plan_id, payload, opts = {})
      data, _status_code, _headers = update_campaign_plan_with_http_info(campaign_plan_id, payload, opts)
      data
    end

    # Update a marketing campaign plan
    # @param campaign_plan_id UUID of a campaign plan
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificCampaignPlanResponse, Fixnum, Hash)>] SpecificCampaignPlanResponse data, response status code and response headers
    def update_campaign_plan_with_http_info(campaign_plan_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_campaign_plan ...'
      end
      # verify the required parameter 'campaign_plan_id' is set
      if @api_client.config.client_side_validation && campaign_plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_plan_id' when calling ElectronApi.update_campaign_plan"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_campaign_plan"
      end
      # resource path
      local_var_path = '/electron/v1/campaign_plan/{campaign_plan_id}'.sub('{' + 'campaign_plan_id' + '}', campaign_plan_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificCampaignPlanResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_campaign_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a chat log
    # @param chat_id UUID of a chat record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificChatResponse]
    def update_chat_log(chat_id, payload, opts = {})
      data, _status_code, _headers = update_chat_log_with_http_info(chat_id, payload, opts)
      data
    end

    # Update a chat log
    # @param chat_id UUID of a chat record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificChatResponse, Fixnum, Hash)>] SpecificChatResponse data, response status code and response headers
    def update_chat_log_with_http_info(chat_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_chat_log ...'
      end
      # verify the required parameter 'chat_id' is set
      if @api_client.config.client_side_validation && chat_id.nil?
        fail ArgumentError, "Missing the required parameter 'chat_id' when calling ElectronApi.update_chat_log"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_chat_log"
      end
      # resource path
      local_var_path = '/electron/v1/chat/{chat_id}'.sub('{' + 'chat_id' + '}', chat_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificChatResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_chat_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client assigned to a campaign
    # @param client_campaign_id UUID of a client campaign record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientCampaignResponse]
    def update_client_campaign(client_campaign_id, payload, opts = {})
      data, _status_code, _headers = update_client_campaign_with_http_info(client_campaign_id, payload, opts)
      data
    end

    # Update a client assigned to a campaign
    # @param client_campaign_id UUID of a client campaign record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientCampaignResponse, Fixnum, Hash)>] SpecificClientCampaignResponse data, response status code and response headers
    def update_client_campaign_with_http_info(client_campaign_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_client_campaign ...'
      end
      # verify the required parameter 'client_campaign_id' is set
      if @api_client.config.client_side_validation && client_campaign_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_campaign_id' when calling ElectronApi.update_client_campaign"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_client_campaign"
      end
      # resource path
      local_var_path = '/electron/v1/client_campaign/{client_campaign_id}'.sub('{' + 'client_campaign_id' + '}', client_campaign_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientCampaignResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_client_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a consultation
    # @param consultation_id UUID of a consultation record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificConsultationResponse]
    def update_consultation(consultation_id, payload, opts = {})
      data, _status_code, _headers = update_consultation_with_http_info(consultation_id, payload, opts)
      data
    end

    # Update a consultation
    # @param consultation_id UUID of a consultation record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificConsultationResponse, Fixnum, Hash)>] SpecificConsultationResponse data, response status code and response headers
    def update_consultation_with_http_info(consultation_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_consultation ...'
      end
      # verify the required parameter 'consultation_id' is set
      if @api_client.config.client_side_validation && consultation_id.nil?
        fail ArgumentError, "Missing the required parameter 'consultation_id' when calling ElectronApi.update_consultation"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_consultation"
      end
      # resource path
      local_var_path = '/electron/v1/consultation/{consultation_id}'.sub('{' + 'consultation_id' + '}', consultation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificConsultationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_consultation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a document
    # @param document_id UUID of a document
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificDocumentResponse]
    def update_document(document_id, payload, opts = {})
      data, _status_code, _headers = update_document_with_http_info(document_id, payload, opts)
      data
    end

    # Update a document
    # @param document_id UUID of a document
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificDocumentResponse, Fixnum, Hash)>] SpecificDocumentResponse data, response status code and response headers
    def update_document_with_http_info(document_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_document ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling ElectronApi.update_document"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_document"
      end
      # resource path
      local_var_path = '/electron/v1/document/{document_id}'.sub('{' + 'document_id' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificDocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a FAQ
    # @param faq_id UUID of a FAQ
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificFaqResponse]
    def update_faq(faq_id, payload, opts = {})
      data, _status_code, _headers = update_faq_with_http_info(faq_id, payload, opts)
      data
    end

    # Update a FAQ
    # @param faq_id UUID of a FAQ
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificFaqResponse, Fixnum, Hash)>] SpecificFaqResponse data, response status code and response headers
    def update_faq_with_http_info(faq_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_faq ...'
      end
      # verify the required parameter 'faq_id' is set
      if @api_client.config.client_side_validation && faq_id.nil?
        fail ArgumentError, "Missing the required parameter 'faq_id' when calling ElectronApi.update_faq"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_faq"
      end
      # resource path
      local_var_path = '/electron/v1/faq/{faq_id}'.sub('{' + 'faq_id' + '}', faq_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificFaqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_faq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a sales inquiry
    # @param sales_id UUID of a sales record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificSalesResponse]
    def update_sales_inquiry(sales_id, payload, opts = {})
      data, _status_code, _headers = update_sales_inquiry_with_http_info(sales_id, payload, opts)
      data
    end

    # Update a sales inquiry
    # @param sales_id UUID of a sales record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSalesResponse, Fixnum, Hash)>] SpecificSalesResponse data, response status code and response headers
    def update_sales_inquiry_with_http_info(sales_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_sales_inquiry ...'
      end
      # verify the required parameter 'sales_id' is set
      if @api_client.config.client_side_validation && sales_id.nil?
        fail ArgumentError, "Missing the required parameter 'sales_id' when calling ElectronApi.update_sales_inquiry"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_sales_inquiry"
      end
      # resource path
      local_var_path = '/electron/v1/sales/{sales_id}'.sub('{' + 'sales_id' + '}', sales_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSalesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_sales_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a support ticket
    # @param support_ticket_id UUID of a support ticket
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificSupportTicketResponse]
    def update_support_ticket(support_ticket_id, payload, opts = {})
      data, _status_code, _headers = update_support_ticket_with_http_info(support_ticket_id, payload, opts)
      data
    end

    # Update a support ticket
    # @param support_ticket_id UUID of a support ticket
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSupportTicketResponse, Fixnum, Hash)>] SpecificSupportTicketResponse data, response status code and response headers
    def update_support_ticket_with_http_info(support_ticket_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_support_ticket ...'
      end
      # verify the required parameter 'support_ticket_id' is set
      if @api_client.config.client_side_validation && support_ticket_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_id' when calling ElectronApi.update_support_ticket"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_support_ticket"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket/{support_ticket_id}'.sub('{' + 'support_ticket_id' + '}', support_ticket_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSupportTicketResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_support_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a support ticket comment
    # @param support_ticket_comment_id UUID of a support ticket comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificSupportTicketCommentResponse]
    def update_support_ticket_comment(support_ticket_comment_id, payload, opts = {})
      data, _status_code, _headers = update_support_ticket_comment_with_http_info(support_ticket_comment_id, payload, opts)
      data
    end

    # Update a support ticket comment
    # @param support_ticket_comment_id UUID of a support ticket comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSupportTicketCommentResponse, Fixnum, Hash)>] SpecificSupportTicketCommentResponse data, response status code and response headers
    def update_support_ticket_comment_with_http_info(support_ticket_comment_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ElectronApi.update_support_ticket_comment ...'
      end
      # verify the required parameter 'support_ticket_comment_id' is set
      if @api_client.config.client_side_validation && support_ticket_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'support_ticket_comment_id' when calling ElectronApi.update_support_ticket_comment"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling ElectronApi.update_support_ticket_comment"
      end
      # resource path
      local_var_path = '/electron/v1/support_ticket_comment/{support_ticket_comment_id}'.sub('{' + 'support_ticket_comment_id' + '}', support_ticket_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSupportTicketCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ElectronApi#update_support_ticket_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
