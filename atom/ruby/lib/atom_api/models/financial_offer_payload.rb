=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'date'

module AtomApi
  class FinancialOfferPayload
    # Name of the financial offer
    attr_accessor :name

    # Name of the financial institution
    attr_accessor :institution_name

    # Link to the associated financial offer
    attr_accessor :offer_link

    # Category of the financial offer. Value may be credit_card, savings, mortgage, loan, investment, tax, real_estate, brokerage, and other.
    attr_accessor :category

    # Subcategory of the financial offer
    attr_accessor :subcategory

    # Description of the financial offer
    attr_accessor :description

    # An image associated with the financial offer
    attr_accessor :image

    # Alphabetic currency code for the base currency of the entity, limited to 3 characters.
    attr_accessor :currency_code

    # The financial rate associated with the financial offer
    attr_accessor :financial_rate

    # The financial rate type associated with the financial offer (i.e. percentage/ dollar amount)
    attr_accessor :financial_rate_type

    # The fixed time period of the financial rate associated with the financial offer (i.e. 90)
    attr_accessor :financial_rate_term

    # The term unit of the financial rate. Value may be year, quarter, month, week, day
    attr_accessor :financial_rate_term_unit

    # Amount of the financial offer fee
    attr_accessor :fee_amount

    # Type of financial offer fee
    attr_accessor :fee_type

    # The fixed time period for which the offer is intended to last, once it is accepted
    attr_accessor :offer_term

    # The term unit of the offer term. Value may be year, quarter, month, week, day
    attr_accessor :offer_term_unit

    # The minimum contribution amount in order to receive the financial_incentive associated with the financial offer
    attr_accessor :minimum_contribution

    # The fixed time period in which the customer must contribute the minimum contribution, in order to receive the financial incentive associated with the financial offer (i.e. 90)
    attr_accessor :minimum_contribution_term

    # The term unit of the minimum contribution. Value may be year, quarter, month, week, day
    attr_accessor :minimum_contribution_term_unit

    # Prerequisite associated with the financial offer
    attr_accessor :prerequisite

    # Prerequisite associated with the financial offer (i.e. credit score threshold, income threshold)
    attr_accessor :prerequisite_type

    # The payment value which will be received from the affiliate when the user purchases the offer
    attr_accessor :affiliate_rate

    # Average of client reviews of the product
    attr_accessor :client_review

    # The rating of the product by the site displaying the offer
    attr_accessor :rating

    # Unique ID of the document associated with the financial offer
    attr_accessor :document_id

    # Unique ID of the marketing campaign associated with the financial offer
    attr_accessor :campaign_id

    # Custom information associated with the budget in the format key:value
    attr_accessor :metadata

    attr_accessor :secondary_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'institution_name' => :'institution_name',
        :'offer_link' => :'offer_link',
        :'category' => :'category',
        :'subcategory' => :'subcategory',
        :'description' => :'description',
        :'image' => :'image',
        :'currency_code' => :'currency_code',
        :'financial_rate' => :'financial_rate',
        :'financial_rate_type' => :'financial_rate_type',
        :'financial_rate_term' => :'financial_rate_term',
        :'financial_rate_term_unit' => :'financial_rate_term_unit',
        :'fee_amount' => :'fee_amount',
        :'fee_type' => :'fee_type',
        :'offer_term' => :'offer_term',
        :'offer_term_unit' => :'offer_term_unit',
        :'minimum_contribution' => :'minimum_contribution',
        :'minimum_contribution_term' => :'minimum_contribution_term',
        :'minimum_contribution_term_unit' => :'minimum_contribution_term_unit',
        :'prerequisite' => :'prerequisite',
        :'prerequisite_type' => :'prerequisite_type',
        :'affiliate_rate' => :'affiliate_rate',
        :'client_review' => :'client_review',
        :'rating' => :'rating',
        :'document_id' => :'document_id',
        :'campaign_id' => :'campaign_id',
        :'metadata' => :'metadata',
        :'secondary_id' => :'secondary_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'institution_name' => :'String',
        :'offer_link' => :'String',
        :'category' => :'String',
        :'subcategory' => :'String',
        :'description' => :'String',
        :'image' => :'String',
        :'currency_code' => :'String',
        :'financial_rate' => :'Float',
        :'financial_rate_type' => :'String',
        :'financial_rate_term' => :'Float',
        :'financial_rate_term_unit' => :'String',
        :'fee_amount' => :'Float',
        :'fee_type' => :'String',
        :'offer_term' => :'Float',
        :'offer_term_unit' => :'String',
        :'minimum_contribution' => :'Float',
        :'minimum_contribution_term' => :'Float',
        :'minimum_contribution_term_unit' => :'String',
        :'prerequisite' => :'String',
        :'prerequisite_type' => :'String',
        :'affiliate_rate' => :'Float',
        :'client_review' => :'String',
        :'rating' => :'String',
        :'document_id' => :'String',
        :'campaign_id' => :'String',
        :'metadata' => :'Object',
        :'secondary_id' => :'SecondaryId'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'institution_name')
        self.institution_name = attributes[:'institution_name']
      end

      if attributes.has_key?(:'offer_link')
        self.offer_link = attributes[:'offer_link']
      end

      if attributes.has_key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.has_key?(:'subcategory')
        self.subcategory = attributes[:'subcategory']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'financial_rate')
        self.financial_rate = attributes[:'financial_rate']
      end

      if attributes.has_key?(:'financial_rate_type')
        self.financial_rate_type = attributes[:'financial_rate_type']
      end

      if attributes.has_key?(:'financial_rate_term')
        self.financial_rate_term = attributes[:'financial_rate_term']
      end

      if attributes.has_key?(:'financial_rate_term_unit')
        self.financial_rate_term_unit = attributes[:'financial_rate_term_unit']
      end

      if attributes.has_key?(:'fee_amount')
        self.fee_amount = attributes[:'fee_amount']
      end

      if attributes.has_key?(:'fee_type')
        self.fee_type = attributes[:'fee_type']
      end

      if attributes.has_key?(:'offer_term')
        self.offer_term = attributes[:'offer_term']
      end

      if attributes.has_key?(:'offer_term_unit')
        self.offer_term_unit = attributes[:'offer_term_unit']
      end

      if attributes.has_key?(:'minimum_contribution')
        self.minimum_contribution = attributes[:'minimum_contribution']
      end

      if attributes.has_key?(:'minimum_contribution_term')
        self.minimum_contribution_term = attributes[:'minimum_contribution_term']
      end

      if attributes.has_key?(:'minimum_contribution_term_unit')
        self.minimum_contribution_term_unit = attributes[:'minimum_contribution_term_unit']
      end

      if attributes.has_key?(:'prerequisite')
        self.prerequisite = attributes[:'prerequisite']
      end

      if attributes.has_key?(:'prerequisite_type')
        self.prerequisite_type = attributes[:'prerequisite_type']
      end

      if attributes.has_key?(:'affiliate_rate')
        self.affiliate_rate = attributes[:'affiliate_rate']
      end

      if attributes.has_key?(:'client_review')
        self.client_review = attributes[:'client_review']
      end

      if attributes.has_key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.has_key?(:'document_id')
        self.document_id = attributes[:'document_id']
      end

      if attributes.has_key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end

      if attributes.has_key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.has_key?(:'secondary_id')
        self.secondary_id = attributes[:'secondary_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @institution_name.nil?
        invalid_properties.push('invalid value for "institution_name", institution_name cannot be nil.')
      end

      if @offer_link.nil?
        invalid_properties.push('invalid value for "offer_link", offer_link cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @institution_name.nil?
      return false if @offer_link.nil?
      category_validator = EnumAttributeValidator.new('String', ['credit_card', 'savings', 'mortgage', 'loan', 'investment', 'tax', 'real_estate', 'brokerage', 'other'])
      return false unless category_validator.valid?(@category)
      financial_rate_term_unit_validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      return false unless financial_rate_term_unit_validator.valid?(@financial_rate_term_unit)
      offer_term_unit_validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      return false unless offer_term_unit_validator.valid?(@offer_term_unit)
      minimum_contribution_term_unit_validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      return false unless minimum_contribution_term_unit_validator.valid?(@minimum_contribution_term_unit)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] category Object to be assigned
    def category=(category)
      validator = EnumAttributeValidator.new('String', ['credit_card', 'savings', 'mortgage', 'loan', 'investment', 'tax', 'real_estate', 'brokerage', 'other'])
      unless validator.valid?(category)
        fail ArgumentError, 'invalid value for "category", must be one of #{validator.allowable_values}.'
      end
      @category = category
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] financial_rate_term_unit Object to be assigned
    def financial_rate_term_unit=(financial_rate_term_unit)
      validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      unless validator.valid?(financial_rate_term_unit)
        fail ArgumentError, 'invalid value for "financial_rate_term_unit", must be one of #{validator.allowable_values}.'
      end
      @financial_rate_term_unit = financial_rate_term_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] offer_term_unit Object to be assigned
    def offer_term_unit=(offer_term_unit)
      validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      unless validator.valid?(offer_term_unit)
        fail ArgumentError, 'invalid value for "offer_term_unit", must be one of #{validator.allowable_values}.'
      end
      @offer_term_unit = offer_term_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum_contribution_term_unit Object to be assigned
    def minimum_contribution_term_unit=(minimum_contribution_term_unit)
      validator = EnumAttributeValidator.new('String', ['year', 'quarter', 'month', 'week', 'day'])
      unless validator.valid?(minimum_contribution_term_unit)
        fail ArgumentError, 'invalid value for "minimum_contribution_term_unit", must be one of #{validator.allowable_values}.'
      end
      @minimum_contribution_term_unit = minimum_contribution_term_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          institution_name == o.institution_name &&
          offer_link == o.offer_link &&
          category == o.category &&
          subcategory == o.subcategory &&
          description == o.description &&
          image == o.image &&
          currency_code == o.currency_code &&
          financial_rate == o.financial_rate &&
          financial_rate_type == o.financial_rate_type &&
          financial_rate_term == o.financial_rate_term &&
          financial_rate_term_unit == o.financial_rate_term_unit &&
          fee_amount == o.fee_amount &&
          fee_type == o.fee_type &&
          offer_term == o.offer_term &&
          offer_term_unit == o.offer_term_unit &&
          minimum_contribution == o.minimum_contribution &&
          minimum_contribution_term == o.minimum_contribution_term &&
          minimum_contribution_term_unit == o.minimum_contribution_term_unit &&
          prerequisite == o.prerequisite &&
          prerequisite_type == o.prerequisite_type &&
          affiliate_rate == o.affiliate_rate &&
          client_review == o.client_review &&
          rating == o.rating &&
          document_id == o.document_id &&
          campaign_id == o.campaign_id &&
          metadata == o.metadata &&
          secondary_id == o.secondary_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, institution_name, offer_link, category, subcategory, description, image, currency_code, financial_rate, financial_rate_type, financial_rate_term, financial_rate_term_unit, fee_amount, fee_type, offer_term, offer_term_unit, minimum_contribution, minimum_contribution_term, minimum_contribution_term_unit, prerequisite, prerequisite_type, affiliate_rate, client_review, rating, document_id, campaign_id, metadata, secondary_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
