# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BudgetCalculatorPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'budget_id': 'str',
        'as_of_date': 'date',
        'lookback_periods': 'int',
        'relative_lookback': 'bool'
    }

    attribute_map = {
        'budget_id': 'budget_id',
        'as_of_date': 'as_of_date',
        'lookback_periods': 'lookback_periods',
        'relative_lookback': 'relative_lookback'
    }

    def __init__(self, budget_id=None, as_of_date=None, lookback_periods=None, relative_lookback=None):  # noqa: E501
        """BudgetCalculatorPayload - a model defined in Swagger"""  # noqa: E501

        self._budget_id = None
        self._as_of_date = None
        self._lookback_periods = None
        self._relative_lookback = None
        self.discriminator = None

        self.budget_id = budget_id
        if as_of_date is not None:
            self.as_of_date = as_of_date
        if lookback_periods is not None:
            self.lookback_periods = lookback_periods
        if relative_lookback is not None:
            self.relative_lookback = relative_lookback

    @property
    def budget_id(self):
        """Gets the budget_id of this BudgetCalculatorPayload.  # noqa: E501

        Identifier for a budget defined in Nucleus  # noqa: E501

        :return: The budget_id of this BudgetCalculatorPayload.  # noqa: E501
        :rtype: str
        """
        return self._budget_id

    @budget_id.setter
    def budget_id(self, budget_id):
        """Sets the budget_id of this BudgetCalculatorPayload.

        Identifier for a budget defined in Nucleus  # noqa: E501

        :param budget_id: The budget_id of this BudgetCalculatorPayload.  # noqa: E501
        :type: str
        """
        if budget_id is None:
            raise ValueError("Invalid value for `budget_id`, must not be `None`")  # noqa: E501

        self._budget_id = budget_id

    @property
    def as_of_date(self):
        """Gets the as_of_date of this BudgetCalculatorPayload.  # noqa: E501

        Reference date of the analysis. Calculations will run through the earlier of this date and budget.end_date  # noqa: E501

        :return: The as_of_date of this BudgetCalculatorPayload.  # noqa: E501
        :rtype: date
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this BudgetCalculatorPayload.

        Reference date of the analysis. Calculations will run through the earlier of this date and budget.end_date  # noqa: E501

        :param as_of_date: The as_of_date of this BudgetCalculatorPayload.  # noqa: E501
        :type: date
        """

        self._as_of_date = as_of_date

    @property
    def lookback_periods(self):
        """Gets the lookback_periods of this BudgetCalculatorPayload.  # noqa: E501

        Number of lookback periods to analyze. Each period length is defined by the combination of budget.frequency and budget.frequency_unit  # noqa: E501

        :return: The lookback_periods of this BudgetCalculatorPayload.  # noqa: E501
        :rtype: int
        """
        return self._lookback_periods

    @lookback_periods.setter
    def lookback_periods(self, lookback_periods):
        """Sets the lookback_periods of this BudgetCalculatorPayload.

        Number of lookback periods to analyze. Each period length is defined by the combination of budget.frequency and budget.frequency_unit  # noqa: E501

        :param lookback_periods: The lookback_periods of this BudgetCalculatorPayload.  # noqa: E501
        :type: int
        """

        self._lookback_periods = lookback_periods

    @property
    def relative_lookback(self):
        """Gets the relative_lookback of this BudgetCalculatorPayload.  # noqa: E501

        If true, determine dates using a relative calendar basis  # noqa: E501

        :return: The relative_lookback of this BudgetCalculatorPayload.  # noqa: E501
        :rtype: bool
        """
        return self._relative_lookback

    @relative_lookback.setter
    def relative_lookback(self, relative_lookback):
        """Sets the relative_lookback of this BudgetCalculatorPayload.

        If true, determine dates using a relative calendar basis  # noqa: E501

        :param relative_lookback: The relative_lookback of this BudgetCalculatorPayload.  # noqa: E501
        :type: bool
        """

        self._relative_lookback = relative_lookback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BudgetCalculatorPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BudgetCalculatorPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
