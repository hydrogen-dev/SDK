/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Country Object
    /// </summary>
    [DataContract]
    public partial class Country :  IEquatable<Country>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Country" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Country() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Country" /> class.
        /// </summary>
        /// <param name="alpha2Code">alpha_2_code (required).</param>
        /// <param name="alpha3Code">alpha_3_code.</param>
        /// <param name="country">country (required).</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="numericCode">numericCode (required).</param>
        public Country(string alpha2Code = default(string), string alpha3Code = default(string), string country = default(string), double? latitude = default(double?), double? longitude = default(double?), int? numericCode = default(int?))
        {
            // to ensure "alpha2Code" is required (not null)
            if (alpha2Code == null)
            {
                throw new InvalidDataException("alpha2Code is a required property for Country and cannot be null");
            }
            else
            {
                this.Alpha2Code = alpha2Code;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for Country and cannot be null");
            }
            else
            {
                this._Country = country;
            }
            // to ensure "numericCode" is required (not null)
            if (numericCode == null)
            {
                throw new InvalidDataException("numericCode is a required property for Country and cannot be null");
            }
            else
            {
                this.NumericCode = numericCode;
            }
            this.Alpha3Code = alpha3Code;
            this.Latitude = latitude;
            this.Longitude = longitude;
        }
        
        /// <summary>
        /// alpha_2_code
        /// </summary>
        /// <value>alpha_2_code</value>
        [DataMember(Name="alpha2_code", EmitDefaultValue=false)]
        public string Alpha2Code { get; set; }

        /// <summary>
        /// alpha_3_code
        /// </summary>
        /// <value>alpha_3_code</value>
        [DataMember(Name="alpha3_code", EmitDefaultValue=false)]
        public string Alpha3Code { get; set; }

        /// <summary>
        /// country
        /// </summary>
        /// <value>country</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string _Country { get; set; }

        /// <summary>
        /// latitude
        /// </summary>
        /// <value>latitude</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// longitude
        /// </summary>
        /// <value>longitude</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// numericCode
        /// </summary>
        /// <value>numericCode</value>
        [DataMember(Name="numeric_code", EmitDefaultValue=false)]
        public int? NumericCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Country {\n");
            sb.Append("  Alpha2Code: ").Append(Alpha2Code).Append("\n");
            sb.Append("  Alpha3Code: ").Append(Alpha3Code).Append("\n");
            sb.Append("  _Country: ").Append(_Country).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  NumericCode: ").Append(NumericCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Country);
        }

        /// <summary>
        /// Returns true if Country instances are equal
        /// </summary>
        /// <param name="input">Instance of Country to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Country input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alpha2Code == input.Alpha2Code ||
                    (this.Alpha2Code != null &&
                    this.Alpha2Code.Equals(input.Alpha2Code))
                ) && 
                (
                    this.Alpha3Code == input.Alpha3Code ||
                    (this.Alpha3Code != null &&
                    this.Alpha3Code.Equals(input.Alpha3Code))
                ) && 
                (
                    this._Country == input._Country ||
                    (this._Country != null &&
                    this._Country.Equals(input._Country))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.NumericCode == input.NumericCode ||
                    (this.NumericCode != null &&
                    this.NumericCode.Equals(input.NumericCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alpha2Code != null)
                    hashCode = hashCode * 59 + this.Alpha2Code.GetHashCode();
                if (this.Alpha3Code != null)
                    hashCode = hashCode * 59 + this.Alpha3Code.GetHashCode();
                if (this._Country != null)
                    hashCode = hashCode * 59 + this._Country.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.NumericCode != null)
                    hashCode = hashCode * 59 + this.NumericCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
