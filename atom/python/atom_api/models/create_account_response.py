# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.account_create_client import AccountCreateClient  # noqa: F401,E501
from atom_api.models.account_create_goal import AccountCreateGoal  # noqa: F401,E501
from atom_api.models.account_create_payload import AccountCreatePayload  # noqa: F401,E501
from atom_api.models.pagination import Pagination  # noqa: F401,E501
from atom_api.models.pagination_sort import PaginationSort  # noqa: F401,E501
from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class CreateAccountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'account_type_id': 'str',
        'managed': 'bool',
        'clients': 'list[AccountCreateClient]',
        'goals': 'list[AccountCreateGoal]',
        'metadata': 'object',
        'secondary_id': 'SecondaryId',
        'last': 'bool',
        'total_pages': 'int',
        'total_elements': 'int',
        'sort': 'list[PaginationSort]',
        'first': 'bool',
        'number_of_elements': 'int',
        'size': 'int',
        'number': 'int',
        'id': 'str',
        'create_date': 'str'
    }

    attribute_map = {
        'name': 'name',
        'account_type_id': 'account_type_id',
        'managed': 'managed',
        'clients': 'clients',
        'goals': 'goals',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id',
        'last': 'last',
        'total_pages': 'total_pages',
        'total_elements': 'total_elements',
        'sort': 'sort',
        'first': 'first',
        'number_of_elements': 'number_of_elements',
        'size': 'size',
        'number': 'number',
        'id': 'id',
        'create_date': 'create_date'
    }

    def __init__(self, name=None, account_type_id=None, managed=True, clients=None, goals=None, metadata=None, secondary_id=None, last=None, total_pages=None, total_elements=None, sort=None, first=None, number_of_elements=None, size=None, number=None, id=None, create_date=None):  # noqa: E501
        """CreateAccountResponse - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._account_type_id = None
        self._managed = None
        self._clients = None
        self._goals = None
        self._metadata = None
        self._secondary_id = None
        self._last = None
        self._total_pages = None
        self._total_elements = None
        self._sort = None
        self._first = None
        self._number_of_elements = None
        self._size = None
        self._number = None
        self._id = None
        self._create_date = None
        self.discriminator = None

        self.name = name
        self.account_type_id = account_type_id
        if managed is not None:
            self.managed = managed
        if clients is not None:
            self.clients = clients
        if goals is not None:
            self.goals = goals
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if last is not None:
            self.last = last
        if total_pages is not None:
            self.total_pages = total_pages
        if total_elements is not None:
            self.total_elements = total_elements
        if sort is not None:
            self.sort = sort
        if first is not None:
            self.first = first
        if number_of_elements is not None:
            self.number_of_elements = number_of_elements
        if size is not None:
            self.size = size
        if number is not None:
            self.number = number
        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date

    @property
    def name(self):
        """Gets the name of this CreateAccountResponse.  # noqa: E501

        Name of the account  # noqa: E501

        :return: The name of this CreateAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAccountResponse.

        Name of the account  # noqa: E501

        :param name: The name of this CreateAccountResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def account_type_id(self):
        """Gets the account_type_id of this CreateAccountResponse.  # noqa: E501

        The ID of the account type for the account. Account types are defined by your firm  # noqa: E501

        :return: The account_type_id of this CreateAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_type_id

    @account_type_id.setter
    def account_type_id(self, account_type_id):
        """Sets the account_type_id of this CreateAccountResponse.

        The ID of the account type for the account. Account types are defined by your firm  # noqa: E501

        :param account_type_id: The account_type_id of this CreateAccountResponse.  # noqa: E501
        :type: str
        """
        if account_type_id is None:
            raise ValueError("Invalid value for `account_type_id`, must not be `None`")  # noqa: E501

        self._account_type_id = account_type_id

    @property
    def managed(self):
        """Gets the managed of this CreateAccountResponse.  # noqa: E501

        Indicates if the account is managed or self directed. Defaults to true, or that it’s managed  # noqa: E501

        :return: The managed of this CreateAccountResponse.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this CreateAccountResponse.

        Indicates if the account is managed or self directed. Defaults to true, or that it’s managed  # noqa: E501

        :param managed: The managed of this CreateAccountResponse.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def clients(self):
        """Gets the clients of this CreateAccountResponse.  # noqa: E501

        List of clients associated with the account and their association type as well as signature data  # noqa: E501

        :return: The clients of this CreateAccountResponse.  # noqa: E501
        :rtype: list[AccountCreateClient]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this CreateAccountResponse.

        List of clients associated with the account and their association type as well as signature data  # noqa: E501

        :param clients: The clients of this CreateAccountResponse.  # noqa: E501
        :type: list[AccountCreateClient]
        """

        self._clients = clients

    @property
    def goals(self):
        """Gets the goals of this CreateAccountResponse.  # noqa: E501

        List of goals mapped to the account with information such as goal amount and horizon  # noqa: E501

        :return: The goals of this CreateAccountResponse.  # noqa: E501
        :rtype: list[AccountCreateGoal]
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this CreateAccountResponse.

        List of goals mapped to the account with information such as goal amount and horizon  # noqa: E501

        :param goals: The goals of this CreateAccountResponse.  # noqa: E501
        :type: list[AccountCreateGoal]
        """

        self._goals = goals

    @property
    def metadata(self):
        """Gets the metadata of this CreateAccountResponse.  # noqa: E501

        Custom information associated with the account in the format key:value  # noqa: E501

        :return: The metadata of this CreateAccountResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateAccountResponse.

        Custom information associated with the account in the format key:value  # noqa: E501

        :param metadata: The metadata of this CreateAccountResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this CreateAccountResponse.  # noqa: E501


        :return: The secondary_id of this CreateAccountResponse.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this CreateAccountResponse.


        :param secondary_id: The secondary_id of this CreateAccountResponse.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    @property
    def last(self):
        """Gets the last of this CreateAccountResponse.  # noqa: E501

        If true, the last record in the result set is shown  # noqa: E501

        :return: The last of this CreateAccountResponse.  # noqa: E501
        :rtype: bool
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this CreateAccountResponse.

        If true, the last record in the result set is shown  # noqa: E501

        :param last: The last of this CreateAccountResponse.  # noqa: E501
        :type: bool
        """

        self._last = last

    @property
    def total_pages(self):
        """Gets the total_pages of this CreateAccountResponse.  # noqa: E501

        Total number of pages in the result set  # noqa: E501

        :return: The total_pages of this CreateAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this CreateAccountResponse.

        Total number of pages in the result set  # noqa: E501

        :param total_pages: The total_pages of this CreateAccountResponse.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def total_elements(self):
        """Gets the total_elements of this CreateAccountResponse.  # noqa: E501

        Total number of elements in the result set  # noqa: E501

        :return: The total_elements of this CreateAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this CreateAccountResponse.

        Total number of elements in the result set  # noqa: E501

        :param total_elements: The total_elements of this CreateAccountResponse.  # noqa: E501
        :type: int
        """

        self._total_elements = total_elements

    @property
    def sort(self):
        """Gets the sort of this CreateAccountResponse.  # noqa: E501

        Details of the sort  # noqa: E501

        :return: The sort of this CreateAccountResponse.  # noqa: E501
        :rtype: list[PaginationSort]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this CreateAccountResponse.

        Details of the sort  # noqa: E501

        :param sort: The sort of this CreateAccountResponse.  # noqa: E501
        :type: list[PaginationSort]
        """

        self._sort = sort

    @property
    def first(self):
        """Gets the first of this CreateAccountResponse.  # noqa: E501

        If true, the first record in the result set is shown  # noqa: E501

        :return: The first of this CreateAccountResponse.  # noqa: E501
        :rtype: bool
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this CreateAccountResponse.

        If true, the first record in the result set is shown  # noqa: E501

        :param first: The first of this CreateAccountResponse.  # noqa: E501
        :type: bool
        """

        self._first = first

    @property
    def number_of_elements(self):
        """Gets the number_of_elements of this CreateAccountResponse.  # noqa: E501

        Number of elements per page  # noqa: E501

        :return: The number_of_elements of this CreateAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_elements

    @number_of_elements.setter
    def number_of_elements(self, number_of_elements):
        """Sets the number_of_elements of this CreateAccountResponse.

        Number of elements per page  # noqa: E501

        :param number_of_elements: The number_of_elements of this CreateAccountResponse.  # noqa: E501
        :type: int
        """

        self._number_of_elements = number_of_elements

    @property
    def size(self):
        """Gets the size of this CreateAccountResponse.  # noqa: E501

        The number or records to be included per page. The default is 25. There is no max value.  # noqa: E501

        :return: The size of this CreateAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreateAccountResponse.

        The number or records to be included per page. The default is 25. There is no max value.  # noqa: E501

        :param size: The size of this CreateAccountResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def number(self):
        """Gets the number of this CreateAccountResponse.  # noqa: E501

        Number of the first result shown  # noqa: E501

        :return: The number of this CreateAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreateAccountResponse.

        Number of the first result shown  # noqa: E501

        :param number: The number of this CreateAccountResponse.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def id(self):
        """Gets the id of this CreateAccountResponse.  # noqa: E501

        ID of the account record  # noqa: E501

        :return: The id of this CreateAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateAccountResponse.

        ID of the account record  # noqa: E501

        :param id: The id of this CreateAccountResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this CreateAccountResponse.  # noqa: E501

        Datetime the account record was created  # noqa: E501

        :return: The create_date of this CreateAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CreateAccountResponse.

        Datetime the account record was created  # noqa: E501

        :param create_date: The create_date of this CreateAccountResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAccountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
