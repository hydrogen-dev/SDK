/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Client/Business Total CardBalance Mapping Object
    /// </summary>
    [DataContract]
    public partial class ClientBusinessTotalCardBalanceVO :  IEquatable<ClientBusinessTotalCardBalanceVO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientBusinessTotalCardBalanceVO" /> class.
        /// </summary>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="totalBalance">totalBalance.</param>
        /// <param name="totalBalanceAvailable">totalBalanceAvailable.</param>
        public ClientBusinessTotalCardBalanceVO(string currencyCode = default(string), double? totalBalance = default(double?), double? totalBalanceAvailable = default(double?))
        {
            this.CurrencyCode = currencyCode;
            this.TotalBalance = totalBalance;
            this.TotalBalanceAvailable = totalBalanceAvailable;
        }
        
        /// <summary>
        /// currencyCode
        /// </summary>
        /// <value>currencyCode</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// totalBalance
        /// </summary>
        /// <value>totalBalance</value>
        [DataMember(Name="total_balance", EmitDefaultValue=false)]
        public double? TotalBalance { get; set; }

        /// <summary>
        /// totalBalanceAvailable
        /// </summary>
        /// <value>totalBalanceAvailable</value>
        [DataMember(Name="total_balance_available", EmitDefaultValue=false)]
        public double? TotalBalanceAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientBusinessTotalCardBalanceVO {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  TotalBalance: ").Append(TotalBalance).Append("\n");
            sb.Append("  TotalBalanceAvailable: ").Append(TotalBalanceAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClientBusinessTotalCardBalanceVO);
        }

        /// <summary>
        /// Returns true if ClientBusinessTotalCardBalanceVO instances are equal
        /// </summary>
        /// <param name="input">Instance of ClientBusinessTotalCardBalanceVO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientBusinessTotalCardBalanceVO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.TotalBalance == input.TotalBalance ||
                    (this.TotalBalance != null &&
                    this.TotalBalance.Equals(input.TotalBalance))
                ) && 
                (
                    this.TotalBalanceAvailable == input.TotalBalanceAvailable ||
                    (this.TotalBalanceAvailable != null &&
                    this.TotalBalanceAvailable.Equals(input.TotalBalanceAvailable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.TotalBalance != null)
                    hashCode = hashCode * 59 + this.TotalBalance.GetHashCode();
                if (this.TotalBalanceAvailable != null)
                    hashCode = hashCode * 59 + this.TotalBalanceAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
