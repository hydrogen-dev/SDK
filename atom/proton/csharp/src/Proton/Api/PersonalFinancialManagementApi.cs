/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Proton.Client;
using Proton.ModelEntity;

namespace Proton.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalFinancialManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Budget Calculator
        /// </summary>
        /// <remarks>
        /// Analyze spending against a defined budget
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> BudgetCalculator (BudgetCalculatorRequest budgetCalculatorRequest);

        /// <summary>
        /// Budget Calculator
        /// </summary>
        /// <remarks>
        /// Analyze spending against a defined budget
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> BudgetCalculatorWithHttpInfo (BudgetCalculatorRequest budgetCalculatorRequest);
        /// <summary>
        /// Cash Flow Analysis
        /// </summary>
        /// <remarks>
        /// Analyze income, expenses, and net income
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> CashFlowAnalysis (CashFlowAnalysisRequest cashFlowAnalysisRequest);

        /// <summary>
        /// Cash Flow Analysis
        /// </summary>
        /// <remarks>
        /// Analyze income, expenses, and net income
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> CashFlowAnalysisWithHttpInfo (CashFlowAnalysisRequest cashFlowAnalysisRequest);
        /// <summary>
        /// RFee Analysis
        /// </summary>
        /// <remarks>
        /// Analyze fee data
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> FeeAnalysis (FeeAnalysisRequest feeAnalysisRequest);

        /// <summary>
        /// RFee Analysis
        /// </summary>
        /// <remarks>
        /// Analyze fee data
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> FeeAnalysisWithHttpInfo (FeeAnalysisRequest feeAnalysisRequest);
        /// <summary>
        /// Financial Picture
        /// </summary>
        /// <remarks>
        /// Assess assets, liabilities, and net worth
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> FinancialPicture (FinancialPictureRequest financialPictureRequest);

        /// <summary>
        /// Financial Picture
        /// </summary>
        /// <remarks>
        /// Assess assets, liabilities, and net worth
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> FinancialPictureWithHttpInfo (FinancialPictureRequest financialPictureRequest);
        /// <summary>
        /// Recurring Transaction Analysis
        /// </summary>
        /// <remarks>
        /// Analyze recurring transactions
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> RecurringTransactionAnalysis (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest);

        /// <summary>
        /// Recurring Transaction Analysis
        /// </summary>
        /// <remarks>
        /// Analyze recurring transactions
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> RecurringTransactionAnalysisWithHttpInfo (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest);
        /// <summary>
        /// Spending Analysis
        /// </summary>
        /// <remarks>
        /// Analyze spending transaction activity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> SpendingAnalysis (SpendingAnalysisRequest spendingAnalysisRequest);

        /// <summary>
        /// Spending Analysis
        /// </summary>
        /// <remarks>
        /// Analyze spending transaction activity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> SpendingAnalysisWithHttpInfo (SpendingAnalysisRequest spendingAnalysisRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Budget Calculator
        /// </summary>
        /// <remarks>
        /// Analyze spending against a defined budget
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> BudgetCalculatorAsync (BudgetCalculatorRequest budgetCalculatorRequest);

        /// <summary>
        /// Budget Calculator
        /// </summary>
        /// <remarks>
        /// Analyze spending against a defined budget
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> BudgetCalculatorAsyncWithHttpInfo (BudgetCalculatorRequest budgetCalculatorRequest);
        /// <summary>
        /// Cash Flow Analysis
        /// </summary>
        /// <remarks>
        /// Analyze income, expenses, and net income
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> CashFlowAnalysisAsync (CashFlowAnalysisRequest cashFlowAnalysisRequest);

        /// <summary>
        /// Cash Flow Analysis
        /// </summary>
        /// <remarks>
        /// Analyze income, expenses, and net income
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> CashFlowAnalysisAsyncWithHttpInfo (CashFlowAnalysisRequest cashFlowAnalysisRequest);
        /// <summary>
        /// RFee Analysis
        /// </summary>
        /// <remarks>
        /// Analyze fee data
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> FeeAnalysisAsync (FeeAnalysisRequest feeAnalysisRequest);

        /// <summary>
        /// RFee Analysis
        /// </summary>
        /// <remarks>
        /// Analyze fee data
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> FeeAnalysisAsyncWithHttpInfo (FeeAnalysisRequest feeAnalysisRequest);
        /// <summary>
        /// Financial Picture
        /// </summary>
        /// <remarks>
        /// Assess assets, liabilities, and net worth
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> FinancialPictureAsync (FinancialPictureRequest financialPictureRequest);

        /// <summary>
        /// Financial Picture
        /// </summary>
        /// <remarks>
        /// Assess assets, liabilities, and net worth
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> FinancialPictureAsyncWithHttpInfo (FinancialPictureRequest financialPictureRequest);
        /// <summary>
        /// Recurring Transaction Analysis
        /// </summary>
        /// <remarks>
        /// Analyze recurring transactions
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> RecurringTransactionAnalysisAsync (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest);

        /// <summary>
        /// Recurring Transaction Analysis
        /// </summary>
        /// <remarks>
        /// Analyze recurring transactions
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RecurringTransactionAnalysisAsyncWithHttpInfo (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest);
        /// <summary>
        /// Spending Analysis
        /// </summary>
        /// <remarks>
        /// Analyze spending transaction activity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> SpendingAnalysisAsync (SpendingAnalysisRequest spendingAnalysisRequest);

        /// <summary>
        /// Spending Analysis
        /// </summary>
        /// <remarks>
        /// Analyze spending transaction activity
        /// </remarks>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> SpendingAnalysisAsyncWithHttpInfo (SpendingAnalysisRequest spendingAnalysisRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonalFinancialManagementApi : IPersonalFinancialManagementApi
    {
        private Proton.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalFinancialManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalFinancialManagementApi(String basePath)
        {
            this.Configuration = new Proton.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalFinancialManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonalFinancialManagementApi(Proton.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Proton.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Proton.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Proton.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Proton.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Budget Calculator Analyze spending against a defined budget
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> BudgetCalculator (BudgetCalculatorRequest budgetCalculatorRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = BudgetCalculatorWithHttpInfo(budgetCalculatorRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Budget Calculator Analyze spending against a defined budget
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > BudgetCalculatorWithHttpInfo (BudgetCalculatorRequest budgetCalculatorRequest)
        {
            // verify the required parameter 'budgetCalculatorRequest' is set
            if (budgetCalculatorRequest == null)
                throw new ApiException(400, "Missing required parameter 'budgetCalculatorRequest' when calling PersonalFinancialManagementApi->BudgetCalculator");

            var localVarPath = "/budget_calculator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (budgetCalculatorRequest != null && budgetCalculatorRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(budgetCalculatorRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = budgetCalculatorRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BudgetCalculator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Budget Calculator Analyze spending against a defined budget
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> BudgetCalculatorAsync (BudgetCalculatorRequest budgetCalculatorRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await BudgetCalculatorAsyncWithHttpInfo(budgetCalculatorRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Budget Calculator Analyze spending against a defined budget
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="budgetCalculatorRequest">Request payload for Budget Calculator</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> BudgetCalculatorAsyncWithHttpInfo (BudgetCalculatorRequest budgetCalculatorRequest)
        {
            // verify the required parameter 'budgetCalculatorRequest' is set
            if (budgetCalculatorRequest == null)
                throw new ApiException(400, "Missing required parameter 'budgetCalculatorRequest' when calling PersonalFinancialManagementApi->BudgetCalculator");

            var localVarPath = "/budget_calculator";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (budgetCalculatorRequest != null && budgetCalculatorRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(budgetCalculatorRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = budgetCalculatorRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BudgetCalculator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Cash Flow Analysis Analyze income, expenses, and net income
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> CashFlowAnalysis (CashFlowAnalysisRequest cashFlowAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = CashFlowAnalysisWithHttpInfo(cashFlowAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cash Flow Analysis Analyze income, expenses, and net income
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > CashFlowAnalysisWithHttpInfo (CashFlowAnalysisRequest cashFlowAnalysisRequest)
        {
            // verify the required parameter 'cashFlowAnalysisRequest' is set
            if (cashFlowAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'cashFlowAnalysisRequest' when calling PersonalFinancialManagementApi->CashFlowAnalysis");

            var localVarPath = "/cash_flow_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (cashFlowAnalysisRequest != null && cashFlowAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cashFlowAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cashFlowAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashFlowAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Cash Flow Analysis Analyze income, expenses, and net income
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> CashFlowAnalysisAsync (CashFlowAnalysisRequest cashFlowAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await CashFlowAnalysisAsyncWithHttpInfo(cashFlowAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cash Flow Analysis Analyze income, expenses, and net income
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cashFlowAnalysisRequest">Request payload for Cash Flow Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> CashFlowAnalysisAsyncWithHttpInfo (CashFlowAnalysisRequest cashFlowAnalysisRequest)
        {
            // verify the required parameter 'cashFlowAnalysisRequest' is set
            if (cashFlowAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'cashFlowAnalysisRequest' when calling PersonalFinancialManagementApi->CashFlowAnalysis");

            var localVarPath = "/cash_flow_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (cashFlowAnalysisRequest != null && cashFlowAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(cashFlowAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = cashFlowAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashFlowAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// RFee Analysis Analyze fee data
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> FeeAnalysis (FeeAnalysisRequest feeAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = FeeAnalysisWithHttpInfo(feeAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// RFee Analysis Analyze fee data
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > FeeAnalysisWithHttpInfo (FeeAnalysisRequest feeAnalysisRequest)
        {
            // verify the required parameter 'feeAnalysisRequest' is set
            if (feeAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'feeAnalysisRequest' when calling PersonalFinancialManagementApi->FeeAnalysis");

            var localVarPath = "/fee_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (feeAnalysisRequest != null && feeAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feeAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feeAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeeAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// RFee Analysis Analyze fee data
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> FeeAnalysisAsync (FeeAnalysisRequest feeAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await FeeAnalysisAsyncWithHttpInfo(feeAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// RFee Analysis Analyze fee data
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="feeAnalysisRequest">Request payload for Fee Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> FeeAnalysisAsyncWithHttpInfo (FeeAnalysisRequest feeAnalysisRequest)
        {
            // verify the required parameter 'feeAnalysisRequest' is set
            if (feeAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'feeAnalysisRequest' when calling PersonalFinancialManagementApi->FeeAnalysis");

            var localVarPath = "/fee_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (feeAnalysisRequest != null && feeAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(feeAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = feeAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FeeAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Financial Picture Assess assets, liabilities, and net worth
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> FinancialPicture (FinancialPictureRequest financialPictureRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = FinancialPictureWithHttpInfo(financialPictureRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Financial Picture Assess assets, liabilities, and net worth
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > FinancialPictureWithHttpInfo (FinancialPictureRequest financialPictureRequest)
        {
            // verify the required parameter 'financialPictureRequest' is set
            if (financialPictureRequest == null)
                throw new ApiException(400, "Missing required parameter 'financialPictureRequest' when calling PersonalFinancialManagementApi->FinancialPicture");

            var localVarPath = "/financial_picture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (financialPictureRequest != null && financialPictureRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(financialPictureRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = financialPictureRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinancialPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Financial Picture Assess assets, liabilities, and net worth
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> FinancialPictureAsync (FinancialPictureRequest financialPictureRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await FinancialPictureAsyncWithHttpInfo(financialPictureRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Financial Picture Assess assets, liabilities, and net worth
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="financialPictureRequest">Request payload for Financial Picture</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> FinancialPictureAsyncWithHttpInfo (FinancialPictureRequest financialPictureRequest)
        {
            // verify the required parameter 'financialPictureRequest' is set
            if (financialPictureRequest == null)
                throw new ApiException(400, "Missing required parameter 'financialPictureRequest' when calling PersonalFinancialManagementApi->FinancialPicture");

            var localVarPath = "/financial_picture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (financialPictureRequest != null && financialPictureRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(financialPictureRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = financialPictureRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinancialPicture", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Recurring Transaction Analysis Analyze recurring transactions
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> RecurringTransactionAnalysis (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = RecurringTransactionAnalysisWithHttpInfo(recurringTransactionAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Recurring Transaction Analysis Analyze recurring transactions
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > RecurringTransactionAnalysisWithHttpInfo (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest)
        {
            // verify the required parameter 'recurringTransactionAnalysisRequest' is set
            if (recurringTransactionAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'recurringTransactionAnalysisRequest' when calling PersonalFinancialManagementApi->RecurringTransactionAnalysis");

            var localVarPath = "/recurring_transaction_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (recurringTransactionAnalysisRequest != null && recurringTransactionAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(recurringTransactionAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recurringTransactionAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecurringTransactionAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Recurring Transaction Analysis Analyze recurring transactions
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> RecurringTransactionAnalysisAsync (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await RecurringTransactionAnalysisAsyncWithHttpInfo(recurringTransactionAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Recurring Transaction Analysis Analyze recurring transactions
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recurringTransactionAnalysisRequest">Request payload for Recurring Transaction Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> RecurringTransactionAnalysisAsyncWithHttpInfo (RecurringTransactionAnalysisRequest recurringTransactionAnalysisRequest)
        {
            // verify the required parameter 'recurringTransactionAnalysisRequest' is set
            if (recurringTransactionAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'recurringTransactionAnalysisRequest' when calling PersonalFinancialManagementApi->RecurringTransactionAnalysis");

            var localVarPath = "/recurring_transaction_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (recurringTransactionAnalysisRequest != null && recurringTransactionAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(recurringTransactionAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = recurringTransactionAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RecurringTransactionAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Spending Analysis Analyze spending transaction activity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> SpendingAnalysis (SpendingAnalysisRequest spendingAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = SpendingAnalysisWithHttpInfo(spendingAnalysisRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Spending Analysis Analyze spending transaction activity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public ApiResponse< Dictionary<string, Object> > SpendingAnalysisWithHttpInfo (SpendingAnalysisRequest spendingAnalysisRequest)
        {
            // verify the required parameter 'spendingAnalysisRequest' is set
            if (spendingAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'spendingAnalysisRequest' when calling PersonalFinancialManagementApi->SpendingAnalysis");

            var localVarPath = "/spending_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (spendingAnalysisRequest != null && spendingAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(spendingAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spendingAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpendingAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

        /// <summary>
        /// Spending Analysis Analyze spending transaction activity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> SpendingAnalysisAsync (SpendingAnalysisRequest spendingAnalysisRequest)
        {
             ApiResponse<Dictionary<string, Object>> localVarResponse = await SpendingAnalysisAsyncWithHttpInfo(spendingAnalysisRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Spending Analysis Analyze spending transaction activity
        /// </summary>
        /// <exception cref="Proton.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spendingAnalysisRequest">Request payload for Spending Analysis</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> SpendingAnalysisAsyncWithHttpInfo (SpendingAnalysisRequest spendingAnalysisRequest)
        {
            // verify the required parameter 'spendingAnalysisRequest' is set
            if (spendingAnalysisRequest == null)
                throw new ApiException(400, "Missing required parameter 'spendingAnalysisRequest' when calling PersonalFinancialManagementApi->SpendingAnalysis");

            var localVarPath = "/spending_analysis";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Content-Type", localVarHttpHeaderAccept);
            }
            if (spendingAnalysisRequest != null && spendingAnalysisRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(spendingAnalysisRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = spendingAnalysisRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpendingAnalysis", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Object>)));
        }

    }
}
