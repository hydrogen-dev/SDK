/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing SecuritiesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SecuritiesApiTests
    {
        private SecuritiesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SecuritiesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SecuritiesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SecuritiesApi
            //Assert.IsInstanceOfType(typeof(SecuritiesApi), instance, "instance is a SecuritiesApi");
        }

        
        /// <summary>
        /// Test CreateSecurityExclusionUsingPost
        /// </summary>
        [Test]
        public void CreateSecurityExclusionUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SecurityExclusion securityExclusionRequest = null;
            //var response = instance.CreateSecurityExclusionUsingPost(securityExclusionRequest);
            //Assert.IsInstanceOf<SecurityExclusion> (response, "response is SecurityExclusion");
        }
        
        /// <summary>
        /// Test CreateSecurityPriceUsingPost
        /// </summary>
        [Test]
        public void CreateSecurityPriceUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SecurityPrice securityPriceRequest = null;
            //var response = instance.CreateSecurityPriceUsingPost(securityPriceRequest);
            //Assert.IsInstanceOf<SecurityPrice> (response, "response is SecurityPrice");
        }
        
        /// <summary>
        /// Test CreateSecurityUsingPost
        /// </summary>
        [Test]
        public void CreateSecurityUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Security securitiesInfoRequest = null;
            //var response = instance.CreateSecurityUsingPost(securitiesInfoRequest);
            //Assert.IsInstanceOf<Security> (response, "response is Security");
        }
        
        /// <summary>
        /// Test DeleteSecurityExclusionUsingDelete
        /// </summary>
        [Test]
        public void DeleteSecurityExclusionUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? securityExclusionId = null;
            //instance.DeleteSecurityExclusionUsingDelete(securityExclusionId);
            
        }
        
        /// <summary>
        /// Test DeleteSecurityPriceUsingDelete
        /// </summary>
        [Test]
        public void DeleteSecurityPriceUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? securityPriceId = null;
            //instance.DeleteSecurityPriceUsingDelete(securityPriceId);
            
        }
        
        /// <summary>
        /// Test DeleteSecurityUsingDelete
        /// </summary>
        [Test]
        public void DeleteSecurityUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? securityId = null;
            //instance.DeleteSecurityUsingDelete(securityId);
            
        }
        
        /// <summary>
        /// Test GetSecurityAllUsingGet
        /// </summary>
        [Test]
        public void GetSecurityAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetSecurityAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageSecurity> (response, "response is PageSecurity");
        }
        
        /// <summary>
        /// Test GetSecurityExclusionAllUsingGet
        /// </summary>
        [Test]
        public void GetSecurityExclusionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetSecurityExclusionAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageSecurityExclusion> (response, "response is PageSecurityExclusion");
        }
        
        /// <summary>
        /// Test GetSecurityExclusionUsingGet
        /// </summary>
        [Test]
        public void GetSecurityExclusionUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? securityExclusionId = null;
            //var response = instance.GetSecurityExclusionUsingGet(securityExclusionId);
            //Assert.IsInstanceOf<SecurityExclusion> (response, "response is SecurityExclusion");
        }
        
        /// <summary>
        /// Test GetSecurityPriceAllUsingGet
        /// </summary>
        [Test]
        public void GetSecurityPriceAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetSecurityPriceAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageSecurityPrice> (response, "response is PageSecurityPrice");
        }
        
        /// <summary>
        /// Test GetSecurityPriceUsingGet
        /// </summary>
        [Test]
        public void GetSecurityPriceUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? securityPriceId = null;
            //string currencyConversion = null;
            //var response = instance.GetSecurityPriceUsingGet(securityPriceId, currencyConversion);
            //Assert.IsInstanceOf<SecurityPrice> (response, "response is SecurityPrice");
        }
        
        /// <summary>
        /// Test GetSecurityUsingGet
        /// </summary>
        [Test]
        public void GetSecurityUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? securityId = null;
            //var response = instance.GetSecurityUsingGet(securityId);
            //Assert.IsInstanceOf<Security> (response, "response is Security");
        }
        
        /// <summary>
        /// Test UpdateSecurityExclusionUsingPut
        /// </summary>
        [Test]
        public void UpdateSecurityExclusionUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object securityExclusion = null;
            //Guid? securityExclusionId = null;
            //var response = instance.UpdateSecurityExclusionUsingPut(securityExclusion, securityExclusionId);
            //Assert.IsInstanceOf<SecurityExclusion> (response, "response is SecurityExclusion");
        }
        
        /// <summary>
        /// Test UpdateSecurityPriceUsingPut
        /// </summary>
        [Test]
        public void UpdateSecurityPriceUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object securityPrice = null;
            //Guid? securityPriceId = null;
            //var response = instance.UpdateSecurityPriceUsingPut(securityPrice, securityPriceId);
            //Assert.IsInstanceOf<SecurityPrice> (response, "response is SecurityPrice");
        }
        
        /// <summary>
        /// Test UpdateSecurityUsingPut
        /// </summary>
        [Test]
        public void UpdateSecurityUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object security = null;
            //Guid? securityId = null;
            //var response = instance.UpdateSecurityUsingPut(security, securityId);
            //Assert.IsInstanceOf<Security> (response, "response is Security");
        }
        
    }

}
