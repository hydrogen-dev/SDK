# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CurrencySpecificResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'decimal_points': 'int',
        'symbol': 'str',
        'address': 'str',
        'logo': 'str',
        'network': 'str',
        'create_date': 'str',
        'update_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'decimal_points': 'decimal_points',
        'symbol': 'symbol',
        'address': 'address',
        'logo': 'logo',
        'network': 'network',
        'create_date': 'create_date',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, name=None, decimal_points=None, symbol=None, address=None, logo=None, network=None, create_date=None, update_date=None):  # noqa: E501
        """CurrencySpecificResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._decimal_points = None
        self._symbol = None
        self._address = None
        self._logo = None
        self._network = None
        self._create_date = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if decimal_points is not None:
            self.decimal_points = decimal_points
        if symbol is not None:
            self.symbol = symbol
        if address is not None:
            self.address = address
        if logo is not None:
            self.logo = logo
        if network is not None:
            self.network = network
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this CurrencySpecificResponse.  # noqa: E501

        The id of the currency  # noqa: E501

        :return: The id of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrencySpecificResponse.

        The id of the currency  # noqa: E501

        :param id: The id of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CurrencySpecificResponse.  # noqa: E501

        The name of the currency  # noqa: E501

        :return: The name of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CurrencySpecificResponse.

        The name of the currency  # noqa: E501

        :param name: The name of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def decimal_points(self):
        """Gets the decimal_points of this CurrencySpecificResponse.  # noqa: E501

        Decimal points of the currency  # noqa: E501

        :return: The decimal_points of this CurrencySpecificResponse.  # noqa: E501
        :rtype: int
        """
        return self._decimal_points

    @decimal_points.setter
    def decimal_points(self, decimal_points):
        """Sets the decimal_points of this CurrencySpecificResponse.

        Decimal points of the currency  # noqa: E501

        :param decimal_points: The decimal_points of this CurrencySpecificResponse.  # noqa: E501
        :type: int
        """

        self._decimal_points = decimal_points

    @property
    def symbol(self):
        """Gets the symbol of this CurrencySpecificResponse.  # noqa: E501

        Symbol of the currency  # noqa: E501

        :return: The symbol of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CurrencySpecificResponse.

        Symbol of the currency  # noqa: E501

        :param symbol: The symbol of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def address(self):
        """Gets the address of this CurrencySpecificResponse.  # noqa: E501

        The blockchain contract address of the currency  # noqa: E501

        :return: The address of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CurrencySpecificResponse.

        The blockchain contract address of the currency  # noqa: E501

        :param address: The address of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def logo(self):
        """Gets the logo of this CurrencySpecificResponse.  # noqa: E501

        The url for the currency logo  # noqa: E501

        :return: The logo of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CurrencySpecificResponse.

        The url for the currency logo  # noqa: E501

        :param logo: The logo of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def network(self):
        """Gets the network of this CurrencySpecificResponse.  # noqa: E501

        The network the currency is available on. Can be mainnet, ropsten etc.  # noqa: E501

        :return: The network of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this CurrencySpecificResponse.

        The network the currency is available on. Can be mainnet, ropsten etc.  # noqa: E501

        :param network: The network of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def create_date(self):
        """Gets the create_date of this CurrencySpecificResponse.  # noqa: E501

        Datetime the currency record was created  # noqa: E501

        :return: The create_date of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CurrencySpecificResponse.

        Datetime the currency record was created  # noqa: E501

        :param create_date: The create_date of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this CurrencySpecificResponse.  # noqa: E501

        Datetime the currency record was updated  # noqa: E501

        :return: The update_date of this CurrencySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this CurrencySpecificResponse.

        Datetime the currency record was updated  # noqa: E501

        :param update_date: The update_date of this CurrencySpecificResponse.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencySpecificResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencySpecificResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
