# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpendingAnalysisResponseSpendingHistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period_income': 'float',
        'period_spending': 'float',
        'period_net': 'float',
        'cumulative_income': 'float',
        'cumulative_spending': 'float',
        'cumulative_net': 'float'
    }

    attribute_map = {
        'period_income': 'period_income',
        'period_spending': 'period_spending',
        'period_net': 'period_net',
        'cumulative_income': 'cumulative_income',
        'cumulative_spending': 'cumulative_spending',
        'cumulative_net': 'cumulative_net'
    }

    def __init__(self, period_income=None, period_spending=None, period_net=None, cumulative_income=None, cumulative_spending=None, cumulative_net=None):  # noqa: E501
        """SpendingAnalysisResponseSpendingHistory - a model defined in Swagger"""  # noqa: E501

        self._period_income = None
        self._period_spending = None
        self._period_net = None
        self._cumulative_income = None
        self._cumulative_spending = None
        self._cumulative_net = None
        self.discriminator = None

        if period_income is not None:
            self.period_income = period_income
        if period_spending is not None:
            self.period_spending = period_spending
        if period_net is not None:
            self.period_net = period_net
        if cumulative_income is not None:
            self.cumulative_income = cumulative_income
        if cumulative_spending is not None:
            self.cumulative_spending = cumulative_spending
        if cumulative_net is not None:
            self.cumulative_net = cumulative_net

    @property
    def period_income(self):
        """Gets the period_income of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501

        Cash inflows during the period  # noqa: E501

        :return: The period_income of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :rtype: float
        """
        return self._period_income

    @period_income.setter
    def period_income(self, period_income):
        """Sets the period_income of this SpendingAnalysisResponseSpendingHistory.

        Cash inflows during the period  # noqa: E501

        :param period_income: The period_income of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :type: float
        """

        self._period_income = period_income

    @property
    def period_spending(self):
        """Gets the period_spending of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501

        Cash outflows during the period  # noqa: E501

        :return: The period_spending of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :rtype: float
        """
        return self._period_spending

    @period_spending.setter
    def period_spending(self, period_spending):
        """Sets the period_spending of this SpendingAnalysisResponseSpendingHistory.

        Cash outflows during the period  # noqa: E501

        :param period_spending: The period_spending of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :type: float
        """

        self._period_spending = period_spending

    @property
    def period_net(self):
        """Gets the period_net of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501

        Net cash inflows (outflows) during the period  # noqa: E501

        :return: The period_net of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :rtype: float
        """
        return self._period_net

    @period_net.setter
    def period_net(self, period_net):
        """Sets the period_net of this SpendingAnalysisResponseSpendingHistory.

        Net cash inflows (outflows) during the period  # noqa: E501

        :param period_net: The period_net of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :type: float
        """

        self._period_net = period_net

    @property
    def cumulative_income(self):
        """Gets the cumulative_income of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501

        Cumulative cash inflows up to and including this period  # noqa: E501

        :return: The cumulative_income of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_income

    @cumulative_income.setter
    def cumulative_income(self, cumulative_income):
        """Sets the cumulative_income of this SpendingAnalysisResponseSpendingHistory.

        Cumulative cash inflows up to and including this period  # noqa: E501

        :param cumulative_income: The cumulative_income of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :type: float
        """

        self._cumulative_income = cumulative_income

    @property
    def cumulative_spending(self):
        """Gets the cumulative_spending of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501

        Cumulative cash outflows up to and including this period  # noqa: E501

        :return: The cumulative_spending of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_spending

    @cumulative_spending.setter
    def cumulative_spending(self, cumulative_spending):
        """Sets the cumulative_spending of this SpendingAnalysisResponseSpendingHistory.

        Cumulative cash outflows up to and including this period  # noqa: E501

        :param cumulative_spending: The cumulative_spending of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :type: float
        """

        self._cumulative_spending = cumulative_spending

    @property
    def cumulative_net(self):
        """Gets the cumulative_net of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501

        Cumulative net cash inflows (outflows) up to and including this period  # noqa: E501

        :return: The cumulative_net of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :rtype: float
        """
        return self._cumulative_net

    @cumulative_net.setter
    def cumulative_net(self, cumulative_net):
        """Sets the cumulative_net of this SpendingAnalysisResponseSpendingHistory.

        Cumulative net cash inflows (outflows) up to and including this period  # noqa: E501

        :param cumulative_net: The cumulative_net of this SpendingAnalysisResponseSpendingHistory.  # noqa: E501
        :type: float
        """

        self._cumulative_net = cumulative_net

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpendingAnalysisResponseSpendingHistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpendingAnalysisResponseSpendingHistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
