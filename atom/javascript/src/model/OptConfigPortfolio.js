/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/WConfigPortfolio'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./WConfigPortfolio'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.OptConfigPortfolio = factory(root.atom_api.ApiClient, root.atom_api.WConfigPortfolio);
  }
}(this, function(ApiClient, WConfigPortfolio) {
  'use strict';




  /**
   * The OptConfigPortfolio model module.
   * @module model/OptConfigPortfolio
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>OptConfigPortfolio</code>.
   * @alias module:model/OptConfigPortfolio
   * @class
   * @param tickers {Array.<String>} List of tickers
   * @param minAssets {Number} Minimum number of assets
   * @param wConfig {module:model/WConfigPortfolio} 
   * @param wAssetConfig {Object.<String, Number>} Weight constraints for asset classes.
   * @param secTypes {Array.<String>} Security types
   */
  var exports = function(tickers, minAssets, wConfig, wAssetConfig, secTypes) {
    var _this = this;

    _this['tickers'] = tickers;
    _this['min_assets'] = minAssets;
    _this['w_config'] = wConfig;
    _this['w_asset_config'] = wAssetConfig;
    _this['sec_types'] = secTypes;





  };

  /**
   * Constructs a <code>OptConfigPortfolio</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OptConfigPortfolio} obj Optional instance to populate.
   * @return {module:model/OptConfigPortfolio} The populated <code>OptConfigPortfolio</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('tickers')) {
        obj['tickers'] = ApiClient.convertToType(data['tickers'], ['String']);
      }
      if (data.hasOwnProperty('min_assets')) {
        obj['min_assets'] = ApiClient.convertToType(data['min_assets'], 'Number');
      }
      if (data.hasOwnProperty('w_config')) {
        obj['w_config'] = WConfigPortfolio.constructFromObject(data['w_config']);
      }
      if (data.hasOwnProperty('w_asset_config')) {
        obj['w_asset_config'] = ApiClient.convertToType(data['w_asset_config'], {'String': 'Number'});
      }
      if (data.hasOwnProperty('sec_types')) {
        obj['sec_types'] = ApiClient.convertToType(data['sec_types'], ['String']);
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
      }
      if (data.hasOwnProperty('end_date')) {
        obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
      }
      if (data.hasOwnProperty('tgt_type')) {
        obj['tgt_type'] = ApiClient.convertToType(data['tgt_type'], 'String');
      }
      if (data.hasOwnProperty('tgt_val')) {
        obj['tgt_val'] = ApiClient.convertToType(data['tgt_val'], 'Number');
      }
      if (data.hasOwnProperty('use_proxy_data')) {
        obj['use_proxy_data'] = ApiClient.convertToType(data['use_proxy_data'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * List of tickers
   * @member {Array.<String>} tickers
   */
  exports.prototype['tickers'] = undefined;
  /**
   * Minimum number of assets
   * @member {Number} min_assets
   */
  exports.prototype['min_assets'] = undefined;
  /**
   * @member {module:model/WConfigPortfolio} w_config
   */
  exports.prototype['w_config'] = undefined;
  /**
   * Weight constraints for asset classes.
   * @member {Object.<String, Number>} w_asset_config
   */
  exports.prototype['w_asset_config'] = undefined;
  /**
   * Security types
   * @member {Array.<String>} sec_types
   */
  exports.prototype['sec_types'] = undefined;
  /**
   * @member {Date} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * @member {Date} end_date
   */
  exports.prototype['end_date'] = undefined;
  /**
   * The target type for a target portfolio
   * @member {module:model/OptConfigPortfolio.TgtTypeEnum} tgt_type
   */
  exports.prototype['tgt_type'] = undefined;
  /**
   * The target value for a target portfolio
   * @member {Number} tgt_val
   */
  exports.prototype['tgt_val'] = undefined;
  /**
   * If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.
   * @member {Boolean} use_proxy_data
   * @default false
   */
  exports.prototype['use_proxy_data'] = false;


  /**
   * Allowed values for the <code>tgt_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TgtTypeEnum = {
    /**
     * value: "risk"
     * @const
     */
    "risk": "risk",
    /**
     * value: "return"
     * @const
     */
    "return": "return"  };


  return exports;
}));


