/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing AllocationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AllocationApiTests
    {
        private AllocationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AllocationApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AllocationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AllocationApi
            //Assert.IsInstanceOfType(typeof(AllocationApi), instance, "instance is a AllocationApi");
        }

        
        /// <summary>
        /// Test CreateAllocationCompositionUsingPost
        /// </summary>
        [Test]
        public void CreateAllocationCompositionUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AllocationComposition allocRequest = null;
            //var response = instance.CreateAllocationCompositionUsingPost(allocRequest);
            //Assert.IsInstanceOf<AllocationComposition> (response, "response is AllocationComposition");
        }
        
        /// <summary>
        /// Test CreateAllocationUsingPost
        /// </summary>
        [Test]
        public void CreateAllocationUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Allocation allocationRequest = null;
            //var response = instance.CreateAllocationUsingPost(allocationRequest);
            //Assert.IsInstanceOf<Allocation> (response, "response is Allocation");
        }
        
        /// <summary>
        /// Test DeleteAllocationCompositionUsingDelete
        /// </summary>
        [Test]
        public void DeleteAllocationCompositionUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationCompositionId = null;
            //instance.DeleteAllocationCompositionUsingDelete(allocationCompositionId);
            
        }
        
        /// <summary>
        /// Test DeleteAllocationUsingDelete
        /// </summary>
        [Test]
        public void DeleteAllocationUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationId = null;
            //instance.DeleteAllocationUsingDelete(allocationId);
            
        }
        
        /// <summary>
        /// Test GetAllocationAllAggregateDataUsingGet
        /// </summary>
        [Test]
        public void GetAllocationAllAggregateDataUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationId = null;
            //var response = instance.GetAllocationAllAggregateDataUsingGet(allocationId);
            //Assert.IsInstanceOf<AllocationAggregatedVO> (response, "response is AllocationAggregatedVO");
        }
        
        /// <summary>
        /// Test GetAllocationAllAssetSizeAllUsingGet
        /// </summary>
        [Test]
        public void GetAllocationAllAssetSizeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationId = null;
            //DateTime? endDate = null;
            //bool? getLatest = null;
            //bool? isCurrentWeight = null;
            //string sortType = null;
            //DateTime? startDate = null;
            //var response = instance.GetAllocationAllAssetSizeAllUsingGet(allocationId, endDate, getLatest, isCurrentWeight, sortType, startDate);
            //Assert.IsInstanceOf<List<DateDoubleVO>> (response, "response is List<DateDoubleVO>");
        }
        
        /// <summary>
        /// Test GetAllocationAllHoldingAllUsingGet
        /// </summary>
        [Test]
        public void GetAllocationAllHoldingAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationId = null;
            //DateTime? endDate = null;
            //DateTime? startDate = null;
            //var response = instance.GetAllocationAllHoldingAllUsingGet(allocationId, endDate, startDate);
            //Assert.IsInstanceOf<List<ModelHoldingVO>> (response, "response is List<ModelHoldingVO>");
        }
        
        /// <summary>
        /// Test GetAllocationAllTransactionAllUsingGet
        /// </summary>
        [Test]
        public void GetAllocationAllTransactionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationId = null;
            //bool? ascending = null;
            //DateTime? endDate = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //DateTime? startDate = null;
            //var response = instance.GetAllocationAllTransactionAllUsingGet(allocationId, ascending, endDate, orderBy, page, size, startDate);
            //Assert.IsInstanceOf<PageModelTransaction> (response, "response is PageModelTransaction");
        }
        
        /// <summary>
        /// Test GetAllocationAllUsingGet
        /// </summary>
        [Test]
        public void GetAllocationAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAllocationAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAllocation> (response, "response is PageAllocation");
        }
        
        /// <summary>
        /// Test GetAllocationCompositionAllUsingGet
        /// </summary>
        [Test]
        public void GetAllocationCompositionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAllocationCompositionAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAllocationComposition> (response, "response is PageAllocationComposition");
        }
        
        /// <summary>
        /// Test GetAllocationCompositionUsingGet
        /// </summary>
        [Test]
        public void GetAllocationCompositionUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationCompositionId = null;
            //var response = instance.GetAllocationCompositionUsingGet(allocationCompositionId);
            //Assert.IsInstanceOf<AllocationComposition> (response, "response is AllocationComposition");
        }
        
        /// <summary>
        /// Test GetAllocationUsingGet
        /// </summary>
        [Test]
        public void GetAllocationUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? allocationId = null;
            //var response = instance.GetAllocationUsingGet(allocationId);
            //Assert.IsInstanceOf<Allocation> (response, "response is Allocation");
        }
        
        /// <summary>
        /// Test UpdateAllocationCompositionUsingPut
        /// </summary>
        [Test]
        public void UpdateAllocationCompositionUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object allocationComposition = null;
            //Guid? allocationCompositionId = null;
            //var response = instance.UpdateAllocationCompositionUsingPut(allocationComposition, allocationCompositionId);
            //Assert.IsInstanceOf<AllocationComposition> (response, "response is AllocationComposition");
        }
        
        /// <summary>
        /// Test UpdateAllocationUsingPut
        /// </summary>
        [Test]
        public void UpdateAllocationUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object allocation = null;
            //Guid? allocationId = null;
            //var response = instance.UpdateAllocationUsingPut(allocation, allocationId);
            //Assert.IsInstanceOf<Allocation> (response, "response is Allocation");
        }
        
    }

}
