# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501
from atom_api.models.support_ticket_comment_payload import SupportTicketCommentPayload  # noqa: F401,E501
from atom_api.models.support_ticket_comment_payload_support_ticket_document import SupportTicketCommentPayloadSupportTicketDocument  # noqa: F401,E501


class CreateSupportTicketCommentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'support_ticket_id': 'str',
        'description': 'str',
        'has_attachment': 'bool',
        'is_admin': 'bool',
        'is_read': 'bool',
        'metadata': 'object',
        'support_ticket_document': 'list[SupportTicketCommentPayloadSupportTicketDocument]',
        'secondary_id': 'SecondaryId',
        'id': 'str',
        'create_date': 'str'
    }

    attribute_map = {
        'support_ticket_id': 'support_ticket_id',
        'description': 'description',
        'has_attachment': 'has_attachment',
        'is_admin': 'is_admin',
        'is_read': 'is_read',
        'metadata': 'metadata',
        'support_ticket_document': 'support_ticket_document',
        'secondary_id': 'secondary_id',
        'id': 'id',
        'create_date': 'create_date'
    }

    def __init__(self, support_ticket_id=None, description=None, has_attachment=False, is_admin=False, is_read=False, metadata=None, support_ticket_document=None, secondary_id=None, id=None, create_date=None):  # noqa: E501
        """CreateSupportTicketCommentResponse - a model defined in Swagger"""  # noqa: E501

        self._support_ticket_id = None
        self._description = None
        self._has_attachment = None
        self._is_admin = None
        self._is_read = None
        self._metadata = None
        self._support_ticket_document = None
        self._secondary_id = None
        self._id = None
        self._create_date = None
        self.discriminator = None

        self.support_ticket_id = support_ticket_id
        if description is not None:
            self.description = description
        if has_attachment is not None:
            self.has_attachment = has_attachment
        if is_admin is not None:
            self.is_admin = is_admin
        if is_read is not None:
            self.is_read = is_read
        if metadata is not None:
            self.metadata = metadata
        if support_ticket_document is not None:
            self.support_ticket_document = support_ticket_document
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date

    @property
    def support_ticket_id(self):
        """Gets the support_ticket_id of this CreateSupportTicketCommentResponse.  # noqa: E501

        The ID of the support ticket to which the comment belongs  # noqa: E501

        :return: The support_ticket_id of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: str
        """
        return self._support_ticket_id

    @support_ticket_id.setter
    def support_ticket_id(self, support_ticket_id):
        """Sets the support_ticket_id of this CreateSupportTicketCommentResponse.

        The ID of the support ticket to which the comment belongs  # noqa: E501

        :param support_ticket_id: The support_ticket_id of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: str
        """
        if support_ticket_id is None:
            raise ValueError("Invalid value for `support_ticket_id`, must not be `None`")  # noqa: E501

        self._support_ticket_id = support_ticket_id

    @property
    def description(self):
        """Gets the description of this CreateSupportTicketCommentResponse.  # noqa: E501

        Details and description of the information included in the support ticket comment  # noqa: E501

        :return: The description of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSupportTicketCommentResponse.

        Details and description of the information included in the support ticket comment  # noqa: E501

        :param description: The description of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def has_attachment(self):
        """Gets the has_attachment of this CreateSupportTicketCommentResponse.  # noqa: E501

        Indicates if the comment has a document attached. Defaults to false which indicates it does not have an attachment  # noqa: E501

        :return: The has_attachment of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_attachment

    @has_attachment.setter
    def has_attachment(self, has_attachment):
        """Sets the has_attachment of this CreateSupportTicketCommentResponse.

        Indicates if the comment has a document attached. Defaults to false which indicates it does not have an attachment  # noqa: E501

        :param has_attachment: The has_attachment of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: bool
        """

        self._has_attachment = has_attachment

    @property
    def is_admin(self):
        """Gets the is_admin of this CreateSupportTicketCommentResponse.  # noqa: E501

        Indicates if the support ticket comment has been added by an internal administrator (as opposed to a client). Defaults to false which indicates that it has not been added by an administrator  # noqa: E501

        :return: The is_admin of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this CreateSupportTicketCommentResponse.

        Indicates if the support ticket comment has been added by an internal administrator (as opposed to a client). Defaults to false which indicates that it has not been added by an administrator  # noqa: E501

        :param is_admin: The is_admin of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: bool
        """

        self._is_admin = is_admin

    @property
    def is_read(self):
        """Gets the is_read of this CreateSupportTicketCommentResponse.  # noqa: E501

        Indicates if the support ticket comment has been read by the internal user to whom the support ticket is assigned for resolution. Defaults to false which indicates that it has not been read  # noqa: E501

        :return: The is_read of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_read

    @is_read.setter
    def is_read(self, is_read):
        """Sets the is_read of this CreateSupportTicketCommentResponse.

        Indicates if the support ticket comment has been read by the internal user to whom the support ticket is assigned for resolution. Defaults to false which indicates that it has not been read  # noqa: E501

        :param is_read: The is_read of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: bool
        """

        self._is_read = is_read

    @property
    def metadata(self):
        """Gets the metadata of this CreateSupportTicketCommentResponse.  # noqa: E501

        Custom information associated with the support ticket comment in the format key:value  # noqa: E501

        :return: The metadata of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateSupportTicketCommentResponse.

        Custom information associated with the support ticket comment in the format key:value  # noqa: E501

        :param metadata: The metadata of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def support_ticket_document(self):
        """Gets the support_ticket_document of this CreateSupportTicketCommentResponse.  # noqa: E501


        :return: The support_ticket_document of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: list[SupportTicketCommentPayloadSupportTicketDocument]
        """
        return self._support_ticket_document

    @support_ticket_document.setter
    def support_ticket_document(self, support_ticket_document):
        """Sets the support_ticket_document of this CreateSupportTicketCommentResponse.


        :param support_ticket_document: The support_ticket_document of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: list[SupportTicketCommentPayloadSupportTicketDocument]
        """

        self._support_ticket_document = support_ticket_document

    @property
    def secondary_id(self):
        """Gets the secondary_id of this CreateSupportTicketCommentResponse.  # noqa: E501


        :return: The secondary_id of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this CreateSupportTicketCommentResponse.


        :param secondary_id: The secondary_id of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    @property
    def id(self):
        """Gets the id of this CreateSupportTicketCommentResponse.  # noqa: E501

        The ID of the support ticket comment  # noqa: E501

        :return: The id of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateSupportTicketCommentResponse.

        The ID of the support ticket comment  # noqa: E501

        :param id: The id of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this CreateSupportTicketCommentResponse.  # noqa: E501

        Datetime the support ticket comment was created  # noqa: E501

        :return: The create_date of this CreateSupportTicketCommentResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CreateSupportTicketCommentResponse.

        Datetime the support ticket comment was created  # noqa: E501

        :param create_date: The create_date of this CreateSupportTicketCommentResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSupportTicketCommentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSupportTicketCommentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
