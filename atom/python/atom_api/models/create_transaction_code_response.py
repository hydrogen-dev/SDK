# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.transaction_code_payload import TransactionCodePayload  # noqa: F401,E501


class CreateTransactionCodeResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_code': 'str',
        'transaction_code_description': 'str',
        'transaction_type': 'str',
        'category': 'str',
        'subcategory': 'str',
        'is_buy': 'bool',
        'metadata': 'object',
        'id': 'str',
        'create_date': 'str'
    }

    attribute_map = {
        'transaction_code': 'transaction_code',
        'transaction_code_description': 'transaction_code_description',
        'transaction_type': 'transaction_type',
        'category': 'category',
        'subcategory': 'subcategory',
        'is_buy': 'is_buy',
        'metadata': 'metadata',
        'id': 'id',
        'create_date': 'create_date'
    }

    def __init__(self, transaction_code=None, transaction_code_description=None, transaction_type=None, category=None, subcategory=None, is_buy=False, metadata=None, id=None, create_date=None):  # noqa: E501
        """CreateTransactionCodeResponse - a model defined in Swagger"""  # noqa: E501

        self._transaction_code = None
        self._transaction_code_description = None
        self._transaction_type = None
        self._category = None
        self._subcategory = None
        self._is_buy = None
        self._metadata = None
        self._id = None
        self._create_date = None
        self.discriminator = None

        self.transaction_code = transaction_code
        if transaction_code_description is not None:
            self.transaction_code_description = transaction_code_description
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if category is not None:
            self.category = category
        if subcategory is not None:
            self.subcategory = subcategory
        if is_buy is not None:
            self.is_buy = is_buy
        if metadata is not None:
            self.metadata = metadata
        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date

    @property
    def transaction_code(self):
        """Gets the transaction_code of this CreateTransactionCodeResponse.  # noqa: E501

        Usually a standard short combination of letters and numbers used to identify the transaction code within your firm  # noqa: E501

        :return: The transaction_code of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code

    @transaction_code.setter
    def transaction_code(self, transaction_code):
        """Sets the transaction_code of this CreateTransactionCodeResponse.

        Usually a standard short combination of letters and numbers used to identify the transaction code within your firm  # noqa: E501

        :param transaction_code: The transaction_code of this CreateTransactionCodeResponse.  # noqa: E501
        :type: str
        """
        if transaction_code is None:
            raise ValueError("Invalid value for `transaction_code`, must not be `None`")  # noqa: E501

        self._transaction_code = transaction_code

    @property
    def transaction_code_description(self):
        """Gets the transaction_code_description of this CreateTransactionCodeResponse.  # noqa: E501

        Short description to clarify the type of transaction  # noqa: E501

        :return: The transaction_code_description of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_code_description

    @transaction_code_description.setter
    def transaction_code_description(self, transaction_code_description):
        """Sets the transaction_code_description of this CreateTransactionCodeResponse.

        Short description to clarify the type of transaction  # noqa: E501

        :param transaction_code_description: The transaction_code_description of this CreateTransactionCodeResponse.  # noqa: E501
        :type: str
        """

        self._transaction_code_description = transaction_code_description

    @property
    def transaction_type(self):
        """Gets the transaction_type of this CreateTransactionCodeResponse.  # noqa: E501

        Name of the transaction code such as “Customer Payment”  # noqa: E501

        :return: The transaction_type of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this CreateTransactionCodeResponse.

        Name of the transaction code such as “Customer Payment”  # noqa: E501

        :param transaction_type: The transaction_type of this CreateTransactionCodeResponse.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def category(self):
        """Gets the category of this CreateTransactionCodeResponse.  # noqa: E501

        Grouping of similar transaction codes  # noqa: E501

        :return: The category of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CreateTransactionCodeResponse.

        Grouping of similar transaction codes  # noqa: E501

        :param category: The category of this CreateTransactionCodeResponse.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def subcategory(self):
        """Gets the subcategory of this CreateTransactionCodeResponse.  # noqa: E501

        Sub-grouping of similar transaction codes  # noqa: E501

        :return: The subcategory of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this CreateTransactionCodeResponse.

        Sub-grouping of similar transaction codes  # noqa: E501

        :param subcategory: The subcategory of this CreateTransactionCodeResponse.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def is_buy(self):
        """Gets the is_buy of this CreateTransactionCodeResponse.  # noqa: E501

        Indicates if the transaction is to buy securities. Defaults to false which means it is a sell transaction.  # noqa: E501

        :return: The is_buy of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_buy

    @is_buy.setter
    def is_buy(self, is_buy):
        """Sets the is_buy of this CreateTransactionCodeResponse.

        Indicates if the transaction is to buy securities. Defaults to false which means it is a sell transaction.  # noqa: E501

        :param is_buy: The is_buy of this CreateTransactionCodeResponse.  # noqa: E501
        :type: bool
        """

        self._is_buy = is_buy

    @property
    def metadata(self):
        """Gets the metadata of this CreateTransactionCodeResponse.  # noqa: E501

        Custom information associated with the transaction code in the format key:value  # noqa: E501

        :return: The metadata of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateTransactionCodeResponse.

        Custom information associated with the transaction code in the format key:value  # noqa: E501

        :param metadata: The metadata of this CreateTransactionCodeResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this CreateTransactionCodeResponse.  # noqa: E501

        ID of the transaction code  # noqa: E501

        :return: The id of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateTransactionCodeResponse.

        ID of the transaction code  # noqa: E501

        :param id: The id of this CreateTransactionCodeResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this CreateTransactionCodeResponse.  # noqa: E501

        Datetime the transaction code was created  # noqa: E501

        :return: The create_date of this CreateTransactionCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this CreateTransactionCodeResponse.

        Datetime the transaction code was created  # noqa: E501

        :param create_date: The create_date of this CreateTransactionCodeResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTransactionCodeResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTransactionCodeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
