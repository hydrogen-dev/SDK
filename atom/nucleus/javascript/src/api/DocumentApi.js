/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Document', 'model/PageDocument'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Document'), require('../model/PageDocument'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.DocumentApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.Document, root.HydrogenNucleusApi.PageDocument);
  }
}(this, function(ApiClient, Document, PageDocument) {
  'use strict';

  /**
   * Document service.
   * @module api/DocumentApi
   * @version 1.9.5
   */

  /**
   * Constructs a new DocumentApi. 
   * @alias module:api/DocumentApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createDocumentUsingPost operation.
     * @callback module:api/DocumentApi~createDocumentUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Document
     * Create a new Document for your firm.
     * @param {module:model/Document} documentRequest documentRequest
     * @param {module:api/DocumentApi~createDocumentUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    this.createDocumentUsingPost = function(documentRequest, callback) {
      var postBody = documentRequest;

      // verify the required parameter 'documentRequest' is set
      if (documentRequest === undefined || documentRequest === null) {
        throw new Error("Missing the required parameter 'documentRequest' when calling createDocumentUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Document;

      return this.apiClient.callApi(
        '/nucleus/v1/document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDocumentUsingDelete operation.
     * @callback module:api/DocumentApi~deleteDocumentUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a tenant document by Id
     * Permanently delete a tenant document by Id
     * @param {String} documentId UUID document_id
     * @param {module:api/DocumentApi~deleteDocumentUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDocumentUsingDelete = function(documentId, callback) {
      var postBody = null;

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteDocumentUsingDelete");
      }


      var pathParams = {
        'document_id': documentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/document/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentAllUsingGet operation.
     * @callback module:api/DocumentApi~getDocumentAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Documents
     * Get the information for all Documents 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/DocumentApi~getDocumentAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageDocument}
     */
    this.getDocumentAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageDocument;

      return this.apiClient.callApi(
        '/nucleus/v1/document', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDocumentUsingGet operation.
     * @callback module:api/DocumentApi~getDocumentUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Tenant Document by Document Id
     * Retrieve the information for a Tenant Document by Document Id
     * @param {String} documentId UUID document_id
     * @param {module:api/DocumentApi~getDocumentUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    this.getDocumentUsingGet = function(documentId, callback) {
      var postBody = null;

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentUsingGet");
      }


      var pathParams = {
        'document_id': documentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Document;

      return this.apiClient.callApi(
        '/nucleus/v1/document/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDocumentUsingPut operation.
     * @callback module:api/DocumentApi~updateDocumentUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Tenant Document
     * Updated the information for a Tenant Documents
     * @param {module:model/Document} document document
     * @param {String} documentId UUID document_id
     * @param {module:api/DocumentApi~updateDocumentUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    this.updateDocumentUsingPut = function(document, documentId, callback) {
      var postBody = document;

      // verify the required parameter 'document' is set
      if (document === undefined || document === null) {
        throw new Error("Missing the required parameter 'document' when calling updateDocumentUsingPut");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateDocumentUsingPut");
      }


      var pathParams = {
        'document_id': documentId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Document;

      return this.apiClient.callApi(
        '/nucleus/v1/document/{document_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
