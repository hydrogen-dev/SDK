/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// PortfolioTransaction Object
    /// </summary>
    [DataContract]
    public partial class PortfolioTransaction :  IEquatable<PortfolioTransaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioTransaction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PortfolioTransaction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PortfolioTransaction" /> class.
        /// </summary>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="balance">balance.</param>
        /// <param name="category">category.</param>
        /// <param name="check">check.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="currencyCode">currency_code.</param>
        /// <param name="date">date (required).</param>
        /// <param name="dateAvailable">dateAvailable.</param>
        /// <param name="description">description.</param>
        /// <param name="fundingId">fundingId.</param>
        /// <param name="id">id.</param>
        /// <param name="isCleansed">is_cleansed.</param>
        /// <param name="isDisputed">is_disputed.</param>
        /// <param name="isRead">isRead.</param>
        /// <param name="isRecurring">is_recurring.</param>
        /// <param name="location">location.</param>
        /// <param name="memo">memo.</param>
        /// <param name="merchant">merchant.</param>
        /// <param name="merchantCategoryCode">merchant_category_code.</param>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="mid">mid.</param>
        /// <param name="modelId">modelId (required).</param>
        /// <param name="portfolioId">portfolioId (required).</param>
        /// <param name="price">price.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="securityId">securityId.</param>
        /// <param name="status">status.</param>
        /// <param name="subcategory">subcategory.</param>
        /// <param name="transactionCategoryId">transactionCategoryId.</param>
        /// <param name="transactionCodeId">alertId (required).</param>
        /// <param name="updateDate">updateDate.</param>
        public PortfolioTransaction(Guid? accountId = default(Guid?), double? amount = default(double?), double? balance = default(double?), string category = default(string), Check check = default(Check), DateTime? createDate = default(DateTime?), string currencyCode = default(string), DateTime? date = default(DateTime?), DateTime? dateAvailable = default(DateTime?), string description = default(string), Guid? fundingId = default(Guid?), Guid? id = default(Guid?), bool? isCleansed = default(bool?), bool? isDisputed = default(bool?), bool? isRead = default(bool?), bool? isRecurring = default(bool?), Location location = default(Location), string memo = default(string), string merchant = default(string), string merchantCategoryCode = default(string), Guid? merchantId = default(Guid?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string mid = default(string), Guid? modelId = default(Guid?), Guid? portfolioId = default(Guid?), double? price = default(double?), double? quantity = default(double?), string secondaryId = default(string), Guid? securityId = default(Guid?), string status = default(string), string subcategory = default(string), Guid? transactionCategoryId = default(Guid?), Guid? transactionCodeId = default(Guid?), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new InvalidDataException("accountId is a required property for PortfolioTransaction and cannot be null");
            }
            else
            {
                this.AccountId = accountId;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for PortfolioTransaction and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "modelId" is required (not null)
            if (modelId == null)
            {
                throw new InvalidDataException("modelId is a required property for PortfolioTransaction and cannot be null");
            }
            else
            {
                this.ModelId = modelId;
            }
            // to ensure "portfolioId" is required (not null)
            if (portfolioId == null)
            {
                throw new InvalidDataException("portfolioId is a required property for PortfolioTransaction and cannot be null");
            }
            else
            {
                this.PortfolioId = portfolioId;
            }
            // to ensure "transactionCodeId" is required (not null)
            if (transactionCodeId == null)
            {
                throw new InvalidDataException("transactionCodeId is a required property for PortfolioTransaction and cannot be null");
            }
            else
            {
                this.TransactionCodeId = transactionCodeId;
            }
            this.Amount = amount;
            this.Balance = balance;
            this.Category = category;
            this.Check = check;
            this.CreateDate = createDate;
            this.CurrencyCode = currencyCode;
            this.DateAvailable = dateAvailable;
            this.Description = description;
            this.FundingId = fundingId;
            this.Id = id;
            this.IsCleansed = isCleansed;
            this.IsDisputed = isDisputed;
            this.IsRead = isRead;
            this.IsRecurring = isRecurring;
            this.Location = location;
            this.Memo = memo;
            this.Merchant = merchant;
            this.MerchantCategoryCode = merchantCategoryCode;
            this.MerchantId = merchantId;
            this.Metadata = metadata;
            this.Mid = mid;
            this.Price = price;
            this.Quantity = quantity;
            this.SecondaryId = secondaryId;
            this.SecurityId = securityId;
            this.Status = status;
            this.Subcategory = subcategory;
            this.TransactionCategoryId = transactionCategoryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// accountId
        /// </summary>
        /// <value>accountId</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public Guid? AccountId { get; set; }

        /// <summary>
        /// amount
        /// </summary>
        /// <value>amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// balance
        /// </summary>
        /// <value>balance</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Check
        /// </summary>
        [DataMember(Name="check", EmitDefaultValue=false)]
        public Check Check { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// currency_code
        /// </summary>
        /// <value>currency_code</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// date
        /// </summary>
        /// <value>date</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// dateAvailable
        /// </summary>
        /// <value>dateAvailable</value>
        [DataMember(Name="date_available", EmitDefaultValue=false)]
        public DateTime? DateAvailable { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// fundingId
        /// </summary>
        /// <value>fundingId</value>
        [DataMember(Name="funding_id", EmitDefaultValue=false)]
        public Guid? FundingId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// is_cleansed
        /// </summary>
        /// <value>is_cleansed</value>
        [DataMember(Name="is_cleansed", EmitDefaultValue=false)]
        public bool? IsCleansed { get; set; }

        /// <summary>
        /// is_disputed
        /// </summary>
        /// <value>is_disputed</value>
        [DataMember(Name="is_disputed", EmitDefaultValue=false)]
        public bool? IsDisputed { get; set; }

        /// <summary>
        /// isRead
        /// </summary>
        /// <value>isRead</value>
        [DataMember(Name="is_read", EmitDefaultValue=false)]
        public bool? IsRead { get; set; }

        /// <summary>
        /// is_recurring
        /// </summary>
        /// <value>is_recurring</value>
        [DataMember(Name="is_recurring", EmitDefaultValue=false)]
        public bool? IsRecurring { get; set; }

        /// <summary>
        /// location
        /// </summary>
        /// <value>location</value>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public Location Location { get; set; }

        /// <summary>
        /// memo
        /// </summary>
        /// <value>memo</value>
        [DataMember(Name="memo", EmitDefaultValue=false)]
        public string Memo { get; set; }

        /// <summary>
        /// merchant
        /// </summary>
        /// <value>merchant</value>
        [DataMember(Name="merchant", EmitDefaultValue=false)]
        public string Merchant { get; set; }

        /// <summary>
        /// merchant_category_code
        /// </summary>
        /// <value>merchant_category_code</value>
        [DataMember(Name="merchant_category_code", EmitDefaultValue=false)]
        public string MerchantCategoryCode { get; set; }

        /// <summary>
        /// merchantId
        /// </summary>
        /// <value>merchantId</value>
        [DataMember(Name="merchant_id", EmitDefaultValue=false)]
        public Guid? MerchantId { get; set; }

        /// <summary>
        /// metadata
        /// </summary>
        /// <value>metadata</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// mid
        /// </summary>
        /// <value>mid</value>
        [DataMember(Name="mid", EmitDefaultValue=false)]
        public string Mid { get; set; }

        /// <summary>
        /// modelId
        /// </summary>
        /// <value>modelId</value>
        [DataMember(Name="model_id", EmitDefaultValue=false)]
        public Guid? ModelId { get; set; }

        /// <summary>
        /// portfolioId
        /// </summary>
        /// <value>portfolioId</value>
        [DataMember(Name="portfolio_id", EmitDefaultValue=false)]
        public Guid? PortfolioId { get; set; }

        /// <summary>
        /// price
        /// </summary>
        /// <value>price</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// securityId
        /// </summary>
        /// <value>securityId</value>
        [DataMember(Name="security_id", EmitDefaultValue=false)]
        public Guid? SecurityId { get; set; }

        /// <summary>
        /// status
        /// </summary>
        /// <value>status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// subcategory
        /// </summary>
        /// <value>subcategory</value>
        [DataMember(Name="subcategory", EmitDefaultValue=false)]
        public string Subcategory { get; set; }

        /// <summary>
        /// transactionCategoryId
        /// </summary>
        /// <value>transactionCategoryId</value>
        [DataMember(Name="transaction_category_id", EmitDefaultValue=false)]
        public Guid? TransactionCategoryId { get; set; }

        /// <summary>
        /// alertId
        /// </summary>
        /// <value>alertId</value>
        [DataMember(Name="transaction_code_id", EmitDefaultValue=false)]
        public Guid? TransactionCodeId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortfolioTransaction {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateAvailable: ").Append(DateAvailable).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FundingId: ").Append(FundingId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCleansed: ").Append(IsCleansed).Append("\n");
            sb.Append("  IsDisputed: ").Append(IsDisputed).Append("\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("  IsRecurring: ").Append(IsRecurring).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  MerchantCategoryCode: ").Append(MerchantCategoryCode).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  PortfolioId: ").Append(PortfolioId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  SecurityId: ").Append(SecurityId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subcategory: ").Append(Subcategory).Append("\n");
            sb.Append("  TransactionCategoryId: ").Append(TransactionCategoryId).Append("\n");
            sb.Append("  TransactionCodeId: ").Append(TransactionCodeId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortfolioTransaction);
        }

        /// <summary>
        /// Returns true if PortfolioTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of PortfolioTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortfolioTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Check == input.Check ||
                    (this.Check != null &&
                    this.Check.Equals(input.Check))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.DateAvailable == input.DateAvailable ||
                    (this.DateAvailable != null &&
                    this.DateAvailable.Equals(input.DateAvailable))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FundingId == input.FundingId ||
                    (this.FundingId != null &&
                    this.FundingId.Equals(input.FundingId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsCleansed == input.IsCleansed ||
                    (this.IsCleansed != null &&
                    this.IsCleansed.Equals(input.IsCleansed))
                ) && 
                (
                    this.IsDisputed == input.IsDisputed ||
                    (this.IsDisputed != null &&
                    this.IsDisputed.Equals(input.IsDisputed))
                ) && 
                (
                    this.IsRead == input.IsRead ||
                    (this.IsRead != null &&
                    this.IsRead.Equals(input.IsRead))
                ) && 
                (
                    this.IsRecurring == input.IsRecurring ||
                    (this.IsRecurring != null &&
                    this.IsRecurring.Equals(input.IsRecurring))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.Merchant == input.Merchant ||
                    (this.Merchant != null &&
                    this.Merchant.Equals(input.Merchant))
                ) && 
                (
                    this.MerchantCategoryCode == input.MerchantCategoryCode ||
                    (this.MerchantCategoryCode != null &&
                    this.MerchantCategoryCode.Equals(input.MerchantCategoryCode))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Mid == input.Mid ||
                    (this.Mid != null &&
                    this.Mid.Equals(input.Mid))
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.PortfolioId == input.PortfolioId ||
                    (this.PortfolioId != null &&
                    this.PortfolioId.Equals(input.PortfolioId))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.SecurityId == input.SecurityId ||
                    (this.SecurityId != null &&
                    this.SecurityId.Equals(input.SecurityId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Subcategory == input.Subcategory ||
                    (this.Subcategory != null &&
                    this.Subcategory.Equals(input.Subcategory))
                ) && 
                (
                    this.TransactionCategoryId == input.TransactionCategoryId ||
                    (this.TransactionCategoryId != null &&
                    this.TransactionCategoryId.Equals(input.TransactionCategoryId))
                ) && 
                (
                    this.TransactionCodeId == input.TransactionCodeId ||
                    (this.TransactionCodeId != null &&
                    this.TransactionCodeId.Equals(input.TransactionCodeId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Check != null)
                    hashCode = hashCode * 59 + this.Check.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.DateAvailable != null)
                    hashCode = hashCode * 59 + this.DateAvailable.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.FundingId != null)
                    hashCode = hashCode * 59 + this.FundingId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsCleansed != null)
                    hashCode = hashCode * 59 + this.IsCleansed.GetHashCode();
                if (this.IsDisputed != null)
                    hashCode = hashCode * 59 + this.IsDisputed.GetHashCode();
                if (this.IsRead != null)
                    hashCode = hashCode * 59 + this.IsRead.GetHashCode();
                if (this.IsRecurring != null)
                    hashCode = hashCode * 59 + this.IsRecurring.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                if (this.Merchant != null)
                    hashCode = hashCode * 59 + this.Merchant.GetHashCode();
                if (this.MerchantCategoryCode != null)
                    hashCode = hashCode * 59 + this.MerchantCategoryCode.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Mid != null)
                    hashCode = hashCode * 59 + this.Mid.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.PortfolioId != null)
                    hashCode = hashCode * 59 + this.PortfolioId.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.SecurityId != null)
                    hashCode = hashCode * 59 + this.SecurityId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Subcategory != null)
                    hashCode = hashCode * 59 + this.Subcategory.GetHashCode();
                if (this.TransactionCategoryId != null)
                    hashCode = hashCode * 59 + this.TransactionCategoryId.GetHashCode();
                if (this.TransactionCodeId != null)
                    hashCode = hashCode * 59 + this.TransactionCodeId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
