/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenProtonApi.BusinessFinancialManagementApi();
  });

  describe('(package)', function() {
    describe('BusinessFinancialManagementApi', function() {
      describe('businessFinancialHealthCheck', function() {
        it('should call businessFinancialHealthCheck successfully', function(done) {
          // TODO: uncomment, update parameter values for businessFinancialHealthCheck call and complete the assertions
          /*
          var businessFinancialHealthCheckRequest = new HydrogenProtonApi.BusinessFinancialHealthCheckRequest();
          businessFinancialHealthCheckRequest.currencyCode = "";
          businessFinancialHealthCheckRequest.clientId = """00000000-0000-0000-0000-000000000000";
          businessFinancialHealthCheckRequest.ratioTargets = new HydrogenProtonApi.RatioTargets1();
          businessFinancialHealthCheckRequest.ratioTargets.returnOnEquity = 0.0;
          businessFinancialHealthCheckRequest.ratioTargets.returnOnAssets = 0.0;
          businessFinancialHealthCheckRequest.ratioTargets.debtToEquity = 0.0;
          businessFinancialHealthCheckRequest.ratioTargets.profitMargin = 0.0;
          businessFinancialHealthCheckRequest.ratioTargets.debtRatio = 0.0;
          businessFinancialHealthCheckRequest.ratioTargets.assetTurnover = 0.0;
          businessFinancialHealthCheckRequest.accountingMethod = "accrual";
          businessFinancialHealthCheckRequest.totalLiabilities = 0.0;
          businessFinancialHealthCheckRequest.totalAssets = 0.0;
          businessFinancialHealthCheckRequest.currencyConversion = "";
          businessFinancialHealthCheckRequest.periodQuarter = 0;
          businessFinancialHealthCheckRequest.periodMonth = 0;
          businessFinancialHealthCheckRequest.totalEquity = 0.0;
          businessFinancialHealthCheckRequest.businessId = """00000000-0000-0000-0000-000000000000";
          businessFinancialHealthCheckRequest.periodYear = 0;
          businessFinancialHealthCheckRequest.totalRevenue = 0.0;
          businessFinancialHealthCheckRequest.periodLength = "annual";
          businessFinancialHealthCheckRequest.netIncome = 0.0;
          businessFinancialHealthCheckRequest.periodType = "calendar";

          instance.businessFinancialHealthCheck(businessFinancialHealthCheckRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cashAnalysis', function() {
        it('should call cashAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for cashAnalysis call and complete the assertions
          /*
          var cashAnalysisRequest = new HydrogenProtonApi.CashAnalysisRequest();
          cashAnalysisRequest.currencyCode = "";
          cashAnalysisRequest.clientId = """00000000-0000-0000-0000-000000000000";
          cashAnalysisRequest.showHistory = false;
          cashAnalysisRequest.scope = "all";
          cashAnalysisRequest.endDate = new Date();
          cashAnalysisRequest.historyFrequencyInterval = "day";
          cashAnalysisRequest.showInflowDetails = false;
          cashAnalysisRequest.currencyConversion = "";
          cashAnalysisRequest.startDate = new Date();
          cashAnalysisRequest.transactionStatusScope = [""];
          cashAnalysisRequest.showOutflowDetails = false;
          cashAnalysisRequest.onlyCleansed = false;

          instance.cashAnalysis(cashAnalysisRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('customerAnalysis', function() {
        it('should call customerAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for customerAnalysis call and complete the assertions
          /*
          var customerAnalysisRequest = new HydrogenProtonApi.CustomerAnalysisRequest();
          customerAnalysisRequest.currencyCode = "";
          customerAnalysisRequest.clientId = """00000000-0000-0000-0000-000000000000";
          customerAnalysisRequest.responseLimit = 0;
          customerAnalysisRequest.endDate = new Date();
          customerAnalysisRequest.benchmarkEndDate = new Date();
          customerAnalysisRequest.currencyConversion = "";
          customerAnalysisRequest.startDate = new Date();
          customerAnalysisRequest.customerIds = ["""00000000-0000-0000-0000-000000000000"];
          customerAnalysisRequest.businessId = """00000000-0000-0000-0000-000000000000";
          customerAnalysisRequest.benchmarkStartDate = new Date();
          customerAnalysisRequest.onlyActiveCustomers = false;

          instance.customerAnalysis(customerAnalysisRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('financialStatementAnalysis', function() {
        it('should call financialStatementAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for financialStatementAnalysis call and complete the assertions
          /*
          var financialStatementAnalysisRequest = new HydrogenProtonApi.FinancialStatementAnalysisRequest();
          financialStatementAnalysisRequest.currencyCode = "";
          financialStatementAnalysisRequest.clientId = """00000000-0000-0000-0000-000000000000";
          financialStatementAnalysisRequest.showHistory = false;
          financialStatementAnalysisRequest.accountingMethod = "accrual";
          financialStatementAnalysisRequest.endDate = new Date();
          financialStatementAnalysisRequest.historyFrequencyInterval = "day";
          financialStatementAnalysisRequest.currencyConversion = "";
          financialStatementAnalysisRequest.periodQuarter = 0;
          financialStatementAnalysisRequest.statementType = "income_statement";
          financialStatementAnalysisRequest.periodMonth = 0;
          financialStatementAnalysisRequest.startDate = new Date();
          financialStatementAnalysisRequest.businessId = """00000000-0000-0000-0000-000000000000";
          financialStatementAnalysisRequest.periodYear = 0;
          financialStatementAnalysisRequest.periodLength = "annual";
          financialStatementAnalysisRequest.statNames = ["cash"]"cash";
          financialStatementAnalysisRequest.periodType = "calendar";

          instance.financialStatementAnalysis(financialStatementAnalysisRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invoiceAnalysis', function() {
        it('should call invoiceAnalysis successfully', function(done) {
          // TODO: uncomment, update parameter values for invoiceAnalysis call and complete the assertions
          /*
          var invoiceAnalysisRequest = new HydrogenProtonApi.BusinessInvoiceAnalysisRequest();
          invoiceAnalysisRequest.currencyCode = "";
          invoiceAnalysisRequest.clientId = """00000000-0000-0000-0000-000000000000";
          invoiceAnalysisRequest.showHistory = false;
          invoiceAnalysisRequest.showOutstandingInvoices = false;
          invoiceAnalysisRequest.responseLimit = 0;
          invoiceAnalysisRequest.endDate = new Date();
          invoiceAnalysisRequest.historyFrequencyInterval = "day";
          invoiceAnalysisRequest.currencyConversion = "";
          invoiceAnalysisRequest.startDate = new Date();
          invoiceAnalysisRequest.futureDuePeriods = [new HydrogenProtonApi.Periods()];
          invoiceAnalysisRequest.futureDuePeriods[0].end = 0;
          invoiceAnalysisRequest.futureDuePeriods[0].start = 0;
          invoiceAnalysisRequest.overduePeriods = [new HydrogenProtonApi.Periods()];
          invoiceAnalysisRequest.overduePeriods[0].end = 0;
          invoiceAnalysisRequest.overduePeriods[0].start = 0;
          invoiceAnalysisRequest.businessId = """00000000-0000-0000-0000-000000000000";
          invoiceAnalysisRequest.invoiceIds = ["""00000000-0000-0000-0000-000000000000"];
          invoiceAnalysisRequest.customerId = """00000000-0000-0000-0000-000000000000";

          instance.invoiceAnalysis(invoiceAnalysisRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
