/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// Create a new business, or register a new business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Business</returns>
        Business CreateBusinessUsingPost (Business businessRequest);

        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// Create a new business, or register a new business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>ApiResponse of Business</returns>
        ApiResponse<Business> CreateBusinessUsingPostWithHttpInfo (Business businessRequest);
        /// <summary>
        /// Delete a business
        /// </summary>
        /// <remarks>
        /// Permanently delete a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns></returns>
        void DeleteBusinessUsingDelete (Guid? businessId);

        /// <summary>
        /// Delete a business
        /// </summary>
        /// <remarks>
        /// Permanently delete a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBusinessUsingDeleteWithHttpInfo (Guid? businessId);
        /// <summary>
        /// List all business
        /// </summary>
        /// <remarks>
        /// Get details for all business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBusiness</returns>
        PageBusiness GetBusinessAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all business
        /// </summary>
        /// <remarks>
        /// Get details for all business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBusiness</returns>
        ApiResponse<PageBusiness> GetBusinessAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all business asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        List<AvailableDateDoubleVO> GetBusinessAssetSizeUsingGet (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all business asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        ApiResponse<List<AvailableDateDoubleVO>> GetBusinessAssetSizeUsingGetWithHttpInfo (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all business transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under all client registered with your business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetBusinessClientTransactionAllUsingGet (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all business transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under all client registered with your business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetBusinessClientTransactionAllUsingGetWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// List all business holdings
        /// </summary>
        /// <remarks>
        /// Get a list of holdings for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        PagePortfolioHoldingAgg GetBusinessHoldingUsingGet (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all business holdings
        /// </summary>
        /// <remarks>
        /// Get a list of holdings for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        ApiResponse<PagePortfolioHoldingAgg> GetBusinessHoldingUsingGetWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// Retrieve a business
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Business</returns>
        Business GetBusinessUsingGet (Guid? businessId);

        /// <summary>
        /// Retrieve a business
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>ApiResponse of Business</returns>
        ApiResponse<Business> GetBusinessUsingGetWithHttpInfo (Guid? businessId);
        /// <summary>
        /// Update a business
        /// </summary>
        /// <remarks>
        /// Update the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Business</returns>
        Business UpdateBusinessUsingPut (Object business, Guid? businessId);

        /// <summary>
        /// Update a business
        /// </summary>
        /// <remarks>
        /// Update the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>ApiResponse of Business</returns>
        ApiResponse<Business> UpdateBusinessUsingPutWithHttpInfo (Object business, Guid? businessId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// Create a new business, or register a new business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of Business</returns>
        System.Threading.Tasks.Task<Business> CreateBusinessUsingPostAsync (Business businessRequest);

        /// <summary>
        /// Create a business
        /// </summary>
        /// <remarks>
        /// Create a new business, or register a new business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of ApiResponse (Business)</returns>
        System.Threading.Tasks.Task<ApiResponse<Business>> CreateBusinessUsingPostAsyncWithHttpInfo (Business businessRequest);
        /// <summary>
        /// Delete a business
        /// </summary>
        /// <remarks>
        /// Permanently delete a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBusinessUsingDeleteAsync (Guid? businessId);

        /// <summary>
        /// Delete a business
        /// </summary>
        /// <remarks>
        /// Permanently delete a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessUsingDeleteAsyncWithHttpInfo (Guid? businessId);
        /// <summary>
        /// List all business
        /// </summary>
        /// <remarks>
        /// Get details for all business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBusiness</returns>
        System.Threading.Tasks.Task<PageBusiness> GetBusinessAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all business
        /// </summary>
        /// <remarks>
        /// Get details for all business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBusiness)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageBusiness>> GetBusinessAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all business asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetBusinessAssetSizeUsingGetAsync (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all business asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetBusinessAssetSizeUsingGetAsyncWithHttpInfo (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// List all business transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under all client registered with your business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetBusinessClientTransactionAllUsingGetAsync (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all business transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under all client registered with your business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetBusinessClientTransactionAllUsingGetAsyncWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// List all business holdings
        /// </summary>
        /// <remarks>
        /// Get a list of holdings for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetBusinessHoldingUsingGetAsync (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all business holdings
        /// </summary>
        /// <remarks>
        /// Get a list of holdings for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetBusinessHoldingUsingGetAsyncWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// Retrieve a business
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of Business</returns>
        System.Threading.Tasks.Task<Business> GetBusinessUsingGetAsync (Guid? businessId);

        /// <summary>
        /// Retrieve a business
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of ApiResponse (Business)</returns>
        System.Threading.Tasks.Task<ApiResponse<Business>> GetBusinessUsingGetAsyncWithHttpInfo (Guid? businessId);
        /// <summary>
        /// Update a business
        /// </summary>
        /// <remarks>
        /// Update the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of Business</returns>
        System.Threading.Tasks.Task<Business> UpdateBusinessUsingPutAsync (Object business, Guid? businessId);

        /// <summary>
        /// Update a business
        /// </summary>
        /// <remarks>
        /// Update the information for a business.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of ApiResponse (Business)</returns>
        System.Threading.Tasks.Task<ApiResponse<Business>> UpdateBusinessUsingPutAsyncWithHttpInfo (Object business, Guid? businessId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessApi : IBusinessApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a business Create a new business, or register a new business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Business</returns>
        public Business CreateBusinessUsingPost (Business businessRequest)
        {
             ApiResponse<Business> localVarResponse = CreateBusinessUsingPostWithHttpInfo(businessRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a business Create a new business, or register a new business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>ApiResponse of Business</returns>
        public ApiResponse< Business > CreateBusinessUsingPostWithHttpInfo (Business businessRequest)
        {
            // verify the required parameter 'businessRequest' is set
            if (businessRequest == null)
                throw new ApiException(400, "Missing required parameter 'businessRequest' when calling BusinessApi->CreateBusinessUsingPost");

            var localVarPath = "/nucleus/v1/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessRequest != null && businessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Business>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Business) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Business)));
        }

        /// <summary>
        /// Create a business Create a new business, or register a new business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of Business</returns>
        public async System.Threading.Tasks.Task<Business> CreateBusinessUsingPostAsync (Business businessRequest)
        {
             ApiResponse<Business> localVarResponse = await CreateBusinessUsingPostAsyncWithHttpInfo(businessRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a business Create a new business, or register a new business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessRequest">businessRequest</param>
        /// <returns>Task of ApiResponse (Business)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Business>> CreateBusinessUsingPostAsyncWithHttpInfo (Business businessRequest)
        {
            // verify the required parameter 'businessRequest' is set
            if (businessRequest == null)
                throw new ApiException(400, "Missing required parameter 'businessRequest' when calling BusinessApi->CreateBusinessUsingPost");

            var localVarPath = "/nucleus/v1/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessRequest != null && businessRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(businessRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = businessRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBusinessUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Business>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Business) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Business)));
        }

        /// <summary>
        /// Delete a business Permanently delete a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns></returns>
        public void DeleteBusinessUsingDelete (Guid? businessId)
        {
             DeleteBusinessUsingDeleteWithHttpInfo(businessId);
        }

        /// <summary>
        /// Delete a business Permanently delete a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBusinessUsingDeleteWithHttpInfo (Guid? businessId)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->DeleteBusinessUsingDelete");

            var localVarPath = "/nucleus/v1/business/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a business Permanently delete a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBusinessUsingDeleteAsync (Guid? businessId)
        {
             await DeleteBusinessUsingDeleteAsyncWithHttpInfo(businessId);

        }

        /// <summary>
        /// Delete a business Permanently delete a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBusinessUsingDeleteAsyncWithHttpInfo (Guid? businessId)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->DeleteBusinessUsingDelete");

            var localVarPath = "/nucleus/v1/business/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBusinessUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all business Get details for all business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBusiness</returns>
        public PageBusiness GetBusinessAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBusiness> localVarResponse = GetBusinessAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all business Get details for all business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBusiness</returns>
        public ApiResponse< PageBusiness > GetBusinessAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBusiness) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBusiness)));
        }

        /// <summary>
        /// List all business Get details for all business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBusiness</returns>
        public async System.Threading.Tasks.Task<PageBusiness> GetBusinessAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBusiness> localVarResponse = await GetBusinessAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all business Get details for all business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBusiness)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageBusiness>> GetBusinessAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBusiness>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBusiness) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBusiness)));
        }

        /// <summary>
        /// List all business asset sizes Get a list of asset sizes per date for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        public List<AvailableDateDoubleVO> GetBusinessAssetSizeUsingGet (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = GetBusinessAssetSizeUsingGetWithHttpInfo(businessId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all business asset sizes Get a list of asset sizes per date for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        public ApiResponse< List<AvailableDateDoubleVO> > GetBusinessAssetSizeUsingGetWithHttpInfo (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (excludeSubledger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_subledger", excludeSubledger)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// List all business asset sizes Get a list of asset sizes per date for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetBusinessAssetSizeUsingGetAsync (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = await GetBusinessAssetSizeUsingGetAsyncWithHttpInfo(businessId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all business asset sizes Get a list of asset sizes per date for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetBusinessAssetSizeUsingGetAsyncWithHttpInfo (Guid? businessId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (excludeSubledger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_subledger", excludeSubledger)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// List all business transactions Get the information for all transactions under all client registered with your business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetBusinessClientTransactionAllUsingGet (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetBusinessClientTransactionAllUsingGetWithHttpInfo(businessId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all business transactions Get the information for all transactions under all client registered with your business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetBusinessClientTransactionAllUsingGetWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessClientTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessClientTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all business transactions Get the information for all transactions under all client registered with your business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetBusinessClientTransactionAllUsingGetAsync (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetBusinessClientTransactionAllUsingGetAsyncWithHttpInfo(businessId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all business transactions Get the information for all transactions under all client registered with your business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetBusinessClientTransactionAllUsingGetAsyncWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessClientTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessClientTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all business holdings Get a list of holdings for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        public PagePortfolioHoldingAgg GetBusinessHoldingUsingGet (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = GetBusinessHoldingUsingGetWithHttpInfo(businessId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all business holdings Get a list of holdings for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        public ApiResponse< PagePortfolioHoldingAgg > GetBusinessHoldingUsingGetWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessHoldingUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// List all business holdings Get a list of holdings for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        public async System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetBusinessHoldingUsingGetAsync (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = await GetBusinessHoldingUsingGetAsyncWithHttpInfo(businessId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all business holdings Get a list of holdings for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetBusinessHoldingUsingGetAsyncWithHttpInfo (Guid? businessId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessHoldingUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// Retrieve a business Retrieve the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Business</returns>
        public Business GetBusinessUsingGet (Guid? businessId)
        {
             ApiResponse<Business> localVarResponse = GetBusinessUsingGetWithHttpInfo(businessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a business Retrieve the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>ApiResponse of Business</returns>
        public ApiResponse< Business > GetBusinessUsingGetWithHttpInfo (Guid? businessId)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Business>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Business) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Business)));
        }

        /// <summary>
        /// Retrieve a business Retrieve the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of Business</returns>
        public async System.Threading.Tasks.Task<Business> GetBusinessUsingGetAsync (Guid? businessId)
        {
             ApiResponse<Business> localVarResponse = await GetBusinessUsingGetAsyncWithHttpInfo(businessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a business Retrieve the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of ApiResponse (Business)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Business>> GetBusinessUsingGetAsyncWithHttpInfo (Guid? businessId)
        {
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->GetBusinessUsingGet");

            var localVarPath = "/nucleus/v1/business/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBusinessUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Business>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Business) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Business)));
        }

        /// <summary>
        /// Update a business Update the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Business</returns>
        public Business UpdateBusinessUsingPut (Object business, Guid? businessId)
        {
             ApiResponse<Business> localVarResponse = UpdateBusinessUsingPutWithHttpInfo(business, businessId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a business Update the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>ApiResponse of Business</returns>
        public ApiResponse< Business > UpdateBusinessUsingPutWithHttpInfo (Object business, Guid? businessId)
        {
            // verify the required parameter 'business' is set
            if (business == null)
                throw new ApiException(400, "Missing required parameter 'business' when calling BusinessApi->UpdateBusinessUsingPut");
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->UpdateBusinessUsingPut");

            var localVarPath = "/nucleus/v1/business/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (business != null && business.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(business); // http body (model) parameter
            }
            else
            {
                localVarPostBody = business; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Business>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Business) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Business)));
        }

        /// <summary>
        /// Update a business Update the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of Business</returns>
        public async System.Threading.Tasks.Task<Business> UpdateBusinessUsingPutAsync (Object business, Guid? businessId)
        {
             ApiResponse<Business> localVarResponse = await UpdateBusinessUsingPutAsyncWithHttpInfo(business, businessId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a business Update the information for a business.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="business">business</param>
        /// <param name="businessId">UUID business_id</param>
        /// <returns>Task of ApiResponse (Business)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Business>> UpdateBusinessUsingPutAsyncWithHttpInfo (Object business, Guid? businessId)
        {
            // verify the required parameter 'business' is set
            if (business == null)
                throw new ApiException(400, "Missing required parameter 'business' when calling BusinessApi->UpdateBusinessUsingPut");
            // verify the required parameter 'businessId' is set
            if (businessId == null)
                throw new ApiException(400, "Missing required parameter 'businessId' when calling BusinessApi->UpdateBusinessUsingPut");

            var localVarPath = "/nucleus/v1/business/{business_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (businessId != null) localVarPathParams.Add("business_id", this.Configuration.ApiClient.ParameterToString(businessId)); // path parameter
            if (business != null && business.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(business); // http body (model) parameter
            }
            else
            {
                localVarPostBody = business; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBusinessUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Business>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Business) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Business)));
        }

    }
}
