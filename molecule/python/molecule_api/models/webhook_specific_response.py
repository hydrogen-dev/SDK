# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from molecule_api.models.webhook_create_response import WebhookCreateResponse  # noqa: F401,E501


class WebhookSpecificResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_date': 'str',
        'webhook_codes': 'list[str]',
        'url': 'str',
        'is_active': 'bool',
        'update_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'create_date': 'create_date',
        'webhook_codes': 'webhook_codes',
        'url': 'url',
        'is_active': 'is_active',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, create_date=None, webhook_codes=None, url=None, is_active=None, update_date=None):  # noqa: E501
        """WebhookSpecificResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._create_date = None
        self._webhook_codes = None
        self._url = None
        self._is_active = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if create_date is not None:
            self.create_date = create_date
        if webhook_codes is not None:
            self.webhook_codes = webhook_codes
        self.url = url
        self.is_active = is_active
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this WebhookSpecificResponse.  # noqa: E501

        ID of the webhook record  # noqa: E501

        :return: The id of this WebhookSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebhookSpecificResponse.

        ID of the webhook record  # noqa: E501

        :param id: The id of this WebhookSpecificResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_date(self):
        """Gets the create_date of this WebhookSpecificResponse.  # noqa: E501

        Datetime the webhook record was created  # noqa: E501

        :return: The create_date of this WebhookSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this WebhookSpecificResponse.

        Datetime the webhook record was created  # noqa: E501

        :param create_date: The create_date of this WebhookSpecificResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def webhook_codes(self):
        """Gets the webhook_codes of this WebhookSpecificResponse.  # noqa: E501

        The array of webhook codes for a webhook to notify.  # noqa: E501

        :return: The webhook_codes of this WebhookSpecificResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._webhook_codes

    @webhook_codes.setter
    def webhook_codes(self, webhook_codes):
        """Sets the webhook_codes of this WebhookSpecificResponse.

        The array of webhook codes for a webhook to notify.  # noqa: E501

        :param webhook_codes: The webhook_codes of this WebhookSpecificResponse.  # noqa: E501
        :type: list[str]
        """

        self._webhook_codes = webhook_codes

    @property
    def url(self):
        """Gets the url of this WebhookSpecificResponse.  # noqa: E501

        The url you want to receive the payloads to.  # noqa: E501

        :return: The url of this WebhookSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookSpecificResponse.

        The url you want to receive the payloads to.  # noqa: E501

        :param url: The url of this WebhookSpecificResponse.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def is_active(self):
        """Gets the is_active of this WebhookSpecificResponse.  # noqa: E501

        Indicates if this webhook is active.  # noqa: E501

        :return: The is_active of this WebhookSpecificResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this WebhookSpecificResponse.

        Indicates if this webhook is active.  # noqa: E501

        :param is_active: The is_active of this WebhookSpecificResponse.  # noqa: E501
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def update_date(self):
        """Gets the update_date of this WebhookSpecificResponse.  # noqa: E501

        Datetime the webhook record was updated  # noqa: E501

        :return: The update_date of this WebhookSpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this WebhookSpecificResponse.

        Datetime the webhook record was updated  # noqa: E501

        :param update_date: The update_date of this WebhookSpecificResponse.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookSpecificResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookSpecificResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
