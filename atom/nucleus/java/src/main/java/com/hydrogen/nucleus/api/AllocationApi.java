/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.Allocation;
import com.hydrogen.nucleus.model.AllocationAggregatedVO;
import com.hydrogen.nucleus.model.AllocationComposition;
import com.hydrogen.nucleus.model.DateDoubleVO;
import org.threeten.bp.LocalDate;
import com.hydrogen.nucleus.model.ModelHoldingVO;
import com.hydrogen.nucleus.model.PageAllocation;
import com.hydrogen.nucleus.model.PageAllocationComposition;
import com.hydrogen.nucleus.model.PageModelTransaction;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AllocationApi {
    private ApiClient apiClient;

    public AllocationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AllocationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAllocationCompositionUsingPost
     * @param allocRequest allocRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAllocationCompositionUsingPostCall(AllocationComposition allocRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = allocRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAllocationCompositionUsingPostValidateBeforeCall(AllocationComposition allocRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocRequest' is set
        if (allocRequest == null) {
            throw new ApiException("Missing the required parameter 'allocRequest' when calling createAllocationCompositionUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAllocationCompositionUsingPostCall(allocRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an allocation composition
     * Create a new allocation composition record for an allocation.
     * @param allocRequest allocRequest (required)
     * @return AllocationComposition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocationComposition createAllocationCompositionUsingPost(AllocationComposition allocRequest) throws ApiException {
        ApiResponse<AllocationComposition> resp = createAllocationCompositionUsingPostWithHttpInfo(allocRequest);
        return resp.getData();
    }

    /**
     * Create an allocation composition
     * Create a new allocation composition record for an allocation.
     * @param allocRequest allocRequest (required)
     * @return ApiResponse&lt;AllocationComposition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocationComposition> createAllocationCompositionUsingPostWithHttpInfo(AllocationComposition allocRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAllocationCompositionUsingPostValidateBeforeCall(allocRequest, null, null);
        Type localVarReturnType = new TypeToken<AllocationComposition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an allocation composition (asynchronously)
     * Create a new allocation composition record for an allocation.
     * @param allocRequest allocRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAllocationCompositionUsingPostAsync(AllocationComposition allocRequest, final ApiCallback<AllocationComposition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAllocationCompositionUsingPostValidateBeforeCall(allocRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationComposition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createAllocationUsingPost
     * @param allocationRequest allocationRequest (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAllocationUsingPostCall(Allocation allocationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = allocationRequest;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAllocationUsingPostValidateBeforeCall(Allocation allocationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationRequest' is set
        if (allocationRequest == null) {
            throw new ApiException("Missing the required parameter 'allocationRequest' when calling createAllocationUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createAllocationUsingPostCall(allocationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an allocation
     * Create a new allocation for your firm.
     * @param allocationRequest allocationRequest (required)
     * @return Allocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Allocation createAllocationUsingPost(Allocation allocationRequest) throws ApiException {
        ApiResponse<Allocation> resp = createAllocationUsingPostWithHttpInfo(allocationRequest);
        return resp.getData();
    }

    /**
     * Create an allocation
     * Create a new allocation for your firm.
     * @param allocationRequest allocationRequest (required)
     * @return ApiResponse&lt;Allocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Allocation> createAllocationUsingPostWithHttpInfo(Allocation allocationRequest) throws ApiException {
        com.squareup.okhttp.Call call = createAllocationUsingPostValidateBeforeCall(allocationRequest, null, null);
        Type localVarReturnType = new TypeToken<Allocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an allocation (asynchronously)
     * Create a new allocation for your firm.
     * @param allocationRequest allocationRequest (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAllocationUsingPostAsync(Allocation allocationRequest, final ApiCallback<Allocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAllocationUsingPostValidateBeforeCall(allocationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Allocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAllocationCompositionUsingDelete
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllocationCompositionUsingDeleteCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}"
            .replaceAll("\\{" + "allocation_composition_id" + "\\}", apiClient.escapeString(allocationCompositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllocationCompositionUsingDeleteValidateBeforeCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationCompositionId' is set
        if (allocationCompositionId == null) {
            throw new ApiException("Missing the required parameter 'allocationCompositionId' when calling deleteAllocationCompositionUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAllocationCompositionUsingDeleteCall(allocationCompositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an allocation composition
     * Permanently delete an allocation composition record for an allocation.
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllocationCompositionUsingDelete(UUID allocationCompositionId) throws ApiException {
        deleteAllocationCompositionUsingDeleteWithHttpInfo(allocationCompositionId);
    }

    /**
     * Delete an allocation composition
     * Permanently delete an allocation composition record for an allocation.
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllocationCompositionUsingDeleteWithHttpInfo(UUID allocationCompositionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllocationCompositionUsingDeleteValidateBeforeCall(allocationCompositionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an allocation composition (asynchronously)
     * Permanently delete an allocation composition record for an allocation.
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllocationCompositionUsingDeleteAsync(UUID allocationCompositionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllocationCompositionUsingDeleteValidateBeforeCall(allocationCompositionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteAllocationUsingDelete
     * @param allocationId UUID allocation_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAllocationUsingDeleteCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAllocationUsingDeleteValidateBeforeCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling deleteAllocationUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteAllocationUsingDeleteCall(allocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an allocation
     * Permanently delete an allocation defined by your firm.
     * @param allocationId UUID allocation_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAllocationUsingDelete(UUID allocationId) throws ApiException {
        deleteAllocationUsingDeleteWithHttpInfo(allocationId);
    }

    /**
     * Delete an allocation
     * Permanently delete an allocation defined by your firm.
     * @param allocationId UUID allocation_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAllocationUsingDeleteWithHttpInfo(UUID allocationId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAllocationUsingDeleteValidateBeforeCall(allocationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an allocation (asynchronously)
     * Permanently delete an allocation defined by your firm.
     * @param allocationId UUID allocation_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAllocationUsingDeleteAsync(UUID allocationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAllocationUsingDeleteValidateBeforeCall(allocationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllocationAllAggregateDataUsingGet
     * @param allocationId Allocation Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllAggregateDataUsingGetCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/aggregate_data"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationAllAggregateDataUsingGetValidateBeforeCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationAllAggregateDataUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationAllAggregateDataUsingGetCall(allocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all Allocation aggregated data overview
     * 
     * @param allocationId Allocation Id (required)
     * @return AllocationAggregatedVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocationAggregatedVO getAllocationAllAggregateDataUsingGet(UUID allocationId) throws ApiException {
        ApiResponse<AllocationAggregatedVO> resp = getAllocationAllAggregateDataUsingGetWithHttpInfo(allocationId);
        return resp.getData();
    }

    /**
     * List all Allocation aggregated data overview
     * 
     * @param allocationId Allocation Id (required)
     * @return ApiResponse&lt;AllocationAggregatedVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocationAggregatedVO> getAllocationAllAggregateDataUsingGetWithHttpInfo(UUID allocationId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationAllAggregateDataUsingGetValidateBeforeCall(allocationId, null, null);
        Type localVarReturnType = new TypeToken<AllocationAggregatedVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all Allocation aggregated data overview (asynchronously)
     * 
     * @param allocationId Allocation Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllAggregateDataUsingGetAsync(UUID allocationId, final ApiCallback<AllocationAggregatedVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationAllAggregateDataUsingGetValidateBeforeCall(allocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationAggregatedVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationAllAssetSizeAllUsingGet
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param getLatest get_latest (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param sortType D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)
     * @param startDate start date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllAssetSizeAllUsingGetCall(UUID allocationId, LocalDate endDate, Boolean getLatest, Boolean isCurrentWeight, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/asset_size"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (getLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("get_latest", getLatest));
        if (isCurrentWeight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is_current_weight", isCurrentWeight));
        if (sortType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort_type", sortType));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationAllAssetSizeAllUsingGetValidateBeforeCall(UUID allocationId, LocalDate endDate, Boolean getLatest, Boolean isCurrentWeight, String sortType, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationAllAssetSizeAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationAllAssetSizeAllUsingGetCall(allocationId, endDate, getLatest, isCurrentWeight, sortType, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocation asset sizes
     * Get a list of asset sizes by date for a specific allocation.
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param getLatest get_latest (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param sortType D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)
     * @param startDate start date (optional)
     * @return List&lt;DateDoubleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DateDoubleVO> getAllocationAllAssetSizeAllUsingGet(UUID allocationId, LocalDate endDate, Boolean getLatest, Boolean isCurrentWeight, String sortType, LocalDate startDate) throws ApiException {
        ApiResponse<List<DateDoubleVO>> resp = getAllocationAllAssetSizeAllUsingGetWithHttpInfo(allocationId, endDate, getLatest, isCurrentWeight, sortType, startDate);
        return resp.getData();
    }

    /**
     * List all allocation asset sizes
     * Get a list of asset sizes by date for a specific allocation.
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param getLatest get_latest (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param sortType D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)
     * @param startDate start date (optional)
     * @return ApiResponse&lt;List&lt;DateDoubleVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DateDoubleVO>> getAllocationAllAssetSizeAllUsingGetWithHttpInfo(UUID allocationId, LocalDate endDate, Boolean getLatest, Boolean isCurrentWeight, String sortType, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationAllAssetSizeAllUsingGetValidateBeforeCall(allocationId, endDate, getLatest, isCurrentWeight, sortType, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<DateDoubleVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocation asset sizes (asynchronously)
     * Get a list of asset sizes by date for a specific allocation.
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param getLatest get_latest (optional)
     * @param isCurrentWeight is_current_weight (optional, default to true)
     * @param sortType D (Daily), Q (quarterly), M (Monthly), Y (Annually)  (optional)
     * @param startDate start date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllAssetSizeAllUsingGetAsync(UUID allocationId, LocalDate endDate, Boolean getLatest, Boolean isCurrentWeight, String sortType, LocalDate startDate, final ApiCallback<List<DateDoubleVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationAllAssetSizeAllUsingGetValidateBeforeCall(allocationId, endDate, getLatest, isCurrentWeight, sortType, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DateDoubleVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationAllHoldingAllUsingGet
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param startDate start date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllHoldingAllUsingGetCall(UUID allocationId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/holding"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationAllHoldingAllUsingGetValidateBeforeCall(UUID allocationId, LocalDate endDate, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationAllHoldingAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationAllHoldingAllUsingGetCall(allocationId, endDate, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocation holdings
     * Get the information for all securities assigned to a specific allocation. 
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param startDate start date (optional)
     * @return List&lt;ModelHoldingVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModelHoldingVO> getAllocationAllHoldingAllUsingGet(UUID allocationId, LocalDate endDate, LocalDate startDate) throws ApiException {
        ApiResponse<List<ModelHoldingVO>> resp = getAllocationAllHoldingAllUsingGetWithHttpInfo(allocationId, endDate, startDate);
        return resp.getData();
    }

    /**
     * List all allocation holdings
     * Get the information for all securities assigned to a specific allocation. 
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param startDate start date (optional)
     * @return ApiResponse&lt;List&lt;ModelHoldingVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModelHoldingVO>> getAllocationAllHoldingAllUsingGetWithHttpInfo(UUID allocationId, LocalDate endDate, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationAllHoldingAllUsingGetValidateBeforeCall(allocationId, endDate, startDate, null, null);
        Type localVarReturnType = new TypeToken<List<ModelHoldingVO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocation holdings (asynchronously)
     * Get the information for all securities assigned to a specific allocation. 
     * @param allocationId UUID allocation_id (required)
     * @param endDate end date (optional)
     * @param startDate start date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllHoldingAllUsingGetAsync(UUID allocationId, LocalDate endDate, LocalDate startDate, final ApiCallback<List<ModelHoldingVO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationAllHoldingAllUsingGetValidateBeforeCall(allocationId, endDate, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModelHoldingVO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationAllTransactionAllUsingGet
     * @param allocationId UUID allocation_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllTransactionAllUsingGetCall(UUID allocationId, Boolean ascending, LocalDate endDate, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}/transaction"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_date", startDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationAllTransactionAllUsingGetValidateBeforeCall(UUID allocationId, Boolean ascending, LocalDate endDate, String orderBy, Integer page, Integer size, LocalDate startDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationAllTransactionAllUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationAllTransactionAllUsingGetCall(allocationId, ascending, endDate, orderBy, page, size, startDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocation transactions
     * Get the information for all transactions made under an allocation to achieve the composition of the allocation.
     * @param allocationId UUID allocation_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @return PageModelTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageModelTransaction getAllocationAllTransactionAllUsingGet(UUID allocationId, Boolean ascending, LocalDate endDate, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        ApiResponse<PageModelTransaction> resp = getAllocationAllTransactionAllUsingGetWithHttpInfo(allocationId, ascending, endDate, orderBy, page, size, startDate);
        return resp.getData();
    }

    /**
     * List all allocation transactions
     * Get the information for all transactions made under an allocation to achieve the composition of the allocation.
     * @param allocationId UUID allocation_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @return ApiResponse&lt;PageModelTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageModelTransaction> getAllocationAllTransactionAllUsingGetWithHttpInfo(UUID allocationId, Boolean ascending, LocalDate endDate, String orderBy, Integer page, Integer size, LocalDate startDate) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationAllTransactionAllUsingGetValidateBeforeCall(allocationId, ascending, endDate, orderBy, page, size, startDate, null, null);
        Type localVarReturnType = new TypeToken<PageModelTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocation transactions (asynchronously)
     * Get the information for all transactions made under an allocation to achieve the composition of the allocation.
     * @param allocationId UUID allocation_id (required)
     * @param ascending ascending (optional, default to false)
     * @param endDate end date (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param startDate start date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllTransactionAllUsingGetAsync(UUID allocationId, Boolean ascending, LocalDate endDate, String orderBy, Integer page, Integer size, LocalDate startDate, final ApiCallback<PageModelTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationAllTransactionAllUsingGetValidateBeforeCall(allocationId, ascending, endDate, orderBy, page, size, startDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageModelTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllocationAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocations
     * Get details for all allocations defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAllocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAllocation getAllocationAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAllocation> resp = getAllocationAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all allocations
     * Get details for all allocations defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAllocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAllocation> getAllocationAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAllocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocations (asynchronously)
     * Get details for all allocations defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAllocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAllocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationCompositionAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationCompositionAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationCompositionAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAllocationCompositionAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all allocations compositions
     * Get the allocation composition for all allocations.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageAllocationComposition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageAllocationComposition getAllocationCompositionAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageAllocationComposition> resp = getAllocationCompositionAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all allocations compositions
     * Get the allocation composition for all allocations.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageAllocationComposition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageAllocationComposition> getAllocationCompositionAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationCompositionAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageAllocationComposition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all allocations compositions (asynchronously)
     * Get the allocation composition for all allocations.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationCompositionAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageAllocationComposition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationCompositionAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageAllocationComposition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationCompositionUsingGet
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationCompositionUsingGetCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}"
            .replaceAll("\\{" + "allocation_composition_id" + "\\}", apiClient.escapeString(allocationCompositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationCompositionUsingGetValidateBeforeCall(UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationCompositionId' is set
        if (allocationCompositionId == null) {
            throw new ApiException("Missing the required parameter 'allocationCompositionId' when calling getAllocationCompositionUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationCompositionUsingGetCall(allocationCompositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an allocation composition
     * Retrieve the information of an allocation composition record for an allocation.
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @return AllocationComposition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocationComposition getAllocationCompositionUsingGet(UUID allocationCompositionId) throws ApiException {
        ApiResponse<AllocationComposition> resp = getAllocationCompositionUsingGetWithHttpInfo(allocationCompositionId);
        return resp.getData();
    }

    /**
     * Retrieve an allocation composition
     * Retrieve the information of an allocation composition record for an allocation.
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @return ApiResponse&lt;AllocationComposition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocationComposition> getAllocationCompositionUsingGetWithHttpInfo(UUID allocationCompositionId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationCompositionUsingGetValidateBeforeCall(allocationCompositionId, null, null);
        Type localVarReturnType = new TypeToken<AllocationComposition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an allocation composition (asynchronously)
     * Retrieve the information of an allocation composition record for an allocation.
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationCompositionUsingGetAsync(UUID allocationCompositionId, final ApiCallback<AllocationComposition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationCompositionUsingGetValidateBeforeCall(allocationCompositionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationComposition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllocationUsingGet
     * @param allocationId UUID allocation_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllocationUsingGetCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllocationUsingGetValidateBeforeCall(UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling getAllocationUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllocationUsingGetCall(allocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve an allocation
     * Retrieve the information for an allocation defined by your firm.
     * @param allocationId UUID allocation_id (required)
     * @return Allocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Allocation getAllocationUsingGet(UUID allocationId) throws ApiException {
        ApiResponse<Allocation> resp = getAllocationUsingGetWithHttpInfo(allocationId);
        return resp.getData();
    }

    /**
     * Retrieve an allocation
     * Retrieve the information for an allocation defined by your firm.
     * @param allocationId UUID allocation_id (required)
     * @return ApiResponse&lt;Allocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Allocation> getAllocationUsingGetWithHttpInfo(UUID allocationId) throws ApiException {
        com.squareup.okhttp.Call call = getAllocationUsingGetValidateBeforeCall(allocationId, null, null);
        Type localVarReturnType = new TypeToken<Allocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an allocation (asynchronously)
     * Retrieve the information for an allocation defined by your firm.
     * @param allocationId UUID allocation_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllocationUsingGetAsync(UUID allocationId, final ApiCallback<Allocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllocationUsingGetValidateBeforeCall(allocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Allocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAllocationCompositionUsingPut
     * @param allocationComposition allocation_composition (required)
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAllocationCompositionUsingPutCall(Object allocationComposition, UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = allocationComposition;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation_composition/{allocation_composition_id}"
            .replaceAll("\\{" + "allocation_composition_id" + "\\}", apiClient.escapeString(allocationCompositionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAllocationCompositionUsingPutValidateBeforeCall(Object allocationComposition, UUID allocationCompositionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocationComposition' is set
        if (allocationComposition == null) {
            throw new ApiException("Missing the required parameter 'allocationComposition' when calling updateAllocationCompositionUsingPut(Async)");
        }
        
        // verify the required parameter 'allocationCompositionId' is set
        if (allocationCompositionId == null) {
            throw new ApiException("Missing the required parameter 'allocationCompositionId' when calling updateAllocationCompositionUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAllocationCompositionUsingPutCall(allocationComposition, allocationCompositionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an allocation composition
     * Update the information of an allocation composition record for an allocation.
     * @param allocationComposition allocation_composition (required)
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @return AllocationComposition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AllocationComposition updateAllocationCompositionUsingPut(Object allocationComposition, UUID allocationCompositionId) throws ApiException {
        ApiResponse<AllocationComposition> resp = updateAllocationCompositionUsingPutWithHttpInfo(allocationComposition, allocationCompositionId);
        return resp.getData();
    }

    /**
     * Update an allocation composition
     * Update the information of an allocation composition record for an allocation.
     * @param allocationComposition allocation_composition (required)
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @return ApiResponse&lt;AllocationComposition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AllocationComposition> updateAllocationCompositionUsingPutWithHttpInfo(Object allocationComposition, UUID allocationCompositionId) throws ApiException {
        com.squareup.okhttp.Call call = updateAllocationCompositionUsingPutValidateBeforeCall(allocationComposition, allocationCompositionId, null, null);
        Type localVarReturnType = new TypeToken<AllocationComposition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an allocation composition (asynchronously)
     * Update the information of an allocation composition record for an allocation.
     * @param allocationComposition allocation_composition (required)
     * @param allocationCompositionId UUID allocation_composition_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAllocationCompositionUsingPutAsync(Object allocationComposition, UUID allocationCompositionId, final ApiCallback<AllocationComposition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAllocationCompositionUsingPutValidateBeforeCall(allocationComposition, allocationCompositionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AllocationComposition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateAllocationUsingPut
     * @param allocation allocation (required)
     * @param allocationId UUID allocation_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAllocationUsingPutCall(Object allocation, UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = allocation;

        // create path and map variables
        String localVarPath = "/nucleus/v1/allocation/{allocation_id}"
            .replaceAll("\\{" + "allocation_id" + "\\}", apiClient.escapeString(allocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateAllocationUsingPutValidateBeforeCall(Object allocation, UUID allocationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'allocation' is set
        if (allocation == null) {
            throw new ApiException("Missing the required parameter 'allocation' when calling updateAllocationUsingPut(Async)");
        }
        
        // verify the required parameter 'allocationId' is set
        if (allocationId == null) {
            throw new ApiException("Missing the required parameter 'allocationId' when calling updateAllocationUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateAllocationUsingPutCall(allocation, allocationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an allocation
     * Update an allocation defined by your firm.
     * @param allocation allocation (required)
     * @param allocationId UUID allocation_id (required)
     * @return Allocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Allocation updateAllocationUsingPut(Object allocation, UUID allocationId) throws ApiException {
        ApiResponse<Allocation> resp = updateAllocationUsingPutWithHttpInfo(allocation, allocationId);
        return resp.getData();
    }

    /**
     * Update an allocation
     * Update an allocation defined by your firm.
     * @param allocation allocation (required)
     * @param allocationId UUID allocation_id (required)
     * @return ApiResponse&lt;Allocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Allocation> updateAllocationUsingPutWithHttpInfo(Object allocation, UUID allocationId) throws ApiException {
        com.squareup.okhttp.Call call = updateAllocationUsingPutValidateBeforeCall(allocation, allocationId, null, null);
        Type localVarReturnType = new TypeToken<Allocation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an allocation (asynchronously)
     * Update an allocation defined by your firm.
     * @param allocation allocation (required)
     * @param allocationId UUID allocation_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAllocationUsingPutAsync(Object allocation, UUID allocationId, final ApiCallback<Allocation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAllocationUsingPutValidateBeforeCall(allocation, allocationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Allocation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
