# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class AccountTypePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'short_name': 'str',
        'category': 'str',
        'subcategory': 'str',
        'code': 'str',
        'is_taxable': 'bool',
        'is_active': 'bool',
        'secondary_id': 'SecondaryId'
    }

    attribute_map = {
        'name': 'name',
        'short_name': 'short_name',
        'category': 'category',
        'subcategory': 'subcategory',
        'code': 'code',
        'is_taxable': 'is_taxable',
        'is_active': 'is_active',
        'secondary_id': 'secondary_id'
    }

    def __init__(self, name=None, short_name=None, category=None, subcategory=None, code=None, is_taxable=None, is_active=True, secondary_id=None):  # noqa: E501
        """AccountTypePayload - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._short_name = None
        self._category = None
        self._subcategory = None
        self._code = None
        self._is_taxable = None
        self._is_active = None
        self._secondary_id = None
        self.discriminator = None

        self.name = name
        if short_name is not None:
            self.short_name = short_name
        if category is not None:
            self.category = category
        if subcategory is not None:
            self.subcategory = subcategory
        if code is not None:
            self.code = code
        if is_taxable is not None:
            self.is_taxable = is_taxable
        if is_active is not None:
            self.is_active = is_active
        if secondary_id is not None:
            self.secondary_id = secondary_id

    @property
    def name(self):
        """Gets the name of this AccountTypePayload.  # noqa: E501

        Name of the account type such as “Taxable” or “Joint”  # noqa: E501

        :return: The name of this AccountTypePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountTypePayload.

        Name of the account type such as “Taxable” or “Joint”  # noqa: E501

        :param name: The name of this AccountTypePayload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this AccountTypePayload.  # noqa: E501

        Abbreviated name for the account type  # noqa: E501

        :return: The short_name of this AccountTypePayload.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AccountTypePayload.

        Abbreviated name for the account type  # noqa: E501

        :param short_name: The short_name of this AccountTypePayload.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def category(self):
        """Gets the category of this AccountTypePayload.  # noqa: E501

        Category grouping that the account type falls under  # noqa: E501

        :return: The category of this AccountTypePayload.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AccountTypePayload.

        Category grouping that the account type falls under  # noqa: E501

        :param category: The category of this AccountTypePayload.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def subcategory(self):
        """Gets the subcategory of this AccountTypePayload.  # noqa: E501

        Subcategory grouping under the category that the account type falls under  # noqa: E501

        :return: The subcategory of this AccountTypePayload.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this AccountTypePayload.

        Subcategory grouping under the category that the account type falls under  # noqa: E501

        :param subcategory: The subcategory of this AccountTypePayload.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def code(self):
        """Gets the code of this AccountTypePayload.  # noqa: E501

        Code defined by your firm for the account type  # noqa: E501

        :return: The code of this AccountTypePayload.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AccountTypePayload.

        Code defined by your firm for the account type  # noqa: E501

        :param code: The code of this AccountTypePayload.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def is_taxable(self):
        """Gets the is_taxable of this AccountTypePayload.  # noqa: E501

        Indicates if this account type is taxable. true indicates it is taxable  # noqa: E501

        :return: The is_taxable of this AccountTypePayload.  # noqa: E501
        :rtype: bool
        """
        return self._is_taxable

    @is_taxable.setter
    def is_taxable(self, is_taxable):
        """Sets the is_taxable of this AccountTypePayload.

        Indicates if this account type is taxable. true indicates it is taxable  # noqa: E501

        :param is_taxable: The is_taxable of this AccountTypePayload.  # noqa: E501
        :type: bool
        """

        self._is_taxable = is_taxable

    @property
    def is_active(self):
        """Gets the is_active of this AccountTypePayload.  # noqa: E501

        Indicates if this account type is active. Defaults to true which indicates it is active and available to be assigned to accounts  # noqa: E501

        :return: The is_active of this AccountTypePayload.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AccountTypePayload.

        Indicates if this account type is active. Defaults to true which indicates it is active and available to be assigned to accounts  # noqa: E501

        :param is_active: The is_active of this AccountTypePayload.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def secondary_id(self):
        """Gets the secondary_id of this AccountTypePayload.  # noqa: E501


        :return: The secondary_id of this AccountTypePayload.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this AccountTypePayload.


        :param secondary_id: The secondary_id of this AccountTypePayload.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountTypePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountTypePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
