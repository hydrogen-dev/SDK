<?php
/**
 * Model
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\nucleus\Model;

use \ArrayAccess;
use \com\hydrogen\nucleus\ObjectSerializer;

/**
 * Model Class Doc Comment
 *
 * @category Class
 * @description Model Object
 * @package  com\hydrogen\nucleus
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Model implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Model';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'benchmark_id' => 'string',
        'cash_sec' => 'string',
        'category' => 'string',
        'client_id' => 'string',
        'create_date' => '\DateTime',
        'currency_code' => 'string',
        'default_drift_factor' => 'float',
        'description' => 'string',
        'downside' => 'bool',
        'drift_rebal' => 'bool',
        'id' => 'string',
        'is_active' => 'bool',
        'metadata' => 'map[string,string]',
        'name' => 'string',
        'node_map' => '\com\hydrogen\nucleus\Model\AllocationNodeMap[]',
        'period_rebal' => 'bool',
        'rebalance_period' => 'int',
        'safe_sec' => 'string',
        'sec_rotation' => 'bool',
        'secondary_id' => 'string',
        'tax_efficiency_id' => 'int',
        'update_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'benchmark_id' => 'uuid',
        'cash_sec' => null,
        'category' => null,
        'client_id' => 'uuid',
        'create_date' => 'date-time',
        'currency_code' => null,
        'default_drift_factor' => 'float',
        'description' => null,
        'downside' => null,
        'drift_rebal' => null,
        'id' => 'uuid',
        'is_active' => null,
        'metadata' => null,
        'name' => null,
        'node_map' => null,
        'period_rebal' => null,
        'rebalance_period' => 'int64',
        'safe_sec' => null,
        'sec_rotation' => null,
        'secondary_id' => null,
        'tax_efficiency_id' => 'int64',
        'update_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'benchmark_id' => 'benchmark_id',
        'cash_sec' => 'cash_sec',
        'category' => 'category',
        'client_id' => 'client_id',
        'create_date' => 'create_date',
        'currency_code' => 'currency_code',
        'default_drift_factor' => 'default_drift_factor',
        'description' => 'description',
        'downside' => 'downside',
        'drift_rebal' => 'drift_rebal',
        'id' => 'id',
        'is_active' => 'is_active',
        'metadata' => 'metadata',
        'name' => 'name',
        'node_map' => 'node_map',
        'period_rebal' => 'period_rebal',
        'rebalance_period' => 'rebalance_period',
        'safe_sec' => 'safe_sec',
        'sec_rotation' => 'sec_rotation',
        'secondary_id' => 'secondary_id',
        'tax_efficiency_id' => 'tax_efficiency_id',
        'update_date' => 'update_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'benchmark_id' => 'setBenchmarkId',
        'cash_sec' => 'setCashSec',
        'category' => 'setCategory',
        'client_id' => 'setClientId',
        'create_date' => 'setCreateDate',
        'currency_code' => 'setCurrencyCode',
        'default_drift_factor' => 'setDefaultDriftFactor',
        'description' => 'setDescription',
        'downside' => 'setDownside',
        'drift_rebal' => 'setDriftRebal',
        'id' => 'setId',
        'is_active' => 'setIsActive',
        'metadata' => 'setMetadata',
        'name' => 'setName',
        'node_map' => 'setNodeMap',
        'period_rebal' => 'setPeriodRebal',
        'rebalance_period' => 'setRebalancePeriod',
        'safe_sec' => 'setSafeSec',
        'sec_rotation' => 'setSecRotation',
        'secondary_id' => 'setSecondaryId',
        'tax_efficiency_id' => 'setTaxEfficiencyId',
        'update_date' => 'setUpdateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'benchmark_id' => 'getBenchmarkId',
        'cash_sec' => 'getCashSec',
        'category' => 'getCategory',
        'client_id' => 'getClientId',
        'create_date' => 'getCreateDate',
        'currency_code' => 'getCurrencyCode',
        'default_drift_factor' => 'getDefaultDriftFactor',
        'description' => 'getDescription',
        'downside' => 'getDownside',
        'drift_rebal' => 'getDriftRebal',
        'id' => 'getId',
        'is_active' => 'getIsActive',
        'metadata' => 'getMetadata',
        'name' => 'getName',
        'node_map' => 'getNodeMap',
        'period_rebal' => 'getPeriodRebal',
        'rebalance_period' => 'getRebalancePeriod',
        'safe_sec' => 'getSafeSec',
        'sec_rotation' => 'getSecRotation',
        'secondary_id' => 'getSecondaryId',
        'tax_efficiency_id' => 'getTaxEfficiencyId',
        'update_date' => 'getUpdateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['benchmark_id'] = isset($data['benchmark_id']) ? $data['benchmark_id'] : null;
        $this->container['cash_sec'] = isset($data['cash_sec']) ? $data['cash_sec'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['default_drift_factor'] = isset($data['default_drift_factor']) ? $data['default_drift_factor'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['downside'] = isset($data['downside']) ? $data['downside'] : null;
        $this->container['drift_rebal'] = isset($data['drift_rebal']) ? $data['drift_rebal'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['node_map'] = isset($data['node_map']) ? $data['node_map'] : null;
        $this->container['period_rebal'] = isset($data['period_rebal']) ? $data['period_rebal'] : null;
        $this->container['rebalance_period'] = isset($data['rebalance_period']) ? $data['rebalance_period'] : null;
        $this->container['safe_sec'] = isset($data['safe_sec']) ? $data['safe_sec'] : null;
        $this->container['sec_rotation'] = isset($data['sec_rotation']) ? $data['sec_rotation'] : null;
        $this->container['secondary_id'] = isset($data['secondary_id']) ? $data['secondary_id'] : null;
        $this->container['tax_efficiency_id'] = isset($data['tax_efficiency_id']) ? $data['tax_efficiency_id'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets benchmark_id
     *
     * @return string
     */
    public function getBenchmarkId()
    {
        return $this->container['benchmark_id'];
    }

    /**
     * Sets benchmark_id
     *
     * @param string $benchmark_id benchmarkId
     *
     * @return $this
     */
    public function setBenchmarkId($benchmark_id)
    {
        $this->container['benchmark_id'] = $benchmark_id;

        return $this;
    }

    /**
     * Gets cash_sec
     *
     * @return string
     */
    public function getCashSec()
    {
        return $this->container['cash_sec'];
    }

    /**
     * Sets cash_sec
     *
     * @param string $cash_sec cashSec
     *
     * @return $this
     */
    public function setCashSec($cash_sec)
    {
        $this->container['cash_sec'] = $cash_sec;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id clientId
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime $create_date create_date
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets default_drift_factor
     *
     * @return float
     */
    public function getDefaultDriftFactor()
    {
        return $this->container['default_drift_factor'];
    }

    /**
     * Sets default_drift_factor
     *
     * @param float $default_drift_factor defaultDriftFactor
     *
     * @return $this
     */
    public function setDefaultDriftFactor($default_drift_factor)
    {
        $this->container['default_drift_factor'] = $default_drift_factor;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets downside
     *
     * @return bool
     */
    public function getDownside()
    {
        return $this->container['downside'];
    }

    /**
     * Sets downside
     *
     * @param bool $downside downside
     *
     * @return $this
     */
    public function setDownside($downside)
    {
        $this->container['downside'] = $downside;

        return $this;
    }

    /**
     * Gets drift_rebal
     *
     * @return bool
     */
    public function getDriftRebal()
    {
        return $this->container['drift_rebal'];
    }

    /**
     * Sets drift_rebal
     *
     * @param bool $drift_rebal driftRebal
     *
     * @return $this
     */
    public function setDriftRebal($drift_rebal)
    {
        $this->container['drift_rebal'] = $drift_rebal;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active isActive
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return map[string,string]
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param map[string,string] $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets node_map
     *
     * @return \com\hydrogen\nucleus\Model\AllocationNodeMap[]
     */
    public function getNodeMap()
    {
        return $this->container['node_map'];
    }

    /**
     * Sets node_map
     *
     * @param \com\hydrogen\nucleus\Model\AllocationNodeMap[] $node_map node_map
     *
     * @return $this
     */
    public function setNodeMap($node_map)
    {
        $this->container['node_map'] = $node_map;

        return $this;
    }

    /**
     * Gets period_rebal
     *
     * @return bool
     */
    public function getPeriodRebal()
    {
        return $this->container['period_rebal'];
    }

    /**
     * Sets period_rebal
     *
     * @param bool $period_rebal periodRebal
     *
     * @return $this
     */
    public function setPeriodRebal($period_rebal)
    {
        $this->container['period_rebal'] = $period_rebal;

        return $this;
    }

    /**
     * Gets rebalance_period
     *
     * @return int
     */
    public function getRebalancePeriod()
    {
        return $this->container['rebalance_period'];
    }

    /**
     * Sets rebalance_period
     *
     * @param int $rebalance_period rebalancePeriod
     *
     * @return $this
     */
    public function setRebalancePeriod($rebalance_period)
    {
        $this->container['rebalance_period'] = $rebalance_period;

        return $this;
    }

    /**
     * Gets safe_sec
     *
     * @return string
     */
    public function getSafeSec()
    {
        return $this->container['safe_sec'];
    }

    /**
     * Sets safe_sec
     *
     * @param string $safe_sec safeSec
     *
     * @return $this
     */
    public function setSafeSec($safe_sec)
    {
        $this->container['safe_sec'] = $safe_sec;

        return $this;
    }

    /**
     * Gets sec_rotation
     *
     * @return bool
     */
    public function getSecRotation()
    {
        return $this->container['sec_rotation'];
    }

    /**
     * Sets sec_rotation
     *
     * @param bool $sec_rotation secRotation
     *
     * @return $this
     */
    public function setSecRotation($sec_rotation)
    {
        $this->container['sec_rotation'] = $sec_rotation;

        return $this;
    }

    /**
     * Gets secondary_id
     *
     * @return string
     */
    public function getSecondaryId()
    {
        return $this->container['secondary_id'];
    }

    /**
     * Sets secondary_id
     *
     * @param string $secondary_id secondary_id
     *
     * @return $this
     */
    public function setSecondaryId($secondary_id)
    {
        $this->container['secondary_id'] = $secondary_id;

        return $this;
    }

    /**
     * Gets tax_efficiency_id
     *
     * @return int
     */
    public function getTaxEfficiencyId()
    {
        return $this->container['tax_efficiency_id'];
    }

    /**
     * Sets tax_efficiency_id
     *
     * @param int $tax_efficiency_id taxEfficiencyId
     *
     * @return $this
     */
    public function setTaxEfficiencyId($tax_efficiency_id)
    {
        $this->container['tax_efficiency_id'] = $tax_efficiency_id;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime $update_date update_date
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


