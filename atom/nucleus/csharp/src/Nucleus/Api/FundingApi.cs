/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a bank link
        /// </summary>
        /// <remarks>
        /// Create a new bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>BankLink</returns>
        BankLink CreateBankLinkUsingPost (BankLink bankLinkInfoRequest);

        /// <summary>
        /// Create a bank link
        /// </summary>
        /// <remarks>
        /// Create a new bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>ApiResponse of BankLink</returns>
        ApiResponse<BankLink> CreateBankLinkUsingPostWithHttpInfo (BankLink bankLinkInfoRequest);
        /// <summary>
        /// Create a funding transaction request
        /// </summary>
        /// <remarks>
        /// Create a new funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>FundingTransaction</returns>
        FundingTransaction CreateFundingTransactionUsingPost (FundingTransaction fundingTransactionRequest);

        /// <summary>
        /// Create a funding transaction request
        /// </summary>
        /// <remarks>
        /// Create a new funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>ApiResponse of FundingTransaction</returns>
        ApiResponse<FundingTransaction> CreateFundingTransactionUsingPostWithHttpInfo (FundingTransaction fundingTransactionRequest);
        /// <summary>
        /// Create a funding request
        /// </summary>
        /// <remarks>
        /// Create a new funding request for an account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>Funding</returns>
        Funding CreateFundingUsingPost (Funding fundingRequest);

        /// <summary>
        /// Create a funding request
        /// </summary>
        /// <remarks>
        /// Create a new funding request for an account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>ApiResponse of Funding</returns>
        ApiResponse<Funding> CreateFundingUsingPostWithHttpInfo (Funding fundingRequest);
        /// <summary>
        /// Create a transfer requests
        /// </summary>
        /// <remarks>
        /// Create a new external account transfer for a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>ExternalAccountTransfer</returns>
        ExternalAccountTransfer CreateTransferUsingPost (ExternalAccountTransfer externalAccountTransferRequest);

        /// <summary>
        /// Create a transfer requests
        /// </summary>
        /// <remarks>
        /// Create a new external account transfer for a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>ApiResponse of ExternalAccountTransfer</returns>
        ApiResponse<ExternalAccountTransfer> CreateTransferUsingPostWithHttpInfo (ExternalAccountTransfer externalAccountTransferRequest);
        /// <summary>
        /// Delete a bank link
        /// </summary>
        /// <remarks>
        /// Permanently delete a bank link defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns></returns>
        void DeleteBankLinkUsingDelete (Guid? bankLinkId);

        /// <summary>
        /// Delete a bank link
        /// </summary>
        /// <remarks>
        /// Permanently delete a bank link defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBankLinkUsingDeleteWithHttpInfo (Guid? bankLinkId);
        /// <summary>
        /// Delete a funding transaction request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns></returns>
        void DeleteFundingTransactionUsingDelete (Guid? fundingTransactionId);

        /// <summary>
        /// Delete a funding transaction request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFundingTransactionUsingDeleteWithHttpInfo (Guid? fundingTransactionId);
        /// <summary>
        /// Delete a funding request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding request defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns></returns>
        void DeleteFundingUsingDelete (Guid? fundingId);

        /// <summary>
        /// Delete a funding request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding request defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFundingUsingDeleteWithHttpInfo (Guid? fundingId);
        /// <summary>
        /// Delete a transfer request
        /// </summary>
        /// <remarks>
        /// Permanently delete a external account transfer from a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns></returns>
        void DeleteTransferUsingDelete (Guid? transferId);

        /// <summary>
        /// Delete a transfer request
        /// </summary>
        /// <remarks>
        /// Permanently delete a external account transfer from a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTransferUsingDeleteWithHttpInfo (Guid? transferId);
        /// <summary>
        /// List all bank links
        /// </summary>
        /// <remarks>
        /// Get all bank links defined for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBankLink</returns>
        PageBankLink GetBankLinkAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all bank links
        /// </summary>
        /// <remarks>
        /// Get all bank links defined for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBankLink</returns>
        ApiResponse<PageBankLink> GetBankLinkAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a bank link
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>BankLink</returns>
        BankLink GetBankLinkUsingGet (Guid? bankLinkId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a bank link
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of BankLink</returns>
        ApiResponse<BankLink> GetBankLinkUsingGetWithHttpInfo (Guid? bankLinkId, string currencyConversion = null);
        /// <summary>
        /// List all funding requests 
        /// </summary>
        /// <remarks>
        /// Get the information for all funding requests defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFunding</returns>
        PageFunding GetFundingAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all funding requests 
        /// </summary>
        /// <remarks>
        /// Get the information for all funding requests defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFunding</returns>
        ApiResponse<PageFunding> GetFundingAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all funding transaction requests
        /// </summary>
        /// <remarks>
        /// Get the information for all funding transaction requests for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFundingTransaction</returns>
        PageFundingTransaction GetFundingTransactionAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all funding transaction requests
        /// </summary>
        /// <remarks>
        /// Get the information for all funding transaction requests for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFundingTransaction</returns>
        ApiResponse<PageFundingTransaction> GetFundingTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a funding transaction request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>FundingTransaction</returns>
        FundingTransaction GetFundingTransactionUsingGet (Guid? fundingTransactionId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a funding transaction request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of FundingTransaction</returns>
        ApiResponse<FundingTransaction> GetFundingTransactionUsingGetWithHttpInfo (Guid? fundingTransactionId, string currencyConversion = null);
        /// <summary>
        /// Retrieve a funding request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Funding</returns>
        Funding GetFundingUsingGet (Guid? fundingId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a funding request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Funding</returns>
        ApiResponse<Funding> GetFundingUsingGetWithHttpInfo (Guid? fundingId, string currencyConversion = null);
        /// <summary>
        /// List all transfer requests
        /// </summary>
        /// <remarks>
        /// Get the information for all external account transfers defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageExternalAccountTransfer</returns>
        PageExternalAccountTransfer GetTransferAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all transfer requests
        /// </summary>
        /// <remarks>
        /// Get the information for all external account transfers defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageExternalAccountTransfer</returns>
        ApiResponse<PageExternalAccountTransfer> GetTransferAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a transfer request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a external account transfer for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ExternalAccountTransfer</returns>
        ExternalAccountTransfer GetTransferUsingGet (Guid? transferId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a transfer request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a external account transfer for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of ExternalAccountTransfer</returns>
        ApiResponse<ExternalAccountTransfer> GetTransferUsingGetWithHttpInfo (Guid? transferId, string currencyConversion = null);
        /// <summary>
        /// Update list of bank link
        /// </summary>
        /// <remarks>
        /// Update bank link list for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>List&lt;BankLink&gt;</returns>
        List<BankLink> UpdateBankLinkBulkUsingPut (List<Object> bankLinkList);

        /// <summary>
        /// Update list of bank link
        /// </summary>
        /// <remarks>
        /// Update bank link list for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>ApiResponse of List&lt;BankLink&gt;</returns>
        ApiResponse<List<BankLink>> UpdateBankLinkBulkUsingPutWithHttpInfo (List<Object> bankLinkList);
        /// <summary>
        /// Update a bank link
        /// </summary>
        /// <remarks>
        /// Update the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>BankLink</returns>
        BankLink UpdateBankLinkUsingPut (Object bankLink, Guid? bankLinkId);

        /// <summary>
        /// Update a bank link
        /// </summary>
        /// <remarks>
        /// Update the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>ApiResponse of BankLink</returns>
        ApiResponse<BankLink> UpdateBankLinkUsingPutWithHttpInfo (Object bankLink, Guid? bankLinkId);
        /// <summary>
        /// Update a funding transaction request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>FundingTransaction</returns>
        FundingTransaction UpdateFundingTransactionUsingPut (Object fundingTransaction, Guid? fundingTransactionId);

        /// <summary>
        /// Update a funding transaction request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>ApiResponse of FundingTransaction</returns>
        ApiResponse<FundingTransaction> UpdateFundingTransactionUsingPutWithHttpInfo (Object fundingTransaction, Guid? fundingTransactionId);
        /// <summary>
        /// Update a funding request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Funding</returns>
        Funding UpdateFundingUsingPut (Object funding, Guid? fundingId);

        /// <summary>
        /// Update a funding request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>ApiResponse of Funding</returns>
        ApiResponse<Funding> UpdateFundingUsingPutWithHttpInfo (Object funding, Guid? fundingId);
        /// <summary>
        /// Update a transfer request
        /// </summary>
        /// <remarks>
        /// Update the information for a external account transfer for a client account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>ExternalAccountTransfer</returns>
        ExternalAccountTransfer UpdateTransferUsingPut (Object transfer, Guid? transferId);

        /// <summary>
        /// Update a transfer request
        /// </summary>
        /// <remarks>
        /// Update the information for a external account transfer for a client account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>ApiResponse of ExternalAccountTransfer</returns>
        ApiResponse<ExternalAccountTransfer> UpdateTransferUsingPutWithHttpInfo (Object transfer, Guid? transferId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a bank link
        /// </summary>
        /// <remarks>
        /// Create a new bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>Task of BankLink</returns>
        System.Threading.Tasks.Task<BankLink> CreateBankLinkUsingPostAsync (BankLink bankLinkInfoRequest);

        /// <summary>
        /// Create a bank link
        /// </summary>
        /// <remarks>
        /// Create a new bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>Task of ApiResponse (BankLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankLink>> CreateBankLinkUsingPostAsyncWithHttpInfo (BankLink bankLinkInfoRequest);
        /// <summary>
        /// Create a funding transaction request
        /// </summary>
        /// <remarks>
        /// Create a new funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>Task of FundingTransaction</returns>
        System.Threading.Tasks.Task<FundingTransaction> CreateFundingTransactionUsingPostAsync (FundingTransaction fundingTransactionRequest);

        /// <summary>
        /// Create a funding transaction request
        /// </summary>
        /// <remarks>
        /// Create a new funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>Task of ApiResponse (FundingTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<FundingTransaction>> CreateFundingTransactionUsingPostAsyncWithHttpInfo (FundingTransaction fundingTransactionRequest);
        /// <summary>
        /// Create a funding request
        /// </summary>
        /// <remarks>
        /// Create a new funding request for an account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>Task of Funding</returns>
        System.Threading.Tasks.Task<Funding> CreateFundingUsingPostAsync (Funding fundingRequest);

        /// <summary>
        /// Create a funding request
        /// </summary>
        /// <remarks>
        /// Create a new funding request for an account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>Task of ApiResponse (Funding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Funding>> CreateFundingUsingPostAsyncWithHttpInfo (Funding fundingRequest);
        /// <summary>
        /// Create a transfer requests
        /// </summary>
        /// <remarks>
        /// Create a new external account transfer for a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>Task of ExternalAccountTransfer</returns>
        System.Threading.Tasks.Task<ExternalAccountTransfer> CreateTransferUsingPostAsync (ExternalAccountTransfer externalAccountTransferRequest);

        /// <summary>
        /// Create a transfer requests
        /// </summary>
        /// <remarks>
        /// Create a new external account transfer for a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>Task of ApiResponse (ExternalAccountTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalAccountTransfer>> CreateTransferUsingPostAsyncWithHttpInfo (ExternalAccountTransfer externalAccountTransferRequest);
        /// <summary>
        /// Delete a bank link
        /// </summary>
        /// <remarks>
        /// Permanently delete a bank link defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBankLinkUsingDeleteAsync (Guid? bankLinkId);

        /// <summary>
        /// Delete a bank link
        /// </summary>
        /// <remarks>
        /// Permanently delete a bank link defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankLinkUsingDeleteAsyncWithHttpInfo (Guid? bankLinkId);
        /// <summary>
        /// Delete a funding transaction request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFundingTransactionUsingDeleteAsync (Guid? fundingTransactionId);

        /// <summary>
        /// Delete a funding transaction request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFundingTransactionUsingDeleteAsyncWithHttpInfo (Guid? fundingTransactionId);
        /// <summary>
        /// Delete a funding request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding request defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFundingUsingDeleteAsync (Guid? fundingId);

        /// <summary>
        /// Delete a funding request
        /// </summary>
        /// <remarks>
        /// Permanently delete a funding request defined for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFundingUsingDeleteAsyncWithHttpInfo (Guid? fundingId);
        /// <summary>
        /// Delete a transfer request
        /// </summary>
        /// <remarks>
        /// Permanently delete a external account transfer from a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTransferUsingDeleteAsync (Guid? transferId);

        /// <summary>
        /// Delete a transfer request
        /// </summary>
        /// <remarks>
        /// Permanently delete a external account transfer from a client account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransferUsingDeleteAsyncWithHttpInfo (Guid? transferId);
        /// <summary>
        /// List all bank links
        /// </summary>
        /// <remarks>
        /// Get all bank links defined for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBankLink</returns>
        System.Threading.Tasks.Task<PageBankLink> GetBankLinkAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all bank links
        /// </summary>
        /// <remarks>
        /// Get all bank links defined for all clients defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBankLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageBankLink>> GetBankLinkAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a bank link
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of BankLink</returns>
        System.Threading.Tasks.Task<BankLink> GetBankLinkUsingGetAsync (Guid? bankLinkId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a bank link
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (BankLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankLink>> GetBankLinkUsingGetAsyncWithHttpInfo (Guid? bankLinkId, string currencyConversion = null);
        /// <summary>
        /// List all funding requests 
        /// </summary>
        /// <remarks>
        /// Get the information for all funding requests defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFunding</returns>
        System.Threading.Tasks.Task<PageFunding> GetFundingAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all funding requests 
        /// </summary>
        /// <remarks>
        /// Get the information for all funding requests defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFunding)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageFunding>> GetFundingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all funding transaction requests
        /// </summary>
        /// <remarks>
        /// Get the information for all funding transaction requests for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFundingTransaction</returns>
        System.Threading.Tasks.Task<PageFundingTransaction> GetFundingTransactionAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all funding transaction requests
        /// </summary>
        /// <remarks>
        /// Get the information for all funding transaction requests for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFundingTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageFundingTransaction>> GetFundingTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a funding transaction request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of FundingTransaction</returns>
        System.Threading.Tasks.Task<FundingTransaction> GetFundingTransactionUsingGetAsync (Guid? fundingTransactionId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a funding transaction request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (FundingTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<FundingTransaction>> GetFundingTransactionUsingGetAsyncWithHttpInfo (Guid? fundingTransactionId, string currencyConversion = null);
        /// <summary>
        /// Retrieve a funding request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Funding</returns>
        System.Threading.Tasks.Task<Funding> GetFundingUsingGetAsync (Guid? fundingId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a funding request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Funding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Funding>> GetFundingUsingGetAsyncWithHttpInfo (Guid? fundingId, string currencyConversion = null);
        /// <summary>
        /// List all transfer requests
        /// </summary>
        /// <remarks>
        /// Get the information for all external account transfers defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageExternalAccountTransfer</returns>
        System.Threading.Tasks.Task<PageExternalAccountTransfer> GetTransferAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all transfer requests
        /// </summary>
        /// <remarks>
        /// Get the information for all external account transfers defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageExternalAccountTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageExternalAccountTransfer>> GetTransferAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a transfer request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a external account transfer for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ExternalAccountTransfer</returns>
        System.Threading.Tasks.Task<ExternalAccountTransfer> GetTransferUsingGetAsync (Guid? transferId, string currencyConversion = null);

        /// <summary>
        /// Retrieve a transfer request
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a external account transfer for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (ExternalAccountTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalAccountTransfer>> GetTransferUsingGetAsyncWithHttpInfo (Guid? transferId, string currencyConversion = null);
        /// <summary>
        /// Update list of bank link
        /// </summary>
        /// <remarks>
        /// Update bank link list for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>Task of List&lt;BankLink&gt;</returns>
        System.Threading.Tasks.Task<List<BankLink>> UpdateBankLinkBulkUsingPutAsync (List<Object> bankLinkList);

        /// <summary>
        /// Update list of bank link
        /// </summary>
        /// <remarks>
        /// Update bank link list for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>Task of ApiResponse (List&lt;BankLink&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BankLink>>> UpdateBankLinkBulkUsingPutAsyncWithHttpInfo (List<Object> bankLinkList);
        /// <summary>
        /// Update a bank link
        /// </summary>
        /// <remarks>
        /// Update the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of BankLink</returns>
        System.Threading.Tasks.Task<BankLink> UpdateBankLinkUsingPutAsync (Object bankLink, Guid? bankLinkId);

        /// <summary>
        /// Update a bank link
        /// </summary>
        /// <remarks>
        /// Update the information for a bank link for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of ApiResponse (BankLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankLink>> UpdateBankLinkUsingPutAsyncWithHttpInfo (Object bankLink, Guid? bankLinkId);
        /// <summary>
        /// Update a funding transaction request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of FundingTransaction</returns>
        System.Threading.Tasks.Task<FundingTransaction> UpdateFundingTransactionUsingPutAsync (Object fundingTransaction, Guid? fundingTransactionId);

        /// <summary>
        /// Update a funding transaction request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding transaction request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of ApiResponse (FundingTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<FundingTransaction>> UpdateFundingTransactionUsingPutAsyncWithHttpInfo (Object fundingTransaction, Guid? fundingTransactionId);
        /// <summary>
        /// Update a funding request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of Funding</returns>
        System.Threading.Tasks.Task<Funding> UpdateFundingUsingPutAsync (Object funding, Guid? fundingId);

        /// <summary>
        /// Update a funding request
        /// </summary>
        /// <remarks>
        /// Update the information for a funding request for an account.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of ApiResponse (Funding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Funding>> UpdateFundingUsingPutAsyncWithHttpInfo (Object funding, Guid? fundingId);
        /// <summary>
        /// Update a transfer request
        /// </summary>
        /// <remarks>
        /// Update the information for a external account transfer for a client account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of ExternalAccountTransfer</returns>
        System.Threading.Tasks.Task<ExternalAccountTransfer> UpdateTransferUsingPutAsync (Object transfer, Guid? transferId);

        /// <summary>
        /// Update a transfer request
        /// </summary>
        /// <remarks>
        /// Update the information for a external account transfer for a client account. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of ApiResponse (ExternalAccountTransfer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalAccountTransfer>> UpdateTransferUsingPutAsyncWithHttpInfo (Object transfer, Guid? transferId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FundingApi : IFundingApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FundingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FundingApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FundingApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a bank link Create a new bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>BankLink</returns>
        public BankLink CreateBankLinkUsingPost (BankLink bankLinkInfoRequest)
        {
             ApiResponse<BankLink> localVarResponse = CreateBankLinkUsingPostWithHttpInfo(bankLinkInfoRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bank link Create a new bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>ApiResponse of BankLink</returns>
        public ApiResponse< BankLink > CreateBankLinkUsingPostWithHttpInfo (BankLink bankLinkInfoRequest)
        {
            // verify the required parameter 'bankLinkInfoRequest' is set
            if (bankLinkInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkInfoRequest' when calling FundingApi->CreateBankLinkUsingPost");

            var localVarPath = "/nucleus/v1/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkInfoRequest != null && bankLinkInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankLinkInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankLinkInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankLink)));
        }

        /// <summary>
        /// Create a bank link Create a new bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>Task of BankLink</returns>
        public async System.Threading.Tasks.Task<BankLink> CreateBankLinkUsingPostAsync (BankLink bankLinkInfoRequest)
        {
             ApiResponse<BankLink> localVarResponse = await CreateBankLinkUsingPostAsyncWithHttpInfo(bankLinkInfoRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bank link Create a new bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkInfoRequest">bankLinkInfoRequest</param>
        /// <returns>Task of ApiResponse (BankLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankLink>> CreateBankLinkUsingPostAsyncWithHttpInfo (BankLink bankLinkInfoRequest)
        {
            // verify the required parameter 'bankLinkInfoRequest' is set
            if (bankLinkInfoRequest == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkInfoRequest' when calling FundingApi->CreateBankLinkUsingPost");

            var localVarPath = "/nucleus/v1/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkInfoRequest != null && bankLinkInfoRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankLinkInfoRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankLinkInfoRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBankLinkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankLink)));
        }

        /// <summary>
        /// Create a funding transaction request Create a new funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>FundingTransaction</returns>
        public FundingTransaction CreateFundingTransactionUsingPost (FundingTransaction fundingTransactionRequest)
        {
             ApiResponse<FundingTransaction> localVarResponse = CreateFundingTransactionUsingPostWithHttpInfo(fundingTransactionRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a funding transaction request Create a new funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>ApiResponse of FundingTransaction</returns>
        public ApiResponse< FundingTransaction > CreateFundingTransactionUsingPostWithHttpInfo (FundingTransaction fundingTransactionRequest)
        {
            // verify the required parameter 'fundingTransactionRequest' is set
            if (fundingTransactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionRequest' when calling FundingApi->CreateFundingTransactionUsingPost");

            var localVarPath = "/nucleus/v1/funding_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionRequest != null && fundingTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fundingTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fundingTransactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFundingTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FundingTransaction)));
        }

        /// <summary>
        /// Create a funding transaction request Create a new funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>Task of FundingTransaction</returns>
        public async System.Threading.Tasks.Task<FundingTransaction> CreateFundingTransactionUsingPostAsync (FundingTransaction fundingTransactionRequest)
        {
             ApiResponse<FundingTransaction> localVarResponse = await CreateFundingTransactionUsingPostAsyncWithHttpInfo(fundingTransactionRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a funding transaction request Create a new funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionRequest">fundingTransactionRequest</param>
        /// <returns>Task of ApiResponse (FundingTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FundingTransaction>> CreateFundingTransactionUsingPostAsyncWithHttpInfo (FundingTransaction fundingTransactionRequest)
        {
            // verify the required parameter 'fundingTransactionRequest' is set
            if (fundingTransactionRequest == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionRequest' when calling FundingApi->CreateFundingTransactionUsingPost");

            var localVarPath = "/nucleus/v1/funding_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionRequest != null && fundingTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fundingTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fundingTransactionRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFundingTransactionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FundingTransaction)));
        }

        /// <summary>
        /// Create a funding request Create a new funding request for an account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>Funding</returns>
        public Funding CreateFundingUsingPost (Funding fundingRequest)
        {
             ApiResponse<Funding> localVarResponse = CreateFundingUsingPostWithHttpInfo(fundingRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a funding request Create a new funding request for an account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>ApiResponse of Funding</returns>
        public ApiResponse< Funding > CreateFundingUsingPostWithHttpInfo (Funding fundingRequest)
        {
            // verify the required parameter 'fundingRequest' is set
            if (fundingRequest == null)
                throw new ApiException(400, "Missing required parameter 'fundingRequest' when calling FundingApi->CreateFundingUsingPost");

            var localVarPath = "/nucleus/v1/funding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingRequest != null && fundingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fundingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fundingRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFundingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Funding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Funding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Funding)));
        }

        /// <summary>
        /// Create a funding request Create a new funding request for an account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>Task of Funding</returns>
        public async System.Threading.Tasks.Task<Funding> CreateFundingUsingPostAsync (Funding fundingRequest)
        {
             ApiResponse<Funding> localVarResponse = await CreateFundingUsingPostAsyncWithHttpInfo(fundingRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a funding request Create a new funding request for an account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingRequest">fundingRequest</param>
        /// <returns>Task of ApiResponse (Funding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Funding>> CreateFundingUsingPostAsyncWithHttpInfo (Funding fundingRequest)
        {
            // verify the required parameter 'fundingRequest' is set
            if (fundingRequest == null)
                throw new ApiException(400, "Missing required parameter 'fundingRequest' when calling FundingApi->CreateFundingUsingPost");

            var localVarPath = "/nucleus/v1/funding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingRequest != null && fundingRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fundingRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fundingRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFundingUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Funding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Funding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Funding)));
        }

        /// <summary>
        /// Create a transfer requests Create a new external account transfer for a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>ExternalAccountTransfer</returns>
        public ExternalAccountTransfer CreateTransferUsingPost (ExternalAccountTransfer externalAccountTransferRequest)
        {
             ApiResponse<ExternalAccountTransfer> localVarResponse = CreateTransferUsingPostWithHttpInfo(externalAccountTransferRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a transfer requests Create a new external account transfer for a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>ApiResponse of ExternalAccountTransfer</returns>
        public ApiResponse< ExternalAccountTransfer > CreateTransferUsingPostWithHttpInfo (ExternalAccountTransfer externalAccountTransferRequest)
        {
            // verify the required parameter 'externalAccountTransferRequest' is set
            if (externalAccountTransferRequest == null)
                throw new ApiException(400, "Missing required parameter 'externalAccountTransferRequest' when calling FundingApi->CreateTransferUsingPost");

            var localVarPath = "/nucleus/v1/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalAccountTransferRequest != null && externalAccountTransferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalAccountTransferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalAccountTransferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAccountTransfer)));
        }

        /// <summary>
        /// Create a transfer requests Create a new external account transfer for a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>Task of ExternalAccountTransfer</returns>
        public async System.Threading.Tasks.Task<ExternalAccountTransfer> CreateTransferUsingPostAsync (ExternalAccountTransfer externalAccountTransferRequest)
        {
             ApiResponse<ExternalAccountTransfer> localVarResponse = await CreateTransferUsingPostAsyncWithHttpInfo(externalAccountTransferRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a transfer requests Create a new external account transfer for a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalAccountTransferRequest">externalAccountTransferRequest</param>
        /// <returns>Task of ApiResponse (ExternalAccountTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalAccountTransfer>> CreateTransferUsingPostAsyncWithHttpInfo (ExternalAccountTransfer externalAccountTransferRequest)
        {
            // verify the required parameter 'externalAccountTransferRequest' is set
            if (externalAccountTransferRequest == null)
                throw new ApiException(400, "Missing required parameter 'externalAccountTransferRequest' when calling FundingApi->CreateTransferUsingPost");

            var localVarPath = "/nucleus/v1/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (externalAccountTransferRequest != null && externalAccountTransferRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(externalAccountTransferRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = externalAccountTransferRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTransferUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAccountTransfer)));
        }

        /// <summary>
        /// Delete a bank link Permanently delete a bank link defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns></returns>
        public void DeleteBankLinkUsingDelete (Guid? bankLinkId)
        {
             DeleteBankLinkUsingDeleteWithHttpInfo(bankLinkId);
        }

        /// <summary>
        /// Delete a bank link Permanently delete a bank link defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteBankLinkUsingDeleteWithHttpInfo (Guid? bankLinkId)
        {
            // verify the required parameter 'bankLinkId' is set
            if (bankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkId' when calling FundingApi->DeleteBankLinkUsingDelete");

            var localVarPath = "/nucleus/v1/bank_link/{bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkId != null) localVarPathParams.Add("bank_link_id", this.Configuration.ApiClient.ParameterToString(bankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a bank link Permanently delete a bank link defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBankLinkUsingDeleteAsync (Guid? bankLinkId)
        {
             await DeleteBankLinkUsingDeleteAsyncWithHttpInfo(bankLinkId);

        }

        /// <summary>
        /// Delete a bank link Permanently delete a bank link defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBankLinkUsingDeleteAsyncWithHttpInfo (Guid? bankLinkId)
        {
            // verify the required parameter 'bankLinkId' is set
            if (bankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkId' when calling FundingApi->DeleteBankLinkUsingDelete");

            var localVarPath = "/nucleus/v1/bank_link/{bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkId != null) localVarPathParams.Add("bank_link_id", this.Configuration.ApiClient.ParameterToString(bankLinkId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBankLinkUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a funding transaction request Permanently delete a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns></returns>
        public void DeleteFundingTransactionUsingDelete (Guid? fundingTransactionId)
        {
             DeleteFundingTransactionUsingDeleteWithHttpInfo(fundingTransactionId);
        }

        /// <summary>
        /// Delete a funding transaction request Permanently delete a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFundingTransactionUsingDeleteWithHttpInfo (Guid? fundingTransactionId)
        {
            // verify the required parameter 'fundingTransactionId' is set
            if (fundingTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionId' when calling FundingApi->DeleteFundingTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionId != null) localVarPathParams.Add("funding_transaction_id", this.Configuration.ApiClient.ParameterToString(fundingTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFundingTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a funding transaction request Permanently delete a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFundingTransactionUsingDeleteAsync (Guid? fundingTransactionId)
        {
             await DeleteFundingTransactionUsingDeleteAsyncWithHttpInfo(fundingTransactionId);

        }

        /// <summary>
        /// Delete a funding transaction request Permanently delete a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFundingTransactionUsingDeleteAsyncWithHttpInfo (Guid? fundingTransactionId)
        {
            // verify the required parameter 'fundingTransactionId' is set
            if (fundingTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionId' when calling FundingApi->DeleteFundingTransactionUsingDelete");

            var localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionId != null) localVarPathParams.Add("funding_transaction_id", this.Configuration.ApiClient.ParameterToString(fundingTransactionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFundingTransactionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a funding request Permanently delete a funding request defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns></returns>
        public void DeleteFundingUsingDelete (Guid? fundingId)
        {
             DeleteFundingUsingDeleteWithHttpInfo(fundingId);
        }

        /// <summary>
        /// Delete a funding request Permanently delete a funding request defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFundingUsingDeleteWithHttpInfo (Guid? fundingId)
        {
            // verify the required parameter 'fundingId' is set
            if (fundingId == null)
                throw new ApiException(400, "Missing required parameter 'fundingId' when calling FundingApi->DeleteFundingUsingDelete");

            var localVarPath = "/nucleus/v1/funding/{funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingId != null) localVarPathParams.Add("funding_id", this.Configuration.ApiClient.ParameterToString(fundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFundingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a funding request Permanently delete a funding request defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFundingUsingDeleteAsync (Guid? fundingId)
        {
             await DeleteFundingUsingDeleteAsyncWithHttpInfo(fundingId);

        }

        /// <summary>
        /// Delete a funding request Permanently delete a funding request defined for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFundingUsingDeleteAsyncWithHttpInfo (Guid? fundingId)
        {
            // verify the required parameter 'fundingId' is set
            if (fundingId == null)
                throw new ApiException(400, "Missing required parameter 'fundingId' when calling FundingApi->DeleteFundingUsingDelete");

            var localVarPath = "/nucleus/v1/funding/{funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingId != null) localVarPathParams.Add("funding_id", this.Configuration.ApiClient.ParameterToString(fundingId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFundingUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a transfer request Permanently delete a external account transfer from a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns></returns>
        public void DeleteTransferUsingDelete (Guid? transferId)
        {
             DeleteTransferUsingDeleteWithHttpInfo(transferId);
        }

        /// <summary>
        /// Delete a transfer request Permanently delete a external account transfer from a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTransferUsingDeleteWithHttpInfo (Guid? transferId)
        {
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling FundingApi->DeleteTransferUsingDelete");

            var localVarPath = "/nucleus/v1/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a transfer request Permanently delete a external account transfer from a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTransferUsingDeleteAsync (Guid? transferId)
        {
             await DeleteTransferUsingDeleteAsyncWithHttpInfo(transferId);

        }

        /// <summary>
        /// Delete a transfer request Permanently delete a external account transfer from a client account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTransferUsingDeleteAsyncWithHttpInfo (Guid? transferId)
        {
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling FundingApi->DeleteTransferUsingDelete");

            var localVarPath = "/nucleus/v1/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTransferUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all bank links Get all bank links defined for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageBankLink</returns>
        public PageBankLink GetBankLinkAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBankLink> localVarResponse = GetBankLinkAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all bank links Get all bank links defined for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageBankLink</returns>
        public ApiResponse< PageBankLink > GetBankLinkAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankLinkAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBankLink)));
        }

        /// <summary>
        /// List all bank links Get all bank links defined for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageBankLink</returns>
        public async System.Threading.Tasks.Task<PageBankLink> GetBankLinkAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageBankLink> localVarResponse = await GetBankLinkAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all bank links Get all bank links defined for all clients defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageBankLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageBankLink>> GetBankLinkAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankLinkAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageBankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageBankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageBankLink)));
        }

        /// <summary>
        /// Retrieve a bank link Retrieve the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>BankLink</returns>
        public BankLink GetBankLinkUsingGet (Guid? bankLinkId, string currencyConversion = null)
        {
             ApiResponse<BankLink> localVarResponse = GetBankLinkUsingGetWithHttpInfo(bankLinkId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a bank link Retrieve the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of BankLink</returns>
        public ApiResponse< BankLink > GetBankLinkUsingGetWithHttpInfo (Guid? bankLinkId, string currencyConversion = null)
        {
            // verify the required parameter 'bankLinkId' is set
            if (bankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkId' when calling FundingApi->GetBankLinkUsingGet");

            var localVarPath = "/nucleus/v1/bank_link/{bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkId != null) localVarPathParams.Add("bank_link_id", this.Configuration.ApiClient.ParameterToString(bankLinkId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankLink)));
        }

        /// <summary>
        /// Retrieve a bank link Retrieve the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of BankLink</returns>
        public async System.Threading.Tasks.Task<BankLink> GetBankLinkUsingGetAsync (Guid? bankLinkId, string currencyConversion = null)
        {
             ApiResponse<BankLink> localVarResponse = await GetBankLinkUsingGetAsyncWithHttpInfo(bankLinkId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a bank link Retrieve the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (BankLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankLink>> GetBankLinkUsingGetAsyncWithHttpInfo (Guid? bankLinkId, string currencyConversion = null)
        {
            // verify the required parameter 'bankLinkId' is set
            if (bankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkId' when calling FundingApi->GetBankLinkUsingGet");

            var localVarPath = "/nucleus/v1/bank_link/{bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkId != null) localVarPathParams.Add("bank_link_id", this.Configuration.ApiClient.ParameterToString(bankLinkId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBankLinkUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankLink)));
        }

        /// <summary>
        /// List all funding requests  Get the information for all funding requests defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFunding</returns>
        public PageFunding GetFundingAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFunding> localVarResponse = GetFundingAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all funding requests  Get the information for all funding requests defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFunding</returns>
        public ApiResponse< PageFunding > GetFundingAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/funding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFunding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFunding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFunding)));
        }

        /// <summary>
        /// List all funding requests  Get the information for all funding requests defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFunding</returns>
        public async System.Threading.Tasks.Task<PageFunding> GetFundingAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFunding> localVarResponse = await GetFundingAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all funding requests  Get the information for all funding requests defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFunding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageFunding>> GetFundingAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/funding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFunding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFunding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFunding)));
        }

        /// <summary>
        /// List all funding transaction requests Get the information for all funding transaction requests for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageFundingTransaction</returns>
        public PageFundingTransaction GetFundingTransactionAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFundingTransaction> localVarResponse = GetFundingTransactionAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all funding transaction requests Get the information for all funding transaction requests for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageFundingTransaction</returns>
        public ApiResponse< PageFundingTransaction > GetFundingTransactionAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/funding_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFundingTransaction)));
        }

        /// <summary>
        /// List all funding transaction requests Get the information for all funding transaction requests for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageFundingTransaction</returns>
        public async System.Threading.Tasks.Task<PageFundingTransaction> GetFundingTransactionAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageFundingTransaction> localVarResponse = await GetFundingTransactionAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all funding transaction requests Get the information for all funding transaction requests for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageFundingTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageFundingTransaction>> GetFundingTransactionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/funding_transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageFundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageFundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageFundingTransaction)));
        }

        /// <summary>
        /// Retrieve a funding transaction request Retrieve the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>FundingTransaction</returns>
        public FundingTransaction GetFundingTransactionUsingGet (Guid? fundingTransactionId, string currencyConversion = null)
        {
             ApiResponse<FundingTransaction> localVarResponse = GetFundingTransactionUsingGetWithHttpInfo(fundingTransactionId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a funding transaction request Retrieve the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of FundingTransaction</returns>
        public ApiResponse< FundingTransaction > GetFundingTransactionUsingGetWithHttpInfo (Guid? fundingTransactionId, string currencyConversion = null)
        {
            // verify the required parameter 'fundingTransactionId' is set
            if (fundingTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionId' when calling FundingApi->GetFundingTransactionUsingGet");

            var localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionId != null) localVarPathParams.Add("funding_transaction_id", this.Configuration.ApiClient.ParameterToString(fundingTransactionId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FundingTransaction)));
        }

        /// <summary>
        /// Retrieve a funding transaction request Retrieve the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of FundingTransaction</returns>
        public async System.Threading.Tasks.Task<FundingTransaction> GetFundingTransactionUsingGetAsync (Guid? fundingTransactionId, string currencyConversion = null)
        {
             ApiResponse<FundingTransaction> localVarResponse = await GetFundingTransactionUsingGetAsyncWithHttpInfo(fundingTransactionId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a funding transaction request Retrieve the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (FundingTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FundingTransaction>> GetFundingTransactionUsingGetAsyncWithHttpInfo (Guid? fundingTransactionId, string currencyConversion = null)
        {
            // verify the required parameter 'fundingTransactionId' is set
            if (fundingTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionId' when calling FundingApi->GetFundingTransactionUsingGet");

            var localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionId != null) localVarPathParams.Add("funding_transaction_id", this.Configuration.ApiClient.ParameterToString(fundingTransactionId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingTransactionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FundingTransaction)));
        }

        /// <summary>
        /// Retrieve a funding request Retrieve the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Funding</returns>
        public Funding GetFundingUsingGet (Guid? fundingId, string currencyConversion = null)
        {
             ApiResponse<Funding> localVarResponse = GetFundingUsingGetWithHttpInfo(fundingId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a funding request Retrieve the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of Funding</returns>
        public ApiResponse< Funding > GetFundingUsingGetWithHttpInfo (Guid? fundingId, string currencyConversion = null)
        {
            // verify the required parameter 'fundingId' is set
            if (fundingId == null)
                throw new ApiException(400, "Missing required parameter 'fundingId' when calling FundingApi->GetFundingUsingGet");

            var localVarPath = "/nucleus/v1/funding/{funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingId != null) localVarPathParams.Add("funding_id", this.Configuration.ApiClient.ParameterToString(fundingId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Funding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Funding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Funding)));
        }

        /// <summary>
        /// Retrieve a funding request Retrieve the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of Funding</returns>
        public async System.Threading.Tasks.Task<Funding> GetFundingUsingGetAsync (Guid? fundingId, string currencyConversion = null)
        {
             ApiResponse<Funding> localVarResponse = await GetFundingUsingGetAsyncWithHttpInfo(fundingId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a funding request Retrieve the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingId">UUID funding_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (Funding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Funding>> GetFundingUsingGetAsyncWithHttpInfo (Guid? fundingId, string currencyConversion = null)
        {
            // verify the required parameter 'fundingId' is set
            if (fundingId == null)
                throw new ApiException(400, "Missing required parameter 'fundingId' when calling FundingApi->GetFundingUsingGet");

            var localVarPath = "/nucleus/v1/funding/{funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingId != null) localVarPathParams.Add("funding_id", this.Configuration.ApiClient.ParameterToString(fundingId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFundingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Funding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Funding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Funding)));
        }

        /// <summary>
        /// List all transfer requests Get the information for all external account transfers defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageExternalAccountTransfer</returns>
        public PageExternalAccountTransfer GetTransferAllUsingGet (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageExternalAccountTransfer> localVarResponse = GetTransferAllUsingGetWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all transfer requests Get the information for all external account transfers defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageExternalAccountTransfer</returns>
        public ApiResponse< PageExternalAccountTransfer > GetTransferAllUsingGetWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageExternalAccountTransfer)));
        }

        /// <summary>
        /// List all transfer requests Get the information for all external account transfers defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageExternalAccountTransfer</returns>
        public async System.Threading.Tasks.Task<PageExternalAccountTransfer> GetTransferAllUsingGetAsync (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageExternalAccountTransfer> localVarResponse = await GetTransferAllUsingGetAsyncWithHttpInfo(ascending, currencyConversion, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all transfer requests Get the information for all external account transfers defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageExternalAccountTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageExternalAccountTransfer>> GetTransferAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string currencyConversion = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageExternalAccountTransfer)));
        }

        /// <summary>
        /// Retrieve a transfer request Retrieve the information for a external account transfer for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ExternalAccountTransfer</returns>
        public ExternalAccountTransfer GetTransferUsingGet (Guid? transferId, string currencyConversion = null)
        {
             ApiResponse<ExternalAccountTransfer> localVarResponse = GetTransferUsingGetWithHttpInfo(transferId, currencyConversion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a transfer request Retrieve the information for a external account transfer for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>ApiResponse of ExternalAccountTransfer</returns>
        public ApiResponse< ExternalAccountTransfer > GetTransferUsingGetWithHttpInfo (Guid? transferId, string currencyConversion = null)
        {
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling FundingApi->GetTransferUsingGet");

            var localVarPath = "/nucleus/v1/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAccountTransfer)));
        }

        /// <summary>
        /// Retrieve a transfer request Retrieve the information for a external account transfer for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ExternalAccountTransfer</returns>
        public async System.Threading.Tasks.Task<ExternalAccountTransfer> GetTransferUsingGetAsync (Guid? transferId, string currencyConversion = null)
        {
             ApiResponse<ExternalAccountTransfer> localVarResponse = await GetTransferUsingGetAsyncWithHttpInfo(transferId, currencyConversion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a transfer request Retrieve the information for a external account transfer for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <param name="currencyConversion">USD (optional)</param>
        /// <returns>Task of ApiResponse (ExternalAccountTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalAccountTransfer>> GetTransferUsingGetAsyncWithHttpInfo (Guid? transferId, string currencyConversion = null)
        {
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling FundingApi->GetTransferUsingGet");

            var localVarPath = "/nucleus/v1/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransferUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAccountTransfer)));
        }

        /// <summary>
        /// Update list of bank link Update bank link list for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>List&lt;BankLink&gt;</returns>
        public List<BankLink> UpdateBankLinkBulkUsingPut (List<Object> bankLinkList)
        {
             ApiResponse<List<BankLink>> localVarResponse = UpdateBankLinkBulkUsingPutWithHttpInfo(bankLinkList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update list of bank link Update bank link list for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>ApiResponse of List&lt;BankLink&gt;</returns>
        public ApiResponse< List<BankLink> > UpdateBankLinkBulkUsingPutWithHttpInfo (List<Object> bankLinkList)
        {
            // verify the required parameter 'bankLinkList' is set
            if (bankLinkList == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkList' when calling FundingApi->UpdateBankLinkBulkUsingPut");

            var localVarPath = "/nucleus/v1/bulk_bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkList != null && bankLinkList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankLinkList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankLinkList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankLinkBulkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BankLink>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankLink>)));
        }

        /// <summary>
        /// Update list of bank link Update bank link list for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>Task of List&lt;BankLink&gt;</returns>
        public async System.Threading.Tasks.Task<List<BankLink>> UpdateBankLinkBulkUsingPutAsync (List<Object> bankLinkList)
        {
             ApiResponse<List<BankLink>> localVarResponse = await UpdateBankLinkBulkUsingPutAsyncWithHttpInfo(bankLinkList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update list of bank link Update bank link list for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLinkList">bankLinkList</param>
        /// <returns>Task of ApiResponse (List&lt;BankLink&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BankLink>>> UpdateBankLinkBulkUsingPutAsyncWithHttpInfo (List<Object> bankLinkList)
        {
            // verify the required parameter 'bankLinkList' is set
            if (bankLinkList == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkList' when calling FundingApi->UpdateBankLinkBulkUsingPut");

            var localVarPath = "/nucleus/v1/bulk_bank_link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkList != null && bankLinkList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankLinkList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankLinkList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankLinkBulkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BankLink>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BankLink>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BankLink>)));
        }

        /// <summary>
        /// Update a bank link Update the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>BankLink</returns>
        public BankLink UpdateBankLinkUsingPut (Object bankLink, Guid? bankLinkId)
        {
             ApiResponse<BankLink> localVarResponse = UpdateBankLinkUsingPutWithHttpInfo(bankLink, bankLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a bank link Update the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>ApiResponse of BankLink</returns>
        public ApiResponse< BankLink > UpdateBankLinkUsingPutWithHttpInfo (Object bankLink, Guid? bankLinkId)
        {
            // verify the required parameter 'bankLink' is set
            if (bankLink == null)
                throw new ApiException(400, "Missing required parameter 'bankLink' when calling FundingApi->UpdateBankLinkUsingPut");
            // verify the required parameter 'bankLinkId' is set
            if (bankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkId' when calling FundingApi->UpdateBankLinkUsingPut");

            var localVarPath = "/nucleus/v1/bank_link/{bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkId != null) localVarPathParams.Add("bank_link_id", this.Configuration.ApiClient.ParameterToString(bankLinkId)); // path parameter
            if (bankLink != null && bankLink.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankLink); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankLink; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankLink)));
        }

        /// <summary>
        /// Update a bank link Update the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of BankLink</returns>
        public async System.Threading.Tasks.Task<BankLink> UpdateBankLinkUsingPutAsync (Object bankLink, Guid? bankLinkId)
        {
             ApiResponse<BankLink> localVarResponse = await UpdateBankLinkUsingPutAsyncWithHttpInfo(bankLink, bankLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a bank link Update the information for a bank link for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bankLink">bank_link</param>
        /// <param name="bankLinkId">UUID bank_link_id</param>
        /// <returns>Task of ApiResponse (BankLink)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankLink>> UpdateBankLinkUsingPutAsyncWithHttpInfo (Object bankLink, Guid? bankLinkId)
        {
            // verify the required parameter 'bankLink' is set
            if (bankLink == null)
                throw new ApiException(400, "Missing required parameter 'bankLink' when calling FundingApi->UpdateBankLinkUsingPut");
            // verify the required parameter 'bankLinkId' is set
            if (bankLinkId == null)
                throw new ApiException(400, "Missing required parameter 'bankLinkId' when calling FundingApi->UpdateBankLinkUsingPut");

            var localVarPath = "/nucleus/v1/bank_link/{bank_link_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bankLinkId != null) localVarPathParams.Add("bank_link_id", this.Configuration.ApiClient.ParameterToString(bankLinkId)); // path parameter
            if (bankLink != null && bankLink.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankLink); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankLink; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBankLinkUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankLink>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BankLink) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankLink)));
        }

        /// <summary>
        /// Update a funding transaction request Update the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>FundingTransaction</returns>
        public FundingTransaction UpdateFundingTransactionUsingPut (Object fundingTransaction, Guid? fundingTransactionId)
        {
             ApiResponse<FundingTransaction> localVarResponse = UpdateFundingTransactionUsingPutWithHttpInfo(fundingTransaction, fundingTransactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a funding transaction request Update the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>ApiResponse of FundingTransaction</returns>
        public ApiResponse< FundingTransaction > UpdateFundingTransactionUsingPutWithHttpInfo (Object fundingTransaction, Guid? fundingTransactionId)
        {
            // verify the required parameter 'fundingTransaction' is set
            if (fundingTransaction == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransaction' when calling FundingApi->UpdateFundingTransactionUsingPut");
            // verify the required parameter 'fundingTransactionId' is set
            if (fundingTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionId' when calling FundingApi->UpdateFundingTransactionUsingPut");

            var localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionId != null) localVarPathParams.Add("funding_transaction_id", this.Configuration.ApiClient.ParameterToString(fundingTransactionId)); // path parameter
            if (fundingTransaction != null && fundingTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fundingTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fundingTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFundingTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FundingTransaction)));
        }

        /// <summary>
        /// Update a funding transaction request Update the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of FundingTransaction</returns>
        public async System.Threading.Tasks.Task<FundingTransaction> UpdateFundingTransactionUsingPutAsync (Object fundingTransaction, Guid? fundingTransactionId)
        {
             ApiResponse<FundingTransaction> localVarResponse = await UpdateFundingTransactionUsingPutAsyncWithHttpInfo(fundingTransaction, fundingTransactionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a funding transaction request Update the information for a funding transaction request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fundingTransaction">fundingTransaction</param>
        /// <param name="fundingTransactionId">UUID funding_transaction_id</param>
        /// <returns>Task of ApiResponse (FundingTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FundingTransaction>> UpdateFundingTransactionUsingPutAsyncWithHttpInfo (Object fundingTransaction, Guid? fundingTransactionId)
        {
            // verify the required parameter 'fundingTransaction' is set
            if (fundingTransaction == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransaction' when calling FundingApi->UpdateFundingTransactionUsingPut");
            // verify the required parameter 'fundingTransactionId' is set
            if (fundingTransactionId == null)
                throw new ApiException(400, "Missing required parameter 'fundingTransactionId' when calling FundingApi->UpdateFundingTransactionUsingPut");

            var localVarPath = "/nucleus/v1/funding_transaction/{funding_transaction_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingTransactionId != null) localVarPathParams.Add("funding_transaction_id", this.Configuration.ApiClient.ParameterToString(fundingTransactionId)); // path parameter
            if (fundingTransaction != null && fundingTransaction.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fundingTransaction); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fundingTransaction; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFundingTransactionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FundingTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FundingTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FundingTransaction)));
        }

        /// <summary>
        /// Update a funding request Update the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Funding</returns>
        public Funding UpdateFundingUsingPut (Object funding, Guid? fundingId)
        {
             ApiResponse<Funding> localVarResponse = UpdateFundingUsingPutWithHttpInfo(funding, fundingId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a funding request Update the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>ApiResponse of Funding</returns>
        public ApiResponse< Funding > UpdateFundingUsingPutWithHttpInfo (Object funding, Guid? fundingId)
        {
            // verify the required parameter 'funding' is set
            if (funding == null)
                throw new ApiException(400, "Missing required parameter 'funding' when calling FundingApi->UpdateFundingUsingPut");
            // verify the required parameter 'fundingId' is set
            if (fundingId == null)
                throw new ApiException(400, "Missing required parameter 'fundingId' when calling FundingApi->UpdateFundingUsingPut");

            var localVarPath = "/nucleus/v1/funding/{funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingId != null) localVarPathParams.Add("funding_id", this.Configuration.ApiClient.ParameterToString(fundingId)); // path parameter
            if (funding != null && funding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(funding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = funding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFundingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Funding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Funding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Funding)));
        }

        /// <summary>
        /// Update a funding request Update the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of Funding</returns>
        public async System.Threading.Tasks.Task<Funding> UpdateFundingUsingPutAsync (Object funding, Guid? fundingId)
        {
             ApiResponse<Funding> localVarResponse = await UpdateFundingUsingPutAsyncWithHttpInfo(funding, fundingId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a funding request Update the information for a funding request for an account.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="funding">funding</param>
        /// <param name="fundingId">UUID funding_id</param>
        /// <returns>Task of ApiResponse (Funding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Funding>> UpdateFundingUsingPutAsyncWithHttpInfo (Object funding, Guid? fundingId)
        {
            // verify the required parameter 'funding' is set
            if (funding == null)
                throw new ApiException(400, "Missing required parameter 'funding' when calling FundingApi->UpdateFundingUsingPut");
            // verify the required parameter 'fundingId' is set
            if (fundingId == null)
                throw new ApiException(400, "Missing required parameter 'fundingId' when calling FundingApi->UpdateFundingUsingPut");

            var localVarPath = "/nucleus/v1/funding/{funding_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fundingId != null) localVarPathParams.Add("funding_id", this.Configuration.ApiClient.ParameterToString(fundingId)); // path parameter
            if (funding != null && funding.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(funding); // http body (model) parameter
            }
            else
            {
                localVarPostBody = funding; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateFundingUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Funding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Funding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Funding)));
        }

        /// <summary>
        /// Update a transfer request Update the information for a external account transfer for a client account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>ExternalAccountTransfer</returns>
        public ExternalAccountTransfer UpdateTransferUsingPut (Object transfer, Guid? transferId)
        {
             ApiResponse<ExternalAccountTransfer> localVarResponse = UpdateTransferUsingPutWithHttpInfo(transfer, transferId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a transfer request Update the information for a external account transfer for a client account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>ApiResponse of ExternalAccountTransfer</returns>
        public ApiResponse< ExternalAccountTransfer > UpdateTransferUsingPutWithHttpInfo (Object transfer, Guid? transferId)
        {
            // verify the required parameter 'transfer' is set
            if (transfer == null)
                throw new ApiException(400, "Missing required parameter 'transfer' when calling FundingApi->UpdateTransferUsingPut");
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling FundingApi->UpdateTransferUsingPut");

            var localVarPath = "/nucleus/v1/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter
            if (transfer != null && transfer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transfer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transfer; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransferUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAccountTransfer)));
        }

        /// <summary>
        /// Update a transfer request Update the information for a external account transfer for a client account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of ExternalAccountTransfer</returns>
        public async System.Threading.Tasks.Task<ExternalAccountTransfer> UpdateTransferUsingPutAsync (Object transfer, Guid? transferId)
        {
             ApiResponse<ExternalAccountTransfer> localVarResponse = await UpdateTransferUsingPutAsyncWithHttpInfo(transfer, transferId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a transfer request Update the information for a external account transfer for a client account. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transfer">transfer</param>
        /// <param name="transferId">UUID external_account_transfer_id</param>
        /// <returns>Task of ApiResponse (ExternalAccountTransfer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalAccountTransfer>> UpdateTransferUsingPutAsyncWithHttpInfo (Object transfer, Guid? transferId)
        {
            // verify the required parameter 'transfer' is set
            if (transfer == null)
                throw new ApiException(400, "Missing required parameter 'transfer' when calling FundingApi->UpdateTransferUsingPut");
            // verify the required parameter 'transferId' is set
            if (transferId == null)
                throw new ApiException(400, "Missing required parameter 'transferId' when calling FundingApi->UpdateTransferUsingPut");

            var localVarPath = "/nucleus/v1/transfer/{transfer_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transferId != null) localVarPathParams.Add("transfer_id", this.Configuration.ApiClient.ParameterToString(transferId)); // path parameter
            if (transfer != null && transfer.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(transfer); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transfer; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTransferUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalAccountTransfer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalAccountTransfer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalAccountTransfer)));
        }

    }
}
