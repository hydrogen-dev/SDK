/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Check Object
    /// </summary>
    [DataContract]
    public partial class Check :  IEquatable<Check>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Check" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Check() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Check" /> class.
        /// </summary>
        /// <param name="checkAmount">checkAmount.</param>
        /// <param name="checkImages">checkImages.</param>
        /// <param name="checkNumber">checkNumber (required).</param>
        public Check(double? checkAmount = default(double?), List<CheckImages> checkImages = default(List<CheckImages>), string checkNumber = default(string))
        {
            // to ensure "checkNumber" is required (not null)
            if (checkNumber == null)
            {
                throw new InvalidDataException("checkNumber is a required property for Check and cannot be null");
            }
            else
            {
                this.CheckNumber = checkNumber;
            }
            this.CheckAmount = checkAmount;
            this.CheckImages = checkImages;
        }
        
        /// <summary>
        /// checkAmount
        /// </summary>
        /// <value>checkAmount</value>
        [DataMember(Name="check_amount", EmitDefaultValue=false)]
        public double? CheckAmount { get; set; }

        /// <summary>
        /// checkImages
        /// </summary>
        /// <value>checkImages</value>
        [DataMember(Name="check_images", EmitDefaultValue=false)]
        public List<CheckImages> CheckImages { get; set; }

        /// <summary>
        /// checkNumber
        /// </summary>
        /// <value>checkNumber</value>
        [DataMember(Name="check_number", EmitDefaultValue=false)]
        public string CheckNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Check {\n");
            sb.Append("  CheckAmount: ").Append(CheckAmount).Append("\n");
            sb.Append("  CheckImages: ").Append(CheckImages).Append("\n");
            sb.Append("  CheckNumber: ").Append(CheckNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Check);
        }

        /// <summary>
        /// Returns true if Check instances are equal
        /// </summary>
        /// <param name="input">Instance of Check to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Check input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CheckAmount == input.CheckAmount ||
                    (this.CheckAmount != null &&
                    this.CheckAmount.Equals(input.CheckAmount))
                ) && 
                (
                    this.CheckImages == input.CheckImages ||
                    this.CheckImages != null &&
                    this.CheckImages.SequenceEqual(input.CheckImages)
                ) && 
                (
                    this.CheckNumber == input.CheckNumber ||
                    (this.CheckNumber != null &&
                    this.CheckNumber.Equals(input.CheckNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CheckAmount != null)
                    hashCode = hashCode * 59 + this.CheckAmount.GetHashCode();
                if (this.CheckImages != null)
                    hashCode = hashCode * 59 + this.CheckImages.GetHashCode();
                if (this.CheckNumber != null)
                    hashCode = hashCode * 59 + this.CheckNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
