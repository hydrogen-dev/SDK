# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class AllocationCompositionAggregatedVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocation_composition_create_date': 'datetime',
        'allocation_composition_date': 'date',
        'allocation_composition_id': 'str',
        'allocation_composition_update_date': 'datetime',
        'model_category': 'str',
        'model_current_weight': 'float',
        'model_description': 'str',
        'model_holdings': 'list[AllocationCompositionModelHoldingsVO]',
        'model_id': 'str',
        'model_name': 'str',
        'model_secondary_id': 'str',
        'model_strategic_weight': 'float'
    }

    attribute_map = {
        'allocation_composition_create_date': 'allocation_composition_create_date',
        'allocation_composition_date': 'allocation_composition_date',
        'allocation_composition_id': 'allocation_composition_id',
        'allocation_composition_update_date': 'allocation_composition_update_date',
        'model_category': 'model_category',
        'model_current_weight': 'model_current_weight',
        'model_description': 'model_description',
        'model_holdings': 'model_holdings',
        'model_id': 'model_id',
        'model_name': 'model_name',
        'model_secondary_id': 'model_secondary_id',
        'model_strategic_weight': 'model_strategic_weight'
    }

    def __init__(self, allocation_composition_create_date=None, allocation_composition_date=None, allocation_composition_id=None, allocation_composition_update_date=None, model_category=None, model_current_weight=None, model_description=None, model_holdings=None, model_id=None, model_name=None, model_secondary_id=None, model_strategic_weight=None, _configuration=None):  # noqa: E501
        """AllocationCompositionAggregatedVO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allocation_composition_create_date = None
        self._allocation_composition_date = None
        self._allocation_composition_id = None
        self._allocation_composition_update_date = None
        self._model_category = None
        self._model_current_weight = None
        self._model_description = None
        self._model_holdings = None
        self._model_id = None
        self._model_name = None
        self._model_secondary_id = None
        self._model_strategic_weight = None
        self.discriminator = None

        if allocation_composition_create_date is not None:
            self.allocation_composition_create_date = allocation_composition_create_date
        if allocation_composition_date is not None:
            self.allocation_composition_date = allocation_composition_date
        if allocation_composition_id is not None:
            self.allocation_composition_id = allocation_composition_id
        if allocation_composition_update_date is not None:
            self.allocation_composition_update_date = allocation_composition_update_date
        if model_category is not None:
            self.model_category = model_category
        if model_current_weight is not None:
            self.model_current_weight = model_current_weight
        if model_description is not None:
            self.model_description = model_description
        if model_holdings is not None:
            self.model_holdings = model_holdings
        if model_id is not None:
            self.model_id = model_id
        if model_name is not None:
            self.model_name = model_name
        if model_secondary_id is not None:
            self.model_secondary_id = model_secondary_id
        if model_strategic_weight is not None:
            self.model_strategic_weight = model_strategic_weight

    @property
    def allocation_composition_create_date(self):
        """Gets the allocation_composition_create_date of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The allocation_composition_create_date of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: datetime
        """
        return self._allocation_composition_create_date

    @allocation_composition_create_date.setter
    def allocation_composition_create_date(self, allocation_composition_create_date):
        """Sets the allocation_composition_create_date of this AllocationCompositionAggregatedVO.


        :param allocation_composition_create_date: The allocation_composition_create_date of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: datetime
        """

        self._allocation_composition_create_date = allocation_composition_create_date

    @property
    def allocation_composition_date(self):
        """Gets the allocation_composition_date of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The allocation_composition_date of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: date
        """
        return self._allocation_composition_date

    @allocation_composition_date.setter
    def allocation_composition_date(self, allocation_composition_date):
        """Sets the allocation_composition_date of this AllocationCompositionAggregatedVO.


        :param allocation_composition_date: The allocation_composition_date of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: date
        """

        self._allocation_composition_date = allocation_composition_date

    @property
    def allocation_composition_id(self):
        """Gets the allocation_composition_id of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The allocation_composition_id of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._allocation_composition_id

    @allocation_composition_id.setter
    def allocation_composition_id(self, allocation_composition_id):
        """Sets the allocation_composition_id of this AllocationCompositionAggregatedVO.


        :param allocation_composition_id: The allocation_composition_id of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: str
        """

        self._allocation_composition_id = allocation_composition_id

    @property
    def allocation_composition_update_date(self):
        """Gets the allocation_composition_update_date of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The allocation_composition_update_date of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: datetime
        """
        return self._allocation_composition_update_date

    @allocation_composition_update_date.setter
    def allocation_composition_update_date(self, allocation_composition_update_date):
        """Sets the allocation_composition_update_date of this AllocationCompositionAggregatedVO.


        :param allocation_composition_update_date: The allocation_composition_update_date of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: datetime
        """

        self._allocation_composition_update_date = allocation_composition_update_date

    @property
    def model_category(self):
        """Gets the model_category of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_category of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._model_category

    @model_category.setter
    def model_category(self, model_category):
        """Sets the model_category of this AllocationCompositionAggregatedVO.


        :param model_category: The model_category of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: str
        """

        self._model_category = model_category

    @property
    def model_current_weight(self):
        """Gets the model_current_weight of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_current_weight of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: float
        """
        return self._model_current_weight

    @model_current_weight.setter
    def model_current_weight(self, model_current_weight):
        """Sets the model_current_weight of this AllocationCompositionAggregatedVO.


        :param model_current_weight: The model_current_weight of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: float
        """

        self._model_current_weight = model_current_weight

    @property
    def model_description(self):
        """Gets the model_description of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_description of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._model_description

    @model_description.setter
    def model_description(self, model_description):
        """Sets the model_description of this AllocationCompositionAggregatedVO.


        :param model_description: The model_description of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: str
        """

        self._model_description = model_description

    @property
    def model_holdings(self):
        """Gets the model_holdings of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_holdings of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: list[AllocationCompositionModelHoldingsVO]
        """
        return self._model_holdings

    @model_holdings.setter
    def model_holdings(self, model_holdings):
        """Sets the model_holdings of this AllocationCompositionAggregatedVO.


        :param model_holdings: The model_holdings of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: list[AllocationCompositionModelHoldingsVO]
        """

        self._model_holdings = model_holdings

    @property
    def model_id(self):
        """Gets the model_id of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_id of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this AllocationCompositionAggregatedVO.


        :param model_id: The model_id of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def model_name(self):
        """Gets the model_name of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_name of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this AllocationCompositionAggregatedVO.


        :param model_name: The model_name of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def model_secondary_id(self):
        """Gets the model_secondary_id of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_secondary_id of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._model_secondary_id

    @model_secondary_id.setter
    def model_secondary_id(self, model_secondary_id):
        """Sets the model_secondary_id of this AllocationCompositionAggregatedVO.


        :param model_secondary_id: The model_secondary_id of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: str
        """

        self._model_secondary_id = model_secondary_id

    @property
    def model_strategic_weight(self):
        """Gets the model_strategic_weight of this AllocationCompositionAggregatedVO.  # noqa: E501


        :return: The model_strategic_weight of this AllocationCompositionAggregatedVO.  # noqa: E501
        :rtype: float
        """
        return self._model_strategic_weight

    @model_strategic_weight.setter
    def model_strategic_weight(self, model_strategic_weight):
        """Sets the model_strategic_weight of this AllocationCompositionAggregatedVO.


        :param model_strategic_weight: The model_strategic_weight of this AllocationCompositionAggregatedVO.  # noqa: E501
        :type: float
        """

        self._model_strategic_weight = model_strategic_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocationCompositionAggregatedVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocationCompositionAggregatedVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AllocationCompositionAggregatedVO):
            return True

        return self.to_dict() != other.to_dict()
