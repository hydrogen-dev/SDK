# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class ClientViewGoalData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounts': 'list[VAccountVO]',
        'accumulation_horizon': 'float',
        'decumulation_horizon': 'float',
        'goal_amount': 'float',
        'goal_asset_size_by_goal': 'float',
        'goal_asset_size_by_goal_date': 'date',
        'goal_category': 'str',
        'goal_create_date': 'datetime',
        'goal_id': 'str',
        'goal_name': 'str',
        'goal_type': 'str',
        'goal_update_date': 'datetime',
        'is_decumulation': 'bool',
        'portfolios': 'list[VPortfolioVO]'
    }

    attribute_map = {
        'accounts': 'accounts',
        'accumulation_horizon': 'accumulation_horizon',
        'decumulation_horizon': 'decumulation_horizon',
        'goal_amount': 'goal_amount',
        'goal_asset_size_by_goal': 'goal_asset_size_by_goal',
        'goal_asset_size_by_goal_date': 'goal_asset_size_by_goal_date',
        'goal_category': 'goal_category',
        'goal_create_date': 'goal_create_date',
        'goal_id': 'goal_id',
        'goal_name': 'goal_name',
        'goal_type': 'goal_type',
        'goal_update_date': 'goal_update_date',
        'is_decumulation': 'is_decumulation',
        'portfolios': 'portfolios'
    }

    def __init__(self, accounts=None, accumulation_horizon=None, decumulation_horizon=None, goal_amount=None, goal_asset_size_by_goal=None, goal_asset_size_by_goal_date=None, goal_category=None, goal_create_date=None, goal_id=None, goal_name=None, goal_type=None, goal_update_date=None, is_decumulation=None, portfolios=None, _configuration=None):  # noqa: E501
        """ClientViewGoalData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accounts = None
        self._accumulation_horizon = None
        self._decumulation_horizon = None
        self._goal_amount = None
        self._goal_asset_size_by_goal = None
        self._goal_asset_size_by_goal_date = None
        self._goal_category = None
        self._goal_create_date = None
        self._goal_id = None
        self._goal_name = None
        self._goal_type = None
        self._goal_update_date = None
        self._is_decumulation = None
        self._portfolios = None
        self.discriminator = None

        if accounts is not None:
            self.accounts = accounts
        if accumulation_horizon is not None:
            self.accumulation_horizon = accumulation_horizon
        if decumulation_horizon is not None:
            self.decumulation_horizon = decumulation_horizon
        if goal_amount is not None:
            self.goal_amount = goal_amount
        if goal_asset_size_by_goal is not None:
            self.goal_asset_size_by_goal = goal_asset_size_by_goal
        if goal_asset_size_by_goal_date is not None:
            self.goal_asset_size_by_goal_date = goal_asset_size_by_goal_date
        if goal_category is not None:
            self.goal_category = goal_category
        if goal_create_date is not None:
            self.goal_create_date = goal_create_date
        if goal_id is not None:
            self.goal_id = goal_id
        if goal_name is not None:
            self.goal_name = goal_name
        if goal_type is not None:
            self.goal_type = goal_type
        if goal_update_date is not None:
            self.goal_update_date = goal_update_date
        if is_decumulation is not None:
            self.is_decumulation = is_decumulation
        if portfolios is not None:
            self.portfolios = portfolios

    @property
    def accounts(self):
        """Gets the accounts of this ClientViewGoalData.  # noqa: E501


        :return: The accounts of this ClientViewGoalData.  # noqa: E501
        :rtype: list[VAccountVO]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this ClientViewGoalData.


        :param accounts: The accounts of this ClientViewGoalData.  # noqa: E501
        :type: list[VAccountVO]
        """

        self._accounts = accounts

    @property
    def accumulation_horizon(self):
        """Gets the accumulation_horizon of this ClientViewGoalData.  # noqa: E501


        :return: The accumulation_horizon of this ClientViewGoalData.  # noqa: E501
        :rtype: float
        """
        return self._accumulation_horizon

    @accumulation_horizon.setter
    def accumulation_horizon(self, accumulation_horizon):
        """Sets the accumulation_horizon of this ClientViewGoalData.


        :param accumulation_horizon: The accumulation_horizon of this ClientViewGoalData.  # noqa: E501
        :type: float
        """

        self._accumulation_horizon = accumulation_horizon

    @property
    def decumulation_horizon(self):
        """Gets the decumulation_horizon of this ClientViewGoalData.  # noqa: E501


        :return: The decumulation_horizon of this ClientViewGoalData.  # noqa: E501
        :rtype: float
        """
        return self._decumulation_horizon

    @decumulation_horizon.setter
    def decumulation_horizon(self, decumulation_horizon):
        """Sets the decumulation_horizon of this ClientViewGoalData.


        :param decumulation_horizon: The decumulation_horizon of this ClientViewGoalData.  # noqa: E501
        :type: float
        """

        self._decumulation_horizon = decumulation_horizon

    @property
    def goal_amount(self):
        """Gets the goal_amount of this ClientViewGoalData.  # noqa: E501


        :return: The goal_amount of this ClientViewGoalData.  # noqa: E501
        :rtype: float
        """
        return self._goal_amount

    @goal_amount.setter
    def goal_amount(self, goal_amount):
        """Sets the goal_amount of this ClientViewGoalData.


        :param goal_amount: The goal_amount of this ClientViewGoalData.  # noqa: E501
        :type: float
        """

        self._goal_amount = goal_amount

    @property
    def goal_asset_size_by_goal(self):
        """Gets the goal_asset_size_by_goal of this ClientViewGoalData.  # noqa: E501


        :return: The goal_asset_size_by_goal of this ClientViewGoalData.  # noqa: E501
        :rtype: float
        """
        return self._goal_asset_size_by_goal

    @goal_asset_size_by_goal.setter
    def goal_asset_size_by_goal(self, goal_asset_size_by_goal):
        """Sets the goal_asset_size_by_goal of this ClientViewGoalData.


        :param goal_asset_size_by_goal: The goal_asset_size_by_goal of this ClientViewGoalData.  # noqa: E501
        :type: float
        """

        self._goal_asset_size_by_goal = goal_asset_size_by_goal

    @property
    def goal_asset_size_by_goal_date(self):
        """Gets the goal_asset_size_by_goal_date of this ClientViewGoalData.  # noqa: E501


        :return: The goal_asset_size_by_goal_date of this ClientViewGoalData.  # noqa: E501
        :rtype: date
        """
        return self._goal_asset_size_by_goal_date

    @goal_asset_size_by_goal_date.setter
    def goal_asset_size_by_goal_date(self, goal_asset_size_by_goal_date):
        """Sets the goal_asset_size_by_goal_date of this ClientViewGoalData.


        :param goal_asset_size_by_goal_date: The goal_asset_size_by_goal_date of this ClientViewGoalData.  # noqa: E501
        :type: date
        """

        self._goal_asset_size_by_goal_date = goal_asset_size_by_goal_date

    @property
    def goal_category(self):
        """Gets the goal_category of this ClientViewGoalData.  # noqa: E501


        :return: The goal_category of this ClientViewGoalData.  # noqa: E501
        :rtype: str
        """
        return self._goal_category

    @goal_category.setter
    def goal_category(self, goal_category):
        """Sets the goal_category of this ClientViewGoalData.


        :param goal_category: The goal_category of this ClientViewGoalData.  # noqa: E501
        :type: str
        """

        self._goal_category = goal_category

    @property
    def goal_create_date(self):
        """Gets the goal_create_date of this ClientViewGoalData.  # noqa: E501


        :return: The goal_create_date of this ClientViewGoalData.  # noqa: E501
        :rtype: datetime
        """
        return self._goal_create_date

    @goal_create_date.setter
    def goal_create_date(self, goal_create_date):
        """Sets the goal_create_date of this ClientViewGoalData.


        :param goal_create_date: The goal_create_date of this ClientViewGoalData.  # noqa: E501
        :type: datetime
        """

        self._goal_create_date = goal_create_date

    @property
    def goal_id(self):
        """Gets the goal_id of this ClientViewGoalData.  # noqa: E501


        :return: The goal_id of this ClientViewGoalData.  # noqa: E501
        :rtype: str
        """
        return self._goal_id

    @goal_id.setter
    def goal_id(self, goal_id):
        """Sets the goal_id of this ClientViewGoalData.


        :param goal_id: The goal_id of this ClientViewGoalData.  # noqa: E501
        :type: str
        """

        self._goal_id = goal_id

    @property
    def goal_name(self):
        """Gets the goal_name of this ClientViewGoalData.  # noqa: E501


        :return: The goal_name of this ClientViewGoalData.  # noqa: E501
        :rtype: str
        """
        return self._goal_name

    @goal_name.setter
    def goal_name(self, goal_name):
        """Sets the goal_name of this ClientViewGoalData.


        :param goal_name: The goal_name of this ClientViewGoalData.  # noqa: E501
        :type: str
        """

        self._goal_name = goal_name

    @property
    def goal_type(self):
        """Gets the goal_type of this ClientViewGoalData.  # noqa: E501


        :return: The goal_type of this ClientViewGoalData.  # noqa: E501
        :rtype: str
        """
        return self._goal_type

    @goal_type.setter
    def goal_type(self, goal_type):
        """Sets the goal_type of this ClientViewGoalData.


        :param goal_type: The goal_type of this ClientViewGoalData.  # noqa: E501
        :type: str
        """

        self._goal_type = goal_type

    @property
    def goal_update_date(self):
        """Gets the goal_update_date of this ClientViewGoalData.  # noqa: E501


        :return: The goal_update_date of this ClientViewGoalData.  # noqa: E501
        :rtype: datetime
        """
        return self._goal_update_date

    @goal_update_date.setter
    def goal_update_date(self, goal_update_date):
        """Sets the goal_update_date of this ClientViewGoalData.


        :param goal_update_date: The goal_update_date of this ClientViewGoalData.  # noqa: E501
        :type: datetime
        """

        self._goal_update_date = goal_update_date

    @property
    def is_decumulation(self):
        """Gets the is_decumulation of this ClientViewGoalData.  # noqa: E501


        :return: The is_decumulation of this ClientViewGoalData.  # noqa: E501
        :rtype: bool
        """
        return self._is_decumulation

    @is_decumulation.setter
    def is_decumulation(self, is_decumulation):
        """Sets the is_decumulation of this ClientViewGoalData.


        :param is_decumulation: The is_decumulation of this ClientViewGoalData.  # noqa: E501
        :type: bool
        """

        self._is_decumulation = is_decumulation

    @property
    def portfolios(self):
        """Gets the portfolios of this ClientViewGoalData.  # noqa: E501


        :return: The portfolios of this ClientViewGoalData.  # noqa: E501
        :rtype: list[VPortfolioVO]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this ClientViewGoalData.


        :param portfolios: The portfolios of this ClientViewGoalData.  # noqa: E501
        :type: list[VPortfolioVO]
        """

        self._portfolios = portfolios

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientViewGoalData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientViewGoalData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientViewGoalData):
            return True

        return self.to_dict() != other.to_dict()
