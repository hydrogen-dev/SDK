/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;

/**
 * WhatIfPortfolio
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-12T10:03:00.746-04:00")
public class WhatIfPortfolio {
  @SerializedName("current_portfolio_tickers")
  private List<String> currentPortfolioTickers = new ArrayList<String>();

  @SerializedName("current_portfolio_weights")
  private List<BigDecimal> currentPortfolioWeights = new ArrayList<BigDecimal>();

  @SerializedName("altered_portfolio_tickers")
  private List<String> alteredPortfolioTickers = null;

  @SerializedName("altered_portfolio_weights")
  private List<BigDecimal> alteredPortfolioWeights = new ArrayList<BigDecimal>();

  @SerializedName("start_date")
  private LocalDate startDate = null;

  @SerializedName("end_date")
  private LocalDate endDate = null;

  @SerializedName("use_proxy_data")
  private Boolean useProxyData = false;

  public WhatIfPortfolio currentPortfolioTickers(List<String> currentPortfolioTickers) {
    this.currentPortfolioTickers = currentPortfolioTickers;
    return this;
  }

  public WhatIfPortfolio addCurrentPortfolioTickersItem(String currentPortfolioTickersItem) {
    this.currentPortfolioTickers.add(currentPortfolioTickersItem);
    return this;
  }

   /**
   * Tickers of current portfolio holdings
   * @return currentPortfolioTickers
  **/
  @ApiModelProperty(required = true, value = "Tickers of current portfolio holdings")
  public List<String> getCurrentPortfolioTickers() {
    return currentPortfolioTickers;
  }

  public void setCurrentPortfolioTickers(List<String> currentPortfolioTickers) {
    this.currentPortfolioTickers = currentPortfolioTickers;
  }

  public WhatIfPortfolio currentPortfolioWeights(List<BigDecimal> currentPortfolioWeights) {
    this.currentPortfolioWeights = currentPortfolioWeights;
    return this;
  }

  public WhatIfPortfolio addCurrentPortfolioWeightsItem(BigDecimal currentPortfolioWeightsItem) {
    this.currentPortfolioWeights.add(currentPortfolioWeightsItem);
    return this;
  }

   /**
   * Weights of current portfolio holdings
   * @return currentPortfolioWeights
  **/
  @ApiModelProperty(required = true, value = "Weights of current portfolio holdings")
  public List<BigDecimal> getCurrentPortfolioWeights() {
    return currentPortfolioWeights;
  }

  public void setCurrentPortfolioWeights(List<BigDecimal> currentPortfolioWeights) {
    this.currentPortfolioWeights = currentPortfolioWeights;
  }

  public WhatIfPortfolio alteredPortfolioTickers(List<String> alteredPortfolioTickers) {
    this.alteredPortfolioTickers = alteredPortfolioTickers;
    return this;
  }

  public WhatIfPortfolio addAlteredPortfolioTickersItem(String alteredPortfolioTickersItem) {
    if (this.alteredPortfolioTickers == null) {
      this.alteredPortfolioTickers = new ArrayList<String>();
    }
    this.alteredPortfolioTickers.add(alteredPortfolioTickersItem);
    return this;
  }

   /**
   * Tickers of altered portfolio holdings
   * @return alteredPortfolioTickers
  **/
  @ApiModelProperty(value = "Tickers of altered portfolio holdings")
  public List<String> getAlteredPortfolioTickers() {
    return alteredPortfolioTickers;
  }

  public void setAlteredPortfolioTickers(List<String> alteredPortfolioTickers) {
    this.alteredPortfolioTickers = alteredPortfolioTickers;
  }

  public WhatIfPortfolio alteredPortfolioWeights(List<BigDecimal> alteredPortfolioWeights) {
    this.alteredPortfolioWeights = alteredPortfolioWeights;
    return this;
  }

  public WhatIfPortfolio addAlteredPortfolioWeightsItem(BigDecimal alteredPortfolioWeightsItem) {
    this.alteredPortfolioWeights.add(alteredPortfolioWeightsItem);
    return this;
  }

   /**
   * Weights of altered portfolio holdings
   * @return alteredPortfolioWeights
  **/
  @ApiModelProperty(required = true, value = "Weights of altered portfolio holdings")
  public List<BigDecimal> getAlteredPortfolioWeights() {
    return alteredPortfolioWeights;
  }

  public void setAlteredPortfolioWeights(List<BigDecimal> alteredPortfolioWeights) {
    this.alteredPortfolioWeights = alteredPortfolioWeights;
  }

  public WhatIfPortfolio startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of portfolio returns for the comparison
   * @return startDate
  **/
  @ApiModelProperty(value = "Start date of portfolio returns for the comparison")
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }

  public WhatIfPortfolio endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End date of portfolio returns for the comparison
   * @return endDate
  **/
  @ApiModelProperty(value = "End date of portfolio returns for the comparison")
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }

  public WhatIfPortfolio useProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
    return this;
  }

   /**
   * If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.
   * @return useProxyData
  **/
  @ApiModelProperty(value = "If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.")
  public Boolean isUseProxyData() {
    return useProxyData;
  }

  public void setUseProxyData(Boolean useProxyData) {
    this.useProxyData = useProxyData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WhatIfPortfolio whatIfPortfolio = (WhatIfPortfolio) o;
    return Objects.equals(this.currentPortfolioTickers, whatIfPortfolio.currentPortfolioTickers) &&
        Objects.equals(this.currentPortfolioWeights, whatIfPortfolio.currentPortfolioWeights) &&
        Objects.equals(this.alteredPortfolioTickers, whatIfPortfolio.alteredPortfolioTickers) &&
        Objects.equals(this.alteredPortfolioWeights, whatIfPortfolio.alteredPortfolioWeights) &&
        Objects.equals(this.startDate, whatIfPortfolio.startDate) &&
        Objects.equals(this.endDate, whatIfPortfolio.endDate) &&
        Objects.equals(this.useProxyData, whatIfPortfolio.useProxyData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPortfolioTickers, currentPortfolioWeights, alteredPortfolioTickers, alteredPortfolioWeights, startDate, endDate, useProxyData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WhatIfPortfolio {\n");
    
    sb.append("    currentPortfolioTickers: ").append(toIndentedString(currentPortfolioTickers)).append("\n");
    sb.append("    currentPortfolioWeights: ").append(toIndentedString(currentPortfolioWeights)).append("\n");
    sb.append("    alteredPortfolioTickers: ").append(toIndentedString(alteredPortfolioTickers)).append("\n");
    sb.append("    alteredPortfolioWeights: ").append(toIndentedString(alteredPortfolioWeights)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    useProxyData: ").append(toIndentedString(useProxyData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

