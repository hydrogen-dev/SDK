=begin
#Hydrogen Proton API

#Financial engineering module of Hydrogen Atom

OpenAPI spec version: 1.9.2
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'date'

module ProtonApi
  class BusinessInvoiceAnalysisRequest
    attr_accessor :currency_code

    attr_accessor :client_id

    attr_accessor :show_history

    attr_accessor :show_outstanding_invoices

    attr_accessor :response_limit

    attr_accessor :end_date

    attr_accessor :history_frequency_interval

    attr_accessor :currency_conversion

    attr_accessor :start_date

    attr_accessor :future_due_periods

    attr_accessor :overdue_periods

    attr_accessor :business_id

    attr_accessor :invoice_ids

    attr_accessor :customer_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'currency_code' => :'currency_code',
        :'client_id' => :'client_id',
        :'show_history' => :'show_history',
        :'show_outstanding_invoices' => :'show_outstanding_invoices',
        :'response_limit' => :'response_limit',
        :'end_date' => :'end_date',
        :'history_frequency_interval' => :'history_frequency_interval',
        :'currency_conversion' => :'currency_conversion',
        :'start_date' => :'start_date',
        :'future_due_periods' => :'future_due_periods',
        :'overdue_periods' => :'overdue_periods',
        :'business_id' => :'business_id',
        :'invoice_ids' => :'invoice_ids',
        :'customer_id' => :'customer_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'currency_code' => :'String',
        :'client_id' => :'String',
        :'show_history' => :'BOOLEAN',
        :'show_outstanding_invoices' => :'BOOLEAN',
        :'response_limit' => :'Integer',
        :'end_date' => :'Date',
        :'history_frequency_interval' => :'String',
        :'currency_conversion' => :'String',
        :'start_date' => :'Date',
        :'future_due_periods' => :'Array<Periods>',
        :'overdue_periods' => :'Array<Periods>',
        :'business_id' => :'String',
        :'invoice_ids' => :'Array<String>',
        :'customer_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'currency_code')
        self.currency_code = attributes[:'currency_code']
      end

      if attributes.has_key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.has_key?(:'show_history')
        self.show_history = attributes[:'show_history']
      else
        self.show_history = false
      end

      if attributes.has_key?(:'show_outstanding_invoices')
        self.show_outstanding_invoices = attributes[:'show_outstanding_invoices']
      else
        self.show_outstanding_invoices = false
      end

      if attributes.has_key?(:'response_limit')
        self.response_limit = attributes[:'response_limit']
      else
        self.response_limit = 10
      end

      if attributes.has_key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.has_key?(:'history_frequency_interval')
        self.history_frequency_interval = attributes[:'history_frequency_interval']
      else
        self.history_frequency_interval = 'month'
      end

      if attributes.has_key?(:'currency_conversion')
        self.currency_conversion = attributes[:'currency_conversion']
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'future_due_periods')
        if (value = attributes[:'future_due_periods']).is_a?(Array)
          self.future_due_periods = value
        end
      end

      if attributes.has_key?(:'overdue_periods')
        if (value = attributes[:'overdue_periods']).is_a?(Array)
          self.overdue_periods = value
        end
      end

      if attributes.has_key?(:'business_id')
        self.business_id = attributes[:'business_id']
      end

      if attributes.has_key?(:'invoice_ids')
        if (value = attributes[:'invoice_ids']).is_a?(Array)
          self.invoice_ids = value
        end
      end

      if attributes.has_key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@response_limit.nil? && @response_limit < 1
        invalid_properties.push('invalid value for "response_limit", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@response_limit.nil? && @response_limit < 1
      history_frequency_interval_validator = EnumAttributeValidator.new('String', ['day', 'week', 'month', 'quarter', 'year'])
      return false unless history_frequency_interval_validator.valid?(@history_frequency_interval)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] response_limit Value to be assigned
    def response_limit=(response_limit)
      if !response_limit.nil? && response_limit < 1
        fail ArgumentError, 'invalid value for "response_limit", must be greater than or equal to 1.'
      end

      @response_limit = response_limit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] history_frequency_interval Object to be assigned
    def history_frequency_interval=(history_frequency_interval)
      validator = EnumAttributeValidator.new('String', ['day', 'week', 'month', 'quarter', 'year'])
      unless validator.valid?(history_frequency_interval)
        fail ArgumentError, 'invalid value for "history_frequency_interval", must be one of #{validator.allowable_values}.'
      end
      @history_frequency_interval = history_frequency_interval
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          currency_code == o.currency_code &&
          client_id == o.client_id &&
          show_history == o.show_history &&
          show_outstanding_invoices == o.show_outstanding_invoices &&
          response_limit == o.response_limit &&
          end_date == o.end_date &&
          history_frequency_interval == o.history_frequency_interval &&
          currency_conversion == o.currency_conversion &&
          start_date == o.start_date &&
          future_due_periods == o.future_due_periods &&
          overdue_periods == o.overdue_periods &&
          business_id == o.business_id &&
          invoice_ids == o.invoice_ids &&
          customer_id == o.customer_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [currency_code, client_id, show_history, show_outstanding_invoices, response_limit, end_date, history_frequency_interval, currency_conversion, start_date, future_due_periods, overdue_periods, business_id, invoice_ids, customer_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
# Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        value
      when :Date
        value
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ProtonApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end
# Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end
# Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
