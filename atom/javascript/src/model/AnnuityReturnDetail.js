/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.AnnuityReturnDetail = factory(root.atom_api.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The AnnuityReturnDetail model module.
   * @module model/AnnuityReturnDetail
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>AnnuityReturnDetail</code>.
   * @alias module:model/AnnuityReturnDetail
   * @class
   * @param periodContribution {Number} The deposit made for this period.
   * @param cumulativeContributions {Number} The cumulative deposits made up to and including this period.
   * @param periodWithdrawal {Number} The withdrawal made for this period.
   * @param cumulativeWithdrawals {Number} The cumulative withdrawals made up to and including this period.
   * @param periodTax {Number} The tax amount for this period.
   * @param cumulativeTax {Number} The cumulative taxes up to and including this period.
   * @param periodEarnings {Number} The investment earnings for this period. Earnings are calculated at the beginning of each period, before contributions are made.
   * @param cumulativeEarnings {Number} The cumulative investment earnings made up to and including this period.
   * @param endingBalance {Number} The ending balance, inclusive of earnings and contributions for the current period.
   */
  var exports = function(periodContribution, cumulativeContributions, periodWithdrawal, cumulativeWithdrawals, periodTax, cumulativeTax, periodEarnings, cumulativeEarnings, endingBalance) {
    var _this = this;

    _this['period_contribution'] = periodContribution;
    _this['cumulative_contributions'] = cumulativeContributions;
    _this['period_withdrawal'] = periodWithdrawal;
    _this['cumulative_withdrawals'] = cumulativeWithdrawals;
    _this['period_tax'] = periodTax;
    _this['cumulative_tax'] = cumulativeTax;
    _this['period_earnings'] = periodEarnings;
    _this['cumulative_earnings'] = cumulativeEarnings;
    _this['ending_balance'] = endingBalance;
  };

  /**
   * Constructs a <code>AnnuityReturnDetail</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AnnuityReturnDetail} obj Optional instance to populate.
   * @return {module:model/AnnuityReturnDetail} The populated <code>AnnuityReturnDetail</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('period_contribution')) {
        obj['period_contribution'] = ApiClient.convertToType(data['period_contribution'], 'Number');
      }
      if (data.hasOwnProperty('cumulative_contributions')) {
        obj['cumulative_contributions'] = ApiClient.convertToType(data['cumulative_contributions'], 'Number');
      }
      if (data.hasOwnProperty('period_withdrawal')) {
        obj['period_withdrawal'] = ApiClient.convertToType(data['period_withdrawal'], 'Number');
      }
      if (data.hasOwnProperty('cumulative_withdrawals')) {
        obj['cumulative_withdrawals'] = ApiClient.convertToType(data['cumulative_withdrawals'], 'Number');
      }
      if (data.hasOwnProperty('period_tax')) {
        obj['period_tax'] = ApiClient.convertToType(data['period_tax'], 'Number');
      }
      if (data.hasOwnProperty('cumulative_tax')) {
        obj['cumulative_tax'] = ApiClient.convertToType(data['cumulative_tax'], 'Number');
      }
      if (data.hasOwnProperty('period_earnings')) {
        obj['period_earnings'] = ApiClient.convertToType(data['period_earnings'], 'Number');
      }
      if (data.hasOwnProperty('cumulative_earnings')) {
        obj['cumulative_earnings'] = ApiClient.convertToType(data['cumulative_earnings'], 'Number');
      }
      if (data.hasOwnProperty('ending_balance')) {
        obj['ending_balance'] = ApiClient.convertToType(data['ending_balance'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The deposit made for this period.
   * @member {Number} period_contribution
   */
  exports.prototype['period_contribution'] = undefined;
  /**
   * The cumulative deposits made up to and including this period.
   * @member {Number} cumulative_contributions
   */
  exports.prototype['cumulative_contributions'] = undefined;
  /**
   * The withdrawal made for this period.
   * @member {Number} period_withdrawal
   */
  exports.prototype['period_withdrawal'] = undefined;
  /**
   * The cumulative withdrawals made up to and including this period.
   * @member {Number} cumulative_withdrawals
   */
  exports.prototype['cumulative_withdrawals'] = undefined;
  /**
   * The tax amount for this period.
   * @member {Number} period_tax
   */
  exports.prototype['period_tax'] = undefined;
  /**
   * The cumulative taxes up to and including this period.
   * @member {Number} cumulative_tax
   */
  exports.prototype['cumulative_tax'] = undefined;
  /**
   * The investment earnings for this period. Earnings are calculated at the beginning of each period, before contributions are made.
   * @member {Number} period_earnings
   */
  exports.prototype['period_earnings'] = undefined;
  /**
   * The cumulative investment earnings made up to and including this period.
   * @member {Number} cumulative_earnings
   */
  exports.prototype['cumulative_earnings'] = undefined;
  /**
   * The ending balance, inclusive of earnings and contributions for the current period.
   * @member {Number} ending_balance
   */
  exports.prototype['ending_balance'] = undefined;



  return exports;
}));


