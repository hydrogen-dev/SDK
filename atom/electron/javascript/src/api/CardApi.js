/*
 * Hydrogen Electron API
 * The Hydrogen Electron API
 *
 * OpenAPI spec version: 1.3.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.24
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BaseResponseVO', 'model/CardBaseRequestCO', 'model/CardClientRequestCO', 'model/CardLoadRequestCO', 'model/CardLoadUnloadResponseVO', 'model/CardReplaceResponseVO', 'model/CardReserveAccountResponseVO', 'model/CardSpendingControlRequestCO', 'model/CardSpendingControlResponseVO', 'model/CardUnloadRequestCO', 'model/CreateCardClientResponseVO', 'model/UpdateCardClientResponseVO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BaseResponseVO'), require('../model/CardBaseRequestCO'), require('../model/CardClientRequestCO'), require('../model/CardLoadRequestCO'), require('../model/CardLoadUnloadResponseVO'), require('../model/CardReplaceResponseVO'), require('../model/CardReserveAccountResponseVO'), require('../model/CardSpendingControlRequestCO'), require('../model/CardSpendingControlResponseVO'), require('../model/CardUnloadRequestCO'), require('../model/CreateCardClientResponseVO'), require('../model/UpdateCardClientResponseVO'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenElectronApi) {
      root.HydrogenElectronApi = {};
    }
    root.HydrogenElectronApi.CardApi = factory(root.HydrogenElectronApi.ApiClient, root.HydrogenElectronApi.BaseResponseVO, root.HydrogenElectronApi.CardBaseRequestCO, root.HydrogenElectronApi.CardClientRequestCO, root.HydrogenElectronApi.CardLoadRequestCO, root.HydrogenElectronApi.CardLoadUnloadResponseVO, root.HydrogenElectronApi.CardReplaceResponseVO, root.HydrogenElectronApi.CardReserveAccountResponseVO, root.HydrogenElectronApi.CardSpendingControlRequestCO, root.HydrogenElectronApi.CardSpendingControlResponseVO, root.HydrogenElectronApi.CardUnloadRequestCO, root.HydrogenElectronApi.CreateCardClientResponseVO, root.HydrogenElectronApi.UpdateCardClientResponseVO);
  }
}(this, function(ApiClient, BaseResponseVO, CardBaseRequestCO, CardClientRequestCO, CardLoadRequestCO, CardLoadUnloadResponseVO, CardReplaceResponseVO, CardReserveAccountResponseVO, CardSpendingControlRequestCO, CardSpendingControlResponseVO, CardUnloadRequestCO, CreateCardClientResponseVO, UpdateCardClientResponseVO) {
  'use strict';

  /**
   * Card service.
   * @module api/CardApi
   * @version 1.3.1
   */

  /**
   * Constructs a new CardApi. 
   * @alias module:api/CardApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCardCloseUsingPost operation.
     * @callback module:api/CardApi~createCardCloseUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * close a card
     * @param {module:model/CardBaseRequestCO} closeRequest closeRequest
     * @param {module:api/CardApi~createCardCloseUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardCloseUsingPost = function(closeRequest, callback) {
      var postBody = closeRequest;

      // verify the required parameter 'closeRequest' is set
      if (closeRequest === undefined || closeRequest === null) {
        throw new Error("Missing the required parameter 'closeRequest' when calling createCardCloseUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/close', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardIssueUsingPost operation.
     * @callback module:api/CardApi~createCardIssueUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * issue a card
     * @param {module:model/CardBaseRequestCO} issueRequest issueRequest
     * @param {module:api/CardApi~createCardIssueUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardIssueUsingPost = function(issueRequest, callback) {
      var postBody = issueRequest;

      // verify the required parameter 'issueRequest' is set
      if (issueRequest === undefined || issueRequest === null) {
        throw new Error("Missing the required parameter 'issueRequest' when calling createCardIssueUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/issue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardLoadUsingPost operation.
     * @callback module:api/CardApi~createCardLoadUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardLoadUnloadResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card load
     * @param {module:model/CardLoadRequestCO} loadRequest loadRequest
     * @param {module:api/CardApi~createCardLoadUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardLoadUnloadResponseVO}
     */
    this.createCardLoadUsingPost = function(loadRequest, callback) {
      var postBody = loadRequest;

      // verify the required parameter 'loadRequest' is set
      if (loadRequest === undefined || loadRequest === null) {
        throw new Error("Missing the required parameter 'loadRequest' when calling createCardLoadUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardLoadUnloadResponseVO;

      return this.apiClient.callApi(
        '/card/load', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReactivateUsingPost operation.
     * @callback module:api/CardApi~createCardReactivateUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reactivate card
     * @param {module:model/CardBaseRequestCO} reactivateRequest reactivateRequest
     * @param {module:api/CardApi~createCardReactivateUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardReactivateUsingPost = function(reactivateRequest, callback) {
      var postBody = reactivateRequest;

      // verify the required parameter 'reactivateRequest' is set
      if (reactivateRequest === undefined || reactivateRequest === null) {
        throw new Error("Missing the required parameter 'reactivateRequest' when calling createCardReactivateUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/reactivate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardReplaceUsingPost operation.
     * @callback module:api/CardApi~createCardReplaceUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReplaceResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create card replace
     * @param {module:model/CardBaseRequestCO} request request
     * @param {module:api/CardApi~createCardReplaceUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReplaceResponseVO}
     */
    this.createCardReplaceUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createCardReplaceUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardReplaceResponseVO;

      return this.apiClient.callApi(
        '/card/replace', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardSpendingControlUsingPost operation.
     * @callback module:api/CardApi~createCardSpendingControlUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardSpendingControlResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create card spending control
     * @param {module:model/CardSpendingControlRequestCO} request request
     * @param {module:api/CardApi~createCardSpendingControlUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardSpendingControlResponseVO}
     */
    this.createCardSpendingControlUsingPost = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createCardSpendingControlUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardSpendingControlResponseVO;

      return this.apiClient.callApi(
        '/card/spending_control', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardSuspendUsingPost operation.
     * @callback module:api/CardApi~createCardSuspendUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * suspend card
     * @param {module:model/CardBaseRequestCO} suspendRequest suspendRequest
     * @param {module:api/CardApi~createCardSuspendUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponseVO}
     */
    this.createCardSuspendUsingPost = function(suspendRequest, callback) {
      var postBody = suspendRequest;

      // verify the required parameter 'suspendRequest' is set
      if (suspendRequest === undefined || suspendRequest === null) {
        throw new Error("Missing the required parameter 'suspendRequest' when calling createCardSuspendUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponseVO;

      return this.apiClient.callApi(
        '/card/suspend', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCardUnloadUsingPost operation.
     * @callback module:api/CardApi~createCardUnloadUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardLoadUnloadResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card upload
     * @param {module:model/CardUnloadRequestCO} reloadRequest reloadRequest
     * @param {module:api/CardApi~createCardUnloadUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardLoadUnloadResponseVO}
     */
    this.createCardUnloadUsingPost = function(reloadRequest, callback) {
      var postBody = reloadRequest;

      // verify the required parameter 'reloadRequest' is set
      if (reloadRequest === undefined || reloadRequest === null) {
        throw new Error("Missing the required parameter 'reloadRequest' when calling createCardUnloadUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardLoadUnloadResponseVO;

      return this.apiClient.callApi(
        '/card/unload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClientCardUsingPost operation.
     * @callback module:api/CardApi~createClientCardUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCardClientResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a card client
     * @param {module:model/CardClientRequestCO} cardClientRequestCO cardClientRequestCO
     * @param {module:api/CardApi~createClientCardUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCardClientResponseVO}
     */
    this.createClientCardUsingPost = function(cardClientRequestCO, callback) {
      var postBody = cardClientRequestCO;

      // verify the required parameter 'cardClientRequestCO' is set
      if (cardClientRequestCO === undefined || cardClientRequestCO === null) {
        throw new Error("Missing the required parameter 'cardClientRequestCO' when calling createClientCardUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateCardClientResponseVO;

      return this.apiClient.callApi(
        '/card/client', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCardReserveAccountDetailsUsingGet operation.
     * @callback module:api/CardApi~getCardReserveAccountDetailsUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReserveAccountResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Card reserve account
     * @param {module:api/CardApi~getCardReserveAccountDetailsUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReserveAccountResponseVO}
     */
    this.getCardReserveAccountDetailsUsingGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CardReserveAccountResponseVO;

      return this.apiClient.callApi(
        '/card/reserve', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCardSpendingControlUsingPut operation.
     * @callback module:api/CardApi~updateCardSpendingControlUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardSpendingControlResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card spending control
     * @param {String} nucleusSpendingControlId nucleus_spending_control_id
     * @param {module:api/CardApi~updateCardSpendingControlUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardSpendingControlResponseVO}
     */
    this.updateCardSpendingControlUsingPut = function(nucleusSpendingControlId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusSpendingControlId' is set
      if (nucleusSpendingControlId === undefined || nucleusSpendingControlId === null) {
        throw new Error("Missing the required parameter 'nucleusSpendingControlId' when calling updateCardSpendingControlUsingPut");
      }


      var pathParams = {
        'nucleus_spending_control_id': nucleusSpendingControlId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CardSpendingControlResponseVO;

      return this.apiClient.callApi(
        '/card/spending_control/{nucleus_spending_control_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientCardUsingPut operation.
     * @callback module:api/CardApi~updateClientCardUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCardClientResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a card client
     * @param {String} nucleusClientId nucleus_client_id
     * @param {module:api/CardApi~updateClientCardUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCardClientResponseVO}
     */
    this.updateClientCardUsingPut = function(nucleusClientId, callback) {
      var postBody = null;

      // verify the required parameter 'nucleusClientId' is set
      if (nucleusClientId === undefined || nucleusClientId === null) {
        throw new Error("Missing the required parameter 'nucleusClientId' when calling updateClientCardUsingPut");
      }


      var pathParams = {
        'nucleus_client_id': nucleusClientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateCardClientResponseVO;

      return this.apiClient.callApi(
        '/card/client/{nucleus_client_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
