/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountAllocationPayload', 'model/AccountCreatePayload', 'model/AccountPermissionPayload', 'model/AccountRebalanceBuyOnlyOrderPayload', 'model/AccountRebalanceOrderPayload', 'model/AccountRebalanceSellOnlyOrderPayload', 'model/AccountStagePayload', 'model/AccountStatusPayload', 'model/AccountSubscribePayload', 'model/AccountTransactionResponse', 'model/AccountTypePayload', 'model/AggregationAccountBalancePayload', 'model/AggregationAccountHoldingPayload', 'model/AggregationAccountPayload', 'model/AggregationAccountTransactionPayload', 'model/AllocationAssetSizeResponse', 'model/AllocationCompositionPayload', 'model/AllocationHoldingsResponse', 'model/AllocationPayload', 'model/AllocationTransactionResponse', 'model/BankLinkPayload', 'model/BenchmarkAssetSizeResponse', 'model/BenchmarkPayload', 'model/BudgetPayload', 'model/BulkOrderAccountPayload', 'model/BulkOrderClientPayload', 'model/BulkOrderFirmPayload', 'model/BulkOrderFirmclientaccountResponse', 'model/ChangeModelCompositionResponse', 'model/ClientAssetSizeResponse', 'model/ClientHoldingsResponse', 'model/ClientHydroPayload', 'model/ClientPayload', 'model/ClientResponsePayload', 'model/ClientTransactionResponse', 'model/CreateAccountResponse', 'model/CreateAccountStatusResponse', 'model/CreateAggregationAccountBalanceResponse', 'model/CreateAggregationAccountHoldingResponse', 'model/CreateAggregationAccountResponse', 'model/CreateAggregationAccountTransactionResponse', 'model/CreateAllocationCompositionResponse', 'model/CreateAllocationResponse', 'model/CreateBankLinkResponse', 'model/CreateBenchmarkResponse', 'model/CreateBudgetResponse', 'model/CreateClientHydroResponse', 'model/CreateClientResponse', 'model/CreateClientResponseResponse', 'model/CreateDecisionTreeResponse', 'model/CreateDepositRequestResponse', 'model/CreateFinancialOfferResponse', 'model/CreateFundingRequestResponse', 'model/CreateGoalResponse', 'model/CreateGoalTrackResponse', 'model/CreateModelAssetSizeResponse', 'model/CreateModelCommentResponse', 'model/CreateModelHoldingResponse', 'model/CreateModelResponse', 'model/CreateModelTransactionResponse', 'model/CreateNodeRelationshipResponse', 'model/CreateNodeResponse', 'model/CreateOrderResponse', 'model/CreateOrderStatusResponse', 'model/CreateOrderTrackResponse', 'model/CreatePortfolioAssetSizeResponse', 'model/CreatePortfolioCommentResponse', 'model/CreatePortfolioHoldingResponse', 'model/CreatePortfolioResponse', 'model/CreatePortfolioTransactionResponse', 'model/CreateQuestionnaireResponse', 'model/CreateScoreResponse', 'model/CreateSecurityExclusionResponse', 'model/CreateSecurityPriceResponse', 'model/CreateSecurityResponse', 'model/CreateTransactionCodeResponse', 'model/CreateTransferResponse', 'model/CreateWithdrawalResponse', 'model/DecisionTreePayload', 'model/DepositRequestPayload', 'model/FinancialOfferPayload', 'model/FundingRequestPayload', 'model/GetAccountAllocationResponse', 'model/GetAccountAssetSizeResponse', 'model/GetAccountHoldingResponse', 'model/GetAccountPermissionsResponse', 'model/GetAccountResponse', 'model/GetAccountStageResponse', 'model/GetAccountStatusResponse', 'model/GetAccountTypeResponse', 'model/GetAccountTypeSubresponse', 'model/GetAggregationAccountBalanceResponse', 'model/GetAggregationAccountHoldingsResponse', 'model/GetAggregationAccountTransactionResponse', 'model/GetAggregationAccountsResponse', 'model/GetAllocationCompositionResponse', 'model/GetAllocationResponse', 'model/GetBankLinkResponse', 'model/GetBenchmarkResponse', 'model/GetBudgetResponse', 'model/GetBulkOrderResponse', 'model/GetClientHydroResponse', 'model/GetClientResponse', 'model/GetClientResponseResponse', 'model/GetDecisionTreeResponse', 'model/GetDepositRequestResponse', 'model/GetFinancialOfferResponse', 'model/GetFundingRequestResponse', 'model/GetGoalResponse', 'model/GetGoalTrackResponse', 'model/GetModelAssetSizeResponse', 'model/GetModelCommentResponse', 'model/GetModelHoldingResponse', 'model/GetModelResponse', 'model/GetModelTransactionResponse', 'model/GetNodeRelationshipResponse', 'model/GetNodeResponse', 'model/GetOrderResponse', 'model/GetOrderStatusResponse', 'model/GetOrderTrackResponse', 'model/GetPortfolioAssetSizeResponse', 'model/GetPortfolioCommentResponse', 'model/GetPortfolioHoldingResponse', 'model/GetPortfolioResponse', 'model/GetPortfolioTransactionResponse', 'model/GetQuestionnaireResponse', 'model/GetScoreResponse', 'model/GetSecurityExclusionResponse', 'model/GetSecurityPriceResponse', 'model/GetSecurityResponse', 'model/GetTransactionCodeResponse', 'model/GetTransferResponse', 'model/GetWithdrawalResponse', 'model/GoalAssetSizeResponse', 'model/GoalHoldingsResponse', 'model/GoalPayload', 'model/GoalTrackPayload', 'model/GoalTransactionsResponse', 'model/ModelAssetSizePayload', 'model/ModelCommentPayload', 'model/ModelCompositionPayload', 'model/ModelHoldingPayload', 'model/ModelPayload', 'model/ModelTransactionPayload', 'model/NodePayload', 'model/NodeRelationshipPayload', 'model/OrderPayload', 'model/OrderStatusPayload', 'model/OrderTrackPayload', 'model/PerformanceResponse', 'model/PortfolioAssetSizePayload', 'model/PortfolioCommentPayload', 'model/PortfolioHoldingPayload', 'model/PortfolioPayload', 'model/PortfolioRebalanceBuyOnlyOrderPayload', 'model/PortfolioRebalanceOrderPayload', 'model/PortfolioRebalanceSellOnlyOrderPayload', 'model/PortfolioTransactionPayload', 'model/QuestionnairePayload', 'model/ScorePayload', 'model/SecurityExclusionPayload', 'model/SecurityPayload', 'model/SecurityPricePayload', 'model/SellAllAccountPayload', 'model/SellAllAccountResponse', 'model/SellAllPortfolioPayload', 'model/SellAllPortfolioResponse', 'model/SpecificAccountAllocationResponse', 'model/SpecificAccountPermissionResponse', 'model/SpecificAccountResponse', 'model/SpecificAccountStageResponse', 'model/SpecificAccountStatusResponse', 'model/SpecificAggregationAccountBalanceResponse', 'model/SpecificAggregationAccountHoldingResponse', 'model/SpecificAggregationAccountResponse', 'model/SpecificAggregationAccountTransactionResponse', 'model/SpecificAllocationCompositionResponse', 'model/SpecificAllocationResponse', 'model/SpecificBankLinkResponse', 'model/SpecificBenchmarkResponse', 'model/SpecificBudgetResponse', 'model/SpecificClientHydroResponse', 'model/SpecificClientResponse', 'model/SpecificClientResponseResponse', 'model/SpecificDecisionTreeResponse', 'model/SpecificDepositRequestResponse', 'model/SpecificFinancialOfferResponse', 'model/SpecificFundingRequestResponse', 'model/SpecificGoalResponse', 'model/SpecificGoalTrackResponse', 'model/SpecificModelAssetSizeResponse', 'model/SpecificModelCommentResponse', 'model/SpecificModelHoldingResponse', 'model/SpecificModelResponse', 'model/SpecificModelTransactionResponse', 'model/SpecificNodeRelationshipResponse', 'model/SpecificNodeResponse', 'model/SpecificOrderResponse', 'model/SpecificOrderStatusResponse', 'model/SpecificOrderTrackResponse', 'model/SpecificPortfolioAssetSizeResponse', 'model/SpecificPortfolioCommentResponse', 'model/SpecificPortfolioHoldingResponse', 'model/SpecificPortfolioResponse', 'model/SpecificPortfolioTransactionResponse', 'model/SpecificQuestionnaireResponse', 'model/SpecificScoreResponse', 'model/SpecificSecurityExclusionResponse', 'model/SpecificSecurityPriceResponse', 'model/SpecificSecurityResponse', 'model/SpecificTransactionCodeResponse', 'model/SpecificTransferResponse', 'model/SpecificWithdrawalResponse', 'model/SubscribeAccountResponse', 'model/TransactionCodePayload', 'model/TransferRequestPayload', 'model/WithdrawalPayload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountAllocationPayload'), require('../model/AccountCreatePayload'), require('../model/AccountPermissionPayload'), require('../model/AccountRebalanceBuyOnlyOrderPayload'), require('../model/AccountRebalanceOrderPayload'), require('../model/AccountRebalanceSellOnlyOrderPayload'), require('../model/AccountStagePayload'), require('../model/AccountStatusPayload'), require('../model/AccountSubscribePayload'), require('../model/AccountTransactionResponse'), require('../model/AccountTypePayload'), require('../model/AggregationAccountBalancePayload'), require('../model/AggregationAccountHoldingPayload'), require('../model/AggregationAccountPayload'), require('../model/AggregationAccountTransactionPayload'), require('../model/AllocationAssetSizeResponse'), require('../model/AllocationCompositionPayload'), require('../model/AllocationHoldingsResponse'), require('../model/AllocationPayload'), require('../model/AllocationTransactionResponse'), require('../model/BankLinkPayload'), require('../model/BenchmarkAssetSizeResponse'), require('../model/BenchmarkPayload'), require('../model/BudgetPayload'), require('../model/BulkOrderAccountPayload'), require('../model/BulkOrderClientPayload'), require('../model/BulkOrderFirmPayload'), require('../model/BulkOrderFirmclientaccountResponse'), require('../model/ChangeModelCompositionResponse'), require('../model/ClientAssetSizeResponse'), require('../model/ClientHoldingsResponse'), require('../model/ClientHydroPayload'), require('../model/ClientPayload'), require('../model/ClientResponsePayload'), require('../model/ClientTransactionResponse'), require('../model/CreateAccountResponse'), require('../model/CreateAccountStatusResponse'), require('../model/CreateAggregationAccountBalanceResponse'), require('../model/CreateAggregationAccountHoldingResponse'), require('../model/CreateAggregationAccountResponse'), require('../model/CreateAggregationAccountTransactionResponse'), require('../model/CreateAllocationCompositionResponse'), require('../model/CreateAllocationResponse'), require('../model/CreateBankLinkResponse'), require('../model/CreateBenchmarkResponse'), require('../model/CreateBudgetResponse'), require('../model/CreateClientHydroResponse'), require('../model/CreateClientResponse'), require('../model/CreateClientResponseResponse'), require('../model/CreateDecisionTreeResponse'), require('../model/CreateDepositRequestResponse'), require('../model/CreateFinancialOfferResponse'), require('../model/CreateFundingRequestResponse'), require('../model/CreateGoalResponse'), require('../model/CreateGoalTrackResponse'), require('../model/CreateModelAssetSizeResponse'), require('../model/CreateModelCommentResponse'), require('../model/CreateModelHoldingResponse'), require('../model/CreateModelResponse'), require('../model/CreateModelTransactionResponse'), require('../model/CreateNodeRelationshipResponse'), require('../model/CreateNodeResponse'), require('../model/CreateOrderResponse'), require('../model/CreateOrderStatusResponse'), require('../model/CreateOrderTrackResponse'), require('../model/CreatePortfolioAssetSizeResponse'), require('../model/CreatePortfolioCommentResponse'), require('../model/CreatePortfolioHoldingResponse'), require('../model/CreatePortfolioResponse'), require('../model/CreatePortfolioTransactionResponse'), require('../model/CreateQuestionnaireResponse'), require('../model/CreateScoreResponse'), require('../model/CreateSecurityExclusionResponse'), require('../model/CreateSecurityPriceResponse'), require('../model/CreateSecurityResponse'), require('../model/CreateTransactionCodeResponse'), require('../model/CreateTransferResponse'), require('../model/CreateWithdrawalResponse'), require('../model/DecisionTreePayload'), require('../model/DepositRequestPayload'), require('../model/FinancialOfferPayload'), require('../model/FundingRequestPayload'), require('../model/GetAccountAllocationResponse'), require('../model/GetAccountAssetSizeResponse'), require('../model/GetAccountHoldingResponse'), require('../model/GetAccountPermissionsResponse'), require('../model/GetAccountResponse'), require('../model/GetAccountStageResponse'), require('../model/GetAccountStatusResponse'), require('../model/GetAccountTypeResponse'), require('../model/GetAccountTypeSubresponse'), require('../model/GetAggregationAccountBalanceResponse'), require('../model/GetAggregationAccountHoldingsResponse'), require('../model/GetAggregationAccountTransactionResponse'), require('../model/GetAggregationAccountsResponse'), require('../model/GetAllocationCompositionResponse'), require('../model/GetAllocationResponse'), require('../model/GetBankLinkResponse'), require('../model/GetBenchmarkResponse'), require('../model/GetBudgetResponse'), require('../model/GetBulkOrderResponse'), require('../model/GetClientHydroResponse'), require('../model/GetClientResponse'), require('../model/GetClientResponseResponse'), require('../model/GetDecisionTreeResponse'), require('../model/GetDepositRequestResponse'), require('../model/GetFinancialOfferResponse'), require('../model/GetFundingRequestResponse'), require('../model/GetGoalResponse'), require('../model/GetGoalTrackResponse'), require('../model/GetModelAssetSizeResponse'), require('../model/GetModelCommentResponse'), require('../model/GetModelHoldingResponse'), require('../model/GetModelResponse'), require('../model/GetModelTransactionResponse'), require('../model/GetNodeRelationshipResponse'), require('../model/GetNodeResponse'), require('../model/GetOrderResponse'), require('../model/GetOrderStatusResponse'), require('../model/GetOrderTrackResponse'), require('../model/GetPortfolioAssetSizeResponse'), require('../model/GetPortfolioCommentResponse'), require('../model/GetPortfolioHoldingResponse'), require('../model/GetPortfolioResponse'), require('../model/GetPortfolioTransactionResponse'), require('../model/GetQuestionnaireResponse'), require('../model/GetScoreResponse'), require('../model/GetSecurityExclusionResponse'), require('../model/GetSecurityPriceResponse'), require('../model/GetSecurityResponse'), require('../model/GetTransactionCodeResponse'), require('../model/GetTransferResponse'), require('../model/GetWithdrawalResponse'), require('../model/GoalAssetSizeResponse'), require('../model/GoalHoldingsResponse'), require('../model/GoalPayload'), require('../model/GoalTrackPayload'), require('../model/GoalTransactionsResponse'), require('../model/ModelAssetSizePayload'), require('../model/ModelCommentPayload'), require('../model/ModelCompositionPayload'), require('../model/ModelHoldingPayload'), require('../model/ModelPayload'), require('../model/ModelTransactionPayload'), require('../model/NodePayload'), require('../model/NodeRelationshipPayload'), require('../model/OrderPayload'), require('../model/OrderStatusPayload'), require('../model/OrderTrackPayload'), require('../model/PerformanceResponse'), require('../model/PortfolioAssetSizePayload'), require('../model/PortfolioCommentPayload'), require('../model/PortfolioHoldingPayload'), require('../model/PortfolioPayload'), require('../model/PortfolioRebalanceBuyOnlyOrderPayload'), require('../model/PortfolioRebalanceOrderPayload'), require('../model/PortfolioRebalanceSellOnlyOrderPayload'), require('../model/PortfolioTransactionPayload'), require('../model/QuestionnairePayload'), require('../model/ScorePayload'), require('../model/SecurityExclusionPayload'), require('../model/SecurityPayload'), require('../model/SecurityPricePayload'), require('../model/SellAllAccountPayload'), require('../model/SellAllAccountResponse'), require('../model/SellAllPortfolioPayload'), require('../model/SellAllPortfolioResponse'), require('../model/SpecificAccountAllocationResponse'), require('../model/SpecificAccountPermissionResponse'), require('../model/SpecificAccountResponse'), require('../model/SpecificAccountStageResponse'), require('../model/SpecificAccountStatusResponse'), require('../model/SpecificAggregationAccountBalanceResponse'), require('../model/SpecificAggregationAccountHoldingResponse'), require('../model/SpecificAggregationAccountResponse'), require('../model/SpecificAggregationAccountTransactionResponse'), require('../model/SpecificAllocationCompositionResponse'), require('../model/SpecificAllocationResponse'), require('../model/SpecificBankLinkResponse'), require('../model/SpecificBenchmarkResponse'), require('../model/SpecificBudgetResponse'), require('../model/SpecificClientHydroResponse'), require('../model/SpecificClientResponse'), require('../model/SpecificClientResponseResponse'), require('../model/SpecificDecisionTreeResponse'), require('../model/SpecificDepositRequestResponse'), require('../model/SpecificFinancialOfferResponse'), require('../model/SpecificFundingRequestResponse'), require('../model/SpecificGoalResponse'), require('../model/SpecificGoalTrackResponse'), require('../model/SpecificModelAssetSizeResponse'), require('../model/SpecificModelCommentResponse'), require('../model/SpecificModelHoldingResponse'), require('../model/SpecificModelResponse'), require('../model/SpecificModelTransactionResponse'), require('../model/SpecificNodeRelationshipResponse'), require('../model/SpecificNodeResponse'), require('../model/SpecificOrderResponse'), require('../model/SpecificOrderStatusResponse'), require('../model/SpecificOrderTrackResponse'), require('../model/SpecificPortfolioAssetSizeResponse'), require('../model/SpecificPortfolioCommentResponse'), require('../model/SpecificPortfolioHoldingResponse'), require('../model/SpecificPortfolioResponse'), require('../model/SpecificPortfolioTransactionResponse'), require('../model/SpecificQuestionnaireResponse'), require('../model/SpecificScoreResponse'), require('../model/SpecificSecurityExclusionResponse'), require('../model/SpecificSecurityPriceResponse'), require('../model/SpecificSecurityResponse'), require('../model/SpecificTransactionCodeResponse'), require('../model/SpecificTransferResponse'), require('../model/SpecificWithdrawalResponse'), require('../model/SubscribeAccountResponse'), require('../model/TransactionCodePayload'), require('../model/TransferRequestPayload'), require('../model/WithdrawalPayload'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.NucleusApi = factory(root.atom_api.ApiClient, root.atom_api.AccountAllocationPayload, root.atom_api.AccountCreatePayload, root.atom_api.AccountPermissionPayload, root.atom_api.AccountRebalanceBuyOnlyOrderPayload, root.atom_api.AccountRebalanceOrderPayload, root.atom_api.AccountRebalanceSellOnlyOrderPayload, root.atom_api.AccountStagePayload, root.atom_api.AccountStatusPayload, root.atom_api.AccountSubscribePayload, root.atom_api.AccountTransactionResponse, root.atom_api.AccountTypePayload, root.atom_api.AggregationAccountBalancePayload, root.atom_api.AggregationAccountHoldingPayload, root.atom_api.AggregationAccountPayload, root.atom_api.AggregationAccountTransactionPayload, root.atom_api.AllocationAssetSizeResponse, root.atom_api.AllocationCompositionPayload, root.atom_api.AllocationHoldingsResponse, root.atom_api.AllocationPayload, root.atom_api.AllocationTransactionResponse, root.atom_api.BankLinkPayload, root.atom_api.BenchmarkAssetSizeResponse, root.atom_api.BenchmarkPayload, root.atom_api.BudgetPayload, root.atom_api.BulkOrderAccountPayload, root.atom_api.BulkOrderClientPayload, root.atom_api.BulkOrderFirmPayload, root.atom_api.BulkOrderFirmclientaccountResponse, root.atom_api.ChangeModelCompositionResponse, root.atom_api.ClientAssetSizeResponse, root.atom_api.ClientHoldingsResponse, root.atom_api.ClientHydroPayload, root.atom_api.ClientPayload, root.atom_api.ClientResponsePayload, root.atom_api.ClientTransactionResponse, root.atom_api.CreateAccountResponse, root.atom_api.CreateAccountStatusResponse, root.atom_api.CreateAggregationAccountBalanceResponse, root.atom_api.CreateAggregationAccountHoldingResponse, root.atom_api.CreateAggregationAccountResponse, root.atom_api.CreateAggregationAccountTransactionResponse, root.atom_api.CreateAllocationCompositionResponse, root.atom_api.CreateAllocationResponse, root.atom_api.CreateBankLinkResponse, root.atom_api.CreateBenchmarkResponse, root.atom_api.CreateBudgetResponse, root.atom_api.CreateClientHydroResponse, root.atom_api.CreateClientResponse, root.atom_api.CreateClientResponseResponse, root.atom_api.CreateDecisionTreeResponse, root.atom_api.CreateDepositRequestResponse, root.atom_api.CreateFinancialOfferResponse, root.atom_api.CreateFundingRequestResponse, root.atom_api.CreateGoalResponse, root.atom_api.CreateGoalTrackResponse, root.atom_api.CreateModelAssetSizeResponse, root.atom_api.CreateModelCommentResponse, root.atom_api.CreateModelHoldingResponse, root.atom_api.CreateModelResponse, root.atom_api.CreateModelTransactionResponse, root.atom_api.CreateNodeRelationshipResponse, root.atom_api.CreateNodeResponse, root.atom_api.CreateOrderResponse, root.atom_api.CreateOrderStatusResponse, root.atom_api.CreateOrderTrackResponse, root.atom_api.CreatePortfolioAssetSizeResponse, root.atom_api.CreatePortfolioCommentResponse, root.atom_api.CreatePortfolioHoldingResponse, root.atom_api.CreatePortfolioResponse, root.atom_api.CreatePortfolioTransactionResponse, root.atom_api.CreateQuestionnaireResponse, root.atom_api.CreateScoreResponse, root.atom_api.CreateSecurityExclusionResponse, root.atom_api.CreateSecurityPriceResponse, root.atom_api.CreateSecurityResponse, root.atom_api.CreateTransactionCodeResponse, root.atom_api.CreateTransferResponse, root.atom_api.CreateWithdrawalResponse, root.atom_api.DecisionTreePayload, root.atom_api.DepositRequestPayload, root.atom_api.FinancialOfferPayload, root.atom_api.FundingRequestPayload, root.atom_api.GetAccountAllocationResponse, root.atom_api.GetAccountAssetSizeResponse, root.atom_api.GetAccountHoldingResponse, root.atom_api.GetAccountPermissionsResponse, root.atom_api.GetAccountResponse, root.atom_api.GetAccountStageResponse, root.atom_api.GetAccountStatusResponse, root.atom_api.GetAccountTypeResponse, root.atom_api.GetAccountTypeSubresponse, root.atom_api.GetAggregationAccountBalanceResponse, root.atom_api.GetAggregationAccountHoldingsResponse, root.atom_api.GetAggregationAccountTransactionResponse, root.atom_api.GetAggregationAccountsResponse, root.atom_api.GetAllocationCompositionResponse, root.atom_api.GetAllocationResponse, root.atom_api.GetBankLinkResponse, root.atom_api.GetBenchmarkResponse, root.atom_api.GetBudgetResponse, root.atom_api.GetBulkOrderResponse, root.atom_api.GetClientHydroResponse, root.atom_api.GetClientResponse, root.atom_api.GetClientResponseResponse, root.atom_api.GetDecisionTreeResponse, root.atom_api.GetDepositRequestResponse, root.atom_api.GetFinancialOfferResponse, root.atom_api.GetFundingRequestResponse, root.atom_api.GetGoalResponse, root.atom_api.GetGoalTrackResponse, root.atom_api.GetModelAssetSizeResponse, root.atom_api.GetModelCommentResponse, root.atom_api.GetModelHoldingResponse, root.atom_api.GetModelResponse, root.atom_api.GetModelTransactionResponse, root.atom_api.GetNodeRelationshipResponse, root.atom_api.GetNodeResponse, root.atom_api.GetOrderResponse, root.atom_api.GetOrderStatusResponse, root.atom_api.GetOrderTrackResponse, root.atom_api.GetPortfolioAssetSizeResponse, root.atom_api.GetPortfolioCommentResponse, root.atom_api.GetPortfolioHoldingResponse, root.atom_api.GetPortfolioResponse, root.atom_api.GetPortfolioTransactionResponse, root.atom_api.GetQuestionnaireResponse, root.atom_api.GetScoreResponse, root.atom_api.GetSecurityExclusionResponse, root.atom_api.GetSecurityPriceResponse, root.atom_api.GetSecurityResponse, root.atom_api.GetTransactionCodeResponse, root.atom_api.GetTransferResponse, root.atom_api.GetWithdrawalResponse, root.atom_api.GoalAssetSizeResponse, root.atom_api.GoalHoldingsResponse, root.atom_api.GoalPayload, root.atom_api.GoalTrackPayload, root.atom_api.GoalTransactionsResponse, root.atom_api.ModelAssetSizePayload, root.atom_api.ModelCommentPayload, root.atom_api.ModelCompositionPayload, root.atom_api.ModelHoldingPayload, root.atom_api.ModelPayload, root.atom_api.ModelTransactionPayload, root.atom_api.NodePayload, root.atom_api.NodeRelationshipPayload, root.atom_api.OrderPayload, root.atom_api.OrderStatusPayload, root.atom_api.OrderTrackPayload, root.atom_api.PerformanceResponse, root.atom_api.PortfolioAssetSizePayload, root.atom_api.PortfolioCommentPayload, root.atom_api.PortfolioHoldingPayload, root.atom_api.PortfolioPayload, root.atom_api.PortfolioRebalanceBuyOnlyOrderPayload, root.atom_api.PortfolioRebalanceOrderPayload, root.atom_api.PortfolioRebalanceSellOnlyOrderPayload, root.atom_api.PortfolioTransactionPayload, root.atom_api.QuestionnairePayload, root.atom_api.ScorePayload, root.atom_api.SecurityExclusionPayload, root.atom_api.SecurityPayload, root.atom_api.SecurityPricePayload, root.atom_api.SellAllAccountPayload, root.atom_api.SellAllAccountResponse, root.atom_api.SellAllPortfolioPayload, root.atom_api.SellAllPortfolioResponse, root.atom_api.SpecificAccountAllocationResponse, root.atom_api.SpecificAccountPermissionResponse, root.atom_api.SpecificAccountResponse, root.atom_api.SpecificAccountStageResponse, root.atom_api.SpecificAccountStatusResponse, root.atom_api.SpecificAggregationAccountBalanceResponse, root.atom_api.SpecificAggregationAccountHoldingResponse, root.atom_api.SpecificAggregationAccountResponse, root.atom_api.SpecificAggregationAccountTransactionResponse, root.atom_api.SpecificAllocationCompositionResponse, root.atom_api.SpecificAllocationResponse, root.atom_api.SpecificBankLinkResponse, root.atom_api.SpecificBenchmarkResponse, root.atom_api.SpecificBudgetResponse, root.atom_api.SpecificClientHydroResponse, root.atom_api.SpecificClientResponse, root.atom_api.SpecificClientResponseResponse, root.atom_api.SpecificDecisionTreeResponse, root.atom_api.SpecificDepositRequestResponse, root.atom_api.SpecificFinancialOfferResponse, root.atom_api.SpecificFundingRequestResponse, root.atom_api.SpecificGoalResponse, root.atom_api.SpecificGoalTrackResponse, root.atom_api.SpecificModelAssetSizeResponse, root.atom_api.SpecificModelCommentResponse, root.atom_api.SpecificModelHoldingResponse, root.atom_api.SpecificModelResponse, root.atom_api.SpecificModelTransactionResponse, root.atom_api.SpecificNodeRelationshipResponse, root.atom_api.SpecificNodeResponse, root.atom_api.SpecificOrderResponse, root.atom_api.SpecificOrderStatusResponse, root.atom_api.SpecificOrderTrackResponse, root.atom_api.SpecificPortfolioAssetSizeResponse, root.atom_api.SpecificPortfolioCommentResponse, root.atom_api.SpecificPortfolioHoldingResponse, root.atom_api.SpecificPortfolioResponse, root.atom_api.SpecificPortfolioTransactionResponse, root.atom_api.SpecificQuestionnaireResponse, root.atom_api.SpecificScoreResponse, root.atom_api.SpecificSecurityExclusionResponse, root.atom_api.SpecificSecurityPriceResponse, root.atom_api.SpecificSecurityResponse, root.atom_api.SpecificTransactionCodeResponse, root.atom_api.SpecificTransferResponse, root.atom_api.SpecificWithdrawalResponse, root.atom_api.SubscribeAccountResponse, root.atom_api.TransactionCodePayload, root.atom_api.TransferRequestPayload, root.atom_api.WithdrawalPayload);
  }
}(this, function(ApiClient, AccountAllocationPayload, AccountCreatePayload, AccountPermissionPayload, AccountRebalanceBuyOnlyOrderPayload, AccountRebalanceOrderPayload, AccountRebalanceSellOnlyOrderPayload, AccountStagePayload, AccountStatusPayload, AccountSubscribePayload, AccountTransactionResponse, AccountTypePayload, AggregationAccountBalancePayload, AggregationAccountHoldingPayload, AggregationAccountPayload, AggregationAccountTransactionPayload, AllocationAssetSizeResponse, AllocationCompositionPayload, AllocationHoldingsResponse, AllocationPayload, AllocationTransactionResponse, BankLinkPayload, BenchmarkAssetSizeResponse, BenchmarkPayload, BudgetPayload, BulkOrderAccountPayload, BulkOrderClientPayload, BulkOrderFirmPayload, BulkOrderFirmclientaccountResponse, ChangeModelCompositionResponse, ClientAssetSizeResponse, ClientHoldingsResponse, ClientHydroPayload, ClientPayload, ClientResponsePayload, ClientTransactionResponse, CreateAccountResponse, CreateAccountStatusResponse, CreateAggregationAccountBalanceResponse, CreateAggregationAccountHoldingResponse, CreateAggregationAccountResponse, CreateAggregationAccountTransactionResponse, CreateAllocationCompositionResponse, CreateAllocationResponse, CreateBankLinkResponse, CreateBenchmarkResponse, CreateBudgetResponse, CreateClientHydroResponse, CreateClientResponse, CreateClientResponseResponse, CreateDecisionTreeResponse, CreateDepositRequestResponse, CreateFinancialOfferResponse, CreateFundingRequestResponse, CreateGoalResponse, CreateGoalTrackResponse, CreateModelAssetSizeResponse, CreateModelCommentResponse, CreateModelHoldingResponse, CreateModelResponse, CreateModelTransactionResponse, CreateNodeRelationshipResponse, CreateNodeResponse, CreateOrderResponse, CreateOrderStatusResponse, CreateOrderTrackResponse, CreatePortfolioAssetSizeResponse, CreatePortfolioCommentResponse, CreatePortfolioHoldingResponse, CreatePortfolioResponse, CreatePortfolioTransactionResponse, CreateQuestionnaireResponse, CreateScoreResponse, CreateSecurityExclusionResponse, CreateSecurityPriceResponse, CreateSecurityResponse, CreateTransactionCodeResponse, CreateTransferResponse, CreateWithdrawalResponse, DecisionTreePayload, DepositRequestPayload, FinancialOfferPayload, FundingRequestPayload, GetAccountAllocationResponse, GetAccountAssetSizeResponse, GetAccountHoldingResponse, GetAccountPermissionsResponse, GetAccountResponse, GetAccountStageResponse, GetAccountStatusResponse, GetAccountTypeResponse, GetAccountTypeSubresponse, GetAggregationAccountBalanceResponse, GetAggregationAccountHoldingsResponse, GetAggregationAccountTransactionResponse, GetAggregationAccountsResponse, GetAllocationCompositionResponse, GetAllocationResponse, GetBankLinkResponse, GetBenchmarkResponse, GetBudgetResponse, GetBulkOrderResponse, GetClientHydroResponse, GetClientResponse, GetClientResponseResponse, GetDecisionTreeResponse, GetDepositRequestResponse, GetFinancialOfferResponse, GetFundingRequestResponse, GetGoalResponse, GetGoalTrackResponse, GetModelAssetSizeResponse, GetModelCommentResponse, GetModelHoldingResponse, GetModelResponse, GetModelTransactionResponse, GetNodeRelationshipResponse, GetNodeResponse, GetOrderResponse, GetOrderStatusResponse, GetOrderTrackResponse, GetPortfolioAssetSizeResponse, GetPortfolioCommentResponse, GetPortfolioHoldingResponse, GetPortfolioResponse, GetPortfolioTransactionResponse, GetQuestionnaireResponse, GetScoreResponse, GetSecurityExclusionResponse, GetSecurityPriceResponse, GetSecurityResponse, GetTransactionCodeResponse, GetTransferResponse, GetWithdrawalResponse, GoalAssetSizeResponse, GoalHoldingsResponse, GoalPayload, GoalTrackPayload, GoalTransactionsResponse, ModelAssetSizePayload, ModelCommentPayload, ModelCompositionPayload, ModelHoldingPayload, ModelPayload, ModelTransactionPayload, NodePayload, NodeRelationshipPayload, OrderPayload, OrderStatusPayload, OrderTrackPayload, PerformanceResponse, PortfolioAssetSizePayload, PortfolioCommentPayload, PortfolioHoldingPayload, PortfolioPayload, PortfolioRebalanceBuyOnlyOrderPayload, PortfolioRebalanceOrderPayload, PortfolioRebalanceSellOnlyOrderPayload, PortfolioTransactionPayload, QuestionnairePayload, ScorePayload, SecurityExclusionPayload, SecurityPayload, SecurityPricePayload, SellAllAccountPayload, SellAllAccountResponse, SellAllPortfolioPayload, SellAllPortfolioResponse, SpecificAccountAllocationResponse, SpecificAccountPermissionResponse, SpecificAccountResponse, SpecificAccountStageResponse, SpecificAccountStatusResponse, SpecificAggregationAccountBalanceResponse, SpecificAggregationAccountHoldingResponse, SpecificAggregationAccountResponse, SpecificAggregationAccountTransactionResponse, SpecificAllocationCompositionResponse, SpecificAllocationResponse, SpecificBankLinkResponse, SpecificBenchmarkResponse, SpecificBudgetResponse, SpecificClientHydroResponse, SpecificClientResponse, SpecificClientResponseResponse, SpecificDecisionTreeResponse, SpecificDepositRequestResponse, SpecificFinancialOfferResponse, SpecificFundingRequestResponse, SpecificGoalResponse, SpecificGoalTrackResponse, SpecificModelAssetSizeResponse, SpecificModelCommentResponse, SpecificModelHoldingResponse, SpecificModelResponse, SpecificModelTransactionResponse, SpecificNodeRelationshipResponse, SpecificNodeResponse, SpecificOrderResponse, SpecificOrderStatusResponse, SpecificOrderTrackResponse, SpecificPortfolioAssetSizeResponse, SpecificPortfolioCommentResponse, SpecificPortfolioHoldingResponse, SpecificPortfolioResponse, SpecificPortfolioTransactionResponse, SpecificQuestionnaireResponse, SpecificScoreResponse, SpecificSecurityExclusionResponse, SpecificSecurityPriceResponse, SpecificSecurityResponse, SpecificTransactionCodeResponse, SpecificTransferResponse, SpecificWithdrawalResponse, SubscribeAccountResponse, TransactionCodePayload, TransferRequestPayload, WithdrawalPayload) {
  'use strict';

  /**
   * Nucleus service.
   * @module api/NucleusApi
   * @version 1.0.1
   */

  /**
   * Constructs a new NucleusApi. 
   * @alias module:api/NucleusApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/NucleusApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account
     * @param {String} accountId UUID of an account
     * @param {module:api/NucleusApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccount = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteAccount");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountAllocation operation.
     * @callback module:api/NucleusApi~deleteAccountAllocationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account allocation
     * @param {String} accountAllocationId UUID of an account allocation
     * @param {module:api/NucleusApi~deleteAccountAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountAllocation = function(accountAllocationId, callback) {
      var postBody = null;

      // verify the required parameter 'accountAllocationId' is set
      if (accountAllocationId === undefined || accountAllocationId === null) {
        throw new Error("Missing the required parameter 'accountAllocationId' when calling deleteAccountAllocation");
      }


      var pathParams = {
        'account_allocation_id': accountAllocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/account_allocation/{account_allocation_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountPermission operation.
     * @callback module:api/NucleusApi~deleteAccountPermissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account&#39;s permissions
     * @param {String} accountId UUID of an account
     * @param {module:api/NucleusApi~deleteAccountPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountPermission = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteAccountPermission");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/account_permission/{account_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountStage operation.
     * @callback module:api/NucleusApi~deleteAccountStageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account stage
     * @param {String} stageId UUID of an account stage
     * @param {module:api/NucleusApi~deleteAccountStageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountStage = function(stageId, callback) {
      var postBody = null;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling deleteAccountStage");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/stage/{stage_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountStatus operation.
     * @callback module:api/NucleusApi~deleteAccountStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account status
     * @param {String} accountStatusId UUID of an account status
     * @param {module:api/NucleusApi~deleteAccountStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountStatus = function(accountStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'accountStatusId' is set
      if (accountStatusId === undefined || accountStatusId === null) {
        throw new Error("Missing the required parameter 'accountStatusId' when calling deleteAccountStatus");
      }


      var pathParams = {
        'account_status_id': accountStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/account_status/{account_status_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountType operation.
     * @callback module:api/NucleusApi~deleteAccountTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account type
     * @param {String} accountTypeId UUID of an account type
     * @param {module:api/NucleusApi~deleteAccountTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAccountType = function(accountTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'accountTypeId' is set
      if (accountTypeId === undefined || accountTypeId === null) {
        throw new Error("Missing the required parameter 'accountTypeId' when calling deleteAccountType");
      }


      var pathParams = {
        'account_type_id': accountTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/account_type/{account_type_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccount operation.
     * @callback module:api/NucleusApi~deleteAggregationAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account
     * @param {String} aggregationAccountId UUID of an aggregation account
     * @param {module:api/NucleusApi~deleteAggregationAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccount = function(aggregationAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountId' is set
      if (aggregationAccountId === undefined || aggregationAccountId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountId' when calling deleteAggregationAccount");
      }


      var pathParams = {
        'aggregation_account_id': aggregationAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccountBalance operation.
     * @callback module:api/NucleusApi~deleteAggregationAccountBalanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account balance
     * @param {String} aggregationAccountBalanceId UUID of an aggregation account balance
     * @param {module:api/NucleusApi~deleteAggregationAccountBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccountBalance = function(aggregationAccountBalanceId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountBalanceId' is set
      if (aggregationAccountBalanceId === undefined || aggregationAccountBalanceId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalanceId' when calling deleteAggregationAccountBalance");
      }


      var pathParams = {
        'aggregation_account_balance_id': aggregationAccountBalanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccountHolding operation.
     * @callback module:api/NucleusApi~deleteAggregationAccountHoldingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account holding
     * @param {String} aggregationAccountHoldingId UUID of an aggregation account holding
     * @param {module:api/NucleusApi~deleteAggregationAccountHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccountHolding = function(aggregationAccountHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountHoldingId' is set
      if (aggregationAccountHoldingId === undefined || aggregationAccountHoldingId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHoldingId' when calling deleteAggregationAccountHolding");
      }


      var pathParams = {
        'aggregation_account_holding_id': aggregationAccountHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccountTransaction operation.
     * @callback module:api/NucleusApi~deleteAggregationAccountTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account transaction
     * @param {String} aggregationAccountTransactionId UUID of an aggregation account transaction
     * @param {module:api/NucleusApi~deleteAggregationAccountTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccountTransaction = function(aggregationAccountTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountTransactionId' is set
      if (aggregationAccountTransactionId === undefined || aggregationAccountTransactionId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransactionId' when calling deleteAggregationAccountTransaction");
      }


      var pathParams = {
        'aggregation_account_transaction_id': aggregationAccountTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllocation operation.
     * @callback module:api/NucleusApi~deleteAllocationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an allocation
     * @param {String} allocationId UUID of an allocation
     * @param {module:api/NucleusApi~deleteAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAllocation = function(allocationId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling deleteAllocation");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation/{allocation_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllocationComposition operation.
     * @callback module:api/NucleusApi~deleteAllocationCompositionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an allocation composition
     * @param {String} allocationCompositionId UUID of an allocation composition
     * @param {module:api/NucleusApi~deleteAllocationCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAllocationComposition = function(allocationCompositionId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationCompositionId' is set
      if (allocationCompositionId === undefined || allocationCompositionId === null) {
        throw new Error("Missing the required parameter 'allocationCompositionId' when calling deleteAllocationComposition");
      }


      var pathParams = {
        'allocation_composition_id': allocationCompositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation_composition/{allocation_composition_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankLink operation.
     * @callback module:api/NucleusApi~deleteBankLinkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a bank link
     * @param {String} bankLinkId UUID of a bank link
     * @param {module:api/NucleusApi~deleteBankLinkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBankLink = function(bankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling deleteBankLink");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link/{bank_link_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBenchmark operation.
     * @callback module:api/NucleusApi~deleteBenchmarkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a benchmark
     * @param {String} benchmarkId UUID of a benchmark
     * @param {module:api/NucleusApi~deleteBenchmarkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBenchmark = function(benchmarkId, callback) {
      var postBody = null;

      // verify the required parameter 'benchmarkId' is set
      if (benchmarkId === undefined || benchmarkId === null) {
        throw new Error("Missing the required parameter 'benchmarkId' when calling deleteBenchmark");
      }


      var pathParams = {
        'benchmark_id': benchmarkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/benchmark/{benchmark_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBudget operation.
     * @callback module:api/NucleusApi~deleteBudgetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a budget
     * @param {String} budgetId UUID of a budget
     * @param {module:api/NucleusApi~deleteBudgetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBudget = function(budgetId, callback) {
      var postBody = null;

      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling deleteBudget");
      }


      var pathParams = {
        'budget_id': budgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/budget/{budget_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClient operation.
     * @callback module:api/NucleusApi~deleteClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client
     * @param {String} clientId UUID of a client
     * @param {module:api/NucleusApi~deleteClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClient = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteClient");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClientHydro operation.
     * @callback module:api/NucleusApi~deleteClientHydroCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client-hydro relationship
     * @param {String} clientHydroId UUID of a client-hydro relationship
     * @param {module:api/NucleusApi~deleteClientHydroCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClientHydro = function(clientHydroId, callback) {
      var postBody = null;

      // verify the required parameter 'clientHydroId' is set
      if (clientHydroId === undefined || clientHydroId === null) {
        throw new Error("Missing the required parameter 'clientHydroId' when calling deleteClientHydro");
      }


      var pathParams = {
        'client_hydro_id': clientHydroId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/client_hydro/{client_hydro_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClientResponse operation.
     * @callback module:api/NucleusApi~deleteClientResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client response
     * @param {String} clientResponseId UUID of a client response
     * @param {module:api/NucleusApi~deleteClientResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClientResponse = function(clientResponseId, callback) {
      var postBody = null;

      // verify the required parameter 'clientResponseId' is set
      if (clientResponseId === undefined || clientResponseId === null) {
        throw new Error("Missing the required parameter 'clientResponseId' when calling deleteClientResponse");
      }


      var pathParams = {
        'client_response_id': clientResponseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/client_response/{client_response_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDecisionTree operation.
     * @callback module:api/NucleusApi~deleteDecisionTreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a decision tree
     * @param {String} decisionTreeId UUID of a decision tree
     * @param {module:api/NucleusApi~deleteDecisionTreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDecisionTree = function(decisionTreeId, callback) {
      var postBody = null;

      // verify the required parameter 'decisionTreeId' is set
      if (decisionTreeId === undefined || decisionTreeId === null) {
        throw new Error("Missing the required parameter 'decisionTreeId' when calling deleteDecisionTree");
      }


      var pathParams = {
        'decision_tree_id': decisionTreeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/decision_tree/{decision_tree_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDepositRequest operation.
     * @callback module:api/NucleusApi~deleteDepositRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deposit request
     * @param {String} depositId UUID of a deposit record
     * @param {module:api/NucleusApi~deleteDepositRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDepositRequest = function(depositId, callback) {
      var postBody = null;

      // verify the required parameter 'depositId' is set
      if (depositId === undefined || depositId === null) {
        throw new Error("Missing the required parameter 'depositId' when calling deleteDepositRequest");
      }


      var pathParams = {
        'deposit_id': depositId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/deposit/{deposit_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFinancialOffer operation.
     * @callback module:api/NucleusApi~deleteFinancialOfferCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a financial offer
     * @param {String} financialOfferId UUID of a financial offer
     * @param {module:api/NucleusApi~deleteFinancialOfferCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFinancialOffer = function(financialOfferId, callback) {
      var postBody = null;

      // verify the required parameter 'financialOfferId' is set
      if (financialOfferId === undefined || financialOfferId === null) {
        throw new Error("Missing the required parameter 'financialOfferId' when calling deleteFinancialOffer");
      }


      var pathParams = {
        'financial_offer_id': financialOfferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_offer/{financial_offer_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFundingRequest operation.
     * @callback module:api/NucleusApi~deleteFundingRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a funding request
     * @param {String} fundingId UUID of a funding record
     * @param {module:api/NucleusApi~deleteFundingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFundingRequest = function(fundingId, callback) {
      var postBody = null;

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling deleteFundingRequest");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/funding/{funding_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGoal operation.
     * @callback module:api/NucleusApi~deleteGoalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a goal
     * @param {String} goalId UUID of a goal
     * @param {module:api/NucleusApi~deleteGoalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteGoal = function(goalId, callback) {
      var postBody = null;

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling deleteGoal");
      }


      var pathParams = {
        'goal_id': goalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/goal/{goal_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGoalTrackRecord operation.
     * @callback module:api/NucleusApi~deleteGoalTrackRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a goal track record
     * @param {String} goalTrackId UUID of a goal tracking record
     * @param {module:api/NucleusApi~deleteGoalTrackRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteGoalTrackRecord = function(goalTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'goalTrackId' is set
      if (goalTrackId === undefined || goalTrackId === null) {
        throw new Error("Missing the required parameter 'goalTrackId' when calling deleteGoalTrackRecord");
      }


      var pathParams = {
        'goal_track_id': goalTrackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/goal_track/{goal_track_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:api/NucleusApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model
     * @param {String} modelId UUID of a model
     * @param {module:api/NucleusApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModel = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling deleteModel");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelAssetSize operation.
     * @callback module:api/NucleusApi~deleteModelAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model asset size
     * @param {String} modelAssetSizeId UUID of a model asset size record
     * @param {module:api/NucleusApi~deleteModelAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelAssetSize = function(modelAssetSizeId, callback) {
      var postBody = null;

      // verify the required parameter 'modelAssetSizeId' is set
      if (modelAssetSizeId === undefined || modelAssetSizeId === null) {
        throw new Error("Missing the required parameter 'modelAssetSizeId' when calling deleteModelAssetSize");
      }


      var pathParams = {
        'model_asset_size_id': modelAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size/{model_asset_size_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelComment operation.
     * @callback module:api/NucleusApi~deleteModelCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model commentary
     * @param {String} modelCommentId UUID of a model comment
     * @param {module:api/NucleusApi~deleteModelCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelComment = function(modelCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'modelCommentId' is set
      if (modelCommentId === undefined || modelCommentId === null) {
        throw new Error("Missing the required parameter 'modelCommentId' when calling deleteModelComment");
      }


      var pathParams = {
        'model_comment_id': modelCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment/{model_comment_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelHolding operation.
     * @callback module:api/NucleusApi~deleteModelHoldingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model holding
     * @param {String} modelHoldingId UUID of a model holding record
     * @param {module:api/NucleusApi~deleteModelHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelHolding = function(modelHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'modelHoldingId' is set
      if (modelHoldingId === undefined || modelHoldingId === null) {
        throw new Error("Missing the required parameter 'modelHoldingId' when calling deleteModelHolding");
      }


      var pathParams = {
        'model_holding_id': modelHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding/{model_holding_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModelTransaction operation.
     * @callback module:api/NucleusApi~deleteModelTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model transaction
     * @param {String} modelTransactionId UUID of a model transaction record
     * @param {module:api/NucleusApi~deleteModelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteModelTransaction = function(modelTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'modelTransactionId' is set
      if (modelTransactionId === undefined || modelTransactionId === null) {
        throw new Error("Missing the required parameter 'modelTransactionId' when calling deleteModelTransaction");
      }


      var pathParams = {
        'model_transaction_id': modelTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction/{model_transaction_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNode operation.
     * @callback module:api/NucleusApi~deleteNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a node
     * @param {String} nodeId UUID of a node
     * @param {module:api/NucleusApi~deleteNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNode = function(nodeId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling deleteNode");
      }


      var pathParams = {
        'node_id': nodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/node/{node_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNodeRelationship operation.
     * @callback module:api/NucleusApi~deleteNodeRelationshipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a node relationship
     * @param {String} nodeRelationshipId UUID of a node relationship
     * @param {module:api/NucleusApi~deleteNodeRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteNodeRelationship = function(nodeRelationshipId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeRelationshipId' is set
      if (nodeRelationshipId === undefined || nodeRelationshipId === null) {
        throw new Error("Missing the required parameter 'nodeRelationshipId' when calling deleteNodeRelationship");
      }


      var pathParams = {
        'node_relationship_id': nodeRelationshipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/node_relationship/{node_relationship_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderRecord operation.
     * @callback module:api/NucleusApi~deleteOrderRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order record
     * @param {String} orderId UUID of an order record
     * @param {module:api/NucleusApi~deleteOrderRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrderRecord = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling deleteOrderRecord");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/order/{order_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderStatus operation.
     * @callback module:api/NucleusApi~deleteOrderStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order status
     * @param {String} orderStatusId UUID of an order status record
     * @param {module:api/NucleusApi~deleteOrderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrderStatus = function(orderStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'orderStatusId' is set
      if (orderStatusId === undefined || orderStatusId === null) {
        throw new Error("Missing the required parameter 'orderStatusId' when calling deleteOrderStatus");
      }


      var pathParams = {
        'order_status_id': orderStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status/{order_status_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOrderTrackingRecord operation.
     * @callback module:api/NucleusApi~deleteOrderTrackingRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order tracking record
     * @param {String} orderTrackId UUID of an order tracking record
     * @param {module:api/NucleusApi~deleteOrderTrackingRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteOrderTrackingRecord = function(orderTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'orderTrackId' is set
      if (orderTrackId === undefined || orderTrackId === null) {
        throw new Error("Missing the required parameter 'orderTrackId' when calling deleteOrderTrackingRecord");
      }


      var pathParams = {
        'order_track_id': orderTrackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track/{order_track_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolio operation.
     * @callback module:api/NucleusApi~deletePortfolioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:api/NucleusApi~deletePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolio = function(portfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling deletePortfolio");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioAssetSize operation.
     * @callback module:api/NucleusApi~deletePortfolioAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio asset size
     * @param {String} portfolioAssetSizeId UUID of a portfolio asset size record
     * @param {module:api/NucleusApi~deletePortfolioAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioAssetSize = function(portfolioAssetSizeId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioAssetSizeId' is set
      if (portfolioAssetSizeId === undefined || portfolioAssetSizeId === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSizeId' when calling deletePortfolioAssetSize");
      }


      var pathParams = {
        'portfolio_asset_size_id': portfolioAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioComment operation.
     * @callback module:api/NucleusApi~deletePortfolioCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio commentary
     * @param {String} portfolioCommentId UUID of a portfolio comment
     * @param {module:api/NucleusApi~deletePortfolioCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioComment = function(portfolioCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioCommentId' is set
      if (portfolioCommentId === undefined || portfolioCommentId === null) {
        throw new Error("Missing the required parameter 'portfolioCommentId' when calling deletePortfolioComment");
      }


      var pathParams = {
        'portfolio_comment_id': portfolioCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment/{portfolio_comment_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioHolding operation.
     * @callback module:api/NucleusApi~deletePortfolioHoldingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio holding
     * @param {String} portfolioHoldingId UUID of a portfolio holding record
     * @param {module:api/NucleusApi~deletePortfolioHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioHolding = function(portfolioHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioHoldingId' is set
      if (portfolioHoldingId === undefined || portfolioHoldingId === null) {
        throw new Error("Missing the required parameter 'portfolioHoldingId' when calling deletePortfolioHolding");
      }


      var pathParams = {
        'portfolio_holding_id': portfolioHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding/{portfolio_holding_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioTransaction operation.
     * @callback module:api/NucleusApi~deletePortfolioTransactionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a portfolio transaction
     * @param {String} portfolioTransactionId UUID of a portfolio transaction record
     * @param {module:api/NucleusApi~deletePortfolioTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioTransaction = function(portfolioTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioTransactionId' is set
      if (portfolioTransactionId === undefined || portfolioTransactionId === null) {
        throw new Error("Missing the required parameter 'portfolioTransactionId' when calling deletePortfolioTransaction");
      }


      var pathParams = {
        'portfolio_transaction_id': portfolioTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQuestionnaire operation.
     * @callback module:api/NucleusApi~deleteQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a questionnaire
     * @param {String} questionnaireId UUID of a questionnaire
     * @param {module:api/NucleusApi~deleteQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteQuestionnaire = function(questionnaireId, callback) {
      var postBody = null;

      // verify the required parameter 'questionnaireId' is set
      if (questionnaireId === undefined || questionnaireId === null) {
        throw new Error("Missing the required parameter 'questionnaireId' when calling deleteQuestionnaire");
      }


      var pathParams = {
        'questionnaire_id': questionnaireId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/questionnaire/{questionnaire_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScore operation.
     * @callback module:api/NucleusApi~deleteScoreCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a score
     * @param {String} scoreId UUID of a score record
     * @param {module:api/NucleusApi~deleteScoreCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteScore = function(scoreId, callback) {
      var postBody = null;

      // verify the required parameter 'scoreId' is set
      if (scoreId === undefined || scoreId === null) {
        throw new Error("Missing the required parameter 'scoreId' when calling deleteScore");
      }


      var pathParams = {
        'score_id': scoreId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/score/{score_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecurity operation.
     * @callback module:api/NucleusApi~deleteSecurityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security
     * @param {String} securityId UUID of a security
     * @param {module:api/NucleusApi~deleteSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSecurity = function(securityId, callback) {
      var postBody = null;

      // verify the required parameter 'securityId' is set
      if (securityId === undefined || securityId === null) {
        throw new Error("Missing the required parameter 'securityId' when calling deleteSecurity");
      }


      var pathParams = {
        'security_id': securityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/security/{security_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecurityExclusion operation.
     * @callback module:api/NucleusApi~deleteSecurityExclusionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security exclusion
     * @param {String} securityExclusionId UUID of a security exclusion record
     * @param {module:api/NucleusApi~deleteSecurityExclusionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSecurityExclusion = function(securityExclusionId, callback) {
      var postBody = null;

      // verify the required parameter 'securityExclusionId' is set
      if (securityExclusionId === undefined || securityExclusionId === null) {
        throw new Error("Missing the required parameter 'securityExclusionId' when calling deleteSecurityExclusion");
      }


      var pathParams = {
        'security_exclusion_id': securityExclusionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/security_exclusion/{security_exclusion_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecurityPrice operation.
     * @callback module:api/NucleusApi~deleteSecurityPriceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a security price
     * @param {String} securityPriceId UUID of a security price record
     * @param {module:api/NucleusApi~deleteSecurityPriceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSecurityPrice = function(securityPriceId, callback) {
      var postBody = null;

      // verify the required parameter 'securityPriceId' is set
      if (securityPriceId === undefined || securityPriceId === null) {
        throw new Error("Missing the required parameter 'securityPriceId' when calling deleteSecurityPrice");
      }


      var pathParams = {
        'security_price_id': securityPriceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/security_price/{security_price_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransactionCode operation.
     * @callback module:api/NucleusApi~deleteTransactionCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transaction code
     * @param {String} transactionCodeId UUID of a transaction code
     * @param {module:api/NucleusApi~deleteTransactionCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransactionCode = function(transactionCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling deleteTransactionCode");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code/{transaction_code_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTransferRequest operation.
     * @callback module:api/NucleusApi~deleteTransferRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transfer request
     * @param {String} transferId UUID of an account transfer record
     * @param {module:api/NucleusApi~deleteTransferRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteTransferRequest = function(transferId, callback) {
      var postBody = null;

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling deleteTransferRequest");
      }


      var pathParams = {
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer/{transfer_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWithdrawalRequest operation.
     * @callback module:api/NucleusApi~deleteWithdrawalRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a withdrawal request
     * @param {String} withdrawalId UUID of a withdrawal request
     * @param {module:api/NucleusApi~deleteWithdrawalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWithdrawalRequest = function(withdrawalId, callback) {
      var postBody = null;

      // verify the required parameter 'withdrawalId' is set
      if (withdrawalId === undefined || withdrawalId === null) {
        throw new Error("Missing the required parameter 'withdrawalId' when calling deleteWithdrawalRequest");
      }


      var pathParams = {
        'withdrawal_id': withdrawalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/withdrawal/{withdrawal_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/NucleusApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account
     * @param {String} accountId UUID of an account
     * @param {module:api/NucleusApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountResponse}
     */
    this.getAccount = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccount");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAllocation operation.
     * @callback module:api/NucleusApi~getAccountAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account allocation
     * @param {String} accountAllocationId UUID of an account allocation
     * @param {module:api/NucleusApi~getAccountAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountAllocationResponse}
     */
    this.getAccountAllocation = function(accountAllocationId, callback) {
      var postBody = null;

      // verify the required parameter 'accountAllocationId' is set
      if (accountAllocationId === undefined || accountAllocationId === null) {
        throw new Error("Missing the required parameter 'accountAllocationId' when calling getAccountAllocation");
      }


      var pathParams = {
        'account_allocation_id': accountAllocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_allocation/{account_allocation_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAllocations operation.
     * @callback module:api/NucleusApi~getAccountAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account allocations
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountAllocationResponse}
     */
    this.getAccountAllocations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_allocation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountAssetSizes operation.
     * @callback module:api/NucleusApi~getAccountAssetSizesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account asset sizes
     * @param {String} accountId UUID of an account
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountAssetSizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountAssetSizeResponse}
     */
    this.getAccountAssetSizes = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountAssetSizes");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountHoldings operation.
     * @callback module:api/NucleusApi~getAccountHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account holdings
     * @param {String} accountId UUID of an account
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountHoldingResponse}
     */
    this.getAccountHoldings = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountHoldings");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountPerformance operation.
     * @callback module:api/NucleusApi~getAccountPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account performance
     * @param {String} accountId UUID of an account
     * @param {module:model/String} stat Performance statistic
     * @param {module:api/NucleusApi~getAccountPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getAccountPerformance = function(accountId, stat, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getAccountPerformance");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'stat': stat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountPermission operation.
     * @callback module:api/NucleusApi~getAccountPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountPermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account&#39;s permission
     * @param {String} accountId UUID of an account
     * @param {module:api/NucleusApi~getAccountPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountPermissionResponse}
     */
    this.getAccountPermission = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountPermission");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountPermissionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_permission/{account_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountPermissions operation.
     * @callback module:api/NucleusApi~getAccountPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account permissions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountPermissionsResponse}
     */
    this.getAccountPermissions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountPermissionsResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_permission', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStage operation.
     * @callback module:api/NucleusApi~getAccountStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountStageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account stage
     * @param {String} stageId UUID of an account stage
     * @param {module:api/NucleusApi~getAccountStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountStageResponse}
     */
    this.getAccountStage = function(stageId, callback) {
      var postBody = null;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling getAccountStage");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountStageResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/stage/{stage_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStages operation.
     * @callback module:api/NucleusApi~getAccountStagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountStageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account stages
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountStageResponse}
     */
    this.getAccountStages = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountStageResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/stage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStatus operation.
     * @callback module:api/NucleusApi~getAccountStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account status
     * @param {String} accountStatusId UUID of an account status
     * @param {module:api/NucleusApi~getAccountStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountStatusResponse}
     */
    this.getAccountStatus = function(accountStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'accountStatusId' is set
      if (accountStatusId === undefined || accountStatusId === null) {
        throw new Error("Missing the required parameter 'accountStatusId' when calling getAccountStatus");
      }


      var pathParams = {
        'account_status_id': accountStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_status/{account_status_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountStatuses operation.
     * @callback module:api/NucleusApi~getAccountStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account statuses
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountStatusResponse}
     */
    this.getAccountStatuses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountTransactions operation.
     * @callback module:api/NucleusApi~getAccountTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account transactions
     * @param {String} accountId UUID of an account
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountTransactionResponse}
     */
    this.getAccountTransactions = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling getAccountTransactions");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountType operation.
     * @callback module:api/NucleusApi~getAccountTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountTypeSubresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an account type
     * @param {String} accountTypeId UUID of an account type
     * @param {module:api/NucleusApi~getAccountTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountTypeSubresponse}
     */
    this.getAccountType = function(accountTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'accountTypeId' is set
      if (accountTypeId === undefined || accountTypeId === null) {
        throw new Error("Missing the required parameter 'accountTypeId' when calling getAccountType");
      }


      var pathParams = {
        'account_type_id': accountTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountTypeSubresponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_type/{account_type_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountTypes operation.
     * @callback module:api/NucleusApi~getAccountTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all account types
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountTypeResponse}
     */
    this.getAccountTypes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountTypeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_type', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccounts operation.
     * @callback module:api/NucleusApi~getAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for all accounts for all clients defined for your firm
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountResponse}
     */
    this.getAccounts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccount operation.
     * @callback module:api/NucleusApi~getAggregationAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account
     * @param {String} aggregationAccountId UUID of an aggregation account
     * @param {module:api/NucleusApi~getAggregationAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountResponse}
     */
    this.getAggregationAccount = function(aggregationAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountId' is set
      if (aggregationAccountId === undefined || aggregationAccountId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountId' when calling getAggregationAccount");
      }


      var pathParams = {
        'aggregation_account_id': aggregationAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountBalance operation.
     * @callback module:api/NucleusApi~getAggregationAccountBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account balance
     * @param {String} aggregationAccountBalanceId UUID of an aggregation account balance
     * @param {module:api/NucleusApi~getAggregationAccountBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountBalanceResponse}
     */
    this.getAggregationAccountBalance = function(aggregationAccountBalanceId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountBalanceId' is set
      if (aggregationAccountBalanceId === undefined || aggregationAccountBalanceId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalanceId' when calling getAggregationAccountBalance");
      }


      var pathParams = {
        'aggregation_account_balance_id': aggregationAccountBalanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountBalanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountBalances operation.
     * @callback module:api/NucleusApi~getAggregationAccountBalancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAggregationAccountBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation account balances
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAggregationAccountBalancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAggregationAccountBalanceResponse}
     */
    this.getAggregationAccountBalances = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAggregationAccountBalanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountHolding operation.
     * @callback module:api/NucleusApi~getAggregationAccountHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account holding
     * @param {String} aggregationAccountHoldingId UUID of an aggregation account holding
     * @param {module:api/NucleusApi~getAggregationAccountHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountHoldingResponse}
     */
    this.getAggregationAccountHolding = function(aggregationAccountHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountHoldingId' is set
      if (aggregationAccountHoldingId === undefined || aggregationAccountHoldingId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHoldingId' when calling getAggregationAccountHolding");
      }


      var pathParams = {
        'aggregation_account_holding_id': aggregationAccountHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountHoldings operation.
     * @callback module:api/NucleusApi~getAggregationAccountHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAggregationAccountHoldingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation account holdings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAggregationAccountHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAggregationAccountHoldingsResponse}
     */
    this.getAggregationAccountHoldings = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAggregationAccountHoldingsResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountTransaction operation.
     * @callback module:api/NucleusApi~getAggregationAccountTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account transaction
     * @param {String} aggregationAccountTransactionId UUID of an aggregation account transaction
     * @param {module:api/NucleusApi~getAggregationAccountTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountTransactionResponse}
     */
    this.getAggregationAccountTransaction = function(aggregationAccountTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountTransactionId' is set
      if (aggregationAccountTransactionId === undefined || aggregationAccountTransactionId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransactionId' when calling getAggregationAccountTransaction");
      }


      var pathParams = {
        'aggregation_account_transaction_id': aggregationAccountTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountTransactions operation.
     * @callback module:api/NucleusApi~getAggregationAccountTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAggregationAccountTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation account transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAggregationAccountTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAggregationAccountTransactionResponse}
     */
    this.getAggregationAccountTransactions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAggregationAccountTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccounts operation.
     * @callback module:api/NucleusApi~getAggregationAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAggregationAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation accounts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAggregationAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAggregationAccountsResponse}
     */
    this.getAggregationAccounts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAggregationAccountsResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocation operation.
     * @callback module:api/NucleusApi~getAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an allocation
     * @param {String} allocationId UUID of an allocation
     * @param {module:api/NucleusApi~getAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAllocationResponse}
     */
    this.getAllocation = function(allocationId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocation");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation/{allocation_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationAssetSizes operation.
     * @callback module:api/NucleusApi~getAllocationAssetSizesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocation asset sizes
     * @param {String} allocationId UUID of an allocation
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAllocationAssetSizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationAssetSizeResponse}
     */
    this.getAllocationAssetSizes = function(allocationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocationAssetSizes");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AllocationAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation/{allocation_id}/asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationComposition operation.
     * @callback module:api/NucleusApi~getAllocationCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAllocationCompositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an allocation composition
     * @param {String} allocationCompositionId UUID of an allocation composition
     * @param {module:api/NucleusApi~getAllocationCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAllocationCompositionResponse}
     */
    this.getAllocationComposition = function(allocationCompositionId, callback) {
      var postBody = null;

      // verify the required parameter 'allocationCompositionId' is set
      if (allocationCompositionId === undefined || allocationCompositionId === null) {
        throw new Error("Missing the required parameter 'allocationCompositionId' when calling getAllocationComposition");
      }


      var pathParams = {
        'allocation_composition_id': allocationCompositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAllocationCompositionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation_composition/{allocation_composition_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationCompositions operation.
     * @callback module:api/NucleusApi~getAllocationCompositionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllocationCompositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocation compositions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAllocationCompositionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllocationCompositionResponse}
     */
    this.getAllocationCompositions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAllocationCompositionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation_composition', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationHoldings operation.
     * @callback module:api/NucleusApi~getAllocationHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationHoldingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocation holdings
     * @param {String} allocationId UUID of an allocation
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAllocationHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationHoldingsResponse}
     */
    this.getAllocationHoldings = function(allocationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocationHoldings");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AllocationHoldingsResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation/{allocation_id}/holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationPerformance operation.
     * @callback module:api/NucleusApi~getAllocationPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get allocation performance
     * @param {String} allocationId UUID of an allocation
     * @param {module:model/String} stat Performance statistic
     * @param {module:api/NucleusApi~getAllocationPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getAllocationPerformance = function(allocationId, stat, callback) {
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocationPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getAllocationPerformance");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'stat': stat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation/{allocation_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocationTransactions operation.
     * @callback module:api/NucleusApi~getAllocationTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocation transactions
     * @param {String} allocationId UUID of an allocation
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAllocationTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationTransactionResponse}
     */
    this.getAllocationTransactions = function(allocationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling getAllocationTransactions");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AllocationTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation/{allocation_id}/transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllocations operation.
     * @callback module:api/NucleusApi~getAllocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all allocations
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getAllocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllocationResponse}
     */
    this.getAllocations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankLink operation.
     * @callback module:api/NucleusApi~getBankLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificBankLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a bank link
     * @param {String} bankLinkId UUID of a bank link
     * @param {module:api/NucleusApi~getBankLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificBankLinkResponse}
     */
    this.getBankLink = function(bankLinkId, callback) {
      var postBody = null;

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling getBankLink");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificBankLinkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link/{bank_link_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBankLinks operation.
     * @callback module:api/NucleusApi~getBankLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBankLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all bank links
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getBankLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBankLinkResponse}
     */
    this.getBankLinks = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBankLinkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBenchmark operation.
     * @callback module:api/NucleusApi~getBenchmarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificBenchmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a benchmark
     * @param {String} benchmarkId UUID of a benchmark
     * @param {module:api/NucleusApi~getBenchmarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificBenchmarkResponse}
     */
    this.getBenchmark = function(benchmarkId, callback) {
      var postBody = null;

      // verify the required parameter 'benchmarkId' is set
      if (benchmarkId === undefined || benchmarkId === null) {
        throw new Error("Missing the required parameter 'benchmarkId' when calling getBenchmark");
      }


      var pathParams = {
        'benchmark_id': benchmarkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificBenchmarkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/benchmark/{benchmark_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBenchmarkAssetSizes operation.
     * @callback module:api/NucleusApi~getBenchmarkAssetSizesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BenchmarkAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all benchmark asset sizes
     * @param {String} benchmarkId UUID of a benchmark
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getBenchmarkAssetSizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BenchmarkAssetSizeResponse}
     */
    this.getBenchmarkAssetSizes = function(benchmarkId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'benchmarkId' is set
      if (benchmarkId === undefined || benchmarkId === null) {
        throw new Error("Missing the required parameter 'benchmarkId' when calling getBenchmarkAssetSizes");
      }


      var pathParams = {
        'benchmark_id': benchmarkId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BenchmarkAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/benchmark/{benchmark_id}/asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBenchmarkPerformance operation.
     * @callback module:api/NucleusApi~getBenchmarkPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get benchmark performance
     * @param {String} benchmarkId UUID of a benchmark
     * @param {module:model/String} stat Performance statistic
     * @param {module:api/NucleusApi~getBenchmarkPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getBenchmarkPerformance = function(benchmarkId, stat, callback) {
      var postBody = null;

      // verify the required parameter 'benchmarkId' is set
      if (benchmarkId === undefined || benchmarkId === null) {
        throw new Error("Missing the required parameter 'benchmarkId' when calling getBenchmarkPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getBenchmarkPerformance");
      }


      var pathParams = {
        'benchmark_id': benchmarkId
      };
      var queryParams = {
        'stat': stat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/benchmark/{benchmark_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBenchmarks operation.
     * @callback module:api/NucleusApi~getBenchmarksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBenchmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all benchmarks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getBenchmarksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBenchmarkResponse}
     */
    this.getBenchmarks = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBenchmarkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/benchmark', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBudget operation.
     * @callback module:api/NucleusApi~getBudgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificBudgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a budget
     * @param {String} budgetId UUID of a budget
     * @param {module:api/NucleusApi~getBudgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificBudgetResponse}
     */
    this.getBudget = function(budgetId, callback) {
      var postBody = null;

      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling getBudget");
      }


      var pathParams = {
        'budget_id': budgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificBudgetResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/budget/{budget_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBudgets operation.
     * @callback module:api/NucleusApi~getBudgetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBudgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all budgets
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getBudgetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBudgetResponse}
     */
    this.getBudgets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBudgetResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/budget', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBulkOrders operation.
     * @callback module:api/NucleusApi~getBulkOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBulkOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all bulk orders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getBulkOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBulkOrderResponse}
     */
    this.getBulkOrders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetBulkOrderResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_bulk', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClient operation.
     * @callback module:api/NucleusApi~getClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client
     * @param {String} clientId UUID of a client
     * @param {module:api/NucleusApi~getClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientResponse}
     */
    this.getClient = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClient");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientAssetSizes operation.
     * @callback module:api/NucleusApi~getClientAssetSizesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client asset sizes
     * @param {String} clientId UUID of a client
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getClientAssetSizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientAssetSizeResponse}
     */
    this.getClientAssetSizes = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientAssetSizes");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}/asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientHoldings operation.
     * @callback module:api/NucleusApi~getClientHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientHoldingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client holdings
     * @param {String} clientId UUID of a client
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getClientHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientHoldingsResponse}
     */
    this.getClientHoldings = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientHoldings");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientHoldingsResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}/holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientHydro operation.
     * @callback module:api/NucleusApi~getClientHydroCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientHydroResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client-hydro relationship
     * @param {String} clientHydroId UUID of a client-hydro relationship
     * @param {module:api/NucleusApi~getClientHydroCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientHydroResponse}
     */
    this.getClientHydro = function(clientHydroId, callback) {
      var postBody = null;

      // verify the required parameter 'clientHydroId' is set
      if (clientHydroId === undefined || clientHydroId === null) {
        throw new Error("Missing the required parameter 'clientHydroId' when calling getClientHydro");
      }


      var pathParams = {
        'client_hydro_id': clientHydroId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientHydroResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_hydro/{client_hydro_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientHydros operation.
     * @callback module:api/NucleusApi~getClientHydrosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClientHydroResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client-hydro relationships
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getClientHydrosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClientHydroResponse}
     */
    this.getClientHydros = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetClientHydroResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_hydro', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientPerformance operation.
     * @callback module:api/NucleusApi~getClientPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get client performance
     * @param {String} clientId UUID of a client
     * @param {module:model/String} stat Performance statistic
     * @param {module:api/NucleusApi~getClientPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getClientPerformance = function(clientId, stat, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getClientPerformance");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'stat': stat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientResponse operation.
     * @callback module:api/NucleusApi~getClientResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client response
     * @param {String} clientResponseId UUID of a client response
     * @param {module:api/NucleusApi~getClientResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientResponseResponse}
     */
    this.getClientResponse = function(clientResponseId, callback) {
      var postBody = null;

      // verify the required parameter 'clientResponseId' is set
      if (clientResponseId === undefined || clientResponseId === null) {
        throw new Error("Missing the required parameter 'clientResponseId' when calling getClientResponse");
      }


      var pathParams = {
        'client_response_id': clientResponseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientResponseResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_response/{client_response_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientResponses operation.
     * @callback module:api/NucleusApi~getClientResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClientResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client responses
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getClientResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClientResponseResponse}
     */
    this.getClientResponses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetClientResponseResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_response', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClientTransactions operation.
     * @callback module:api/NucleusApi~getClientTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all client transactions
     * @param {String} clientId UUID of a client
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getClientTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientTransactionResponse}
     */
    this.getClientTransactions = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getClientTransactions");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}/transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClients operation.
     * @callback module:api/NucleusApi~getClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClientResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all clients
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClientResponse}
     */
    this.getClients = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetClientResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDecisionTree operation.
     * @callback module:api/NucleusApi~getDecisionTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificDecisionTreeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a decision tree
     * @param {String} decisionTreeId UUID of a decision tree
     * @param {module:api/NucleusApi~getDecisionTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificDecisionTreeResponse}
     */
    this.getDecisionTree = function(decisionTreeId, callback) {
      var postBody = null;

      // verify the required parameter 'decisionTreeId' is set
      if (decisionTreeId === undefined || decisionTreeId === null) {
        throw new Error("Missing the required parameter 'decisionTreeId' when calling getDecisionTree");
      }


      var pathParams = {
        'decision_tree_id': decisionTreeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificDecisionTreeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/decision_tree/{decision_tree_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDecisionTrees operation.
     * @callback module:api/NucleusApi~getDecisionTreesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDecisionTreeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all decision trees
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getDecisionTreesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDecisionTreeResponse}
     */
    this.getDecisionTrees = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetDecisionTreeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/decision_tree', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepositRequest operation.
     * @callback module:api/NucleusApi~getDepositRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificDepositRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a deposit request
     * @param {String} depositId UUID of a deposit record
     * @param {module:api/NucleusApi~getDepositRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificDepositRequestResponse}
     */
    this.getDepositRequest = function(depositId, callback) {
      var postBody = null;

      // verify the required parameter 'depositId' is set
      if (depositId === undefined || depositId === null) {
        throw new Error("Missing the required parameter 'depositId' when calling getDepositRequest");
      }


      var pathParams = {
        'deposit_id': depositId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificDepositRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/deposit/{deposit_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepositRequests operation.
     * @callback module:api/NucleusApi~getDepositRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDepositRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all deposit requests
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getDepositRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDepositRequestResponse}
     */
    this.getDepositRequests = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetDepositRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/deposit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinancialOffer operation.
     * @callback module:api/NucleusApi~getFinancialOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificFinancialOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a financial offer
     * @param {String} financialOfferId UUID of a financial offer
     * @param {module:api/NucleusApi~getFinancialOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificFinancialOfferResponse}
     */
    this.getFinancialOffer = function(financialOfferId, callback) {
      var postBody = null;

      // verify the required parameter 'financialOfferId' is set
      if (financialOfferId === undefined || financialOfferId === null) {
        throw new Error("Missing the required parameter 'financialOfferId' when calling getFinancialOffer");
      }


      var pathParams = {
        'financial_offer_id': financialOfferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificFinancialOfferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_offer/{financial_offer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFinancialOffers operation.
     * @callback module:api/NucleusApi~getFinancialOffersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFinancialOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all financial offers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getFinancialOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFinancialOfferResponse}
     */
    this.getFinancialOffers = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetFinancialOfferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_offer', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingRequest operation.
     * @callback module:api/NucleusApi~getFundingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificFundingRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a funding request
     * @param {String} fundingId UUID of a funding record
     * @param {module:api/NucleusApi~getFundingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificFundingRequestResponse}
     */
    this.getFundingRequest = function(fundingId, callback) {
      var postBody = null;

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling getFundingRequest");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificFundingRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/funding/{funding_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFundingRequests operation.
     * @callback module:api/NucleusApi~getFundingRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFundingRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all funding requests
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getFundingRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFundingRequestResponse}
     */
    this.getFundingRequests = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetFundingRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/funding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoal operation.
     * @callback module:api/NucleusApi~getGoalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificGoalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a goal
     * @param {String} goalId UUID of a goal
     * @param {module:api/NucleusApi~getGoalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificGoalResponse}
     */
    this.getGoal = function(goalId, callback) {
      var postBody = null;

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling getGoal");
      }


      var pathParams = {
        'goal_id': goalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificGoalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal/{goal_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoalAssetSizes operation.
     * @callback module:api/NucleusApi~getGoalAssetSizesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List goal asset sizes
     * @param {String} goalId UUID of a goal
     * @param {String} clientId UUID of a client
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getGoalAssetSizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalAssetSizeResponse}
     */
    this.getGoalAssetSizes = function(goalId, clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling getGoalAssetSizes");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getGoalAssetSizes");
      }


      var pathParams = {
        'goal_id': goalId
      };
      var queryParams = {
        'client_id': clientId,
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal/{goal_id}/asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoalHoldings operation.
     * @callback module:api/NucleusApi~getGoalHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalHoldingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List goal holdings
     * @param {String} goalId UUID of a goal
     * @param {String} clientId UUID of a client
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getGoalHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalHoldingsResponse}
     */
    this.getGoalHoldings = function(goalId, clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling getGoalHoldings");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getGoalHoldings");
      }


      var pathParams = {
        'goal_id': goalId
      };
      var queryParams = {
        'client_id': clientId,
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalHoldingsResponse;

      return this.apiClient.callApi(
        '/goal/{goal_id}/holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoalPerformance operation.
     * @callback module:api/NucleusApi~getGoalPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get goal performance
     * @param {String} goalId UUID of a goal
     * @param {module:model/String} stat Performance statistic
     * @param {String} clientId UUID of a client
     * @param {module:api/NucleusApi~getGoalPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getGoalPerformance = function(goalId, stat, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling getGoalPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getGoalPerformance");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getGoalPerformance");
      }


      var pathParams = {
        'goal_id': goalId
      };
      var queryParams = {
        'stat': stat,
        'client_id': clientId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal/{goal_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoalTrackRecord operation.
     * @callback module:api/NucleusApi~getGoalTrackRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificGoalTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a goal track record
     * @param {String} goalTrackId UUID of a goal tracking record
     * @param {module:api/NucleusApi~getGoalTrackRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificGoalTrackResponse}
     */
    this.getGoalTrackRecord = function(goalTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'goalTrackId' is set
      if (goalTrackId === undefined || goalTrackId === null) {
        throw new Error("Missing the required parameter 'goalTrackId' when calling getGoalTrackRecord");
      }


      var pathParams = {
        'goal_track_id': goalTrackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificGoalTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal_track/{goal_track_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoalTrackRecords operation.
     * @callback module:api/NucleusApi~getGoalTrackRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGoalTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all goal track records
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getGoalTrackRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGoalTrackResponse}
     */
    this.getGoalTrackRecords = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetGoalTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal_track', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoalTransactions operation.
     * @callback module:api/NucleusApi~getGoalTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoalTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List goal transactions
     * @param {String} goalId UUID of a goal
     * @param {String} clientId UUID of a client
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getGoalTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoalTransactionsResponse}
     */
    this.getGoalTransactions = function(goalId, clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling getGoalTransactions");
      }

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getGoalTransactions");
      }


      var pathParams = {
        'goal_id': goalId
      };
      var queryParams = {
        'client_id': clientId,
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GoalTransactionsResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal/{goal_id}/transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGoals operation.
     * @callback module:api/NucleusApi~getGoalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGoalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all goals
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getGoalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGoalResponse}
     */
    this.getGoals = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetGoalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModel operation.
     * @callback module:api/NucleusApi~getModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model
     * @param {String} modelId UUID of a model
     * @param {module:api/NucleusApi~getModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelResponse}
     */
    this.getModel = function(modelId, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getModel");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelAssetSize operation.
     * @callback module:api/NucleusApi~getModelAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model asset size
     * @param {String} modelAssetSizeId UUID of a model asset size record
     * @param {module:api/NucleusApi~getModelAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelAssetSizeResponse}
     */
    this.getModelAssetSize = function(modelAssetSizeId, callback) {
      var postBody = null;

      // verify the required parameter 'modelAssetSizeId' is set
      if (modelAssetSizeId === undefined || modelAssetSizeId === null) {
        throw new Error("Missing the required parameter 'modelAssetSizeId' when calling getModelAssetSize");
      }


      var pathParams = {
        'model_asset_size_id': modelAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size/{model_asset_size_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelAssetSizes operation.
     * @callback module:api/NucleusApi~getModelAssetSizesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model asset sizes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getModelAssetSizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelAssetSizeResponse}
     */
    this.getModelAssetSizes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetModelAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelComment operation.
     * @callback module:api/NucleusApi~getModelCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model commentary
     * @param {String} modelCommentId UUID of a model comment
     * @param {module:api/NucleusApi~getModelCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelCommentResponse}
     */
    this.getModelComment = function(modelCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'modelCommentId' is set
      if (modelCommentId === undefined || modelCommentId === null) {
        throw new Error("Missing the required parameter 'modelCommentId' when calling getModelComment");
      }


      var pathParams = {
        'model_comment_id': modelCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment/{model_comment_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelComments operation.
     * @callback module:api/NucleusApi~getModelCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model commentary
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getModelCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelCommentResponse}
     */
    this.getModelComments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetModelCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelHolding operation.
     * @callback module:api/NucleusApi~getModelHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model holding
     * @param {String} modelHoldingId UUID of a model holding record
     * @param {module:api/NucleusApi~getModelHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelHoldingResponse}
     */
    this.getModelHolding = function(modelHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'modelHoldingId' is set
      if (modelHoldingId === undefined || modelHoldingId === null) {
        throw new Error("Missing the required parameter 'modelHoldingId' when calling getModelHolding");
      }


      var pathParams = {
        'model_holding_id': modelHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding/{model_holding_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelHoldings operation.
     * @callback module:api/NucleusApi~getModelHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model holdings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getModelHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelHoldingResponse}
     */
    this.getModelHoldings = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetModelHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelPerformance operation.
     * @callback module:api/NucleusApi~getModelPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get model performance
     * @param {String} modelId UUID of a model
     * @param {module:model/String} stat Performance statistic
     * @param {module:api/NucleusApi~getModelPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getModelPerformance = function(modelId, stat, callback) {
      var postBody = null;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getModelPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getModelPerformance");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
        'stat': stat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelTransaction operation.
     * @callback module:api/NucleusApi~getModelTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a model transaction
     * @param {String} modelTransactionId UUID of a model transaction record
     * @param {module:api/NucleusApi~getModelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelTransactionResponse}
     */
    this.getModelTransaction = function(modelTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'modelTransactionId' is set
      if (modelTransactionId === undefined || modelTransactionId === null) {
        throw new Error("Missing the required parameter 'modelTransactionId' when calling getModelTransaction");
      }


      var pathParams = {
        'model_transaction_id': modelTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction/{model_transaction_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelTransactions operation.
     * @callback module:api/NucleusApi~getModelTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all model transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getModelTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelTransactionResponse}
     */
    this.getModelTransactions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetModelTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModels operation.
     * @callback module:api/NucleusApi~getModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all models
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelResponse}
     */
    this.getModels = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetModelResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNode operation.
     * @callback module:api/NucleusApi~getNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificNodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a node
     * @param {String} nodeId UUID of a node
     * @param {module:api/NucleusApi~getNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificNodeResponse}
     */
    this.getNode = function(nodeId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling getNode");
      }


      var pathParams = {
        'node_id': nodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificNodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node/{node_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeRelationship operation.
     * @callback module:api/NucleusApi~getNodeRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificNodeRelationshipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a node relationship
     * @param {String} nodeRelationshipId UUID of a node relationship
     * @param {module:api/NucleusApi~getNodeRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificNodeRelationshipResponse}
     */
    this.getNodeRelationship = function(nodeRelationshipId, callback) {
      var postBody = null;

      // verify the required parameter 'nodeRelationshipId' is set
      if (nodeRelationshipId === undefined || nodeRelationshipId === null) {
        throw new Error("Missing the required parameter 'nodeRelationshipId' when calling getNodeRelationship");
      }


      var pathParams = {
        'node_relationship_id': nodeRelationshipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificNodeRelationshipResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node_relationship/{node_relationship_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodeRelationships operation.
     * @callback module:api/NucleusApi~getNodeRelationshipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNodeRelationshipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all node relationships
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getNodeRelationshipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNodeRelationshipResponse}
     */
    this.getNodeRelationships = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetNodeRelationshipResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node_relationship', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNodes operation.
     * @callback module:api/NucleusApi~getNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all nodes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNodeResponse}
     */
    this.getNodes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetNodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderRecord operation.
     * @callback module:api/NucleusApi~getOrderRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order record
     * @param {String} orderId UUID of an order record
     * @param {module:api/NucleusApi~getOrderRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificOrderResponse}
     */
    this.getOrderRecord = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrderRecord");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificOrderResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order/{order_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderRecords operation.
     * @callback module:api/NucleusApi~getOrderRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all order records
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getOrderRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrderResponse}
     */
    this.getOrderRecords = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetOrderResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatus operation.
     * @callback module:api/NucleusApi~getOrderStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificOrderStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order status
     * @param {String} orderStatusId UUID of an order status record
     * @param {module:api/NucleusApi~getOrderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificOrderStatusResponse}
     */
    this.getOrderStatus = function(orderStatusId, callback) {
      var postBody = null;

      // verify the required parameter 'orderStatusId' is set
      if (orderStatusId === undefined || orderStatusId === null) {
        throw new Error("Missing the required parameter 'orderStatusId' when calling getOrderStatus");
      }


      var pathParams = {
        'order_status_id': orderStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificOrderStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status/{order_status_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderStatuses operation.
     * @callback module:api/NucleusApi~getOrderStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrderStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all order statuses
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getOrderStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrderStatusResponse}
     */
    this.getOrderStatuses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetOrderStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderTrackingRecord operation.
     * @callback module:api/NucleusApi~getOrderTrackingRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificOrderTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order tracking record
     * @param {String} orderTrackId UUID of an order tracking record
     * @param {module:api/NucleusApi~getOrderTrackingRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificOrderTrackResponse}
     */
    this.getOrderTrackingRecord = function(orderTrackId, callback) {
      var postBody = null;

      // verify the required parameter 'orderTrackId' is set
      if (orderTrackId === undefined || orderTrackId === null) {
        throw new Error("Missing the required parameter 'orderTrackId' when calling getOrderTrackingRecord");
      }


      var pathParams = {
        'order_track_id': orderTrackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificOrderTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track/{order_track_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrderTrackingRecords operation.
     * @callback module:api/NucleusApi~getOrderTrackingRecordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrderTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all order tracking records
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getOrderTrackingRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrderTrackResponse}
     */
    this.getOrderTrackingRecords = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetOrderTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolio operation.
     * @callback module:api/NucleusApi~getPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:api/NucleusApi~getPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioResponse}
     */
    this.getPortfolio = function(portfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolio");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioAssetSize operation.
     * @callback module:api/NucleusApi~getPortfolioAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio asset size
     * @param {String} portfolioAssetSizeId UUID of a portfolio asset size record
     * @param {module:api/NucleusApi~getPortfolioAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioAssetSizeResponse}
     */
    this.getPortfolioAssetSize = function(portfolioAssetSizeId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioAssetSizeId' is set
      if (portfolioAssetSizeId === undefined || portfolioAssetSizeId === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSizeId' when calling getPortfolioAssetSize");
      }


      var pathParams = {
        'portfolio_asset_size_id': portfolioAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioAssetSizes operation.
     * @callback module:api/NucleusApi~getPortfolioAssetSizesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio asset sizes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getPortfolioAssetSizesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioAssetSizeResponse}
     */
    this.getPortfolioAssetSizes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetPortfolioAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioComment operation.
     * @callback module:api/NucleusApi~getPortfolioCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio commentary
     * @param {String} portfolioCommentId UUID of a portfolio comment
     * @param {module:api/NucleusApi~getPortfolioCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioCommentResponse}
     */
    this.getPortfolioComment = function(portfolioCommentId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioCommentId' is set
      if (portfolioCommentId === undefined || portfolioCommentId === null) {
        throw new Error("Missing the required parameter 'portfolioCommentId' when calling getPortfolioComment");
      }


      var pathParams = {
        'portfolio_comment_id': portfolioCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment/{portfolio_comment_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioComments operation.
     * @callback module:api/NucleusApi~getPortfolioCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio commentary
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getPortfolioCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioCommentResponse}
     */
    this.getPortfolioComments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetPortfolioCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioHolding operation.
     * @callback module:api/NucleusApi~getPortfolioHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio holding
     * @param {String} portfolioHoldingId UUID of a portfolio holding record
     * @param {module:api/NucleusApi~getPortfolioHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioHoldingResponse}
     */
    this.getPortfolioHolding = function(portfolioHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioHoldingId' is set
      if (portfolioHoldingId === undefined || portfolioHoldingId === null) {
        throw new Error("Missing the required parameter 'portfolioHoldingId' when calling getPortfolioHolding");
      }


      var pathParams = {
        'portfolio_holding_id': portfolioHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding/{portfolio_holding_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioHoldings operation.
     * @callback module:api/NucleusApi~getPortfolioHoldingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio holdings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getPortfolioHoldingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioHoldingResponse}
     */
    this.getPortfolioHoldings = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetPortfolioHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioPerformance operation.
     * @callback module:api/NucleusApi~getPortfolioPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get portfolio performance
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:model/String} stat Performance statistic
     * @param {module:api/NucleusApi~getPortfolioPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getPortfolioPerformance = function(portfolioId, stat, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getPortfolioPerformance");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
        'stat': stat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioTransaction operation.
     * @callback module:api/NucleusApi~getPortfolioTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a portfolio transaction
     * @param {String} portfolioTransactionId UUID of a portfolio transaction record
     * @param {module:api/NucleusApi~getPortfolioTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioTransactionResponse}
     */
    this.getPortfolioTransaction = function(portfolioTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioTransactionId' is set
      if (portfolioTransactionId === undefined || portfolioTransactionId === null) {
        throw new Error("Missing the required parameter 'portfolioTransactionId' when calling getPortfolioTransaction");
      }


      var pathParams = {
        'portfolio_transaction_id': portfolioTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioTransactions operation.
     * @callback module:api/NucleusApi~getPortfolioTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolio transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getPortfolioTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioTransactionResponse}
     */
    this.getPortfolioTransactions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetPortfolioTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolios operation.
     * @callback module:api/NucleusApi~getPortfoliosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPortfolioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all portfolios
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getPortfoliosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPortfolioResponse}
     */
    this.getPortfolios = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetPortfolioResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionnaire operation.
     * @callback module:api/NucleusApi~getQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificQuestionnaireResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a questionnaire
     * @param {String} questionnaireId UUID of a questionnaire
     * @param {module:api/NucleusApi~getQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificQuestionnaireResponse}
     */
    this.getQuestionnaire = function(questionnaireId, callback) {
      var postBody = null;

      // verify the required parameter 'questionnaireId' is set
      if (questionnaireId === undefined || questionnaireId === null) {
        throw new Error("Missing the required parameter 'questionnaireId' when calling getQuestionnaire");
      }


      var pathParams = {
        'questionnaire_id': questionnaireId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificQuestionnaireResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/questionnaire/{questionnaire_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuestionnaires operation.
     * @callback module:api/NucleusApi~getQuestionnairesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetQuestionnaireResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all questionnaires
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getQuestionnairesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetQuestionnaireResponse}
     */
    this.getQuestionnaires = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetQuestionnaireResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/questionnaire', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScore operation.
     * @callback module:api/NucleusApi~getScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a score
     * @param {String} scoreId UUID of a score record
     * @param {module:api/NucleusApi~getScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificScoreResponse}
     */
    this.getScore = function(scoreId, callback) {
      var postBody = null;

      // verify the required parameter 'scoreId' is set
      if (scoreId === undefined || scoreId === null) {
        throw new Error("Missing the required parameter 'scoreId' when calling getScore");
      }


      var pathParams = {
        'score_id': scoreId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificScoreResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/score/{score_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScores operation.
     * @callback module:api/NucleusApi~getScoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all scores
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetScoreResponse}
     */
    this.getScores = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetScoreResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/score', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurities operation.
     * @callback module:api/NucleusApi~getSecuritiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all securities
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getSecuritiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityResponse}
     */
    this.getSecurities = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSecurityResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurity operation.
     * @callback module:api/NucleusApi~getSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSecurityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a security
     * @param {String} securityId UUID of a security
     * @param {module:api/NucleusApi~getSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSecurityResponse}
     */
    this.getSecurity = function(securityId, callback) {
      var postBody = null;

      // verify the required parameter 'securityId' is set
      if (securityId === undefined || securityId === null) {
        throw new Error("Missing the required parameter 'securityId' when calling getSecurity");
      }


      var pathParams = {
        'security_id': securityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSecurityResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security/{security_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityExclusion operation.
     * @callback module:api/NucleusApi~getSecurityExclusionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSecurityExclusionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a security exclusion
     * @param {String} securityExclusionId UUID of a security exclusion record
     * @param {module:api/NucleusApi~getSecurityExclusionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSecurityExclusionResponse}
     */
    this.getSecurityExclusion = function(securityExclusionId, callback) {
      var postBody = null;

      // verify the required parameter 'securityExclusionId' is set
      if (securityExclusionId === undefined || securityExclusionId === null) {
        throw new Error("Missing the required parameter 'securityExclusionId' when calling getSecurityExclusion");
      }


      var pathParams = {
        'security_exclusion_id': securityExclusionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSecurityExclusionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_exclusion/{security_exclusion_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityExclusions operation.
     * @callback module:api/NucleusApi~getSecurityExclusionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityExclusionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all security exclusions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getSecurityExclusionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityExclusionResponse}
     */
    this.getSecurityExclusions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSecurityExclusionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_exclusion', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityPerformance operation.
     * @callback module:api/NucleusApi~getSecurityPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get security performance
     * @param {String} securityId UUID of a security
     * @param {module:model/String} stat Performance statistic
     * @param {module:api/NucleusApi~getSecurityPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PerformanceResponse}
     */
    this.getSecurityPerformance = function(securityId, stat, callback) {
      var postBody = null;

      // verify the required parameter 'securityId' is set
      if (securityId === undefined || securityId === null) {
        throw new Error("Missing the required parameter 'securityId' when calling getSecurityPerformance");
      }

      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling getSecurityPerformance");
      }


      var pathParams = {
        'security_id': securityId
      };
      var queryParams = {
        'stat': stat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PerformanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security/{security_id}/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityPrice operation.
     * @callback module:api/NucleusApi~getSecurityPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSecurityPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a security price
     * @param {String} securityPriceId UUID of a security price record
     * @param {module:api/NucleusApi~getSecurityPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSecurityPriceResponse}
     */
    this.getSecurityPrice = function(securityPriceId, callback) {
      var postBody = null;

      // verify the required parameter 'securityPriceId' is set
      if (securityPriceId === undefined || securityPriceId === null) {
        throw new Error("Missing the required parameter 'securityPriceId' when calling getSecurityPrice");
      }


      var pathParams = {
        'security_price_id': securityPriceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSecurityPriceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_price/{security_price_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityPrices operation.
     * @callback module:api/NucleusApi~getSecurityPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all security prices
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getSecurityPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityPriceResponse}
     */
    this.getSecurityPrices = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSecurityPriceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_price', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCode operation.
     * @callback module:api/NucleusApi~getTransactionCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificTransactionCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transaction code
     * @param {String} transactionCodeId UUID of a transaction code
     * @param {module:api/NucleusApi~getTransactionCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificTransactionCodeResponse}
     */
    this.getTransactionCode = function(transactionCodeId, callback) {
      var postBody = null;

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling getTransactionCode");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificTransactionCodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code/{transaction_code_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionCodes operation.
     * @callback module:api/NucleusApi~getTransactionCodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all transaction codes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getTransactionCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionCodeResponse}
     */
    this.getTransactionCodes = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetTransactionCodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferRequest operation.
     * @callback module:api/NucleusApi~getTransferRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transfer request
     * @param {String} transferId UUID of an account transfer record
     * @param {module:api/NucleusApi~getTransferRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificTransferResponse}
     */
    this.getTransferRequest = function(transferId, callback) {
      var postBody = null;

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling getTransferRequest");
      }


      var pathParams = {
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificTransferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer/{transfer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransferRequests operation.
     * @callback module:api/NucleusApi~getTransferRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all transfer requests
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getTransferRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransferResponse}
     */
    this.getTransferRequests = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetTransferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWithdrawalRequest operation.
     * @callback module:api/NucleusApi~getWithdrawalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificWithdrawalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a withdrawal request
     * @param {String} withdrawalId UUID of a withdrawal request
     * @param {module:api/NucleusApi~getWithdrawalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificWithdrawalResponse}
     */
    this.getWithdrawalRequest = function(withdrawalId, callback) {
      var postBody = null;

      // verify the required parameter 'withdrawalId' is set
      if (withdrawalId === undefined || withdrawalId === null) {
        throw new Error("Missing the required parameter 'withdrawalId' when calling getWithdrawalRequest");
      }


      var pathParams = {
        'withdrawal_id': withdrawalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificWithdrawalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/withdrawal/{withdrawal_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWithdrawalRequests operation.
     * @callback module:api/NucleusApi~getWithdrawalRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWithdrawalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all withdrawal requests
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
     * @param {Number} opts.size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
     * @param {String} opts.orderBy The field in the response body to order the list by. Default is update_date. (default to update_date)
     * @param {Boolean} opts.ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
     * @param {String} opts.filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
     * @param {module:api/NucleusApi~getWithdrawalRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWithdrawalResponse}
     */
    this.getWithdrawalRequests = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'order_by': opts['orderBy'],
        'ascending': opts['ascending'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWithdrawalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/withdrawal', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccount operation.
     * @callback module:api/NucleusApi~postAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account under a client
     * @param {module:model/AccountCreatePayload} payload 
     * @param {module:api/NucleusApi~postAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccountResponse}
     */
    this.postAccount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountAllocation operation.
     * @callback module:api/NucleusApi~postAccountAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account allocation
     * @param {module:model/AccountAllocationPayload} payload 
     * @param {module:api/NucleusApi~postAccountAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountAllocationResponse}
     */
    this.postAccountAllocation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountAllocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountBulkOrder operation.
     * @callback module:api/NucleusApi~postAccountBulkOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkOrderFirmclientaccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk orders for an account
     * @param {String} accountId UUID of an account
     * @param {module:model/BulkOrderAccountPayload} payload 
     * @param {module:api/NucleusApi~postAccountBulkOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkOrderFirmclientaccountResponse}
     */
    this.postAccountBulkOrder = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling postAccountBulkOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountBulkOrder");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkOrderFirmclientaccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_bulk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountRebalanceBuyOnlyOrder operation.
     * @callback module:api/NucleusApi~postAccountRebalanceBuyOnlyOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create buy-only account rebalance orders
     * @param {String} accountId UUID of an account
     * @param {module:model/AccountRebalanceBuyOnlyOrderPayload} payload 
     * @param {module:api/NucleusApi~postAccountRebalanceBuyOnlyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postAccountRebalanceBuyOnlyOrder = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling postAccountRebalanceBuyOnlyOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountRebalanceBuyOnlyOrder");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_buy_only', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountRebalanceOrder operation.
     * @callback module:api/NucleusApi~postAccountRebalanceOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificOrderTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create account rebalance orders
     * @param {String} accountId UUID of an account
     * @param {module:model/AccountRebalanceOrderPayload} payload 
     * @param {module:api/NucleusApi~postAccountRebalanceOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificOrderTrackResponse}
     */
    this.postAccountRebalanceOrder = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling postAccountRebalanceOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountRebalanceOrder");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificOrderTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_rebalance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountRebalanceSellOnlyOrder operation.
     * @callback module:api/NucleusApi~postAccountRebalanceSellOnlyOrderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create sell-only account rebalance orders
     * @param {String} accountId UUID of an account
     * @param {module:model/AccountRebalanceSellOnlyOrderPayload} payload 
     * @param {module:api/NucleusApi~postAccountRebalanceSellOnlyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postAccountRebalanceSellOnlyOrder = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling postAccountRebalanceSellOnlyOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountRebalanceSellOnlyOrder");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_sell_only', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountSellAllOrder operation.
     * @callback module:api/NucleusApi~postAccountSellAllOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellAllAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sell all account order
     * @param {String} accountId UUID of an account
     * @param {module:model/SellAllAccountPayload} payload 
     * @param {module:api/NucleusApi~postAccountSellAllOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellAllAccountResponse}
     */
    this.postAccountSellAllOrder = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling postAccountSellAllOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountSellAllOrder");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SellAllAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/order_sell_all', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountStage operation.
     * @callback module:api/NucleusApi~postAccountStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountStageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account stage
     * @param {module:model/AccountStagePayload} payload 
     * @param {module:api/NucleusApi~postAccountStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountStageResponse}
     */
    this.postAccountStage = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountStage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountStageResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/stage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountStatus operation.
     * @callback module:api/NucleusApi~postAccountStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccountStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account status
     * @param {module:model/AccountStatusPayload} payload 
     * @param {module:api/NucleusApi~postAccountStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccountStatusResponse}
     */
    this.postAccountStatus = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAccountStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAccountType operation.
     * @callback module:api/NucleusApi~postAccountTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountTypeSubresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account type
     * @param {module:model/AccountTypePayload} payload 
     * @param {module:api/NucleusApi~postAccountTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountTypeSubresponse}
     */
    this.postAccountType = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAccountType");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountTypeSubresponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_type', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAggregationAccount operation.
     * @callback module:api/NucleusApi~postAggregationAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAggregationAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account
     * @param {module:model/AggregationAccountPayload} payload 
     * @param {module:api/NucleusApi~postAggregationAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAggregationAccountResponse}
     */
    this.postAggregationAccount = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAggregationAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAggregationAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAggregationAccountBalance operation.
     * @callback module:api/NucleusApi~postAggregationAccountBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAggregationAccountBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account balance
     * @param {module:model/AggregationAccountBalancePayload} payload 
     * @param {module:api/NucleusApi~postAggregationAccountBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAggregationAccountBalanceResponse}
     */
    this.postAggregationAccountBalance = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAggregationAccountBalance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAggregationAccountBalanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAggregationAccountHolding operation.
     * @callback module:api/NucleusApi~postAggregationAccountHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAggregationAccountHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account holding
     * @param {module:model/AggregationAccountHoldingPayload} payload 
     * @param {module:api/NucleusApi~postAggregationAccountHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAggregationAccountHoldingResponse}
     */
    this.postAggregationAccountHolding = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAggregationAccountHolding");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAggregationAccountHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAggregationAccountTransaction operation.
     * @callback module:api/NucleusApi~postAggregationAccountTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAggregationAccountTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account transaction
     * @param {module:model/AggregationAccountTransactionPayload} payload 
     * @param {module:api/NucleusApi~postAggregationAccountTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAggregationAccountTransactionResponse}
     */
    this.postAggregationAccountTransaction = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAggregationAccountTransaction");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAggregationAccountTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAllocation operation.
     * @callback module:api/NucleusApi~postAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an allocation
     * @param {module:model/AllocationPayload} payload 
     * @param {module:api/NucleusApi~postAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAllocationResponse}
     */
    this.postAllocation = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAllocation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postAllocationComposition operation.
     * @callback module:api/NucleusApi~postAllocationCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAllocationCompositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an allocation composition
     * @param {module:model/AllocationCompositionPayload} payload 
     * @param {module:api/NucleusApi~postAllocationCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAllocationCompositionResponse}
     */
    this.postAllocationComposition = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postAllocationComposition");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateAllocationCompositionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation_composition', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBankLink operation.
     * @callback module:api/NucleusApi~postBankLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBankLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank link
     * @param {module:model/BankLinkPayload} payload 
     * @param {module:api/NucleusApi~postBankLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBankLinkResponse}
     */
    this.postBankLink = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postBankLink");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateBankLinkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBenchmark operation.
     * @callback module:api/NucleusApi~postBenchmarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBenchmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a benchmark
     * @param {module:model/BenchmarkPayload} payload 
     * @param {module:api/NucleusApi~postBenchmarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBenchmarkResponse}
     */
    this.postBenchmark = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postBenchmark");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateBenchmarkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/benchmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBudget operation.
     * @callback module:api/NucleusApi~postBudgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateBudgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a budget
     * @param {module:model/BudgetPayload} payload 
     * @param {module:api/NucleusApi~postBudgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateBudgetResponse}
     */
    this.postBudget = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postBudget");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateBudgetResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/budget', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postBulkOrder operation.
     * @callback module:api/NucleusApi~postBulkOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkOrderFirmclientaccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk orders for your firm
     * @param {module:model/BulkOrderFirmPayload} payload 
     * @param {module:api/NucleusApi~postBulkOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkOrderFirmclientaccountResponse}
     */
    this.postBulkOrder = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postBulkOrder");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkOrderFirmclientaccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_bulk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postClient operation.
     * @callback module:api/NucleusApi~postClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClientResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a client
     * @param {module:model/ClientPayload} payload 
     * @param {module:api/NucleusApi~postClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClientResponse}
     */
    this.postClient = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postClient");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateClientResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postClientBulkOrder operation.
     * @callback module:api/NucleusApi~postClientBulkOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkOrderFirmclientaccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk orders for a client
     * @param {String} clientId UUID of a client
     * @param {module:model/BulkOrderClientPayload} payload 
     * @param {module:api/NucleusApi~postClientBulkOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkOrderFirmclientaccountResponse}
     */
    this.postClientBulkOrder = function(clientId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling postClientBulkOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postClientBulkOrder");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BulkOrderFirmclientaccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}/order_bulk', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postClientHydro operation.
     * @callback module:api/NucleusApi~postClientHydroCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClientHydroResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a client-hydro relationship
     * @param {module:model/ClientHydroPayload} payload 
     * @param {module:api/NucleusApi~postClientHydroCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClientHydroResponse}
     */
    this.postClientHydro = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postClientHydro");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateClientHydroResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_hydro', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postClientResponse operation.
     * @callback module:api/NucleusApi~postClientResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClientResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a client response
     * @param {module:model/ClientResponsePayload} payload 
     * @param {module:api/NucleusApi~postClientResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClientResponseResponse}
     */
    this.postClientResponse = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postClientResponse");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateClientResponseResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_response', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postDecisionTree operation.
     * @callback module:api/NucleusApi~postDecisionTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDecisionTreeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a decision tree
     * @param {module:model/DecisionTreePayload} payload 
     * @param {module:api/NucleusApi~postDecisionTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDecisionTreeResponse}
     */
    this.postDecisionTree = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postDecisionTree");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateDecisionTreeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/decision_tree', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postDepositRequest operation.
     * @callback module:api/NucleusApi~postDepositRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDepositRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deposit request
     * @param {module:model/DepositRequestPayload} payload 
     * @param {module:api/NucleusApi~postDepositRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDepositRequestResponse}
     */
    this.postDepositRequest = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postDepositRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateDepositRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/deposit', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFinancialOffer operation.
     * @callback module:api/NucleusApi~postFinancialOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFinancialOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a financial offer
     * @param {module:model/FinancialOfferPayload} payload 
     * @param {module:api/NucleusApi~postFinancialOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFinancialOfferResponse}
     */
    this.postFinancialOffer = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postFinancialOffer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateFinancialOfferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_offer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFundingRequest operation.
     * @callback module:api/NucleusApi~postFundingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFundingRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a funding request
     * @param {module:model/FundingRequestPayload} payload 
     * @param {module:api/NucleusApi~postFundingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFundingRequestResponse}
     */
    this.postFundingRequest = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postFundingRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateFundingRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/funding', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGoal operation.
     * @callback module:api/NucleusApi~postGoalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGoalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a goal
     * @param {module:model/GoalPayload} payload 
     * @param {module:api/NucleusApi~postGoalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGoalResponse}
     */
    this.postGoal = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postGoal");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateGoalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGoalTrackRecord operation.
     * @callback module:api/NucleusApi~postGoalTrackRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGoalTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a goal track record
     * @param {module:model/GoalTrackPayload} payload 
     * @param {module:api/NucleusApi~postGoalTrackRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGoalTrackResponse}
     */
    this.postGoalTrackRecord = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postGoalTrackRecord");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateGoalTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal_track', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postModel operation.
     * @callback module:api/NucleusApi~postModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model
     * @param {module:model/ModelPayload} payload 
     * @param {module:api/NucleusApi~postModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelResponse}
     */
    this.postModel = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postModel");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModelResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postModelAssetSize operation.
     * @callback module:api/NucleusApi~postModelAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model asset size
     * @param {module:model/ModelAssetSizePayload} payload 
     * @param {module:api/NucleusApi~postModelAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelAssetSizeResponse}
     */
    this.postModelAssetSize = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postModelAssetSize");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModelAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postModelComment operation.
     * @callback module:api/NucleusApi~postModelCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model commentary
     * @param {module:model/ModelCommentPayload} payload 
     * @param {module:api/NucleusApi~postModelCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelCommentResponse}
     */
    this.postModelComment = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postModelComment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModelCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postModelHolding operation.
     * @callback module:api/NucleusApi~postModelHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model holding
     * @param {module:model/ModelHoldingPayload} payload 
     * @param {module:api/NucleusApi~postModelHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelHoldingResponse}
     */
    this.postModelHolding = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postModelHolding");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModelHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postModelTransaction operation.
     * @callback module:api/NucleusApi~postModelTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a model transaction
     * @param {module:model/ModelTransactionPayload} payload 
     * @param {module:api/NucleusApi~postModelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelTransactionResponse}
     */
    this.postModelTransaction = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postModelTransaction");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateModelTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postNode operation.
     * @callback module:api/NucleusApi~postNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a node
     * @param {module:model/NodePayload} payload 
     * @param {module:api/NucleusApi~postNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNodeResponse}
     */
    this.postNode = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postNode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateNodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postNodeRelationship operation.
     * @callback module:api/NucleusApi~postNodeRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNodeRelationshipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a node relationship
     * @param {module:model/NodeRelationshipPayload} payload 
     * @param {module:api/NucleusApi~postNodeRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNodeRelationshipResponse}
     */
    this.postNodeRelationship = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postNodeRelationship");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateNodeRelationshipResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node_relationship', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrderRecord operation.
     * @callback module:api/NucleusApi~postOrderRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order record
     * @param {module:model/OrderPayload} payload 
     * @param {module:api/NucleusApi~postOrderRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrderResponse}
     */
    this.postOrderRecord = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postOrderRecord");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateOrderResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrderStatus operation.
     * @callback module:api/NucleusApi~postOrderStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrderStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order status
     * @param {module:model/OrderStatusPayload} payload 
     * @param {module:api/NucleusApi~postOrderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrderStatusResponse}
     */
    this.postOrderStatus = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postOrderStatus");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateOrderStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOrderTrackingRecord operation.
     * @callback module:api/NucleusApi~postOrderTrackingRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrderTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order tracking record
     * @param {module:model/OrderTrackPayload} payload 
     * @param {module:api/NucleusApi~postOrderTrackingRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrderTrackResponse}
     */
    this.postOrderTrackingRecord = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postOrderTrackingRecord");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateOrderTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolio operation.
     * @callback module:api/NucleusApi~postPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio
     * @param {module:model/PortfolioPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolioResponse}
     */
    this.postPortfolio = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolio");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatePortfolioResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioAssetSize operation.
     * @callback module:api/NucleusApi~postPortfolioAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolioAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio asset size
     * @param {module:model/PortfolioAssetSizePayload} payload 
     * @param {module:api/NucleusApi~postPortfolioAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolioAssetSizeResponse}
     */
    this.postPortfolioAssetSize = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioAssetSize");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatePortfolioAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioComment operation.
     * @callback module:api/NucleusApi~postPortfolioCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolioCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio commentary
     * @param {module:model/PortfolioCommentPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolioCommentResponse}
     */
    this.postPortfolioComment = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioComment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatePortfolioCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioHolding operation.
     * @callback module:api/NucleusApi~postPortfolioHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolioHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio holding
     * @param {module:model/PortfolioHoldingPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolioHoldingResponse}
     */
    this.postPortfolioHolding = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioHolding");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatePortfolioHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioRebalanceBuyOnlyOrder operation.
     * @callback module:api/NucleusApi~postPortfolioRebalanceBuyOnlyOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioRebalanceBuyOnlyOrderPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create buy-only portfolio rebalance orders
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:model/PortfolioRebalanceBuyOnlyOrderPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioRebalanceBuyOnlyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioRebalanceBuyOnlyOrderPayload}
     */
    this.postPortfolioRebalanceBuyOnlyOrder = function(portfolioId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling postPortfolioRebalanceBuyOnlyOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioRebalanceBuyOnlyOrder");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortfolioRebalanceBuyOnlyOrderPayload;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_buy_only', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioRebalanceOrder operation.
     * @callback module:api/NucleusApi~postPortfolioRebalanceOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioRebalanceOrderPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create portfolio rebalance orders
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:model/PortfolioRebalanceOrderPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioRebalanceOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioRebalanceOrderPayload}
     */
    this.postPortfolioRebalanceOrder = function(portfolioId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling postPortfolioRebalanceOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioRebalanceOrder");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortfolioRebalanceOrderPayload;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_rebalance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioRebalanceSellOnlyOrder operation.
     * @callback module:api/NucleusApi~postPortfolioRebalanceSellOnlyOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioRebalanceSellOnlyOrderPayload} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create sell-only portfolio rebalance orders
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:model/PortfolioRebalanceSellOnlyOrderPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioRebalanceSellOnlyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioRebalanceSellOnlyOrderPayload}
     */
    this.postPortfolioRebalanceSellOnlyOrder = function(portfolioId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling postPortfolioRebalanceSellOnlyOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioRebalanceSellOnlyOrder");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortfolioRebalanceSellOnlyOrderPayload;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_sell_only', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioSellAllOrder operation.
     * @callback module:api/NucleusApi~postPortfolioSellAllOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SellAllPortfolioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sell all portfolio order
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:model/SellAllPortfolioPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioSellAllOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SellAllPortfolioResponse}
     */
    this.postPortfolioSellAllOrder = function(portfolioId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling postPortfolioSellAllOrder");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioSellAllOrder");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SellAllPortfolioResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}/order_sell_all', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPortfolioTransaction operation.
     * @callback module:api/NucleusApi~postPortfolioTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePortfolioTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio transaction
     * @param {module:model/PortfolioTransactionPayload} payload 
     * @param {module:api/NucleusApi~postPortfolioTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePortfolioTransactionResponse}
     */
    this.postPortfolioTransaction = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postPortfolioTransaction");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreatePortfolioTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postQuestionnaire operation.
     * @callback module:api/NucleusApi~postQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateQuestionnaireResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a questionnaire
     * @param {module:model/QuestionnairePayload} payload 
     * @param {module:api/NucleusApi~postQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateQuestionnaireResponse}
     */
    this.postQuestionnaire = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postQuestionnaire");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateQuestionnaireResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/questionnaire', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postScore operation.
     * @callback module:api/NucleusApi~postScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a score
     * @param {module:model/ScorePayload} payload 
     * @param {module:api/NucleusApi~postScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateScoreResponse}
     */
    this.postScore = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postScore");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateScoreResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/score', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSecurity operation.
     * @callback module:api/NucleusApi~postSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecurityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security
     * @param {module:model/SecurityPayload} payload 
     * @param {module:api/NucleusApi~postSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecurityResponse}
     */
    this.postSecurity = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSecurity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSecurityResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSecurityExclusion operation.
     * @callback module:api/NucleusApi~postSecurityExclusionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecurityExclusionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security exclusion
     * @param {module:model/SecurityExclusionPayload} payload 
     * @param {module:api/NucleusApi~postSecurityExclusionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecurityExclusionResponse}
     */
    this.postSecurityExclusion = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSecurityExclusion");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSecurityExclusionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_exclusion', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postSecurityPrice operation.
     * @callback module:api/NucleusApi~postSecurityPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecurityPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a security price
     * @param {module:model/SecurityPricePayload} payload 
     * @param {module:api/NucleusApi~postSecurityPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecurityPriceResponse}
     */
    this.postSecurityPrice = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postSecurityPrice");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSecurityPriceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_price', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTransactionCode operation.
     * @callback module:api/NucleusApi~postTransactionCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTransactionCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transaction code
     * @param {module:model/TransactionCodePayload} payload 
     * @param {module:api/NucleusApi~postTransactionCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTransactionCodeResponse}
     */
    this.postTransactionCode = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postTransactionCode");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateTransactionCodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTransferRequest operation.
     * @callback module:api/NucleusApi~postTransferRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transfer request
     * @param {module:model/TransferRequestPayload} payload 
     * @param {module:api/NucleusApi~postTransferRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTransferResponse}
     */
    this.postTransferRequest = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postTransferRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateTransferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postWithdrawalRequest operation.
     * @callback module:api/NucleusApi~postWithdrawalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWithdrawalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a withdrawal request
     * @param {module:model/WithdrawalPayload} payload 
     * @param {module:api/NucleusApi~postWithdrawalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWithdrawalResponse}
     */
    this.postWithdrawalRequest = function(payload, callback) {
      var postBody = payload;

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling postWithdrawalRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateWithdrawalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/withdrawal', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeAccount operation.
     * @callback module:api/NucleusApi~subscribeAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribeAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe an account
     * @param {String} accountId UUID of an account
     * @param {module:model/AccountSubscribePayload} payload 
     * @param {module:api/NucleusApi~subscribeAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribeAccountResponse}
     */
    this.subscribeAccount = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling subscribeAccount");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling subscribeAccount");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SubscribeAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/subscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/NucleusApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account
     * @param {String} accountId UUID of an account
     * @param {module:model/AccountCreatePayload} payload 
     * @param {module:api/NucleusApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountResponse}
     */
    this.updateAccount = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAccount");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAccount");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account/{account_id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountAllocation operation.
     * @callback module:api/NucleusApi~updateAccountAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account allocation
     * @param {String} accountAllocationId UUID of an account allocation
     * @param {module:model/AccountAllocationPayload} payload 
     * @param {module:api/NucleusApi~updateAccountAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountAllocationResponse}
     */
    this.updateAccountAllocation = function(accountAllocationId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountAllocationId' is set
      if (accountAllocationId === undefined || accountAllocationId === null) {
        throw new Error("Missing the required parameter 'accountAllocationId' when calling updateAccountAllocation");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAccountAllocation");
      }


      var pathParams = {
        'account_allocation_id': accountAllocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_allocation/{account_allocation_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountPermission operation.
     * @callback module:api/NucleusApi~updateAccountPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountPermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account&#39;s permissions
     * @param {String} accountId UUID of an account
     * @param {module:model/AccountPermissionPayload} payload 
     * @param {module:api/NucleusApi~updateAccountPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountPermissionResponse}
     */
    this.updateAccountPermission = function(accountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAccountPermission");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAccountPermission");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountPermissionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_permission/{account_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountStage operation.
     * @callback module:api/NucleusApi~updateAccountStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountStageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account stage
     * @param {String} stageId UUID of an account stage
     * @param {module:model/AccountStagePayload} payload 
     * @param {module:api/NucleusApi~updateAccountStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountStageResponse}
     */
    this.updateAccountStage = function(stageId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'stageId' is set
      if (stageId === undefined || stageId === null) {
        throw new Error("Missing the required parameter 'stageId' when calling updateAccountStage");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAccountStage");
      }


      var pathParams = {
        'stage_id': stageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountStageResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/stage/{stage_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountStatus operation.
     * @callback module:api/NucleusApi~updateAccountStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAccountStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account status
     * @param {String} accountStatusId UUID of an account status
     * @param {module:model/AccountStatusPayload} payload 
     * @param {module:api/NucleusApi~updateAccountStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAccountStatusResponse}
     */
    this.updateAccountStatus = function(accountStatusId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountStatusId' is set
      if (accountStatusId === undefined || accountStatusId === null) {
        throw new Error("Missing the required parameter 'accountStatusId' when calling updateAccountStatus");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAccountStatus");
      }


      var pathParams = {
        'account_status_id': accountStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAccountStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_status/{account_status_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountType operation.
     * @callback module:api/NucleusApi~updateAccountTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountTypeSubresponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account type
     * @param {String} accountTypeId UUID of an account type
     * @param {module:model/AccountTypePayload} payload 
     * @param {module:api/NucleusApi~updateAccountTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountTypeSubresponse}
     */
    this.updateAccountType = function(accountTypeId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'accountTypeId' is set
      if (accountTypeId === undefined || accountTypeId === null) {
        throw new Error("Missing the required parameter 'accountTypeId' when calling updateAccountType");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAccountType");
      }


      var pathParams = {
        'account_type_id': accountTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAccountTypeSubresponse;

      return this.apiClient.callApi(
        '/nucleus/v1/account_type/{account_type_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccount operation.
     * @callback module:api/NucleusApi~updateAggregationAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account
     * @param {String} aggregationAccountId UUID of an aggregation account
     * @param {module:model/AggregationAccountPayload} payload 
     * @param {module:api/NucleusApi~updateAggregationAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountResponse}
     */
    this.updateAggregationAccount = function(aggregationAccountId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'aggregationAccountId' is set
      if (aggregationAccountId === undefined || aggregationAccountId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountId' when calling updateAggregationAccount");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAggregationAccount");
      }


      var pathParams = {
        'aggregation_account_id': aggregationAccountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountBalance operation.
     * @callback module:api/NucleusApi~updateAggregationAccountBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountBalanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account balance
     * @param {String} aggregationAccountBalanceId UUID of an aggregation account balance
     * @param {module:model/AggregationAccountBalancePayload} payload 
     * @param {module:api/NucleusApi~updateAggregationAccountBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountBalanceResponse}
     */
    this.updateAggregationAccountBalance = function(aggregationAccountBalanceId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'aggregationAccountBalanceId' is set
      if (aggregationAccountBalanceId === undefined || aggregationAccountBalanceId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalanceId' when calling updateAggregationAccountBalance");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAggregationAccountBalance");
      }


      var pathParams = {
        'aggregation_account_balance_id': aggregationAccountBalanceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountBalanceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountHolding operation.
     * @callback module:api/NucleusApi~updateAggregationAccountHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account holding
     * @param {String} aggregationAccountHoldingId UUID of an aggregation account holding
     * @param {module:model/AggregationAccountHoldingPayload} payload 
     * @param {module:api/NucleusApi~updateAggregationAccountHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountHoldingResponse}
     */
    this.updateAggregationAccountHolding = function(aggregationAccountHoldingId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'aggregationAccountHoldingId' is set
      if (aggregationAccountHoldingId === undefined || aggregationAccountHoldingId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHoldingId' when calling updateAggregationAccountHolding");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAggregationAccountHolding");
      }


      var pathParams = {
        'aggregation_account_holding_id': aggregationAccountHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountTransaction operation.
     * @callback module:api/NucleusApi~updateAggregationAccountTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAggregationAccountTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account transaction
     * @param {String} aggregationAccountTransactionId UUID of an aggregation account transaction
     * @param {module:model/AggregationAccountTransactionPayload} payload 
     * @param {module:api/NucleusApi~updateAggregationAccountTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAggregationAccountTransactionResponse}
     */
    this.updateAggregationAccountTransaction = function(aggregationAccountTransactionId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'aggregationAccountTransactionId' is set
      if (aggregationAccountTransactionId === undefined || aggregationAccountTransactionId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransactionId' when calling updateAggregationAccountTransaction");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAggregationAccountTransaction");
      }


      var pathParams = {
        'aggregation_account_transaction_id': aggregationAccountTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAggregationAccountTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAllocation operation.
     * @callback module:api/NucleusApi~updateAllocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificAllocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an allocation
     * @param {String} allocationId UUID of an allocation
     * @param {module:model/AllocationPayload} payload 
     * @param {module:api/NucleusApi~updateAllocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificAllocationResponse}
     */
    this.updateAllocation = function(allocationId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'allocationId' is set
      if (allocationId === undefined || allocationId === null) {
        throw new Error("Missing the required parameter 'allocationId' when calling updateAllocation");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAllocation");
      }


      var pathParams = {
        'allocation_id': allocationId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificAllocationResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation/{allocation_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAllocationComposition operation.
     * @callback module:api/NucleusApi~updateAllocationCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllocationCompositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an allocation composition
     * @param {String} allocationCompositionId UUID of an allocation composition
     * @param {module:model/AllocationCompositionPayload} payload 
     * @param {module:api/NucleusApi~updateAllocationCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAllocationCompositionResponse}
     */
    this.updateAllocationComposition = function(allocationCompositionId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'allocationCompositionId' is set
      if (allocationCompositionId === undefined || allocationCompositionId === null) {
        throw new Error("Missing the required parameter 'allocationCompositionId' when calling updateAllocationComposition");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateAllocationComposition");
      }


      var pathParams = {
        'allocation_composition_id': allocationCompositionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetAllocationCompositionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/allocation_composition/{allocation_composition_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBankLink operation.
     * @callback module:api/NucleusApi~updateBankLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificBankLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bank link
     * @param {String} bankLinkId UUID of a bank link
     * @param {module:model/BankLinkPayload} payload 
     * @param {module:api/NucleusApi~updateBankLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificBankLinkResponse}
     */
    this.updateBankLink = function(bankLinkId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'bankLinkId' is set
      if (bankLinkId === undefined || bankLinkId === null) {
        throw new Error("Missing the required parameter 'bankLinkId' when calling updateBankLink");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateBankLink");
      }


      var pathParams = {
        'bank_link_id': bankLinkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificBankLinkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/bank_link/{bank_link_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBenchmark operation.
     * @callback module:api/NucleusApi~updateBenchmarkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificBenchmarkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a benchmark
     * @param {String} benchmarkId UUID of a benchmark
     * @param {module:model/BenchmarkPayload} payload 
     * @param {module:api/NucleusApi~updateBenchmarkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificBenchmarkResponse}
     */
    this.updateBenchmark = function(benchmarkId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'benchmarkId' is set
      if (benchmarkId === undefined || benchmarkId === null) {
        throw new Error("Missing the required parameter 'benchmarkId' when calling updateBenchmark");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateBenchmark");
      }


      var pathParams = {
        'benchmark_id': benchmarkId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificBenchmarkResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/benchmark/{benchmark_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBudget operation.
     * @callback module:api/NucleusApi~updateBudgetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificBudgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a budget
     * @param {String} budgetId UUID of a budget
     * @param {module:model/BudgetPayload} payload 
     * @param {module:api/NucleusApi~updateBudgetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificBudgetResponse}
     */
    this.updateBudget = function(budgetId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'budgetId' is set
      if (budgetId === undefined || budgetId === null) {
        throw new Error("Missing the required parameter 'budgetId' when calling updateBudget");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateBudget");
      }


      var pathParams = {
        'budget_id': budgetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificBudgetResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/budget/{budget_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClient operation.
     * @callback module:api/NucleusApi~updateClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client
     * @param {String} clientId UUID of a client
     * @param {module:model/ClientPayload} payload 
     * @param {module:api/NucleusApi~updateClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientResponse}
     */
    this.updateClient = function(clientId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateClient");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateClient");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientHydro operation.
     * @callback module:api/NucleusApi~updateClientHydroCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientHydroResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client-hydro relationship
     * @param {String} clientHydroId UUID of a client-hydro relationship
     * @param {module:model/ClientHydroPayload} payload 
     * @param {module:api/NucleusApi~updateClientHydroCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientHydroResponse}
     */
    this.updateClientHydro = function(clientHydroId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'clientHydroId' is set
      if (clientHydroId === undefined || clientHydroId === null) {
        throw new Error("Missing the required parameter 'clientHydroId' when calling updateClientHydro");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateClientHydro");
      }


      var pathParams = {
        'client_hydro_id': clientHydroId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientHydroResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_hydro/{client_hydro_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClientResponse operation.
     * @callback module:api/NucleusApi~updateClientResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificClientResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client response
     * @param {String} clientResponseId UUID of a client response
     * @param {module:model/ClientResponsePayload} payload 
     * @param {module:api/NucleusApi~updateClientResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificClientResponseResponse}
     */
    this.updateClientResponse = function(clientResponseId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'clientResponseId' is set
      if (clientResponseId === undefined || clientResponseId === null) {
        throw new Error("Missing the required parameter 'clientResponseId' when calling updateClientResponse");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateClientResponse");
      }


      var pathParams = {
        'client_response_id': clientResponseId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificClientResponseResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/client_response/{client_response_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDecisionTree operation.
     * @callback module:api/NucleusApi~updateDecisionTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificDecisionTreeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a decision tree
     * @param {String} decisionTreeId UUID of a decision tree
     * @param {module:model/DecisionTreePayload} payload 
     * @param {module:api/NucleusApi~updateDecisionTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificDecisionTreeResponse}
     */
    this.updateDecisionTree = function(decisionTreeId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'decisionTreeId' is set
      if (decisionTreeId === undefined || decisionTreeId === null) {
        throw new Error("Missing the required parameter 'decisionTreeId' when calling updateDecisionTree");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateDecisionTree");
      }


      var pathParams = {
        'decision_tree_id': decisionTreeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificDecisionTreeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/decision_tree/{decision_tree_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDepositRequest operation.
     * @callback module:api/NucleusApi~updateDepositRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificDepositRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a deposit request
     * @param {String} depositId UUID of a deposit record
     * @param {module:model/DepositRequestPayload} payload 
     * @param {module:api/NucleusApi~updateDepositRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificDepositRequestResponse}
     */
    this.updateDepositRequest = function(depositId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'depositId' is set
      if (depositId === undefined || depositId === null) {
        throw new Error("Missing the required parameter 'depositId' when calling updateDepositRequest");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateDepositRequest");
      }


      var pathParams = {
        'deposit_id': depositId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificDepositRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/deposit/{deposit_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFinancialOffer operation.
     * @callback module:api/NucleusApi~updateFinancialOfferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificFinancialOfferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a financial offer
     * @param {String} financialOfferId UUID of a financial offer
     * @param {module:model/FinancialOfferPayload} payload 
     * @param {module:api/NucleusApi~updateFinancialOfferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificFinancialOfferResponse}
     */
    this.updateFinancialOffer = function(financialOfferId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'financialOfferId' is set
      if (financialOfferId === undefined || financialOfferId === null) {
        throw new Error("Missing the required parameter 'financialOfferId' when calling updateFinancialOffer");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateFinancialOffer");
      }


      var pathParams = {
        'financial_offer_id': financialOfferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificFinancialOfferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/financial_offer/{financial_offer_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFundingRequest operation.
     * @callback module:api/NucleusApi~updateFundingRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificFundingRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a funding request
     * @param {String} fundingId UUID of a funding record
     * @param {module:model/FundingRequestPayload} payload 
     * @param {module:api/NucleusApi~updateFundingRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificFundingRequestResponse}
     */
    this.updateFundingRequest = function(fundingId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'fundingId' is set
      if (fundingId === undefined || fundingId === null) {
        throw new Error("Missing the required parameter 'fundingId' when calling updateFundingRequest");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateFundingRequest");
      }


      var pathParams = {
        'funding_id': fundingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificFundingRequestResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/funding/{funding_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGoal operation.
     * @callback module:api/NucleusApi~updateGoalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificGoalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a goal
     * @param {String} goalId UUID of a goal
     * @param {module:model/GoalPayload} payload 
     * @param {module:api/NucleusApi~updateGoalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificGoalResponse}
     */
    this.updateGoal = function(goalId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'goalId' is set
      if (goalId === undefined || goalId === null) {
        throw new Error("Missing the required parameter 'goalId' when calling updateGoal");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateGoal");
      }


      var pathParams = {
        'goal_id': goalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificGoalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal/{goal_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGoalTrackRecord operation.
     * @callback module:api/NucleusApi~updateGoalTrackRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificGoalTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a goal track record
     * @param {String} goalTrackId UUID of a goal tracking record
     * @param {module:model/GoalTrackPayload} payload 
     * @param {module:api/NucleusApi~updateGoalTrackRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificGoalTrackResponse}
     */
    this.updateGoalTrackRecord = function(goalTrackId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'goalTrackId' is set
      if (goalTrackId === undefined || goalTrackId === null) {
        throw new Error("Missing the required parameter 'goalTrackId' when calling updateGoalTrackRecord");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateGoalTrackRecord");
      }


      var pathParams = {
        'goal_track_id': goalTrackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificGoalTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/goal_track/{goal_track_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModel operation.
     * @callback module:api/NucleusApi~updateModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model
     * @param {String} modelId UUID of a model
     * @param {module:model/ModelPayload} payload 
     * @param {module:api/NucleusApi~updateModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelResponse}
     */
    this.updateModel = function(modelId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling updateModel");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateModel");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelAssetSize operation.
     * @callback module:api/NucleusApi~updateModelAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model asset size
     * @param {String} modelAssetSizeId UUID of a model asset size record
     * @param {module:model/ModelAssetSizePayload} payload 
     * @param {module:api/NucleusApi~updateModelAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelAssetSizeResponse}
     */
    this.updateModelAssetSize = function(modelAssetSizeId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'modelAssetSizeId' is set
      if (modelAssetSizeId === undefined || modelAssetSizeId === null) {
        throw new Error("Missing the required parameter 'modelAssetSizeId' when calling updateModelAssetSize");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateModelAssetSize");
      }


      var pathParams = {
        'model_asset_size_id': modelAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_asset_size/{model_asset_size_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelComment operation.
     * @callback module:api/NucleusApi~updateModelCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model commentary
     * @param {String} modelCommentId UUID of a model comment
     * @param {module:model/ModelCommentPayload} payload 
     * @param {module:api/NucleusApi~updateModelCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelCommentResponse}
     */
    this.updateModelComment = function(modelCommentId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'modelCommentId' is set
      if (modelCommentId === undefined || modelCommentId === null) {
        throw new Error("Missing the required parameter 'modelCommentId' when calling updateModelComment");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateModelComment");
      }


      var pathParams = {
        'model_comment_id': modelCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_comment/{model_comment_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelComposition operation.
     * @callback module:api/NucleusApi~updateModelCompositionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChangeModelCompositionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change a model composition
     * @param {String} modelId UUID of a model
     * @param {module:model/ModelCompositionPayload} payload 
     * @param {module:api/NucleusApi~updateModelCompositionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChangeModelCompositionResponse}
     */
    this.updateModelComposition = function(modelId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling updateModelComposition");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateModelComposition");
      }


      var pathParams = {
        'model_id': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChangeModelCompositionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model/{model_id}/model_change', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelHolding operation.
     * @callback module:api/NucleusApi~updateModelHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model holding
     * @param {String} modelHoldingId UUID of a model holding record
     * @param {module:model/ModelHoldingPayload} payload 
     * @param {module:api/NucleusApi~updateModelHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelHoldingResponse}
     */
    this.updateModelHolding = function(modelHoldingId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'modelHoldingId' is set
      if (modelHoldingId === undefined || modelHoldingId === null) {
        throw new Error("Missing the required parameter 'modelHoldingId' when calling updateModelHolding");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateModelHolding");
      }


      var pathParams = {
        'model_holding_id': modelHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_holding/{model_holding_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModelTransaction operation.
     * @callback module:api/NucleusApi~updateModelTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificModelTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a model transaction
     * @param {String} modelTransactionId UUID of a model transaction record
     * @param {module:model/ModelTransactionPayload} payload 
     * @param {module:api/NucleusApi~updateModelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificModelTransactionResponse}
     */
    this.updateModelTransaction = function(modelTransactionId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'modelTransactionId' is set
      if (modelTransactionId === undefined || modelTransactionId === null) {
        throw new Error("Missing the required parameter 'modelTransactionId' when calling updateModelTransaction");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateModelTransaction");
      }


      var pathParams = {
        'model_transaction_id': modelTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificModelTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/model_transaction/{model_transaction_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNode operation.
     * @callback module:api/NucleusApi~updateNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificNodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a node
     * @param {String} nodeId UUID of a node
     * @param {module:model/NodePayload} payload 
     * @param {module:api/NucleusApi~updateNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificNodeResponse}
     */
    this.updateNode = function(nodeId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling updateNode");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateNode");
      }


      var pathParams = {
        'node_id': nodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificNodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node/{node_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNodeRelationship operation.
     * @callback module:api/NucleusApi~updateNodeRelationshipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificNodeRelationshipResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a node relationship
     * @param {String} nodeRelationshipId UUID of a node relationship
     * @param {module:model/NodeRelationshipPayload} payload 
     * @param {module:api/NucleusApi~updateNodeRelationshipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificNodeRelationshipResponse}
     */
    this.updateNodeRelationship = function(nodeRelationshipId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'nodeRelationshipId' is set
      if (nodeRelationshipId === undefined || nodeRelationshipId === null) {
        throw new Error("Missing the required parameter 'nodeRelationshipId' when calling updateNodeRelationship");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateNodeRelationship");
      }


      var pathParams = {
        'node_relationship_id': nodeRelationshipId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificNodeRelationshipResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/node_relationship/{node_relationship_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderRecord operation.
     * @callback module:api/NucleusApi~updateOrderRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order record
     * @param {String} orderId UUID of an order record
     * @param {module:model/OrderPayload} payload 
     * @param {module:api/NucleusApi~updateOrderRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificOrderResponse}
     */
    this.updateOrderRecord = function(orderId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling updateOrderRecord");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateOrderRecord");
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificOrderResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order/{order_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderStatus operation.
     * @callback module:api/NucleusApi~updateOrderStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificOrderStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order status
     * @param {String} orderStatusId UUID of an order status record
     * @param {module:model/OrderStatusPayload} payload 
     * @param {module:api/NucleusApi~updateOrderStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificOrderStatusResponse}
     */
    this.updateOrderStatus = function(orderStatusId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'orderStatusId' is set
      if (orderStatusId === undefined || orderStatusId === null) {
        throw new Error("Missing the required parameter 'orderStatusId' when calling updateOrderStatus");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateOrderStatus");
      }


      var pathParams = {
        'order_status_id': orderStatusId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificOrderStatusResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_status/{order_status_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOrderTrackingRecord operation.
     * @callback module:api/NucleusApi~updateOrderTrackingRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificOrderTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order tracking record
     * @param {String} orderTrackId UUID of an order tracking record
     * @param {module:model/OrderTrackPayload} payload 
     * @param {module:api/NucleusApi~updateOrderTrackingRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificOrderTrackResponse}
     */
    this.updateOrderTrackingRecord = function(orderTrackId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'orderTrackId' is set
      if (orderTrackId === undefined || orderTrackId === null) {
        throw new Error("Missing the required parameter 'orderTrackId' when calling updateOrderTrackingRecord");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateOrderTrackingRecord");
      }


      var pathParams = {
        'order_track_id': orderTrackId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificOrderTrackResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/order_track/{order_track_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolio operation.
     * @callback module:api/NucleusApi~updatePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio
     * @param {String} portfolioId UUID of a portfolio
     * @param {module:model/PortfolioPayload} payload 
     * @param {module:api/NucleusApi~updatePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioResponse}
     */
    this.updatePortfolio = function(portfolioId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling updatePortfolio");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updatePortfolio");
      }


      var pathParams = {
        'portfolio_id': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio/{portfolio_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioAssetSize operation.
     * @callback module:api/NucleusApi~updatePortfolioAssetSizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioAssetSizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio asset size
     * @param {String} portfolioAssetSizeId UUID of a portfolio asset size record
     * @param {module:model/PortfolioAssetSizePayload} payload 
     * @param {module:api/NucleusApi~updatePortfolioAssetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioAssetSizeResponse}
     */
    this.updatePortfolioAssetSize = function(portfolioAssetSizeId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioAssetSizeId' is set
      if (portfolioAssetSizeId === undefined || portfolioAssetSizeId === null) {
        throw new Error("Missing the required parameter 'portfolioAssetSizeId' when calling updatePortfolioAssetSize");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updatePortfolioAssetSize");
      }


      var pathParams = {
        'portfolio_asset_size_id': portfolioAssetSizeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioAssetSizeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioComment operation.
     * @callback module:api/NucleusApi~updatePortfolioCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioCommentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio commentary
     * @param {String} portfolioCommentId UUID of a portfolio comment
     * @param {module:model/PortfolioCommentPayload} payload 
     * @param {module:api/NucleusApi~updatePortfolioCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioCommentResponse}
     */
    this.updatePortfolioComment = function(portfolioCommentId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioCommentId' is set
      if (portfolioCommentId === undefined || portfolioCommentId === null) {
        throw new Error("Missing the required parameter 'portfolioCommentId' when calling updatePortfolioComment");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updatePortfolioComment");
      }


      var pathParams = {
        'portfolio_comment_id': portfolioCommentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioCommentResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_comment/{portfolio_comment_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioHolding operation.
     * @callback module:api/NucleusApi~updatePortfolioHoldingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioHoldingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio holding
     * @param {String} portfolioHoldingId UUID of a portfolio holding record
     * @param {module:model/PortfolioHoldingPayload} payload 
     * @param {module:api/NucleusApi~updatePortfolioHoldingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioHoldingResponse}
     */
    this.updatePortfolioHolding = function(portfolioHoldingId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioHoldingId' is set
      if (portfolioHoldingId === undefined || portfolioHoldingId === null) {
        throw new Error("Missing the required parameter 'portfolioHoldingId' when calling updatePortfolioHolding");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updatePortfolioHolding");
      }


      var pathParams = {
        'portfolio_holding_id': portfolioHoldingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioHoldingResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_holding/{portfolio_holding_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioTransaction operation.
     * @callback module:api/NucleusApi~updatePortfolioTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificPortfolioTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio transaction
     * @param {String} portfolioTransactionId UUID of a portfolio transaction record
     * @param {module:model/PortfolioTransactionPayload} payload 
     * @param {module:api/NucleusApi~updatePortfolioTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificPortfolioTransactionResponse}
     */
    this.updatePortfolioTransaction = function(portfolioTransactionId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'portfolioTransactionId' is set
      if (portfolioTransactionId === undefined || portfolioTransactionId === null) {
        throw new Error("Missing the required parameter 'portfolioTransactionId' when calling updatePortfolioTransaction");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updatePortfolioTransaction");
      }


      var pathParams = {
        'portfolio_transaction_id': portfolioTransactionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificPortfolioTransactionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateQuestionnaire operation.
     * @callback module:api/NucleusApi~updateQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificQuestionnaireResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a questionnaire
     * @param {String} questionnaireId UUID of a questionnaire
     * @param {module:model/QuestionnairePayload} payload 
     * @param {module:api/NucleusApi~updateQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificQuestionnaireResponse}
     */
    this.updateQuestionnaire = function(questionnaireId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'questionnaireId' is set
      if (questionnaireId === undefined || questionnaireId === null) {
        throw new Error("Missing the required parameter 'questionnaireId' when calling updateQuestionnaire");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateQuestionnaire");
      }


      var pathParams = {
        'questionnaire_id': questionnaireId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificQuestionnaireResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/questionnaire/{questionnaire_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScore operation.
     * @callback module:api/NucleusApi~updateScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificScoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a score
     * @param {String} scoreId UUID of a score record
     * @param {module:model/ScorePayload} payload 
     * @param {module:api/NucleusApi~updateScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificScoreResponse}
     */
    this.updateScore = function(scoreId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'scoreId' is set
      if (scoreId === undefined || scoreId === null) {
        throw new Error("Missing the required parameter 'scoreId' when calling updateScore");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateScore");
      }


      var pathParams = {
        'score_id': scoreId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificScoreResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/score/{score_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurity operation.
     * @callback module:api/NucleusApi~updateSecurityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSecurityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security
     * @param {String} securityId UUID of a security
     * @param {module:model/SecurityPayload} payload 
     * @param {module:api/NucleusApi~updateSecurityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSecurityResponse}
     */
    this.updateSecurity = function(securityId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'securityId' is set
      if (securityId === undefined || securityId === null) {
        throw new Error("Missing the required parameter 'securityId' when calling updateSecurity");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSecurity");
      }


      var pathParams = {
        'security_id': securityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSecurityResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security/{security_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityExclusion operation.
     * @callback module:api/NucleusApi~updateSecurityExclusionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSecurityExclusionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security exclusion
     * @param {String} securityExclusionId UUID of a security exclusion record
     * @param {module:model/SecurityExclusionPayload} payload 
     * @param {module:api/NucleusApi~updateSecurityExclusionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSecurityExclusionResponse}
     */
    this.updateSecurityExclusion = function(securityExclusionId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'securityExclusionId' is set
      if (securityExclusionId === undefined || securityExclusionId === null) {
        throw new Error("Missing the required parameter 'securityExclusionId' when calling updateSecurityExclusion");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSecurityExclusion");
      }


      var pathParams = {
        'security_exclusion_id': securityExclusionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSecurityExclusionResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_exclusion/{security_exclusion_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityPrice operation.
     * @callback module:api/NucleusApi~updateSecurityPriceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificSecurityPriceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a security price
     * @param {String} securityPriceId UUID of a security price record
     * @param {module:model/SecurityPricePayload} payload 
     * @param {module:api/NucleusApi~updateSecurityPriceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificSecurityPriceResponse}
     */
    this.updateSecurityPrice = function(securityPriceId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'securityPriceId' is set
      if (securityPriceId === undefined || securityPriceId === null) {
        throw new Error("Missing the required parameter 'securityPriceId' when calling updateSecurityPrice");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateSecurityPrice");
      }


      var pathParams = {
        'security_price_id': securityPriceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificSecurityPriceResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/security_price/{security_price_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactionCode operation.
     * @callback module:api/NucleusApi~updateTransactionCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificTransactionCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transaction code
     * @param {String} transactionCodeId UUID of a transaction code
     * @param {module:model/TransactionCodePayload} payload 
     * @param {module:api/NucleusApi~updateTransactionCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificTransactionCodeResponse}
     */
    this.updateTransactionCode = function(transactionCodeId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'transactionCodeId' is set
      if (transactionCodeId === undefined || transactionCodeId === null) {
        throw new Error("Missing the required parameter 'transactionCodeId' when calling updateTransactionCode");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateTransactionCode");
      }


      var pathParams = {
        'transaction_code_id': transactionCodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificTransactionCodeResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transaction_code/{transaction_code_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransferRequest operation.
     * @callback module:api/NucleusApi~updateTransferRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificTransferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a transfer request
     * @param {String} transferId UUID of an account transfer record
     * @param {module:model/TransferRequestPayload} payload 
     * @param {module:api/NucleusApi~updateTransferRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificTransferResponse}
     */
    this.updateTransferRequest = function(transferId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'transferId' is set
      if (transferId === undefined || transferId === null) {
        throw new Error("Missing the required parameter 'transferId' when calling updateTransferRequest");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateTransferRequest");
      }


      var pathParams = {
        'transfer_id': transferId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificTransferResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/transfer/{transfer_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWithdrawalRequest operation.
     * @callback module:api/NucleusApi~updateWithdrawalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecificWithdrawalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a withdrawal request
     * @param {String} withdrawalId UUID of a withdrawal request
     * @param {module:model/WithdrawalPayload} payload 
     * @param {module:api/NucleusApi~updateWithdrawalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecificWithdrawalResponse}
     */
    this.updateWithdrawalRequest = function(withdrawalId, payload, callback) {
      var postBody = payload;

      // verify the required parameter 'withdrawalId' is set
      if (withdrawalId === undefined || withdrawalId === null) {
        throw new Error("Missing the required parameter 'withdrawalId' when calling updateWithdrawalRequest");
      }

      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling updateWithdrawalRequest");
      }


      var pathParams = {
        'withdrawal_id': withdrawalId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SpecificWithdrawalResponse;

      return this.apiClient.callApi(
        '/nucleus/v1/withdrawal/{withdrawal_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
