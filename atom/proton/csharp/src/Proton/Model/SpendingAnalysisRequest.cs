/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// SpendingAnalysisRequest
    /// </summary>
    [DataContract]
    public partial class SpendingAnalysisRequest :  IEquatable<SpendingAnalysisRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines FrequencyUnit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyUnitEnum
        {
            
            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            [EnumMember(Value = "daily")]
            Daily = 1,
            
            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            [EnumMember(Value = "weekly")]
            Weekly = 2,
            
            /// <summary>
            /// Enum BiWeekly for value: bi-weekly
            /// </summary>
            [EnumMember(Value = "bi-weekly")]
            BiWeekly = 3,
            
            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            [EnumMember(Value = "monthly")]
            Monthly = 4,
            
            /// <summary>
            /// Enum Quarterly for value: quarterly
            /// </summary>
            [EnumMember(Value = "quarterly")]
            Quarterly = 5,
            
            /// <summary>
            /// Enum Annually for value: annually
            /// </summary>
            [EnumMember(Value = "annually")]
            Annually = 6
        }

        /// <summary>
        /// Gets or Sets FrequencyUnit
        /// </summary>
        [DataMember(Name="frequency_unit", EmitDefaultValue=false)]
        public FrequencyUnitEnum FrequencyUnit { get; set; }
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum All for value: all
            /// </summary>
            [EnumMember(Value = "all")]
            All = 1,
            
            /// <summary>
            /// Enum External for value: external
            /// </summary>
            [EnumMember(Value = "external")]
            External = 2,
            
            /// <summary>
            /// Enum Internal for value: internal
            /// </summary>
            [EnumMember(Value = "internal")]
            Internal = 3,
            
            /// <summary>
            /// Enum Cards for value: cards
            /// </summary>
            [EnumMember(Value = "cards")]
            Cards = 4
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingAnalysisRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpendingAnalysisRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpendingAnalysisRequest" /> class.
        /// </summary>
        /// <param name="merchantScope">merchantScope.</param>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="businessIds">businessIds.</param>
        /// <param name="cardIds">cardIds.</param>
        /// <param name="showByMerchant">showByMerchant (default to false).</param>
        /// <param name="showByPeriod">showByPeriod (default to false).</param>
        /// <param name="onlyCleansed">onlyCleansed (default to false).</param>
        /// <param name="frequency">frequency (default to 1).</param>
        /// <param name="endDate">endDate.</param>
        /// <param name="asOfDate">asOfDate.</param>
        /// <param name="transactionCategoryScope">transactionCategoryScope.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="cardStatusScope">cardStatusScope.</param>
        /// <param name="onlyActiveClients">onlyActiveClients (default to false).</param>
        /// <param name="lookbackPeriods">lookbackPeriods (default to 0).</param>
        /// <param name="frequencyUnit">frequencyUnit (required).</param>
        /// <param name="householdIds">householdIds.</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        /// <param name="currencyCode">currencyCode.</param>
        /// <param name="clientIds">clientIds.</param>
        /// <param name="scope">scope (default to ScopeEnum.All).</param>
        /// <param name="currencyConversion">currencyConversion.</param>
        /// <param name="transactionStatusScope">transactionStatusScope.</param>
        /// <param name="showByCategory">showByCategory (default to false).</param>
        public SpendingAnalysisRequest(List<Guid?> merchantScope = default(List<Guid?>), List<Guid?> accountIds = default(List<Guid?>), List<Guid?> businessIds = default(List<Guid?>), List<Guid?> cardIds = default(List<Guid?>), bool? showByMerchant = false, bool? showByPeriod = false, bool? onlyCleansed = false, int? frequency = 1, DateTime? endDate = default(DateTime?), DateTime? asOfDate = default(DateTime?), List<Guid?> transactionCategoryScope = default(List<Guid?>), DateTime? startDate = default(DateTime?), List<string> cardStatusScope = default(List<string>), bool? onlyActiveClients = false, int? lookbackPeriods = 0, FrequencyUnitEnum frequencyUnit = default(FrequencyUnitEnum), List<Guid?> householdIds = default(List<Guid?>), List<Guid?> aggregationAccountIds = default(List<Guid?>), string currencyCode = default(string), List<Guid?> clientIds = default(List<Guid?>), ScopeEnum? scope = ScopeEnum.All, string currencyConversion = default(string), List<string> transactionStatusScope = default(List<string>), bool? showByCategory = false)
        {
            // to ensure "frequencyUnit" is required (not null)
            if (frequencyUnit == null)
            {
                throw new InvalidDataException("frequencyUnit is a required property for SpendingAnalysisRequest and cannot be null");
            }
            else
            {
                this.FrequencyUnit = frequencyUnit;
            }
            this.MerchantScope = merchantScope;
            this.AccountIds = accountIds;
            this.BusinessIds = businessIds;
            this.CardIds = cardIds;
            // use default value if no "showByMerchant" provided
            if (showByMerchant == null)
            {
                this.ShowByMerchant = false;
            }
            else
            {
                this.ShowByMerchant = showByMerchant;
            }
            // use default value if no "showByPeriod" provided
            if (showByPeriod == null)
            {
                this.ShowByPeriod = false;
            }
            else
            {
                this.ShowByPeriod = showByPeriod;
            }
            // use default value if no "onlyCleansed" provided
            if (onlyCleansed == null)
            {
                this.OnlyCleansed = false;
            }
            else
            {
                this.OnlyCleansed = onlyCleansed;
            }
            // use default value if no "frequency" provided
            if (frequency == null)
            {
                this.Frequency = 1;
            }
            else
            {
                this.Frequency = frequency;
            }
            this.EndDate = endDate;
            this.AsOfDate = asOfDate;
            this.TransactionCategoryScope = transactionCategoryScope;
            this.StartDate = startDate;
            this.CardStatusScope = cardStatusScope;
            // use default value if no "onlyActiveClients" provided
            if (onlyActiveClients == null)
            {
                this.OnlyActiveClients = false;
            }
            else
            {
                this.OnlyActiveClients = onlyActiveClients;
            }
            // use default value if no "lookbackPeriods" provided
            if (lookbackPeriods == null)
            {
                this.LookbackPeriods = 0;
            }
            else
            {
                this.LookbackPeriods = lookbackPeriods;
            }
            this.HouseholdIds = householdIds;
            this.AggregationAccountIds = aggregationAccountIds;
            this.CurrencyCode = currencyCode;
            this.ClientIds = clientIds;
            // use default value if no "scope" provided
            if (scope == null)
            {
                this.Scope = ScopeEnum.All;
            }
            else
            {
                this.Scope = scope;
            }
            this.CurrencyConversion = currencyConversion;
            this.TransactionStatusScope = transactionStatusScope;
            // use default value if no "showByCategory" provided
            if (showByCategory == null)
            {
                this.ShowByCategory = false;
            }
            else
            {
                this.ShowByCategory = showByCategory;
            }
        }
        
        /// <summary>
        /// Gets or Sets MerchantScope
        /// </summary>
        [DataMember(Name="merchant_scope", EmitDefaultValue=false)]
        public List<Guid?> MerchantScope { get; set; }

        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }

        /// <summary>
        /// Gets or Sets BusinessIds
        /// </summary>
        [DataMember(Name="business_ids", EmitDefaultValue=false)]
        public List<Guid?> BusinessIds { get; set; }

        /// <summary>
        /// Gets or Sets CardIds
        /// </summary>
        [DataMember(Name="card_ids", EmitDefaultValue=false)]
        public List<Guid?> CardIds { get; set; }

        /// <summary>
        /// Gets or Sets ShowByMerchant
        /// </summary>
        [DataMember(Name="show_by_merchant", EmitDefaultValue=false)]
        public bool? ShowByMerchant { get; set; }

        /// <summary>
        /// Gets or Sets ShowByPeriod
        /// </summary>
        [DataMember(Name="show_by_period", EmitDefaultValue=false)]
        public bool? ShowByPeriod { get; set; }

        /// <summary>
        /// Gets or Sets OnlyCleansed
        /// </summary>
        [DataMember(Name="only_cleansed", EmitDefaultValue=false)]
        public bool? OnlyCleansed { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or Sets AsOfDate
        /// </summary>
        [DataMember(Name="as_of_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? AsOfDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCategoryScope
        /// </summary>
        [DataMember(Name="transaction_category_scope", EmitDefaultValue=false)]
        public List<Guid?> TransactionCategoryScope { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets CardStatusScope
        /// </summary>
        [DataMember(Name="card_status_scope", EmitDefaultValue=false)]
        public List<string> CardStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets OnlyActiveClients
        /// </summary>
        [DataMember(Name="only_active_clients", EmitDefaultValue=false)]
        public bool? OnlyActiveClients { get; set; }

        /// <summary>
        /// Gets or Sets LookbackPeriods
        /// </summary>
        [DataMember(Name="lookback_periods", EmitDefaultValue=false)]
        public int? LookbackPeriods { get; set; }


        /// <summary>
        /// Gets or Sets HouseholdIds
        /// </summary>
        [DataMember(Name="household_ids", EmitDefaultValue=false)]
        public List<Guid?> HouseholdIds { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets ClientIds
        /// </summary>
        [DataMember(Name="client_ids", EmitDefaultValue=false)]
        public List<Guid?> ClientIds { get; set; }


        /// <summary>
        /// Gets or Sets CurrencyConversion
        /// </summary>
        [DataMember(Name="currency_conversion", EmitDefaultValue=false)]
        public string CurrencyConversion { get; set; }

        /// <summary>
        /// Gets or Sets TransactionStatusScope
        /// </summary>
        [DataMember(Name="transaction_status_scope", EmitDefaultValue=false)]
        public List<string> TransactionStatusScope { get; set; }

        /// <summary>
        /// Gets or Sets ShowByCategory
        /// </summary>
        [DataMember(Name="show_by_category", EmitDefaultValue=false)]
        public bool? ShowByCategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpendingAnalysisRequest {\n");
            sb.Append("  MerchantScope: ").Append(MerchantScope).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  BusinessIds: ").Append(BusinessIds).Append("\n");
            sb.Append("  CardIds: ").Append(CardIds).Append("\n");
            sb.Append("  ShowByMerchant: ").Append(ShowByMerchant).Append("\n");
            sb.Append("  ShowByPeriod: ").Append(ShowByPeriod).Append("\n");
            sb.Append("  OnlyCleansed: ").Append(OnlyCleansed).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  AsOfDate: ").Append(AsOfDate).Append("\n");
            sb.Append("  TransactionCategoryScope: ").Append(TransactionCategoryScope).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  CardStatusScope: ").Append(CardStatusScope).Append("\n");
            sb.Append("  OnlyActiveClients: ").Append(OnlyActiveClients).Append("\n");
            sb.Append("  LookbackPeriods: ").Append(LookbackPeriods).Append("\n");
            sb.Append("  FrequencyUnit: ").Append(FrequencyUnit).Append("\n");
            sb.Append("  HouseholdIds: ").Append(HouseholdIds).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  ClientIds: ").Append(ClientIds).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  CurrencyConversion: ").Append(CurrencyConversion).Append("\n");
            sb.Append("  TransactionStatusScope: ").Append(TransactionStatusScope).Append("\n");
            sb.Append("  ShowByCategory: ").Append(ShowByCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpendingAnalysisRequest);
        }

        /// <summary>
        /// Returns true if SpendingAnalysisRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SpendingAnalysisRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpendingAnalysisRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantScope == input.MerchantScope ||
                    this.MerchantScope != null &&
                    this.MerchantScope.SequenceEqual(input.MerchantScope)
                ) && 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.BusinessIds == input.BusinessIds ||
                    this.BusinessIds != null &&
                    this.BusinessIds.SequenceEqual(input.BusinessIds)
                ) && 
                (
                    this.CardIds == input.CardIds ||
                    this.CardIds != null &&
                    this.CardIds.SequenceEqual(input.CardIds)
                ) && 
                (
                    this.ShowByMerchant == input.ShowByMerchant ||
                    (this.ShowByMerchant != null &&
                    this.ShowByMerchant.Equals(input.ShowByMerchant))
                ) && 
                (
                    this.ShowByPeriod == input.ShowByPeriod ||
                    (this.ShowByPeriod != null &&
                    this.ShowByPeriod.Equals(input.ShowByPeriod))
                ) && 
                (
                    this.OnlyCleansed == input.OnlyCleansed ||
                    (this.OnlyCleansed != null &&
                    this.OnlyCleansed.Equals(input.OnlyCleansed))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.AsOfDate == input.AsOfDate ||
                    (this.AsOfDate != null &&
                    this.AsOfDate.Equals(input.AsOfDate))
                ) && 
                (
                    this.TransactionCategoryScope == input.TransactionCategoryScope ||
                    this.TransactionCategoryScope != null &&
                    this.TransactionCategoryScope.SequenceEqual(input.TransactionCategoryScope)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.CardStatusScope == input.CardStatusScope ||
                    this.CardStatusScope != null &&
                    this.CardStatusScope.SequenceEqual(input.CardStatusScope)
                ) && 
                (
                    this.OnlyActiveClients == input.OnlyActiveClients ||
                    (this.OnlyActiveClients != null &&
                    this.OnlyActiveClients.Equals(input.OnlyActiveClients))
                ) && 
                (
                    this.LookbackPeriods == input.LookbackPeriods ||
                    (this.LookbackPeriods != null &&
                    this.LookbackPeriods.Equals(input.LookbackPeriods))
                ) && 
                (
                    this.FrequencyUnit == input.FrequencyUnit ||
                    (this.FrequencyUnit != null &&
                    this.FrequencyUnit.Equals(input.FrequencyUnit))
                ) && 
                (
                    this.HouseholdIds == input.HouseholdIds ||
                    this.HouseholdIds != null &&
                    this.HouseholdIds.SequenceEqual(input.HouseholdIds)
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.ClientIds == input.ClientIds ||
                    this.ClientIds != null &&
                    this.ClientIds.SequenceEqual(input.ClientIds)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.CurrencyConversion == input.CurrencyConversion ||
                    (this.CurrencyConversion != null &&
                    this.CurrencyConversion.Equals(input.CurrencyConversion))
                ) && 
                (
                    this.TransactionStatusScope == input.TransactionStatusScope ||
                    this.TransactionStatusScope != null &&
                    this.TransactionStatusScope.SequenceEqual(input.TransactionStatusScope)
                ) && 
                (
                    this.ShowByCategory == input.ShowByCategory ||
                    (this.ShowByCategory != null &&
                    this.ShowByCategory.Equals(input.ShowByCategory))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantScope != null)
                    hashCode = hashCode * 59 + this.MerchantScope.GetHashCode();
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.BusinessIds != null)
                    hashCode = hashCode * 59 + this.BusinessIds.GetHashCode();
                if (this.CardIds != null)
                    hashCode = hashCode * 59 + this.CardIds.GetHashCode();
                if (this.ShowByMerchant != null)
                    hashCode = hashCode * 59 + this.ShowByMerchant.GetHashCode();
                if (this.ShowByPeriod != null)
                    hashCode = hashCode * 59 + this.ShowByPeriod.GetHashCode();
                if (this.OnlyCleansed != null)
                    hashCode = hashCode * 59 + this.OnlyCleansed.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.AsOfDate != null)
                    hashCode = hashCode * 59 + this.AsOfDate.GetHashCode();
                if (this.TransactionCategoryScope != null)
                    hashCode = hashCode * 59 + this.TransactionCategoryScope.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.CardStatusScope != null)
                    hashCode = hashCode * 59 + this.CardStatusScope.GetHashCode();
                if (this.OnlyActiveClients != null)
                    hashCode = hashCode * 59 + this.OnlyActiveClients.GetHashCode();
                if (this.LookbackPeriods != null)
                    hashCode = hashCode * 59 + this.LookbackPeriods.GetHashCode();
                if (this.FrequencyUnit != null)
                    hashCode = hashCode * 59 + this.FrequencyUnit.GetHashCode();
                if (this.HouseholdIds != null)
                    hashCode = hashCode * 59 + this.HouseholdIds.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.ClientIds != null)
                    hashCode = hashCode * 59 + this.ClientIds.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.CurrencyConversion != null)
                    hashCode = hashCode * 59 + this.CurrencyConversion.GetHashCode();
                if (this.TransactionStatusScope != null)
                    hashCode = hashCode * 59 + this.TransactionStatusScope.GetHashCode();
                if (this.ShowByCategory != null)
                    hashCode = hashCode * 59 + this.ShowByCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Frequency (int?) minimum
            if(this.Frequency < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Frequency, must be a value greater than or equal to 1.", new [] { "Frequency" });
            }

            // LookbackPeriods (int?) minimum
            if(this.LookbackPeriods < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LookbackPeriods, must be a value greater than or equal to 0.", new [] { "LookbackPeriods" });
            }

            yield break;
        }
    }

}
