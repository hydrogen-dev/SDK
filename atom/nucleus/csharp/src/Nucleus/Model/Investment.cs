/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Investment Object
    /// </summary>
    [DataContract]
    public partial class Investment :  IEquatable<Investment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Investment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Investment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Investment" /> class.
        /// </summary>
        /// <param name="fee">fee.</param>
        /// <param name="investmentType">investmentType.</param>
        /// <param name="price">price (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="settleDate">settleDate.</param>
        /// <param name="ticker">ticker.</param>
        /// <param name="tickerName">tickerName.</param>
        /// <param name="tradeSignal">tradeSignal (required).</param>
        /// <param name="value">value.</param>
        public Investment(double? fee = default(double?), string investmentType = default(string), double? price = default(double?), double? quantity = default(double?), DateTime? settleDate = default(DateTime?), string ticker = default(string), string tickerName = default(string), string tradeSignal = default(string), double? value = default(double?))
        {
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new InvalidDataException("price is a required property for Investment and cannot be null");
            }
            else
            {
                this.Price = price;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for Investment and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "tradeSignal" is required (not null)
            if (tradeSignal == null)
            {
                throw new InvalidDataException("tradeSignal is a required property for Investment and cannot be null");
            }
            else
            {
                this.TradeSignal = tradeSignal;
            }
            this.Fee = fee;
            this.InvestmentType = investmentType;
            this.SettleDate = settleDate;
            this.Ticker = ticker;
            this.TickerName = tickerName;
            this.Value = value;
        }
        
        /// <summary>
        /// fee
        /// </summary>
        /// <value>fee</value>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public double? Fee { get; set; }

        /// <summary>
        /// investmentType
        /// </summary>
        /// <value>investmentType</value>
        [DataMember(Name="investment_type", EmitDefaultValue=false)]
        public string InvestmentType { get; set; }

        /// <summary>
        /// price
        /// </summary>
        /// <value>price</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public double? Price { get; set; }

        /// <summary>
        /// quantity
        /// </summary>
        /// <value>quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// settleDate
        /// </summary>
        /// <value>settleDate</value>
        [DataMember(Name="settle_date", EmitDefaultValue=false)]
        public DateTime? SettleDate { get; set; }

        /// <summary>
        /// ticker
        /// </summary>
        /// <value>ticker</value>
        [DataMember(Name="ticker", EmitDefaultValue=false)]
        public string Ticker { get; set; }

        /// <summary>
        /// tickerName
        /// </summary>
        /// <value>tickerName</value>
        [DataMember(Name="ticker_name", EmitDefaultValue=false)]
        public string TickerName { get; set; }

        /// <summary>
        /// tradeSignal
        /// </summary>
        /// <value>tradeSignal</value>
        [DataMember(Name="trade_signal", EmitDefaultValue=false)]
        public string TradeSignal { get; set; }

        /// <summary>
        /// value
        /// </summary>
        /// <value>value</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Investment {\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  InvestmentType: ").Append(InvestmentType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SettleDate: ").Append(SettleDate).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  TickerName: ").Append(TickerName).Append("\n");
            sb.Append("  TradeSignal: ").Append(TradeSignal).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Investment);
        }

        /// <summary>
        /// Returns true if Investment instances are equal
        /// </summary>
        /// <param name="input">Instance of Investment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Investment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.InvestmentType == input.InvestmentType ||
                    (this.InvestmentType != null &&
                    this.InvestmentType.Equals(input.InvestmentType))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.SettleDate == input.SettleDate ||
                    (this.SettleDate != null &&
                    this.SettleDate.Equals(input.SettleDate))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.TickerName == input.TickerName ||
                    (this.TickerName != null &&
                    this.TickerName.Equals(input.TickerName))
                ) && 
                (
                    this.TradeSignal == input.TradeSignal ||
                    (this.TradeSignal != null &&
                    this.TradeSignal.Equals(input.TradeSignal))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.InvestmentType != null)
                    hashCode = hashCode * 59 + this.InvestmentType.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.SettleDate != null)
                    hashCode = hashCode * 59 + this.SettleDate.GetHashCode();
                if (this.Ticker != null)
                    hashCode = hashCode * 59 + this.Ticker.GetHashCode();
                if (this.TickerName != null)
                    hashCode = hashCode * 59 + this.TickerName.GetHashCode();
                if (this.TradeSignal != null)
                    hashCode = hashCode * 59 + this.TradeSignal.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
