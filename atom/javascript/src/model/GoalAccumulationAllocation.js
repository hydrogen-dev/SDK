/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GoalConfig', 'model/GoalDepositConfig', 'model/GoalOptConfig', 'model/GoalRecommendationConfigStatus'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./GoalConfig'), require('./GoalDepositConfig'), require('./GoalOptConfig'), require('./GoalRecommendationConfigStatus'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.GoalAccumulationAllocation = factory(root.atom_api.ApiClient, root.atom_api.GoalConfig, root.atom_api.GoalDepositConfig, root.atom_api.GoalOptConfig, root.atom_api.GoalRecommendationConfigStatus);
  }
}(this, function(ApiClient, GoalConfig, GoalDepositConfig, GoalOptConfig, GoalRecommendationConfigStatus) {
  'use strict';




  /**
   * The GoalAccumulationAllocation model module.
   * @module model/GoalAccumulationAllocation
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>GoalAccumulationAllocation</code>.
   * @alias module:model/GoalAccumulationAllocation
   * @class
   * @param allocationMethod {module:model/GoalAccumulationAllocation.AllocationMethodEnum} The allocation universe source, either create or select
   * @param allocationPriority {module:model/GoalAccumulationAllocation.AllocationPriorityEnum} Priority when allocating, either risk or goal
   * @param currInv {Number} The current amount invested
   * @param horizon {Number} The accumulation goal horizon
   * @param horizonFrequency {module:model/GoalAccumulationAllocation.HorizonFrequencyEnum} Frequency in relation to the horizon
   * @param goalConfig {module:model/GoalConfig} 
   */
  var exports = function(allocationMethod, allocationPriority, currInv, horizon, horizonFrequency, goalConfig) {
    var _this = this;

    _this['allocation_method'] = allocationMethod;
    _this['allocation_priority'] = allocationPriority;


    _this['curr_inv'] = currInv;
    _this['horizon'] = horizon;
    _this['horizon_frequency'] = horizonFrequency;
    _this['goal_config'] = goalConfig;














  };

  /**
   * Constructs a <code>GoalAccumulationAllocation</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GoalAccumulationAllocation} obj Optional instance to populate.
   * @return {module:model/GoalAccumulationAllocation} The populated <code>GoalAccumulationAllocation</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('allocation_method')) {
        obj['allocation_method'] = ApiClient.convertToType(data['allocation_method'], 'String');
      }
      if (data.hasOwnProperty('allocation_priority')) {
        obj['allocation_priority'] = ApiClient.convertToType(data['allocation_priority'], 'String');
      }
      if (data.hasOwnProperty('opt_config')) {
        obj['opt_config'] = GoalOptConfig.constructFromObject(data['opt_config']);
      }
      if (data.hasOwnProperty('allocations')) {
        obj['allocations'] = ApiClient.convertToType(data['allocations'], ['String']);
      }
      if (data.hasOwnProperty('curr_inv')) {
        obj['curr_inv'] = ApiClient.convertToType(data['curr_inv'], 'Number');
      }
      if (data.hasOwnProperty('horizon')) {
        obj['horizon'] = ApiClient.convertToType(data['horizon'], 'Number');
      }
      if (data.hasOwnProperty('horizon_frequency')) {
        obj['horizon_frequency'] = ApiClient.convertToType(data['horizon_frequency'], 'String');
      }
      if (data.hasOwnProperty('goal_config')) {
        obj['goal_config'] = GoalConfig.constructFromObject(data['goal_config']);
      }
      if (data.hasOwnProperty('deposit_config')) {
        obj['deposit_config'] = ApiClient.convertToType(data['deposit_config'], [GoalDepositConfig]);
      }
      if (data.hasOwnProperty('recommendation_config')) {
        obj['recommendation_config'] = GoalRecommendationConfigStatus.constructFromObject(data['recommendation_config']);
      }
      if (data.hasOwnProperty('recommend_type')) {
        obj['recommend_type'] = ApiClient.convertToType(data['recommend_type'], 'String');
      }
      if (data.hasOwnProperty('conf_tgt')) {
        obj['conf_tgt'] = ApiClient.convertToType(data['conf_tgt'], 'Number');
      }
      if (data.hasOwnProperty('n')) {
        obj['n'] = ApiClient.convertToType(data['n'], 'Number');
      }
      if (data.hasOwnProperty('remove_outliers')) {
        obj['remove_outliers'] = ApiClient.convertToType(data['remove_outliers'], 'Boolean');
      }
      if (data.hasOwnProperty('thresh_type')) {
        obj['thresh_type'] = ApiClient.convertToType(data['thresh_type'], 'String');
      }
      if (data.hasOwnProperty('thresh')) {
        obj['thresh'] = ApiClient.convertToType(data['thresh'], 'Number');
      }
      if (data.hasOwnProperty('withdrawal_tax')) {
        obj['withdrawal_tax'] = ApiClient.convertToType(data['withdrawal_tax'], 'Number');
      }
      if (data.hasOwnProperty('trading_days_per_year')) {
        obj['trading_days_per_year'] = ApiClient.convertToType(data['trading_days_per_year'], 'Number');
      }
      if (data.hasOwnProperty('risk_score')) {
        obj['risk_score'] = ApiClient.convertToType(data['risk_score'], 'Number');
      }
      if (data.hasOwnProperty('adjust_for_compounding')) {
        obj['adjust_for_compounding'] = ApiClient.convertToType(data['adjust_for_compounding'], 'Boolean');
      }
      if (data.hasOwnProperty('compounding_rate')) {
        obj['compounding_rate'] = ApiClient.convertToType(data['compounding_rate'], 'Number');
      }
      if (data.hasOwnProperty('use_proxy_data')) {
        obj['use_proxy_data'] = ApiClient.convertToType(data['use_proxy_data'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The allocation universe source, either create or select
   * @member {module:model/GoalAccumulationAllocation.AllocationMethodEnum} allocation_method
   */
  exports.prototype['allocation_method'] = undefined;
  /**
   * Priority when allocating, either risk or goal
   * @member {module:model/GoalAccumulationAllocation.AllocationPriorityEnum} allocation_priority
   */
  exports.prototype['allocation_priority'] = undefined;
  /**
   * @member {module:model/GoalOptConfig} opt_config
   */
  exports.prototype['opt_config'] = undefined;
  /**
   * @member {Array.<String>} allocations
   */
  exports.prototype['allocations'] = undefined;
  /**
   * The current amount invested
   * @member {Number} curr_inv
   */
  exports.prototype['curr_inv'] = undefined;
  /**
   * The accumulation goal horizon
   * @member {Number} horizon
   */
  exports.prototype['horizon'] = undefined;
  /**
   * Frequency in relation to the horizon
   * @member {module:model/GoalAccumulationAllocation.HorizonFrequencyEnum} horizon_frequency
   */
  exports.prototype['horizon_frequency'] = undefined;
  /**
   * @member {module:model/GoalConfig} goal_config
   */
  exports.prototype['goal_config'] = undefined;
  /**
   * The deposit attributes
   * @member {Array.<module:model/GoalDepositConfig>} deposit_config
   */
  exports.prototype['deposit_config'] = undefined;
  /**
   * @member {module:model/GoalRecommendationConfigStatus} recommendation_config
   */
  exports.prototype['recommendation_config'] = undefined;
  /**
   * The type of recommended action
   * @member {module:model/GoalAccumulationAllocation.RecommendTypeEnum} recommend_type
   * @default 'horizon'
   */
  exports.prototype['recommend_type'] = 'horizon';
  /**
   * The confidence target
   * @member {Number} conf_tgt
   */
  exports.prototype['conf_tgt'] = undefined;
  /**
   * The number of Monte Carlo simulations to run
   * @member {Number} n
   */
  exports.prototype['n'] = undefined;
  /**
   * If TRUE, remove outlying results
   * @member {Boolean} remove_outliers
   * @default true
   */
  exports.prototype['remove_outliers'] = true;
  /**
   * The goal deviation threshold type
   * @member {module:model/GoalAccumulationAllocation.ThreshTypeEnum} thresh_type
   * @default 'perc'
   */
  exports.prototype['thresh_type'] = 'perc';
  /**
   * The goal deviation threshold value
   * @member {Number} thresh
   */
  exports.prototype['thresh'] = undefined;
  /**
   * The tax rate for withdrawals
   * @member {Number} withdrawal_tax
   */
  exports.prototype['withdrawal_tax'] = undefined;
  /**
   * Days per year a portfolio trades
   * @member {Number} trading_days_per_year
   */
  exports.prototype['trading_days_per_year'] = undefined;
  /**
   * The investor's risk score
   * @member {Number} risk_score
   */
  exports.prototype['risk_score'] = undefined;
  /**
   * If true, adjust periodic deposit amounts for compounding based on compounding_rate. This applies when a depositâ€™s dep_frequency is shorter than horizon_frequency. Defaults to false.
   * @member {Boolean} adjust_for_compounding
   * @default false
   */
  exports.prototype['adjust_for_compounding'] = false;
  /**
   * The annualized rate to use when approximating a compounding effect on deposits. This value must be defined and adjust_for_compounding must be true in order to activate compounding adjustment. Defaults to 0.
   * @member {Number} compounding_rate
   */
  exports.prototype['compounding_rate'] = undefined;
  /**
   * If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.
   * @member {Boolean} use_proxy_data
   * @default false
   */
  exports.prototype['use_proxy_data'] = false;


  /**
   * Allowed values for the <code>allocation_method</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AllocationMethodEnum = {
    /**
     * value: "select"
     * @const
     */
    "select": "select",
    /**
     * value: "create"
     * @const
     */
    "create": "create"  };

  /**
   * Allowed values for the <code>allocation_priority</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AllocationPriorityEnum = {
    /**
     * value: "goal"
     * @const
     */
    "goal": "goal",
    /**
     * value: "risk"
     * @const
     */
    "risk": "risk"  };

  /**
   * Allowed values for the <code>horizon_frequency</code> property.
   * @enum {String}
   * @readonly
   */
  exports.HorizonFrequencyEnum = {
    /**
     * value: "year"
     * @const
     */
    "year": "year",
    /**
     * value: "six_months"
     * @const
     */
    "six_months": "six_months",
    /**
     * value: "quarter"
     * @const
     */
    "quarter": "quarter",
    /**
     * value: "month"
     * @const
     */
    "month": "month",
    /**
     * value: "two_weeks"
     * @const
     */
    "two_weeks": "two_weeks",
    /**
     * value: "week"
     * @const
     */
    "week": "week",
    /**
     * value: "day"
     * @const
     */
    "day": "day"  };

  /**
   * Allowed values for the <code>recommend_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.RecommendTypeEnum = {
    /**
     * value: "recurring"
     * @const
     */
    "recurring": "recurring",
    /**
     * value: "one-time"
     * @const
     */
    "one-time": "one-time",
    /**
     * value: "combo"
     * @const
     */
    "combo": "combo",
    /**
     * value: "horizon"
     * @const
     */
    "horizon": "horizon"  };

  /**
   * Allowed values for the <code>thresh_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ThreshTypeEnum = {
    /**
     * value: "amnt"
     * @const
     */
    "amnt": "amnt",
    /**
     * value: "perc"
     * @const
     */
    "perc": "perc"  };


  return exports;
}));


