/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.LocalDate;

/**
 * SpendingAnalysisRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-04-28T09:20:08.129Z")
public class SpendingAnalysisRequest {
  @SerializedName("merchant_scope")
  private List<UUID> merchantScope = null;

  @SerializedName("account_ids")
  private List<UUID> accountIds = null;

  @SerializedName("business_ids")
  private List<UUID> businessIds = null;

  @SerializedName("card_ids")
  private List<UUID> cardIds = null;

  @SerializedName("show_by_merchant")
  private Boolean showByMerchant = false;

  @SerializedName("show_by_period")
  private Boolean showByPeriod = false;

  @SerializedName("only_cleansed")
  private Boolean onlyCleansed = false;

  @SerializedName("frequency")
  private Integer frequency = 1;

  @SerializedName("end_date")
  private LocalDate endDate = null;

  @SerializedName("as_of_date")
  private LocalDate asOfDate = null;

  @SerializedName("transaction_category_scope")
  private List<UUID> transactionCategoryScope = null;

  @SerializedName("start_date")
  private LocalDate startDate = null;

  @SerializedName("card_status_scope")
  private List<String> cardStatusScope = null;

  @SerializedName("only_active_clients")
  private Boolean onlyActiveClients = false;

  @SerializedName("lookback_periods")
  private Integer lookbackPeriods = 0;

  /**
   * Gets or Sets frequencyUnit
   */
  @JsonAdapter(FrequencyUnitEnum.Adapter.class)
  public enum FrequencyUnitEnum {
    DAILY("daily"),
    
    WEEKLY("weekly"),
    
    BI_WEEKLY("bi-weekly"),
    
    MONTHLY("monthly"),
    
    QUARTERLY("quarterly"),
    
    ANNUALLY("annually");

    private String value;

    FrequencyUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FrequencyUnitEnum fromValue(String text) {
      for (FrequencyUnitEnum b : FrequencyUnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FrequencyUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FrequencyUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FrequencyUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FrequencyUnitEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("frequency_unit")
  private FrequencyUnitEnum frequencyUnit = null;

  @SerializedName("household_ids")
  private List<UUID> householdIds = null;

  @SerializedName("aggregation_account_ids")
  private List<UUID> aggregationAccountIds = null;

  @SerializedName("currency_code")
  private String currencyCode = null;

  @SerializedName("client_ids")
  private List<UUID> clientIds = null;

  /**
   * Gets or Sets scope
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    ALL("all"),
    
    EXTERNAL("external"),
    
    INTERNAL("internal"),
    
    CARDS("cards");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scope")
  private ScopeEnum scope = ScopeEnum.ALL;

  @SerializedName("currency_conversion")
  private String currencyConversion = null;

  @SerializedName("transaction_status_scope")
  private List<String> transactionStatusScope = null;

  @SerializedName("show_by_category")
  private Boolean showByCategory = false;

  public SpendingAnalysisRequest merchantScope(List<UUID> merchantScope) {
    this.merchantScope = merchantScope;
    return this;
  }

  public SpendingAnalysisRequest addMerchantScopeItem(UUID merchantScopeItem) {
    if (this.merchantScope == null) {
      this.merchantScope = new ArrayList<UUID>();
    }
    this.merchantScope.add(merchantScopeItem);
    return this;
  }

   /**
   * Get merchantScope
   * @return merchantScope
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getMerchantScope() {
    return merchantScope;
  }

  public void setMerchantScope(List<UUID> merchantScope) {
    this.merchantScope = merchantScope;
  }

  public SpendingAnalysisRequest accountIds(List<UUID> accountIds) {
    this.accountIds = accountIds;
    return this;
  }

  public SpendingAnalysisRequest addAccountIdsItem(UUID accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<UUID>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

   /**
   * Get accountIds
   * @return accountIds
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getAccountIds() {
    return accountIds;
  }

  public void setAccountIds(List<UUID> accountIds) {
    this.accountIds = accountIds;
  }

  public SpendingAnalysisRequest businessIds(List<UUID> businessIds) {
    this.businessIds = businessIds;
    return this;
  }

  public SpendingAnalysisRequest addBusinessIdsItem(UUID businessIdsItem) {
    if (this.businessIds == null) {
      this.businessIds = new ArrayList<UUID>();
    }
    this.businessIds.add(businessIdsItem);
    return this;
  }

   /**
   * Get businessIds
   * @return businessIds
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getBusinessIds() {
    return businessIds;
  }

  public void setBusinessIds(List<UUID> businessIds) {
    this.businessIds = businessIds;
  }

  public SpendingAnalysisRequest cardIds(List<UUID> cardIds) {
    this.cardIds = cardIds;
    return this;
  }

  public SpendingAnalysisRequest addCardIdsItem(UUID cardIdsItem) {
    if (this.cardIds == null) {
      this.cardIds = new ArrayList<UUID>();
    }
    this.cardIds.add(cardIdsItem);
    return this;
  }

   /**
   * Get cardIds
   * @return cardIds
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getCardIds() {
    return cardIds;
  }

  public void setCardIds(List<UUID> cardIds) {
    this.cardIds = cardIds;
  }

  public SpendingAnalysisRequest showByMerchant(Boolean showByMerchant) {
    this.showByMerchant = showByMerchant;
    return this;
  }

   /**
   * Get showByMerchant
   * @return showByMerchant
  **/
  @ApiModelProperty(value = "")
  public Boolean isShowByMerchant() {
    return showByMerchant;
  }

  public void setShowByMerchant(Boolean showByMerchant) {
    this.showByMerchant = showByMerchant;
  }

  public SpendingAnalysisRequest showByPeriod(Boolean showByPeriod) {
    this.showByPeriod = showByPeriod;
    return this;
  }

   /**
   * Get showByPeriod
   * @return showByPeriod
  **/
  @ApiModelProperty(value = "")
  public Boolean isShowByPeriod() {
    return showByPeriod;
  }

  public void setShowByPeriod(Boolean showByPeriod) {
    this.showByPeriod = showByPeriod;
  }

  public SpendingAnalysisRequest onlyCleansed(Boolean onlyCleansed) {
    this.onlyCleansed = onlyCleansed;
    return this;
  }

   /**
   * Get onlyCleansed
   * @return onlyCleansed
  **/
  @ApiModelProperty(value = "")
  public Boolean isOnlyCleansed() {
    return onlyCleansed;
  }

  public void setOnlyCleansed(Boolean onlyCleansed) {
    this.onlyCleansed = onlyCleansed;
  }

  public SpendingAnalysisRequest frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * minimum: 1
   * @return frequency
  **/
  @ApiModelProperty(value = "")
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }

  public SpendingAnalysisRequest endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @ApiModelProperty(value = "")
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }

  public SpendingAnalysisRequest asOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Get asOfDate
   * @return asOfDate
  **/
  @ApiModelProperty(value = "")
  public LocalDate getAsOfDate() {
    return asOfDate;
  }

  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
  }

  public SpendingAnalysisRequest transactionCategoryScope(List<UUID> transactionCategoryScope) {
    this.transactionCategoryScope = transactionCategoryScope;
    return this;
  }

  public SpendingAnalysisRequest addTransactionCategoryScopeItem(UUID transactionCategoryScopeItem) {
    if (this.transactionCategoryScope == null) {
      this.transactionCategoryScope = new ArrayList<UUID>();
    }
    this.transactionCategoryScope.add(transactionCategoryScopeItem);
    return this;
  }

   /**
   * Get transactionCategoryScope
   * @return transactionCategoryScope
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getTransactionCategoryScope() {
    return transactionCategoryScope;
  }

  public void setTransactionCategoryScope(List<UUID> transactionCategoryScope) {
    this.transactionCategoryScope = transactionCategoryScope;
  }

  public SpendingAnalysisRequest startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @ApiModelProperty(value = "")
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }

  public SpendingAnalysisRequest cardStatusScope(List<String> cardStatusScope) {
    this.cardStatusScope = cardStatusScope;
    return this;
  }

  public SpendingAnalysisRequest addCardStatusScopeItem(String cardStatusScopeItem) {
    if (this.cardStatusScope == null) {
      this.cardStatusScope = new ArrayList<String>();
    }
    this.cardStatusScope.add(cardStatusScopeItem);
    return this;
  }

   /**
   * Get cardStatusScope
   * @return cardStatusScope
  **/
  @ApiModelProperty(value = "")
  public List<String> getCardStatusScope() {
    return cardStatusScope;
  }

  public void setCardStatusScope(List<String> cardStatusScope) {
    this.cardStatusScope = cardStatusScope;
  }

  public SpendingAnalysisRequest onlyActiveClients(Boolean onlyActiveClients) {
    this.onlyActiveClients = onlyActiveClients;
    return this;
  }

   /**
   * Get onlyActiveClients
   * @return onlyActiveClients
  **/
  @ApiModelProperty(value = "")
  public Boolean isOnlyActiveClients() {
    return onlyActiveClients;
  }

  public void setOnlyActiveClients(Boolean onlyActiveClients) {
    this.onlyActiveClients = onlyActiveClients;
  }

  public SpendingAnalysisRequest lookbackPeriods(Integer lookbackPeriods) {
    this.lookbackPeriods = lookbackPeriods;
    return this;
  }

   /**
   * Get lookbackPeriods
   * minimum: 0
   * @return lookbackPeriods
  **/
  @ApiModelProperty(value = "")
  public Integer getLookbackPeriods() {
    return lookbackPeriods;
  }

  public void setLookbackPeriods(Integer lookbackPeriods) {
    this.lookbackPeriods = lookbackPeriods;
  }

  public SpendingAnalysisRequest frequencyUnit(FrequencyUnitEnum frequencyUnit) {
    this.frequencyUnit = frequencyUnit;
    return this;
  }

   /**
   * Get frequencyUnit
   * @return frequencyUnit
  **/
  @ApiModelProperty(required = true, value = "")
  public FrequencyUnitEnum getFrequencyUnit() {
    return frequencyUnit;
  }

  public void setFrequencyUnit(FrequencyUnitEnum frequencyUnit) {
    this.frequencyUnit = frequencyUnit;
  }

  public SpendingAnalysisRequest householdIds(List<UUID> householdIds) {
    this.householdIds = householdIds;
    return this;
  }

  public SpendingAnalysisRequest addHouseholdIdsItem(UUID householdIdsItem) {
    if (this.householdIds == null) {
      this.householdIds = new ArrayList<UUID>();
    }
    this.householdIds.add(householdIdsItem);
    return this;
  }

   /**
   * Get householdIds
   * @return householdIds
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getHouseholdIds() {
    return householdIds;
  }

  public void setHouseholdIds(List<UUID> householdIds) {
    this.householdIds = householdIds;
  }

  public SpendingAnalysisRequest aggregationAccountIds(List<UUID> aggregationAccountIds) {
    this.aggregationAccountIds = aggregationAccountIds;
    return this;
  }

  public SpendingAnalysisRequest addAggregationAccountIdsItem(UUID aggregationAccountIdsItem) {
    if (this.aggregationAccountIds == null) {
      this.aggregationAccountIds = new ArrayList<UUID>();
    }
    this.aggregationAccountIds.add(aggregationAccountIdsItem);
    return this;
  }

   /**
   * Get aggregationAccountIds
   * @return aggregationAccountIds
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getAggregationAccountIds() {
    return aggregationAccountIds;
  }

  public void setAggregationAccountIds(List<UUID> aggregationAccountIds) {
    this.aggregationAccountIds = aggregationAccountIds;
  }

  public SpendingAnalysisRequest currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @ApiModelProperty(value = "")
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }

  public SpendingAnalysisRequest clientIds(List<UUID> clientIds) {
    this.clientIds = clientIds;
    return this;
  }

  public SpendingAnalysisRequest addClientIdsItem(UUID clientIdsItem) {
    if (this.clientIds == null) {
      this.clientIds = new ArrayList<UUID>();
    }
    this.clientIds.add(clientIdsItem);
    return this;
  }

   /**
   * Get clientIds
   * @return clientIds
  **/
  @ApiModelProperty(value = "")
  public List<UUID> getClientIds() {
    return clientIds;
  }

  public void setClientIds(List<UUID> clientIds) {
    this.clientIds = clientIds;
  }

  public SpendingAnalysisRequest scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @ApiModelProperty(value = "")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public SpendingAnalysisRequest currencyConversion(String currencyConversion) {
    this.currencyConversion = currencyConversion;
    return this;
  }

   /**
   * Get currencyConversion
   * @return currencyConversion
  **/
  @ApiModelProperty(value = "")
  public String getCurrencyConversion() {
    return currencyConversion;
  }

  public void setCurrencyConversion(String currencyConversion) {
    this.currencyConversion = currencyConversion;
  }

  public SpendingAnalysisRequest transactionStatusScope(List<String> transactionStatusScope) {
    this.transactionStatusScope = transactionStatusScope;
    return this;
  }

  public SpendingAnalysisRequest addTransactionStatusScopeItem(String transactionStatusScopeItem) {
    if (this.transactionStatusScope == null) {
      this.transactionStatusScope = new ArrayList<String>();
    }
    this.transactionStatusScope.add(transactionStatusScopeItem);
    return this;
  }

   /**
   * Get transactionStatusScope
   * @return transactionStatusScope
  **/
  @ApiModelProperty(value = "")
  public List<String> getTransactionStatusScope() {
    return transactionStatusScope;
  }

  public void setTransactionStatusScope(List<String> transactionStatusScope) {
    this.transactionStatusScope = transactionStatusScope;
  }

  public SpendingAnalysisRequest showByCategory(Boolean showByCategory) {
    this.showByCategory = showByCategory;
    return this;
  }

   /**
   * Get showByCategory
   * @return showByCategory
  **/
  @ApiModelProperty(value = "")
  public Boolean isShowByCategory() {
    return showByCategory;
  }

  public void setShowByCategory(Boolean showByCategory) {
    this.showByCategory = showByCategory;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpendingAnalysisRequest spendingAnalysisRequest = (SpendingAnalysisRequest) o;
    return Objects.equals(this.merchantScope, spendingAnalysisRequest.merchantScope) &&
        Objects.equals(this.accountIds, spendingAnalysisRequest.accountIds) &&
        Objects.equals(this.businessIds, spendingAnalysisRequest.businessIds) &&
        Objects.equals(this.cardIds, spendingAnalysisRequest.cardIds) &&
        Objects.equals(this.showByMerchant, spendingAnalysisRequest.showByMerchant) &&
        Objects.equals(this.showByPeriod, spendingAnalysisRequest.showByPeriod) &&
        Objects.equals(this.onlyCleansed, spendingAnalysisRequest.onlyCleansed) &&
        Objects.equals(this.frequency, spendingAnalysisRequest.frequency) &&
        Objects.equals(this.endDate, spendingAnalysisRequest.endDate) &&
        Objects.equals(this.asOfDate, spendingAnalysisRequest.asOfDate) &&
        Objects.equals(this.transactionCategoryScope, spendingAnalysisRequest.transactionCategoryScope) &&
        Objects.equals(this.startDate, spendingAnalysisRequest.startDate) &&
        Objects.equals(this.cardStatusScope, spendingAnalysisRequest.cardStatusScope) &&
        Objects.equals(this.onlyActiveClients, spendingAnalysisRequest.onlyActiveClients) &&
        Objects.equals(this.lookbackPeriods, spendingAnalysisRequest.lookbackPeriods) &&
        Objects.equals(this.frequencyUnit, spendingAnalysisRequest.frequencyUnit) &&
        Objects.equals(this.householdIds, spendingAnalysisRequest.householdIds) &&
        Objects.equals(this.aggregationAccountIds, spendingAnalysisRequest.aggregationAccountIds) &&
        Objects.equals(this.currencyCode, spendingAnalysisRequest.currencyCode) &&
        Objects.equals(this.clientIds, spendingAnalysisRequest.clientIds) &&
        Objects.equals(this.scope, spendingAnalysisRequest.scope) &&
        Objects.equals(this.currencyConversion, spendingAnalysisRequest.currencyConversion) &&
        Objects.equals(this.transactionStatusScope, spendingAnalysisRequest.transactionStatusScope) &&
        Objects.equals(this.showByCategory, spendingAnalysisRequest.showByCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantScope, accountIds, businessIds, cardIds, showByMerchant, showByPeriod, onlyCleansed, frequency, endDate, asOfDate, transactionCategoryScope, startDate, cardStatusScope, onlyActiveClients, lookbackPeriods, frequencyUnit, householdIds, aggregationAccountIds, currencyCode, clientIds, scope, currencyConversion, transactionStatusScope, showByCategory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpendingAnalysisRequest {\n");
    
    sb.append("    merchantScope: ").append(toIndentedString(merchantScope)).append("\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    businessIds: ").append(toIndentedString(businessIds)).append("\n");
    sb.append("    cardIds: ").append(toIndentedString(cardIds)).append("\n");
    sb.append("    showByMerchant: ").append(toIndentedString(showByMerchant)).append("\n");
    sb.append("    showByPeriod: ").append(toIndentedString(showByPeriod)).append("\n");
    sb.append("    onlyCleansed: ").append(toIndentedString(onlyCleansed)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    transactionCategoryScope: ").append(toIndentedString(transactionCategoryScope)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    cardStatusScope: ").append(toIndentedString(cardStatusScope)).append("\n");
    sb.append("    onlyActiveClients: ").append(toIndentedString(onlyActiveClients)).append("\n");
    sb.append("    lookbackPeriods: ").append(toIndentedString(lookbackPeriods)).append("\n");
    sb.append("    frequencyUnit: ").append(toIndentedString(frequencyUnit)).append("\n");
    sb.append("    householdIds: ").append(toIndentedString(householdIds)).append("\n");
    sb.append("    aggregationAccountIds: ").append(toIndentedString(aggregationAccountIds)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    clientIds: ").append(toIndentedString(clientIds)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    sb.append("    transactionStatusScope: ").append(toIndentedString(transactionStatusScope)).append("\n");
    sb.append("    showByCategory: ").append(toIndentedString(showByCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

