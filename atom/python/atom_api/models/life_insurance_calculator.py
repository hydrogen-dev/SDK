# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.beneficiary_bequest_config import BeneficiaryBequestConfig  # noqa: F401,E501
from atom_api.models.children_education_config import ChildrenEducationConfig  # noqa: F401,E501
from atom_api.models.income_config import IncomeConfig  # noqa: F401,E501


class LifeInsuranceCalculator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mortgage_balance': 'float',
        'other_debt': 'float',
        'interest_rate': 'float',
        'end_of_life_expenses': 'float',
        'existing_life_insurance': 'float',
        'liquid_assets': 'float',
        'general_inflation_rate': 'float',
        'education_inflation_rate': 'float',
        'tax_rate': 'float',
        'benefit_amount_rounding': 'float',
        'margin_of_error': 'float',
        'children_education_config': 'list[ChildrenEducationConfig]',
        'income_config': 'list[IncomeConfig]',
        'beneficiary_bequest_config': 'list[BeneficiaryBequestConfig]'
    }

    attribute_map = {
        'mortgage_balance': 'mortgage_balance',
        'other_debt': 'other_debt',
        'interest_rate': 'interest_rate',
        'end_of_life_expenses': 'end_of_life_expenses',
        'existing_life_insurance': 'existing_life_insurance',
        'liquid_assets': 'liquid_assets',
        'general_inflation_rate': 'general_inflation_rate',
        'education_inflation_rate': 'education_inflation_rate',
        'tax_rate': 'tax_rate',
        'benefit_amount_rounding': 'benefit_amount_rounding',
        'margin_of_error': 'margin_of_error',
        'children_education_config': 'children_education_config',
        'income_config': 'income_config',
        'beneficiary_bequest_config': 'beneficiary_bequest_config'
    }

    def __init__(self, mortgage_balance=None, other_debt=None, interest_rate=None, end_of_life_expenses=None, existing_life_insurance=None, liquid_assets=None, general_inflation_rate=None, education_inflation_rate=None, tax_rate=None, benefit_amount_rounding=None, margin_of_error=None, children_education_config=None, income_config=None, beneficiary_bequest_config=None):  # noqa: E501
        """LifeInsuranceCalculator - a model defined in Swagger"""  # noqa: E501

        self._mortgage_balance = None
        self._other_debt = None
        self._interest_rate = None
        self._end_of_life_expenses = None
        self._existing_life_insurance = None
        self._liquid_assets = None
        self._general_inflation_rate = None
        self._education_inflation_rate = None
        self._tax_rate = None
        self._benefit_amount_rounding = None
        self._margin_of_error = None
        self._children_education_config = None
        self._income_config = None
        self._beneficiary_bequest_config = None
        self.discriminator = None

        self.mortgage_balance = mortgage_balance
        self.other_debt = other_debt
        self.interest_rate = interest_rate
        if end_of_life_expenses is not None:
            self.end_of_life_expenses = end_of_life_expenses
        if existing_life_insurance is not None:
            self.existing_life_insurance = existing_life_insurance
        if liquid_assets is not None:
            self.liquid_assets = liquid_assets
        if general_inflation_rate is not None:
            self.general_inflation_rate = general_inflation_rate
        if education_inflation_rate is not None:
            self.education_inflation_rate = education_inflation_rate
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if benefit_amount_rounding is not None:
            self.benefit_amount_rounding = benefit_amount_rounding
        if margin_of_error is not None:
            self.margin_of_error = margin_of_error
        if children_education_config is not None:
            self.children_education_config = children_education_config
        if income_config is not None:
            self.income_config = income_config
        if beneficiary_bequest_config is not None:
            self.beneficiary_bequest_config = beneficiary_bequest_config

    @property
    def mortgage_balance(self):
        """Gets the mortgage_balance of this LifeInsuranceCalculator.  # noqa: E501

        The outstanding mortgage balance  # noqa: E501

        :return: The mortgage_balance of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._mortgage_balance

    @mortgage_balance.setter
    def mortgage_balance(self, mortgage_balance):
        """Sets the mortgage_balance of this LifeInsuranceCalculator.

        The outstanding mortgage balance  # noqa: E501

        :param mortgage_balance: The mortgage_balance of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if mortgage_balance is None:
            raise ValueError("Invalid value for `mortgage_balance`, must not be `None`")  # noqa: E501
        if mortgage_balance is not None and mortgage_balance < 0:  # noqa: E501
            raise ValueError("Invalid value for `mortgage_balance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mortgage_balance = mortgage_balance

    @property
    def other_debt(self):
        """Gets the other_debt of this LifeInsuranceCalculator.  # noqa: E501

        Other outstanding debt  # noqa: E501

        :return: The other_debt of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._other_debt

    @other_debt.setter
    def other_debt(self, other_debt):
        """Sets the other_debt of this LifeInsuranceCalculator.

        Other outstanding debt  # noqa: E501

        :param other_debt: The other_debt of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if other_debt is None:
            raise ValueError("Invalid value for `other_debt`, must not be `None`")  # noqa: E501
        if other_debt is not None and other_debt < 0:  # noqa: E501
            raise ValueError("Invalid value for `other_debt`, must be a value greater than or equal to `0`")  # noqa: E501

        self._other_debt = other_debt

    @property
    def interest_rate(self):
        """Gets the interest_rate of this LifeInsuranceCalculator.  # noqa: E501

        The interest rate earned once the benefit amount is received  # noqa: E501

        :return: The interest_rate of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this LifeInsuranceCalculator.

        The interest rate earned once the benefit amount is received  # noqa: E501

        :param interest_rate: The interest_rate of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if interest_rate is None:
            raise ValueError("Invalid value for `interest_rate`, must not be `None`")  # noqa: E501
        if interest_rate is not None and interest_rate <= -1:  # noqa: E501
            raise ValueError("Invalid value for `interest_rate`, must be a value greater than `-1`")  # noqa: E501

        self._interest_rate = interest_rate

    @property
    def end_of_life_expenses(self):
        """Gets the end_of_life_expenses of this LifeInsuranceCalculator.  # noqa: E501

        End-of-life expenses  # noqa: E501

        :return: The end_of_life_expenses of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._end_of_life_expenses

    @end_of_life_expenses.setter
    def end_of_life_expenses(self, end_of_life_expenses):
        """Sets the end_of_life_expenses of this LifeInsuranceCalculator.

        End-of-life expenses  # noqa: E501

        :param end_of_life_expenses: The end_of_life_expenses of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if end_of_life_expenses is not None and end_of_life_expenses < 0:  # noqa: E501
            raise ValueError("Invalid value for `end_of_life_expenses`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_of_life_expenses = end_of_life_expenses

    @property
    def existing_life_insurance(self):
        """Gets the existing_life_insurance of this LifeInsuranceCalculator.  # noqa: E501

        Life insurance already held  # noqa: E501

        :return: The existing_life_insurance of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._existing_life_insurance

    @existing_life_insurance.setter
    def existing_life_insurance(self, existing_life_insurance):
        """Sets the existing_life_insurance of this LifeInsuranceCalculator.

        Life insurance already held  # noqa: E501

        :param existing_life_insurance: The existing_life_insurance of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if existing_life_insurance is not None and existing_life_insurance <= 0:  # noqa: E501
            raise ValueError("Invalid value for `existing_life_insurance`, must be a value greater than `0`")  # noqa: E501

        self._existing_life_insurance = existing_life_insurance

    @property
    def liquid_assets(self):
        """Gets the liquid_assets of this LifeInsuranceCalculator.  # noqa: E501

        Liquid assets held  # noqa: E501

        :return: The liquid_assets of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._liquid_assets

    @liquid_assets.setter
    def liquid_assets(self, liquid_assets):
        """Sets the liquid_assets of this LifeInsuranceCalculator.

        Liquid assets held  # noqa: E501

        :param liquid_assets: The liquid_assets of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if liquid_assets is not None and liquid_assets < 0:  # noqa: E501
            raise ValueError("Invalid value for `liquid_assets`, must be a value greater than or equal to `0`")  # noqa: E501

        self._liquid_assets = liquid_assets

    @property
    def general_inflation_rate(self):
        """Gets the general_inflation_rate of this LifeInsuranceCalculator.  # noqa: E501

        The general inflation rate  # noqa: E501

        :return: The general_inflation_rate of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._general_inflation_rate

    @general_inflation_rate.setter
    def general_inflation_rate(self, general_inflation_rate):
        """Sets the general_inflation_rate of this LifeInsuranceCalculator.

        The general inflation rate  # noqa: E501

        :param general_inflation_rate: The general_inflation_rate of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if general_inflation_rate is not None and general_inflation_rate >= 20:  # noqa: E501
            raise ValueError("Invalid value for `general_inflation_rate`, must be a value less than `20`")  # noqa: E501
        if general_inflation_rate is not None and general_inflation_rate <= -1:  # noqa: E501
            raise ValueError("Invalid value for `general_inflation_rate`, must be a value greater than `-1`")  # noqa: E501

        self._general_inflation_rate = general_inflation_rate

    @property
    def education_inflation_rate(self):
        """Gets the education_inflation_rate of this LifeInsuranceCalculator.  # noqa: E501

        The inflation rate for education  # noqa: E501

        :return: The education_inflation_rate of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._education_inflation_rate

    @education_inflation_rate.setter
    def education_inflation_rate(self, education_inflation_rate):
        """Sets the education_inflation_rate of this LifeInsuranceCalculator.

        The inflation rate for education  # noqa: E501

        :param education_inflation_rate: The education_inflation_rate of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if education_inflation_rate is not None and education_inflation_rate >= 20:  # noqa: E501
            raise ValueError("Invalid value for `education_inflation_rate`, must be a value less than `20`")  # noqa: E501
        if education_inflation_rate is not None and education_inflation_rate <= -1:  # noqa: E501
            raise ValueError("Invalid value for `education_inflation_rate`, must be a value greater than `-1`")  # noqa: E501

        self._education_inflation_rate = education_inflation_rate

    @property
    def tax_rate(self):
        """Gets the tax_rate of this LifeInsuranceCalculator.  # noqa: E501

        The tax rate applied to earnings from the interest rate  # noqa: E501

        :return: The tax_rate of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this LifeInsuranceCalculator.

        The tax rate applied to earnings from the interest rate  # noqa: E501

        :param tax_rate: The tax_rate of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if tax_rate is not None and tax_rate >= 1:  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must be a value less than `1`")  # noqa: E501
        if tax_rate is not None and tax_rate < 0:  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tax_rate = tax_rate

    @property
    def benefit_amount_rounding(self):
        """Gets the benefit_amount_rounding of this LifeInsuranceCalculator.  # noqa: E501

        A parameter to round the benefit amount up to a configurable number of digits  # noqa: E501

        :return: The benefit_amount_rounding of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._benefit_amount_rounding

    @benefit_amount_rounding.setter
    def benefit_amount_rounding(self, benefit_amount_rounding):
        """Sets the benefit_amount_rounding of this LifeInsuranceCalculator.

        A parameter to round the benefit amount up to a configurable number of digits  # noqa: E501

        :param benefit_amount_rounding: The benefit_amount_rounding of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if benefit_amount_rounding is not None and benefit_amount_rounding >= 12:  # noqa: E501
            raise ValueError("Invalid value for `benefit_amount_rounding`, must be a value less than `12`")  # noqa: E501
        if benefit_amount_rounding is not None and benefit_amount_rounding <= 0:  # noqa: E501
            raise ValueError("Invalid value for `benefit_amount_rounding`, must be a value greater than `0`")  # noqa: E501

        self._benefit_amount_rounding = benefit_amount_rounding

    @property
    def margin_of_error(self):
        """Gets the margin_of_error of this LifeInsuranceCalculator.  # noqa: E501

        The margin of error to apply to the life insurance needed, before rounding  # noqa: E501

        :return: The margin_of_error of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: float
        """
        return self._margin_of_error

    @margin_of_error.setter
    def margin_of_error(self, margin_of_error):
        """Sets the margin_of_error of this LifeInsuranceCalculator.

        The margin of error to apply to the life insurance needed, before rounding  # noqa: E501

        :param margin_of_error: The margin_of_error of this LifeInsuranceCalculator.  # noqa: E501
        :type: float
        """
        if margin_of_error is not None and margin_of_error < 0:  # noqa: E501
            raise ValueError("Invalid value for `margin_of_error`, must be a value greater than or equal to `0`")  # noqa: E501

        self._margin_of_error = margin_of_error

    @property
    def children_education_config(self):
        """Gets the children_education_config of this LifeInsuranceCalculator.  # noqa: E501

        Benefit information to provide for childrens' primary, secondary, and tertiary schooling  # noqa: E501

        :return: The children_education_config of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: list[ChildrenEducationConfig]
        """
        return self._children_education_config

    @children_education_config.setter
    def children_education_config(self, children_education_config):
        """Sets the children_education_config of this LifeInsuranceCalculator.

        Benefit information to provide for childrens' primary, secondary, and tertiary schooling  # noqa: E501

        :param children_education_config: The children_education_config of this LifeInsuranceCalculator.  # noqa: E501
        :type: list[ChildrenEducationConfig]
        """

        self._children_education_config = children_education_config

    @property
    def income_config(self):
        """Gets the income_config of this LifeInsuranceCalculator.  # noqa: E501

        Information on replacement income for beneficiaries  # noqa: E501

        :return: The income_config of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: list[IncomeConfig]
        """
        return self._income_config

    @income_config.setter
    def income_config(self, income_config):
        """Sets the income_config of this LifeInsuranceCalculator.

        Information on replacement income for beneficiaries  # noqa: E501

        :param income_config: The income_config of this LifeInsuranceCalculator.  # noqa: E501
        :type: list[IncomeConfig]
        """

        self._income_config = income_config

    @property
    def beneficiary_bequest_config(self):
        """Gets the beneficiary_bequest_config of this LifeInsuranceCalculator.  # noqa: E501

        Information on bequests for beneficiaries  # noqa: E501

        :return: The beneficiary_bequest_config of this LifeInsuranceCalculator.  # noqa: E501
        :rtype: list[BeneficiaryBequestConfig]
        """
        return self._beneficiary_bequest_config

    @beneficiary_bequest_config.setter
    def beneficiary_bequest_config(self, beneficiary_bequest_config):
        """Sets the beneficiary_bequest_config of this LifeInsuranceCalculator.

        Information on bequests for beneficiaries  # noqa: E501

        :param beneficiary_bequest_config: The beneficiary_bequest_config of this LifeInsuranceCalculator.  # noqa: E501
        :type: list[BeneficiaryBequestConfig]
        """

        self._beneficiary_bequest_config = beneficiary_bequest_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LifeInsuranceCalculator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LifeInsuranceCalculator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
