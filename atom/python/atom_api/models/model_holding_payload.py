# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class ModelHoldingPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_id': 'str',
        'security_id': 'str',
        'current_weight': 'float',
        'strategic_weight': 'float',
        '_date': 'date',
        'metadata': 'object',
        'secondary_id': 'SecondaryId'
    }

    attribute_map = {
        'model_id': 'model_id',
        'security_id': 'security_id',
        'current_weight': 'current_weight',
        'strategic_weight': 'strategic_weight',
        '_date': 'date',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id'
    }

    def __init__(self, model_id=None, security_id=None, current_weight=None, strategic_weight=None, _date=None, metadata=None, secondary_id=None):  # noqa: E501
        """ModelHoldingPayload - a model defined in Swagger"""  # noqa: E501

        self._model_id = None
        self._security_id = None
        self._current_weight = None
        self._strategic_weight = None
        self.__date = None
        self._metadata = None
        self._secondary_id = None
        self.discriminator = None

        self.model_id = model_id
        self.security_id = security_id
        self.current_weight = current_weight
        self.strategic_weight = strategic_weight
        self._date = _date
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id

    @property
    def model_id(self):
        """Gets the model_id of this ModelHoldingPayload.  # noqa: E501

        The ID of the model that the security holding record falls under  # noqa: E501

        :return: The model_id of this ModelHoldingPayload.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ModelHoldingPayload.

        The ID of the model that the security holding record falls under  # noqa: E501

        :param model_id: The model_id of this ModelHoldingPayload.  # noqa: E501
        :type: str
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def security_id(self):
        """Gets the security_id of this ModelHoldingPayload.  # noqa: E501

        The ID of the security included in this holding record  # noqa: E501

        :return: The security_id of this ModelHoldingPayload.  # noqa: E501
        :rtype: str
        """
        return self._security_id

    @security_id.setter
    def security_id(self, security_id):
        """Sets the security_id of this ModelHoldingPayload.

        The ID of the security included in this holding record  # noqa: E501

        :param security_id: The security_id of this ModelHoldingPayload.  # noqa: E501
        :type: str
        """
        if security_id is None:
            raise ValueError("Invalid value for `security_id`, must not be `None`")  # noqa: E501

        self._security_id = security_id

    @property
    def current_weight(self):
        """Gets the current_weight of this ModelHoldingPayload.  # noqa: E501

        Current weight of the security as a percentage of the model’s total value; ex. 20 representing 20%. If the security is the only one, enter 100  # noqa: E501

        :return: The current_weight of this ModelHoldingPayload.  # noqa: E501
        :rtype: float
        """
        return self._current_weight

    @current_weight.setter
    def current_weight(self, current_weight):
        """Sets the current_weight of this ModelHoldingPayload.

        Current weight of the security as a percentage of the model’s total value; ex. 20 representing 20%. If the security is the only one, enter 100  # noqa: E501

        :param current_weight: The current_weight of this ModelHoldingPayload.  # noqa: E501
        :type: float
        """
        if current_weight is None:
            raise ValueError("Invalid value for `current_weight`, must not be `None`")  # noqa: E501

        self._current_weight = current_weight

    @property
    def strategic_weight(self):
        """Gets the strategic_weight of this ModelHoldingPayload.  # noqa: E501

        Strategic weight of the security as a percentage of the model’s total value; ex. 20 representing 20%. If the security is the only one, enter 100  # noqa: E501

        :return: The strategic_weight of this ModelHoldingPayload.  # noqa: E501
        :rtype: float
        """
        return self._strategic_weight

    @strategic_weight.setter
    def strategic_weight(self, strategic_weight):
        """Sets the strategic_weight of this ModelHoldingPayload.

        Strategic weight of the security as a percentage of the model’s total value; ex. 20 representing 20%. If the security is the only one, enter 100  # noqa: E501

        :param strategic_weight: The strategic_weight of this ModelHoldingPayload.  # noqa: E501
        :type: float
        """
        if strategic_weight is None:
            raise ValueError("Invalid value for `strategic_weight`, must not be `None`")  # noqa: E501

        self._strategic_weight = strategic_weight

    @property
    def _date(self):
        """Gets the _date of this ModelHoldingPayload.  # noqa: E501

        Date of the security weight  # noqa: E501

        :return: The _date of this ModelHoldingPayload.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ModelHoldingPayload.

        Date of the security weight  # noqa: E501

        :param _date: The _date of this ModelHoldingPayload.  # noqa: E501
        :type: date
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def metadata(self):
        """Gets the metadata of this ModelHoldingPayload.  # noqa: E501

        Custom information associated with the model holding in the format key:value  # noqa: E501

        :return: The metadata of this ModelHoldingPayload.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ModelHoldingPayload.

        Custom information associated with the model holding in the format key:value  # noqa: E501

        :param metadata: The metadata of this ModelHoldingPayload.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this ModelHoldingPayload.  # noqa: E501


        :return: The secondary_id of this ModelHoldingPayload.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this ModelHoldingPayload.


        :param secondary_id: The secondary_id of this ModelHoldingPayload.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelHoldingPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelHoldingPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
