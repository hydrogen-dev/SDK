=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'date'

module AtomApi
  class BudgetCalculatorResponseInner
    # The ID of the budget
    attr_accessor :budget_id

    # The name of the budget
    attr_accessor :budget_name

    # Total amount of funds originally available in the budget
    attr_accessor :total_funds_available

    # Total amount of funds spent
    attr_accessor :total_funds_spent

    # Total amount of funds remaining; delta of total_funds_available - total_funds_spent
    attr_accessor :total_funds_remaining

    # Total funds spent per category
    attr_accessor :budget_components

    # Average amount budgeted for each budget component
    attr_accessor :average_amount_budgeted

    # Average amount spent for each budget component
    attr_accessor :average_amount_spent

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'budget_id' => :'budget_id',
        :'budget_name' => :'budget_name',
        :'total_funds_available' => :'total_funds_available',
        :'total_funds_spent' => :'total_funds_spent',
        :'total_funds_remaining' => :'total_funds_remaining',
        :'budget_components' => :'budget_components',
        :'average_amount_budgeted' => :'average_amount_budgeted',
        :'average_amount_spent' => :'average_amount_spent'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'budget_id' => :'String',
        :'budget_name' => :'String',
        :'total_funds_available' => :'Float',
        :'total_funds_spent' => :'Float',
        :'total_funds_remaining' => :'Float',
        :'budget_components' => :'Array<BudgetCalculatorResponseInnerBudgetComponents>',
        :'average_amount_budgeted' => :'Float',
        :'average_amount_spent' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'budget_id')
        self.budget_id = attributes[:'budget_id']
      end

      if attributes.has_key?(:'budget_name')
        self.budget_name = attributes[:'budget_name']
      end

      if attributes.has_key?(:'total_funds_available')
        self.total_funds_available = attributes[:'total_funds_available']
      end

      if attributes.has_key?(:'total_funds_spent')
        self.total_funds_spent = attributes[:'total_funds_spent']
      end

      if attributes.has_key?(:'total_funds_remaining')
        self.total_funds_remaining = attributes[:'total_funds_remaining']
      end

      if attributes.has_key?(:'budget_components')
        if (value = attributes[:'budget_components']).is_a?(Array)
          self.budget_components = value
        end
      end

      if attributes.has_key?(:'average_amount_budgeted')
        self.average_amount_budgeted = attributes[:'average_amount_budgeted']
      end

      if attributes.has_key?(:'average_amount_spent')
        self.average_amount_spent = attributes[:'average_amount_spent']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          budget_id == o.budget_id &&
          budget_name == o.budget_name &&
          total_funds_available == o.total_funds_available &&
          total_funds_spent == o.total_funds_spent &&
          total_funds_remaining == o.total_funds_remaining &&
          budget_components == o.budget_components &&
          average_amount_budgeted == o.average_amount_budgeted &&
          average_amount_spent == o.average_amount_spent
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [budget_id, budget_name, total_funds_available, total_funds_spent, total_funds_remaining, budget_components, average_amount_budgeted, average_amount_spent].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
