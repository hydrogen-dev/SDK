# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.opt_score_portfolio import OptScorePortfolio  # noqa: F401,E501


class PfloOptimizationScoreResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_portfolio': 'OptScorePortfolio',
        'optimized_portfolio': 'OptScorePortfolio',
        'optimization_score': 'int'
    }

    attribute_map = {
        'current_portfolio': 'current_portfolio',
        'optimized_portfolio': 'optimized_portfolio',
        'optimization_score': 'optimization_score'
    }

    def __init__(self, current_portfolio=None, optimized_portfolio=None, optimization_score=None):  # noqa: E501
        """PfloOptimizationScoreResponse - a model defined in Swagger"""  # noqa: E501

        self._current_portfolio = None
        self._optimized_portfolio = None
        self._optimization_score = None
        self.discriminator = None

        self.current_portfolio = current_portfolio
        self.optimized_portfolio = optimized_portfolio
        self.optimization_score = optimization_score

    @property
    def current_portfolio(self):
        """Gets the current_portfolio of this PfloOptimizationScoreResponse.  # noqa: E501


        :return: The current_portfolio of this PfloOptimizationScoreResponse.  # noqa: E501
        :rtype: OptScorePortfolio
        """
        return self._current_portfolio

    @current_portfolio.setter
    def current_portfolio(self, current_portfolio):
        """Sets the current_portfolio of this PfloOptimizationScoreResponse.


        :param current_portfolio: The current_portfolio of this PfloOptimizationScoreResponse.  # noqa: E501
        :type: OptScorePortfolio
        """
        if current_portfolio is None:
            raise ValueError("Invalid value for `current_portfolio`, must not be `None`")  # noqa: E501

        self._current_portfolio = current_portfolio

    @property
    def optimized_portfolio(self):
        """Gets the optimized_portfolio of this PfloOptimizationScoreResponse.  # noqa: E501


        :return: The optimized_portfolio of this PfloOptimizationScoreResponse.  # noqa: E501
        :rtype: OptScorePortfolio
        """
        return self._optimized_portfolio

    @optimized_portfolio.setter
    def optimized_portfolio(self, optimized_portfolio):
        """Sets the optimized_portfolio of this PfloOptimizationScoreResponse.


        :param optimized_portfolio: The optimized_portfolio of this PfloOptimizationScoreResponse.  # noqa: E501
        :type: OptScorePortfolio
        """
        if optimized_portfolio is None:
            raise ValueError("Invalid value for `optimized_portfolio`, must not be `None`")  # noqa: E501

        self._optimized_portfolio = optimized_portfolio

    @property
    def optimization_score(self):
        """Gets the optimization_score of this PfloOptimizationScoreResponse.  # noqa: E501

        A score from 0 to 100 indicating the relative health of the current portfolio, 100 being the most optimal.  # noqa: E501

        :return: The optimization_score of this PfloOptimizationScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._optimization_score

    @optimization_score.setter
    def optimization_score(self, optimization_score):
        """Sets the optimization_score of this PfloOptimizationScoreResponse.

        A score from 0 to 100 indicating the relative health of the current portfolio, 100 being the most optimal.  # noqa: E501

        :param optimization_score: The optimization_score of this PfloOptimizationScoreResponse.  # noqa: E501
        :type: int
        """
        if optimization_score is None:
            raise ValueError("Invalid value for `optimization_score`, must not be `None`")  # noqa: E501
        if optimization_score is not None and optimization_score > 100:  # noqa: E501
            raise ValueError("Invalid value for `optimization_score`, must be a value less than or equal to `100`")  # noqa: E501
        if optimization_score is not None and optimization_score < 0:  # noqa: E501
            raise ValueError("Invalid value for `optimization_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._optimization_score = optimization_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PfloOptimizationScoreResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PfloOptimizationScoreResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
