<?php
/**
 * PerformanceCalculatorRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Model;

use \ArrayAccess;
use \com\hydrogen\proton\ObjectSerializer;

/**
 * PerformanceCalculatorRequest Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PerformanceCalculatorRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'performanceCalculatorRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'annualized_return_period' => 'string',
        'risk_free_alpha' => 'float',
        'allocation_id' => 'string',
        'mean_percentile_monte_carlo' => 'float',
        'model_id' => 'string',
        'mar_downside_deviation' => 'float',
        'risk_free_sharpe' => 'float',
        'benchmark_id' => 'string',
        'risk_free_sortino' => 'float',
        'household_id' => 'string',
        'min_percentile_monte_carlo' => 'float',
        'moving_average_n_day' => 'int',
        'active_premium_period' => 'string',
        'stat_name' => 'string',
        'end_date' => '\DateTime',
        'start_date' => '\DateTime',
        'n_day_returns' => 'int',
        'var_conf_interval' => 'float',
        'period_type' => 'string',
        'risk_free_treynor' => 'float',
        'n_rolling_max_drawdown' => 'int',
        'portfolio_id' => 'string',
        'num_sim_monte_carlo' => 'int',
        'goal_id' => 'string',
        'account_id' => 'string',
        'security_id' => 'string',
        'n_path_monte_carlo' => 'int',
        'client_id' => 'string',
        'n_rolling_volatility' => 'int',
        'hist_factor' => 'float',
        'max_percentile_monte_carlo' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'annualized_return_period' => null,
        'risk_free_alpha' => 'float',
        'allocation_id' => 'uuid',
        'mean_percentile_monte_carlo' => 'float',
        'model_id' => 'uuid',
        'mar_downside_deviation' => 'float',
        'risk_free_sharpe' => 'float',
        'benchmark_id' => 'uuid',
        'risk_free_sortino' => 'float',
        'household_id' => 'uuid',
        'min_percentile_monte_carlo' => 'float',
        'moving_average_n_day' => 'int32',
        'active_premium_period' => null,
        'stat_name' => null,
        'end_date' => 'date',
        'start_date' => 'date',
        'n_day_returns' => 'int32',
        'var_conf_interval' => 'float',
        'period_type' => null,
        'risk_free_treynor' => 'float',
        'n_rolling_max_drawdown' => 'int32',
        'portfolio_id' => 'uuid',
        'num_sim_monte_carlo' => 'int32',
        'goal_id' => 'uuid',
        'account_id' => 'uuid',
        'security_id' => 'uuid',
        'n_path_monte_carlo' => 'int32',
        'client_id' => 'uuid',
        'n_rolling_volatility' => 'int32',
        'hist_factor' => 'float',
        'max_percentile_monte_carlo' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'annualized_return_period' => 'annualized_return_period',
        'risk_free_alpha' => 'risk_free_alpha',
        'allocation_id' => 'allocation_id',
        'mean_percentile_monte_carlo' => 'mean_percentile_monte_carlo',
        'model_id' => 'model_id',
        'mar_downside_deviation' => 'mar_downside_deviation',
        'risk_free_sharpe' => 'risk_free_sharpe',
        'benchmark_id' => 'benchmark_id',
        'risk_free_sortino' => 'risk_free_sortino',
        'household_id' => 'household_id',
        'min_percentile_monte_carlo' => 'min_percentile_monte_carlo',
        'moving_average_n_day' => 'moving_average_n_day',
        'active_premium_period' => 'active_premium_period',
        'stat_name' => 'stat_name',
        'end_date' => 'end_date',
        'start_date' => 'start_date',
        'n_day_returns' => 'n_day_returns',
        'var_conf_interval' => 'var_conf_interval',
        'period_type' => 'period_type',
        'risk_free_treynor' => 'risk_free_treynor',
        'n_rolling_max_drawdown' => 'n_rolling_max_drawdown',
        'portfolio_id' => 'portfolio_id',
        'num_sim_monte_carlo' => 'num_sim_monte_carlo',
        'goal_id' => 'goal_id',
        'account_id' => 'account_id',
        'security_id' => 'security_id',
        'n_path_monte_carlo' => 'n_path_monte_carlo',
        'client_id' => 'client_id',
        'n_rolling_volatility' => 'n_rolling_volatility',
        'hist_factor' => 'hist_factor',
        'max_percentile_monte_carlo' => 'max_percentile_monte_carlo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'annualized_return_period' => 'setAnnualizedReturnPeriod',
        'risk_free_alpha' => 'setRiskFreeAlpha',
        'allocation_id' => 'setAllocationId',
        'mean_percentile_monte_carlo' => 'setMeanPercentileMonteCarlo',
        'model_id' => 'setModelId',
        'mar_downside_deviation' => 'setMarDownsideDeviation',
        'risk_free_sharpe' => 'setRiskFreeSharpe',
        'benchmark_id' => 'setBenchmarkId',
        'risk_free_sortino' => 'setRiskFreeSortino',
        'household_id' => 'setHouseholdId',
        'min_percentile_monte_carlo' => 'setMinPercentileMonteCarlo',
        'moving_average_n_day' => 'setMovingAverageNDay',
        'active_premium_period' => 'setActivePremiumPeriod',
        'stat_name' => 'setStatName',
        'end_date' => 'setEndDate',
        'start_date' => 'setStartDate',
        'n_day_returns' => 'setNDayReturns',
        'var_conf_interval' => 'setVarConfInterval',
        'period_type' => 'setPeriodType',
        'risk_free_treynor' => 'setRiskFreeTreynor',
        'n_rolling_max_drawdown' => 'setNRollingMaxDrawdown',
        'portfolio_id' => 'setPortfolioId',
        'num_sim_monte_carlo' => 'setNumSimMonteCarlo',
        'goal_id' => 'setGoalId',
        'account_id' => 'setAccountId',
        'security_id' => 'setSecurityId',
        'n_path_monte_carlo' => 'setNPathMonteCarlo',
        'client_id' => 'setClientId',
        'n_rolling_volatility' => 'setNRollingVolatility',
        'hist_factor' => 'setHistFactor',
        'max_percentile_monte_carlo' => 'setMaxPercentileMonteCarlo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'annualized_return_period' => 'getAnnualizedReturnPeriod',
        'risk_free_alpha' => 'getRiskFreeAlpha',
        'allocation_id' => 'getAllocationId',
        'mean_percentile_monte_carlo' => 'getMeanPercentileMonteCarlo',
        'model_id' => 'getModelId',
        'mar_downside_deviation' => 'getMarDownsideDeviation',
        'risk_free_sharpe' => 'getRiskFreeSharpe',
        'benchmark_id' => 'getBenchmarkId',
        'risk_free_sortino' => 'getRiskFreeSortino',
        'household_id' => 'getHouseholdId',
        'min_percentile_monte_carlo' => 'getMinPercentileMonteCarlo',
        'moving_average_n_day' => 'getMovingAverageNDay',
        'active_premium_period' => 'getActivePremiumPeriod',
        'stat_name' => 'getStatName',
        'end_date' => 'getEndDate',
        'start_date' => 'getStartDate',
        'n_day_returns' => 'getNDayReturns',
        'var_conf_interval' => 'getVarConfInterval',
        'period_type' => 'getPeriodType',
        'risk_free_treynor' => 'getRiskFreeTreynor',
        'n_rolling_max_drawdown' => 'getNRollingMaxDrawdown',
        'portfolio_id' => 'getPortfolioId',
        'num_sim_monte_carlo' => 'getNumSimMonteCarlo',
        'goal_id' => 'getGoalId',
        'account_id' => 'getAccountId',
        'security_id' => 'getSecurityId',
        'n_path_monte_carlo' => 'getNPathMonteCarlo',
        'client_id' => 'getClientId',
        'n_rolling_volatility' => 'getNRollingVolatility',
        'hist_factor' => 'getHistFactor',
        'max_percentile_monte_carlo' => 'getMaxPercentileMonteCarlo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ANNUALIZED_RETURN_PERIOD_Y = 'Y';
    const ANNUALIZED_RETURN_PERIOD_Q = 'Q';
    const ANNUALIZED_RETURN_PERIOD_M = 'M';
    const ANNUALIZED_RETURN_PERIOD_D = 'D';
    const ACTIVE_PREMIUM_PERIOD_Y = 'Y';
    const ACTIVE_PREMIUM_PERIOD_Q = 'Q';
    const ACTIVE_PREMIUM_PERIOD_M = 'M';
    const ACTIVE_PREMIUM_PERIOD_D = 'D';
    const PERIOD_TYPE_Y = 'Y';
    const PERIOD_TYPE_Q = 'Q';
    const PERIOD_TYPE_M = 'M';
    const PERIOD_TYPE_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAnnualizedReturnPeriodAllowableValues()
    {
        return [
            self::ANNUALIZED_RETURN_PERIOD_Y,
            self::ANNUALIZED_RETURN_PERIOD_Q,
            self::ANNUALIZED_RETURN_PERIOD_M,
            self::ANNUALIZED_RETURN_PERIOD_D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivePremiumPeriodAllowableValues()
    {
        return [
            self::ACTIVE_PREMIUM_PERIOD_Y,
            self::ACTIVE_PREMIUM_PERIOD_Q,
            self::ACTIVE_PREMIUM_PERIOD_M,
            self::ACTIVE_PREMIUM_PERIOD_D,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPeriodTypeAllowableValues()
    {
        return [
            self::PERIOD_TYPE_Y,
            self::PERIOD_TYPE_Q,
            self::PERIOD_TYPE_M,
            self::PERIOD_TYPE_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['annualized_return_period'] = isset($data['annualized_return_period']) ? $data['annualized_return_period'] : 'D';
        $this->container['risk_free_alpha'] = isset($data['risk_free_alpha']) ? $data['risk_free_alpha'] : 0.0;
        $this->container['allocation_id'] = isset($data['allocation_id']) ? $data['allocation_id'] : null;
        $this->container['mean_percentile_monte_carlo'] = isset($data['mean_percentile_monte_carlo']) ? $data['mean_percentile_monte_carlo'] : 50.0;
        $this->container['model_id'] = isset($data['model_id']) ? $data['model_id'] : null;
        $this->container['mar_downside_deviation'] = isset($data['mar_downside_deviation']) ? $data['mar_downside_deviation'] : 0.0;
        $this->container['risk_free_sharpe'] = isset($data['risk_free_sharpe']) ? $data['risk_free_sharpe'] : 0.0;
        $this->container['benchmark_id'] = isset($data['benchmark_id']) ? $data['benchmark_id'] : null;
        $this->container['risk_free_sortino'] = isset($data['risk_free_sortino']) ? $data['risk_free_sortino'] : 0.0;
        $this->container['household_id'] = isset($data['household_id']) ? $data['household_id'] : null;
        $this->container['min_percentile_monte_carlo'] = isset($data['min_percentile_monte_carlo']) ? $data['min_percentile_monte_carlo'] : 20.0;
        $this->container['moving_average_n_day'] = isset($data['moving_average_n_day']) ? $data['moving_average_n_day'] : 7;
        $this->container['active_premium_period'] = isset($data['active_premium_period']) ? $data['active_premium_period'] : 'D';
        $this->container['stat_name'] = isset($data['stat_name']) ? $data['stat_name'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['n_day_returns'] = isset($data['n_day_returns']) ? $data['n_day_returns'] : 7;
        $this->container['var_conf_interval'] = isset($data['var_conf_interval']) ? $data['var_conf_interval'] : 95.0;
        $this->container['period_type'] = isset($data['period_type']) ? $data['period_type'] : 'D';
        $this->container['risk_free_treynor'] = isset($data['risk_free_treynor']) ? $data['risk_free_treynor'] : 0.0;
        $this->container['n_rolling_max_drawdown'] = isset($data['n_rolling_max_drawdown']) ? $data['n_rolling_max_drawdown'] : 7;
        $this->container['portfolio_id'] = isset($data['portfolio_id']) ? $data['portfolio_id'] : null;
        $this->container['num_sim_monte_carlo'] = isset($data['num_sim_monte_carlo']) ? $data['num_sim_monte_carlo'] : 1000;
        $this->container['goal_id'] = isset($data['goal_id']) ? $data['goal_id'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['security_id'] = isset($data['security_id']) ? $data['security_id'] : null;
        $this->container['n_path_monte_carlo'] = isset($data['n_path_monte_carlo']) ? $data['n_path_monte_carlo'] : 100;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['n_rolling_volatility'] = isset($data['n_rolling_volatility']) ? $data['n_rolling_volatility'] : 7;
        $this->container['hist_factor'] = isset($data['hist_factor']) ? $data['hist_factor'] : 5.0;
        $this->container['max_percentile_monte_carlo'] = isset($data['max_percentile_monte_carlo']) ? $data['max_percentile_monte_carlo'] : 80.0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAnnualizedReturnPeriodAllowableValues();
        if (!is_null($this->container['annualized_return_period']) && !in_array($this->container['annualized_return_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'annualized_return_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['mean_percentile_monte_carlo']) && ($this->container['mean_percentile_monte_carlo'] < 0)) {
            $invalidProperties[] = "invalid value for 'mean_percentile_monte_carlo', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['min_percentile_monte_carlo']) && ($this->container['min_percentile_monte_carlo'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_percentile_monte_carlo', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['moving_average_n_day']) && ($this->container['moving_average_n_day'] < 1)) {
            $invalidProperties[] = "invalid value for 'moving_average_n_day', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getActivePremiumPeriodAllowableValues();
        if (!is_null($this->container['active_premium_period']) && !in_array($this->container['active_premium_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'active_premium_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['stat_name'] === null) {
            $invalidProperties[] = "'stat_name' can't be null";
        }
        if (!is_null($this->container['n_day_returns']) && ($this->container['n_day_returns'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_day_returns', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getPeriodTypeAllowableValues();
        if (!is_null($this->container['period_type']) && !in_array($this->container['period_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'period_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['n_rolling_max_drawdown']) && ($this->container['n_rolling_max_drawdown'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_rolling_max_drawdown', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['num_sim_monte_carlo']) && ($this->container['num_sim_monte_carlo'] < 1)) {
            $invalidProperties[] = "invalid value for 'num_sim_monte_carlo', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['n_path_monte_carlo']) && ($this->container['n_path_monte_carlo'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_path_monte_carlo', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['n_rolling_volatility']) && ($this->container['n_rolling_volatility'] < 1)) {
            $invalidProperties[] = "invalid value for 'n_rolling_volatility', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_percentile_monte_carlo']) && ($this->container['max_percentile_monte_carlo'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_percentile_monte_carlo', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets annualized_return_period
     *
     * @return string
     */
    public function getAnnualizedReturnPeriod()
    {
        return $this->container['annualized_return_period'];
    }

    /**
     * Sets annualized_return_period
     *
     * @param string $annualized_return_period annualized_return_period
     *
     * @return $this
     */
    public function setAnnualizedReturnPeriod($annualized_return_period)
    {
        $allowedValues = $this->getAnnualizedReturnPeriodAllowableValues();
        if (!is_null($annualized_return_period) && !in_array($annualized_return_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'annualized_return_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['annualized_return_period'] = $annualized_return_period;

        return $this;
    }

    /**
     * Gets risk_free_alpha
     *
     * @return float
     */
    public function getRiskFreeAlpha()
    {
        return $this->container['risk_free_alpha'];
    }

    /**
     * Sets risk_free_alpha
     *
     * @param float $risk_free_alpha risk_free_alpha
     *
     * @return $this
     */
    public function setRiskFreeAlpha($risk_free_alpha)
    {
        $this->container['risk_free_alpha'] = $risk_free_alpha;

        return $this;
    }

    /**
     * Gets allocation_id
     *
     * @return string
     */
    public function getAllocationId()
    {
        return $this->container['allocation_id'];
    }

    /**
     * Sets allocation_id
     *
     * @param string $allocation_id allocation_id
     *
     * @return $this
     */
    public function setAllocationId($allocation_id)
    {
        $this->container['allocation_id'] = $allocation_id;

        return $this;
    }

    /**
     * Gets mean_percentile_monte_carlo
     *
     * @return float
     */
    public function getMeanPercentileMonteCarlo()
    {
        return $this->container['mean_percentile_monte_carlo'];
    }

    /**
     * Sets mean_percentile_monte_carlo
     *
     * @param float $mean_percentile_monte_carlo mean_percentile_monte_carlo
     *
     * @return $this
     */
    public function setMeanPercentileMonteCarlo($mean_percentile_monte_carlo)
    {

        if (!is_null($mean_percentile_monte_carlo) && ($mean_percentile_monte_carlo < 0)) {
            throw new \InvalidArgumentException('invalid value for $mean_percentile_monte_carlo when calling PerformanceCalculatorRequest., must be bigger than or equal to 0.');
        }

        $this->container['mean_percentile_monte_carlo'] = $mean_percentile_monte_carlo;

        return $this;
    }

    /**
     * Gets model_id
     *
     * @return string
     */
    public function getModelId()
    {
        return $this->container['model_id'];
    }

    /**
     * Sets model_id
     *
     * @param string $model_id model_id
     *
     * @return $this
     */
    public function setModelId($model_id)
    {
        $this->container['model_id'] = $model_id;

        return $this;
    }

    /**
     * Gets mar_downside_deviation
     *
     * @return float
     */
    public function getMarDownsideDeviation()
    {
        return $this->container['mar_downside_deviation'];
    }

    /**
     * Sets mar_downside_deviation
     *
     * @param float $mar_downside_deviation mar_downside_deviation
     *
     * @return $this
     */
    public function setMarDownsideDeviation($mar_downside_deviation)
    {
        $this->container['mar_downside_deviation'] = $mar_downside_deviation;

        return $this;
    }

    /**
     * Gets risk_free_sharpe
     *
     * @return float
     */
    public function getRiskFreeSharpe()
    {
        return $this->container['risk_free_sharpe'];
    }

    /**
     * Sets risk_free_sharpe
     *
     * @param float $risk_free_sharpe risk_free_sharpe
     *
     * @return $this
     */
    public function setRiskFreeSharpe($risk_free_sharpe)
    {
        $this->container['risk_free_sharpe'] = $risk_free_sharpe;

        return $this;
    }

    /**
     * Gets benchmark_id
     *
     * @return string
     */
    public function getBenchmarkId()
    {
        return $this->container['benchmark_id'];
    }

    /**
     * Sets benchmark_id
     *
     * @param string $benchmark_id benchmark_id
     *
     * @return $this
     */
    public function setBenchmarkId($benchmark_id)
    {
        $this->container['benchmark_id'] = $benchmark_id;

        return $this;
    }

    /**
     * Gets risk_free_sortino
     *
     * @return float
     */
    public function getRiskFreeSortino()
    {
        return $this->container['risk_free_sortino'];
    }

    /**
     * Sets risk_free_sortino
     *
     * @param float $risk_free_sortino risk_free_sortino
     *
     * @return $this
     */
    public function setRiskFreeSortino($risk_free_sortino)
    {
        $this->container['risk_free_sortino'] = $risk_free_sortino;

        return $this;
    }

    /**
     * Gets household_id
     *
     * @return string
     */
    public function getHouseholdId()
    {
        return $this->container['household_id'];
    }

    /**
     * Sets household_id
     *
     * @param string $household_id household_id
     *
     * @return $this
     */
    public function setHouseholdId($household_id)
    {
        $this->container['household_id'] = $household_id;

        return $this;
    }

    /**
     * Gets min_percentile_monte_carlo
     *
     * @return float
     */
    public function getMinPercentileMonteCarlo()
    {
        return $this->container['min_percentile_monte_carlo'];
    }

    /**
     * Sets min_percentile_monte_carlo
     *
     * @param float $min_percentile_monte_carlo min_percentile_monte_carlo
     *
     * @return $this
     */
    public function setMinPercentileMonteCarlo($min_percentile_monte_carlo)
    {

        if (!is_null($min_percentile_monte_carlo) && ($min_percentile_monte_carlo < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_percentile_monte_carlo when calling PerformanceCalculatorRequest., must be bigger than or equal to 0.');
        }

        $this->container['min_percentile_monte_carlo'] = $min_percentile_monte_carlo;

        return $this;
    }

    /**
     * Gets moving_average_n_day
     *
     * @return int
     */
    public function getMovingAverageNDay()
    {
        return $this->container['moving_average_n_day'];
    }

    /**
     * Sets moving_average_n_day
     *
     * @param int $moving_average_n_day moving_average_n_day
     *
     * @return $this
     */
    public function setMovingAverageNDay($moving_average_n_day)
    {

        if (!is_null($moving_average_n_day) && ($moving_average_n_day < 1)) {
            throw new \InvalidArgumentException('invalid value for $moving_average_n_day when calling PerformanceCalculatorRequest., must be bigger than or equal to 1.');
        }

        $this->container['moving_average_n_day'] = $moving_average_n_day;

        return $this;
    }

    /**
     * Gets active_premium_period
     *
     * @return string
     */
    public function getActivePremiumPeriod()
    {
        return $this->container['active_premium_period'];
    }

    /**
     * Sets active_premium_period
     *
     * @param string $active_premium_period active_premium_period
     *
     * @return $this
     */
    public function setActivePremiumPeriod($active_premium_period)
    {
        $allowedValues = $this->getActivePremiumPeriodAllowableValues();
        if (!is_null($active_premium_period) && !in_array($active_premium_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'active_premium_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['active_premium_period'] = $active_premium_period;

        return $this;
    }

    /**
     * Gets stat_name
     *
     * @return string
     */
    public function getStatName()
    {
        return $this->container['stat_name'];
    }

    /**
     * Sets stat_name
     *
     * @param string $stat_name stat_name
     *
     * @return $this
     */
    public function setStatName($stat_name)
    {
        $this->container['stat_name'] = $stat_name;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets n_day_returns
     *
     * @return int
     */
    public function getNDayReturns()
    {
        return $this->container['n_day_returns'];
    }

    /**
     * Sets n_day_returns
     *
     * @param int $n_day_returns n_day_returns
     *
     * @return $this
     */
    public function setNDayReturns($n_day_returns)
    {

        if (!is_null($n_day_returns) && ($n_day_returns < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_day_returns when calling PerformanceCalculatorRequest., must be bigger than or equal to 1.');
        }

        $this->container['n_day_returns'] = $n_day_returns;

        return $this;
    }

    /**
     * Gets var_conf_interval
     *
     * @return float
     */
    public function getVarConfInterval()
    {
        return $this->container['var_conf_interval'];
    }

    /**
     * Sets var_conf_interval
     *
     * @param float $var_conf_interval var_conf_interval
     *
     * @return $this
     */
    public function setVarConfInterval($var_conf_interval)
    {
        $this->container['var_conf_interval'] = $var_conf_interval;

        return $this;
    }

    /**
     * Gets period_type
     *
     * @return string
     */
    public function getPeriodType()
    {
        return $this->container['period_type'];
    }

    /**
     * Sets period_type
     *
     * @param string $period_type period_type
     *
     * @return $this
     */
    public function setPeriodType($period_type)
    {
        $allowedValues = $this->getPeriodTypeAllowableValues();
        if (!is_null($period_type) && !in_array($period_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'period_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['period_type'] = $period_type;

        return $this;
    }

    /**
     * Gets risk_free_treynor
     *
     * @return float
     */
    public function getRiskFreeTreynor()
    {
        return $this->container['risk_free_treynor'];
    }

    /**
     * Sets risk_free_treynor
     *
     * @param float $risk_free_treynor risk_free_treynor
     *
     * @return $this
     */
    public function setRiskFreeTreynor($risk_free_treynor)
    {
        $this->container['risk_free_treynor'] = $risk_free_treynor;

        return $this;
    }

    /**
     * Gets n_rolling_max_drawdown
     *
     * @return int
     */
    public function getNRollingMaxDrawdown()
    {
        return $this->container['n_rolling_max_drawdown'];
    }

    /**
     * Sets n_rolling_max_drawdown
     *
     * @param int $n_rolling_max_drawdown n_rolling_max_drawdown
     *
     * @return $this
     */
    public function setNRollingMaxDrawdown($n_rolling_max_drawdown)
    {

        if (!is_null($n_rolling_max_drawdown) && ($n_rolling_max_drawdown < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_rolling_max_drawdown when calling PerformanceCalculatorRequest., must be bigger than or equal to 1.');
        }

        $this->container['n_rolling_max_drawdown'] = $n_rolling_max_drawdown;

        return $this;
    }

    /**
     * Gets portfolio_id
     *
     * @return string
     */
    public function getPortfolioId()
    {
        return $this->container['portfolio_id'];
    }

    /**
     * Sets portfolio_id
     *
     * @param string $portfolio_id portfolio_id
     *
     * @return $this
     */
    public function setPortfolioId($portfolio_id)
    {
        $this->container['portfolio_id'] = $portfolio_id;

        return $this;
    }

    /**
     * Gets num_sim_monte_carlo
     *
     * @return int
     */
    public function getNumSimMonteCarlo()
    {
        return $this->container['num_sim_monte_carlo'];
    }

    /**
     * Sets num_sim_monte_carlo
     *
     * @param int $num_sim_monte_carlo num_sim_monte_carlo
     *
     * @return $this
     */
    public function setNumSimMonteCarlo($num_sim_monte_carlo)
    {

        if (!is_null($num_sim_monte_carlo) && ($num_sim_monte_carlo < 1)) {
            throw new \InvalidArgumentException('invalid value for $num_sim_monte_carlo when calling PerformanceCalculatorRequest., must be bigger than or equal to 1.');
        }

        $this->container['num_sim_monte_carlo'] = $num_sim_monte_carlo;

        return $this;
    }

    /**
     * Gets goal_id
     *
     * @return string
     */
    public function getGoalId()
    {
        return $this->container['goal_id'];
    }

    /**
     * Sets goal_id
     *
     * @param string $goal_id goal_id
     *
     * @return $this
     */
    public function setGoalId($goal_id)
    {
        $this->container['goal_id'] = $goal_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets security_id
     *
     * @return string
     */
    public function getSecurityId()
    {
        return $this->container['security_id'];
    }

    /**
     * Sets security_id
     *
     * @param string $security_id security_id
     *
     * @return $this
     */
    public function setSecurityId($security_id)
    {
        $this->container['security_id'] = $security_id;

        return $this;
    }

    /**
     * Gets n_path_monte_carlo
     *
     * @return int
     */
    public function getNPathMonteCarlo()
    {
        return $this->container['n_path_monte_carlo'];
    }

    /**
     * Sets n_path_monte_carlo
     *
     * @param int $n_path_monte_carlo n_path_monte_carlo
     *
     * @return $this
     */
    public function setNPathMonteCarlo($n_path_monte_carlo)
    {

        if (!is_null($n_path_monte_carlo) && ($n_path_monte_carlo < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_path_monte_carlo when calling PerformanceCalculatorRequest., must be bigger than or equal to 1.');
        }

        $this->container['n_path_monte_carlo'] = $n_path_monte_carlo;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets n_rolling_volatility
     *
     * @return int
     */
    public function getNRollingVolatility()
    {
        return $this->container['n_rolling_volatility'];
    }

    /**
     * Sets n_rolling_volatility
     *
     * @param int $n_rolling_volatility n_rolling_volatility
     *
     * @return $this
     */
    public function setNRollingVolatility($n_rolling_volatility)
    {

        if (!is_null($n_rolling_volatility) && ($n_rolling_volatility < 1)) {
            throw new \InvalidArgumentException('invalid value for $n_rolling_volatility when calling PerformanceCalculatorRequest., must be bigger than or equal to 1.');
        }

        $this->container['n_rolling_volatility'] = $n_rolling_volatility;

        return $this;
    }

    /**
     * Gets hist_factor
     *
     * @return float
     */
    public function getHistFactor()
    {
        return $this->container['hist_factor'];
    }

    /**
     * Sets hist_factor
     *
     * @param float $hist_factor hist_factor
     *
     * @return $this
     */
    public function setHistFactor($hist_factor)
    {
        $this->container['hist_factor'] = $hist_factor;

        return $this;
    }

    /**
     * Gets max_percentile_monte_carlo
     *
     * @return float
     */
    public function getMaxPercentileMonteCarlo()
    {
        return $this->container['max_percentile_monte_carlo'];
    }

    /**
     * Sets max_percentile_monte_carlo
     *
     * @param float $max_percentile_monte_carlo max_percentile_monte_carlo
     *
     * @return $this
     */
    public function setMaxPercentileMonteCarlo($max_percentile_monte_carlo)
    {

        if (!is_null($max_percentile_monte_carlo) && ($max_percentile_monte_carlo < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_percentile_monte_carlo when calling PerformanceCalculatorRequest., must be bigger than or equal to 0.');
        }

        $this->container['max_percentile_monte_carlo'] = $max_percentile_monte_carlo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


