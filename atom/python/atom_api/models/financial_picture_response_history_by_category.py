# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.financial_picture_response_history_subcategories import FinancialPictureResponseHistorySubcategories  # noqa: F401,E501


class FinancialPictureResponseHistoryByCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'balance': 'float',
        'subcategories': 'list[FinancialPictureResponseHistorySubcategories]'
    }

    attribute_map = {
        'category': 'category',
        'balance': 'balance',
        'subcategories': 'subcategories'
    }

    def __init__(self, category=None, balance=None, subcategories=None):  # noqa: E501
        """FinancialPictureResponseHistoryByCategory - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._balance = None
        self._subcategories = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if balance is not None:
            self.balance = balance
        if subcategories is not None:
            self.subcategories = subcategories

    @property
    def category(self):
        """Gets the category of this FinancialPictureResponseHistoryByCategory.  # noqa: E501

        Category of the aggregation accounts. These accounts are dependent on the `category` fields within the Nucleus Aggregation Account.  # noqa: E501

        :return: The category of this FinancialPictureResponseHistoryByCategory.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FinancialPictureResponseHistoryByCategory.

        Category of the aggregation accounts. These accounts are dependent on the `category` fields within the Nucleus Aggregation Account.  # noqa: E501

        :param category: The category of this FinancialPictureResponseHistoryByCategory.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def balance(self):
        """Gets the balance of this FinancialPictureResponseHistoryByCategory.  # noqa: E501

        Total balance for this category on this date  # noqa: E501

        :return: The balance of this FinancialPictureResponseHistoryByCategory.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this FinancialPictureResponseHistoryByCategory.

        Total balance for this category on this date  # noqa: E501

        :param balance: The balance of this FinancialPictureResponseHistoryByCategory.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def subcategories(self):
        """Gets the subcategories of this FinancialPictureResponseHistoryByCategory.  # noqa: E501


        :return: The subcategories of this FinancialPictureResponseHistoryByCategory.  # noqa: E501
        :rtype: list[FinancialPictureResponseHistorySubcategories]
        """
        return self._subcategories

    @subcategories.setter
    def subcategories(self, subcategories):
        """Sets the subcategories of this FinancialPictureResponseHistoryByCategory.


        :param subcategories: The subcategories of this FinancialPictureResponseHistoryByCategory.  # noqa: E501
        :type: list[FinancialPictureResponseHistorySubcategories]
        """

        self._subcategories = subcategories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FinancialPictureResponseHistoryByCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialPictureResponseHistoryByCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
