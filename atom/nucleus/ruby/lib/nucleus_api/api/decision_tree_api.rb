=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.20

=end

require 'uri'

module NucleusApi
  class DecisionTreeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Decision tree result
    # Decision tree result. 
    # @param decision_tree_co decisionTreeCO
    # @param [Hash] opts the optional parameters
    # @return [DecisionTreeResultVO]
    def create_decision_tree_result_using_post(decision_tree_co, opts = {})
      data, _status_code, _headers = create_decision_tree_result_using_post_with_http_info(decision_tree_co, opts)
      data
    end

    # Decision tree result
    # Decision tree result. 
    # @param decision_tree_co decisionTreeCO
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecisionTreeResultVO, Fixnum, Hash)>] DecisionTreeResultVO data, response status code and response headers
    def create_decision_tree_result_using_post_with_http_info(decision_tree_co, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.create_decision_tree_result_using_post ...'
      end
      # verify the required parameter 'decision_tree_co' is set
      if @api_client.config.client_side_validation && decision_tree_co.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree_co' when calling DecisionTreeApi.create_decision_tree_result_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree_result'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(decision_tree_co)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DecisionTreeResultVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#create_decision_tree_result_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a decision tree
    # Create a new decision tree for your firm.
    # @param decision_tree decisionTree
    # @param [Hash] opts the optional parameters
    # @return [DecisionTree]
    def create_decision_tree_using_post(decision_tree, opts = {})
      data, _status_code, _headers = create_decision_tree_using_post_with_http_info(decision_tree, opts)
      data
    end

    # Create a decision tree
    # Create a new decision tree for your firm.
    # @param decision_tree decisionTree
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecisionTree, Fixnum, Hash)>] DecisionTree data, response status code and response headers
    def create_decision_tree_using_post_with_http_info(decision_tree, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.create_decision_tree_using_post ...'
      end
      # verify the required parameter 'decision_tree' is set
      if @api_client.config.client_side_validation && decision_tree.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree' when calling DecisionTreeApi.create_decision_tree_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(decision_tree)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DecisionTree')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#create_decision_tree_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a node relationship
    # Create a new node relationship for your firm.
    # @param node node
    # @param [Hash] opts the optional parameters
    # @return [NodeRelationship]
    def create_node_relationship_using_post(node, opts = {})
      data, _status_code, _headers = create_node_relationship_using_post_with_http_info(node, opts)
      data
    end

    # Create a node relationship
    # Create a new node relationship for your firm.
    # @param node node
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeRelationship, Fixnum, Hash)>] NodeRelationship data, response status code and response headers
    def create_node_relationship_using_post_with_http_info(node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.create_node_relationship_using_post ...'
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling DecisionTreeApi.create_node_relationship_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(node)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeRelationship')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#create_node_relationship_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a node
    # Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
    # @param node node
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def create_node_using_post(node, opts = {})
      data, _status_code, _headers = create_node_using_post_with_http_info(node, opts)
      data
    end

    # Create a node
    # Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
    # @param node node
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def create_node_using_post_with_http_info(node, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.create_node_using_post ...'
      end
      # verify the required parameter 'node' is set
      if @api_client.config.client_side_validation && node.nil?
        fail ArgumentError, "Missing the required parameter 'node' when calling DecisionTreeApi.create_node_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/node'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(node)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#create_node_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a decision tree
    # Permanently delete a decision tree.
    # @param decision_tree_id UUID decision_tree_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_decision_tree_using_delete(decision_tree_id, opts = {})
      delete_decision_tree_using_delete_with_http_info(decision_tree_id, opts)
      nil
    end

    # Delete a decision tree
    # Permanently delete a decision tree.
    # @param decision_tree_id UUID decision_tree_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_decision_tree_using_delete_with_http_info(decision_tree_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.delete_decision_tree_using_delete ...'
      end
      # verify the required parameter 'decision_tree_id' is set
      if @api_client.config.client_side_validation && decision_tree_id.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree_id' when calling DecisionTreeApi.delete_decision_tree_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree/{decision_tree_id}'.sub('{' + 'decision_tree_id' + '}', decision_tree_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#delete_decision_tree_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a node relationship
    # Permanently delete a node relationship.
    # @param node_relationship_id UUID node_relationship_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_node_relationship_using_delete(node_relationship_id, opts = {})
      delete_node_relationship_using_delete_with_http_info(node_relationship_id, opts)
      nil
    end

    # Delete a node relationship
    # Permanently delete a node relationship.
    # @param node_relationship_id UUID node_relationship_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_node_relationship_using_delete_with_http_info(node_relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.delete_node_relationship_using_delete ...'
      end
      # verify the required parameter 'node_relationship_id' is set
      if @api_client.config.client_side_validation && node_relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_relationship_id' when calling DecisionTreeApi.delete_node_relationship_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship/{node_relationship_id}'.sub('{' + 'node_relationship_id' + '}', node_relationship_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#delete_node_relationship_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a node
    # Permanently delete a node.
    # @param node_id UUID node_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_node_using_delete(node_id, opts = {})
      delete_node_using_delete_with_http_info(node_id, opts)
      nil
    end

    # Delete a node
    # Permanently delete a node.
    # @param node_id UUID node_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_node_using_delete_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.delete_node_using_delete ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DecisionTreeApi.delete_node_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/node/{node_id}'.sub('{' + 'node_id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#delete_node_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all decision tree
    # Get the information for all decision trees defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageDecisionTree]
    def get_decision_tree_all_using_get(opts = {})
      data, _status_code, _headers = get_decision_tree_all_using_get_with_http_info(opts)
      data
    end

    # List all decision tree
    # Get the information for all decision trees defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageDecisionTree, Fixnum, Hash)>] PageDecisionTree data, response status code and response headers
    def get_decision_tree_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.get_decision_tree_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageDecisionTree')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#get_decision_tree_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a decision tree
    # Retrieve the information for a decision tree.
    # @param decision_tree_id UUID decision_tree_id
    # @param [Hash] opts the optional parameters
    # @return [DecisionTree]
    def get_decision_tree_using_get(decision_tree_id, opts = {})
      data, _status_code, _headers = get_decision_tree_using_get_with_http_info(decision_tree_id, opts)
      data
    end

    # Retrieve a decision tree
    # Retrieve the information for a decision tree.
    # @param decision_tree_id UUID decision_tree_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecisionTree, Fixnum, Hash)>] DecisionTree data, response status code and response headers
    def get_decision_tree_using_get_with_http_info(decision_tree_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.get_decision_tree_using_get ...'
      end
      # verify the required parameter 'decision_tree_id' is set
      if @api_client.config.client_side_validation && decision_tree_id.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree_id' when calling DecisionTreeApi.get_decision_tree_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree/{decision_tree_id}'.sub('{' + 'decision_tree_id' + '}', decision_tree_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DecisionTree')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#get_decision_tree_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all nodes
    # List all nodes that are defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageNode]
    def get_node_all_using_get(opts = {})
      data, _status_code, _headers = get_node_all_using_get_with_http_info(opts)
      data
    end

    # List all nodes
    # List all nodes that are defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageNode, Fixnum, Hash)>] PageNode data, response status code and response headers
    def get_node_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.get_node_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/node'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageNode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#get_node_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all node relationships
    # Get the information for all the node relationships defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageNodeRelationship]
    def get_node_relationship_all_using_get(opts = {})
      data, _status_code, _headers = get_node_relationship_all_using_get_with_http_info(opts)
      data
    end

    # List all node relationships
    # Get the information for all the node relationships defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageNodeRelationship, Fixnum, Hash)>] PageNodeRelationship data, response status code and response headers
    def get_node_relationship_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.get_node_relationship_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageNodeRelationship')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#get_node_relationship_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a node relationship
    # Retrieve the information for a node relationship.
    # @param node_relationship_id UUID node_relationship_id
    # @param [Hash] opts the optional parameters
    # @return [NodeRelationship]
    def get_node_relationship_using_get(node_relationship_id, opts = {})
      data, _status_code, _headers = get_node_relationship_using_get_with_http_info(node_relationship_id, opts)
      data
    end

    # Retrieve a node relationship
    # Retrieve the information for a node relationship.
    # @param node_relationship_id UUID node_relationship_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeRelationship, Fixnum, Hash)>] NodeRelationship data, response status code and response headers
    def get_node_relationship_using_get_with_http_info(node_relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.get_node_relationship_using_get ...'
      end
      # verify the required parameter 'node_relationship_id' is set
      if @api_client.config.client_side_validation && node_relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_relationship_id' when calling DecisionTreeApi.get_node_relationship_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship/{node_relationship_id}'.sub('{' + 'node_relationship_id' + '}', node_relationship_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeRelationship')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#get_node_relationship_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a node
    # Retrieve the information for a node.
    # @param node_id UUID node_id
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def get_node_using_get(node_id, opts = {})
      data, _status_code, _headers = get_node_using_get_with_http_info(node_id, opts)
      data
    end

    # Retrieve a node
    # Retrieve the information for a node.
    # @param node_id UUID node_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def get_node_using_get_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.get_node_using_get ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DecisionTreeApi.get_node_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/node/{node_id}'.sub('{' + 'node_id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#get_node_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a decision tree
    # Updated the information for a decision tree.
    # @param decision_tree decision_tree
    # @param decision_tree_id UUID decision_tree_id
    # @param [Hash] opts the optional parameters
    # @return [DecisionTree]
    def update_decision_tree_using_put(decision_tree, decision_tree_id, opts = {})
      data, _status_code, _headers = update_decision_tree_using_put_with_http_info(decision_tree, decision_tree_id, opts)
      data
    end

    # Update a decision tree
    # Updated the information for a decision tree.
    # @param decision_tree decision_tree
    # @param decision_tree_id UUID decision_tree_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecisionTree, Fixnum, Hash)>] DecisionTree data, response status code and response headers
    def update_decision_tree_using_put_with_http_info(decision_tree, decision_tree_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.update_decision_tree_using_put ...'
      end
      # verify the required parameter 'decision_tree' is set
      if @api_client.config.client_side_validation && decision_tree.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree' when calling DecisionTreeApi.update_decision_tree_using_put"
      end
      # verify the required parameter 'decision_tree_id' is set
      if @api_client.config.client_side_validation && decision_tree_id.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree_id' when calling DecisionTreeApi.update_decision_tree_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree/{decision_tree_id}'.sub('{' + 'decision_tree_id' + '}', decision_tree_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(decision_tree)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DecisionTree')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#update_decision_tree_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a node relationship
    # Update the information for a node relationship.
    # @param json_node jsonNode
    # @param node_relationship_id UUID node_relationship_id
    # @param [Hash] opts the optional parameters
    # @return [NodeRelationship]
    def update_node_relationship_using_put(json_node, node_relationship_id, opts = {})
      data, _status_code, _headers = update_node_relationship_using_put_with_http_info(json_node, node_relationship_id, opts)
      data
    end

    # Update a node relationship
    # Update the information for a node relationship.
    # @param json_node jsonNode
    # @param node_relationship_id UUID node_relationship_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeRelationship, Fixnum, Hash)>] NodeRelationship data, response status code and response headers
    def update_node_relationship_using_put_with_http_info(json_node, node_relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.update_node_relationship_using_put ...'
      end
      # verify the required parameter 'json_node' is set
      if @api_client.config.client_side_validation && json_node.nil?
        fail ArgumentError, "Missing the required parameter 'json_node' when calling DecisionTreeApi.update_node_relationship_using_put"
      end
      # verify the required parameter 'node_relationship_id' is set
      if @api_client.config.client_side_validation && node_relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_relationship_id' when calling DecisionTreeApi.update_node_relationship_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship/{node_relationship_id}'.sub('{' + 'node_relationship_id' + '}', node_relationship_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(json_node)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NodeRelationship')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#update_node_relationship_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a node
    # Updated the information for a node.
    # @param json_node jsonNode
    # @param node_id UUID node_id
    # @param [Hash] opts the optional parameters
    # @return [Node]
    def update_node_using_put(json_node, node_id, opts = {})
      data, _status_code, _headers = update_node_using_put_with_http_info(json_node, node_id, opts)
      data
    end

    # Update a node
    # Updated the information for a node.
    # @param json_node jsonNode
    # @param node_id UUID node_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Node, Fixnum, Hash)>] Node data, response status code and response headers
    def update_node_using_put_with_http_info(json_node, node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DecisionTreeApi.update_node_using_put ...'
      end
      # verify the required parameter 'json_node' is set
      if @api_client.config.client_side_validation && json_node.nil?
        fail ArgumentError, "Missing the required parameter 'json_node' when calling DecisionTreeApi.update_node_using_put"
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling DecisionTreeApi.update_node_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/node/{node_id}'.sub('{' + 'node_id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(json_node)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Node')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DecisionTreeApi#update_node_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
