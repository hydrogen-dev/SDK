/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiCallback;
import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.ApiResponse;
import com.hydrogen.proton.Configuration;
import com.hydrogen.proton.Pair;
import com.hydrogen.proton.ProgressRequestBody;
import com.hydrogen.proton.model.CardAnalysisRequest;
import com.hydrogen.proton.model.CardLimitCheckRequest;
import com.hydrogen.proton.model.CardTransactionAuthorizationRequest;
import com.hydrogen.proton.ApiClient;
import com.hydrogen.proton.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardsApi {
    private ApiClient apiClient;

    public CardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cardAnalysis
     * @param cardAnalysisRequest Request payload for Card Analysis (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cardAnalysisCall(CardAnalysisRequest cardAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardAnalysisRequest;

        // create path and map variables
        String localVarPath = "/card_analysis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cardAnalysisValidateBeforeCall(CardAnalysisRequest cardAnalysisRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardAnalysisRequest' is set
        if (cardAnalysisRequest == null) {
            throw new ApiException("Missing the required parameter 'cardAnalysisRequest' when calling cardAnalysis(Async)");
        }
        

        com.squareup.okhttp.Call call = cardAnalysisCall(cardAnalysisRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Card Analysis
     * Analyze cardholder activity over time
     * @param cardAnalysisRequest Request payload for Card Analysis (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> cardAnalysis(CardAnalysisRequest cardAnalysisRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = cardAnalysisWithHttpInfo(cardAnalysisRequest);
        return resp.getData();
    }

    /**
     * Card Analysis
     * Analyze cardholder activity over time
     * @param cardAnalysisRequest Request payload for Card Analysis (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> cardAnalysisWithHttpInfo(CardAnalysisRequest cardAnalysisRequest) throws ApiException {
        com.squareup.okhttp.Call call = cardAnalysisValidateBeforeCall(cardAnalysisRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Card Analysis (asynchronously)
     * Analyze cardholder activity over time
     * @param cardAnalysisRequest Request payload for Card Analysis (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cardAnalysisAsync(CardAnalysisRequest cardAnalysisRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cardAnalysisValidateBeforeCall(cardAnalysisRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cardLimitCheck
     * @param cardLimitCheckRequest Request payload for Card Limit Check (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cardLimitCheckCall(CardLimitCheckRequest cardLimitCheckRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardLimitCheckRequest;

        // create path and map variables
        String localVarPath = "/card_limit_check";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cardLimitCheckValidateBeforeCall(CardLimitCheckRequest cardLimitCheckRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardLimitCheckRequest' is set
        if (cardLimitCheckRequest == null) {
            throw new ApiException("Missing the required parameter 'cardLimitCheckRequest' when calling cardLimitCheck(Async)");
        }
        

        com.squareup.okhttp.Call call = cardLimitCheckCall(cardLimitCheckRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Card Limit Check
     * Evaluate card transaction history against spending controls
     * @param cardLimitCheckRequest Request payload for Card Limit Check (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> cardLimitCheck(CardLimitCheckRequest cardLimitCheckRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = cardLimitCheckWithHttpInfo(cardLimitCheckRequest);
        return resp.getData();
    }

    /**
     * Card Limit Check
     * Evaluate card transaction history against spending controls
     * @param cardLimitCheckRequest Request payload for Card Limit Check (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> cardLimitCheckWithHttpInfo(CardLimitCheckRequest cardLimitCheckRequest) throws ApiException {
        com.squareup.okhttp.Call call = cardLimitCheckValidateBeforeCall(cardLimitCheckRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Card Limit Check (asynchronously)
     * Evaluate card transaction history against spending controls
     * @param cardLimitCheckRequest Request payload for Card Limit Check (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cardLimitCheckAsync(CardLimitCheckRequest cardLimitCheckRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cardLimitCheckValidateBeforeCall(cardLimitCheckRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cardTransactionAuthorization
     * @param cardTransactionAuthorizationRequest Request payload for Card Transaction Authorization (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cardTransactionAuthorizationCall(CardTransactionAuthorizationRequest cardTransactionAuthorizationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cardTransactionAuthorizationRequest;

        // create path and map variables
        String localVarPath = "/card_authorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cardTransactionAuthorizationValidateBeforeCall(CardTransactionAuthorizationRequest cardTransactionAuthorizationRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'cardTransactionAuthorizationRequest' is set
        if (cardTransactionAuthorizationRequest == null) {
            throw new ApiException("Missing the required parameter 'cardTransactionAuthorizationRequest' when calling cardTransactionAuthorization(Async)");
        }
        

        com.squareup.okhttp.Call call = cardTransactionAuthorizationCall(cardTransactionAuthorizationRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Card Transaction Authorization
     * Approve or reject a card transaction based on applicable conditions
     * @param cardTransactionAuthorizationRequest Request payload for Card Transaction Authorization (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> cardTransactionAuthorization(CardTransactionAuthorizationRequest cardTransactionAuthorizationRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = cardTransactionAuthorizationWithHttpInfo(cardTransactionAuthorizationRequest);
        return resp.getData();
    }

    /**
     * Card Transaction Authorization
     * Approve or reject a card transaction based on applicable conditions
     * @param cardTransactionAuthorizationRequest Request payload for Card Transaction Authorization (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> cardTransactionAuthorizationWithHttpInfo(CardTransactionAuthorizationRequest cardTransactionAuthorizationRequest) throws ApiException {
        com.squareup.okhttp.Call call = cardTransactionAuthorizationValidateBeforeCall(cardTransactionAuthorizationRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Card Transaction Authorization (asynchronously)
     * Approve or reject a card transaction based on applicable conditions
     * @param cardTransactionAuthorizationRequest Request payload for Card Transaction Authorization (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cardTransactionAuthorizationAsync(CardTransactionAuthorizationRequest cardTransactionAuthorizationRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cardTransactionAuthorizationValidateBeforeCall(cardTransactionAuthorizationRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
