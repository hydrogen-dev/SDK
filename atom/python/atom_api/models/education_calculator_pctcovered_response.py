# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.education_calculator_return_detail import EducationCalculatorReturnDetail  # noqa: F401,E501


class EducationCalculatorPctcoveredResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'achievable_cost': 'float',
        'target_cost': 'float',
        'percent_of_costs_covered': 'float',
        'projected_accumulation_savings': 'float',
        'total_earnings': 'float',
        'total_contributions': 'float',
        'total_cost': 'float',
        'total_taxes': 'float',
        'return_details': 'dict(str, EducationCalculatorReturnDetail)'
    }

    attribute_map = {
        'achievable_cost': 'achievable_cost',
        'target_cost': 'target_cost',
        'percent_of_costs_covered': 'percent_of_costs_covered',
        'projected_accumulation_savings': 'projected_accumulation_savings',
        'total_earnings': 'total_earnings',
        'total_contributions': 'total_contributions',
        'total_cost': 'total_cost',
        'total_taxes': 'total_taxes',
        'return_details': 'return_details'
    }

    def __init__(self, achievable_cost=None, target_cost=None, percent_of_costs_covered=None, projected_accumulation_savings=None, total_earnings=None, total_contributions=None, total_cost=None, total_taxes=None, return_details=None):  # noqa: E501
        """EducationCalculatorPctcoveredResponse - a model defined in Swagger"""  # noqa: E501

        self._achievable_cost = None
        self._target_cost = None
        self._percent_of_costs_covered = None
        self._projected_accumulation_savings = None
        self._total_earnings = None
        self._total_contributions = None
        self._total_cost = None
        self._total_taxes = None
        self._return_details = None
        self.discriminator = None

        self.achievable_cost = achievable_cost
        self.target_cost = target_cost
        self.percent_of_costs_covered = percent_of_costs_covered
        self.projected_accumulation_savings = projected_accumulation_savings
        self.total_earnings = total_earnings
        self.total_contributions = total_contributions
        self.total_cost = total_cost
        self.total_taxes = total_taxes
        self.return_details = return_details

    @property
    def achievable_cost(self):
        """Gets the achievable_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The annual cost that can be covered, expressed in today's dollars.  # noqa: E501

        :return: The achievable_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._achievable_cost

    @achievable_cost.setter
    def achievable_cost(self, achievable_cost):
        """Sets the achievable_cost of this EducationCalculatorPctcoveredResponse.

        The annual cost that can be covered, expressed in today's dollars.  # noqa: E501

        :param achievable_cost: The achievable_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if achievable_cost is None:
            raise ValueError("Invalid value for `achievable_cost`, must not be `None`")  # noqa: E501

        self._achievable_cost = achievable_cost

    @property
    def target_cost(self):
        """Gets the target_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The total_annual_cost input representing the target annual goal amount.  # noqa: E501

        :return: The target_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._target_cost

    @target_cost.setter
    def target_cost(self, target_cost):
        """Sets the target_cost of this EducationCalculatorPctcoveredResponse.

        The total_annual_cost input representing the target annual goal amount.  # noqa: E501

        :param target_cost: The target_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if target_cost is None:
            raise ValueError("Invalid value for `target_cost`, must not be `None`")  # noqa: E501

        self._target_cost = target_cost

    @property
    def percent_of_costs_covered(self):
        """Gets the percent_of_costs_covered of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The percentage of total_annual_cost that can be paid for, given the other inputs provided by the user.  # noqa: E501

        :return: The percent_of_costs_covered of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._percent_of_costs_covered

    @percent_of_costs_covered.setter
    def percent_of_costs_covered(self, percent_of_costs_covered):
        """Sets the percent_of_costs_covered of this EducationCalculatorPctcoveredResponse.

        The percentage of total_annual_cost that can be paid for, given the other inputs provided by the user.  # noqa: E501

        :param percent_of_costs_covered: The percent_of_costs_covered of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if percent_of_costs_covered is None:
            raise ValueError("Invalid value for `percent_of_costs_covered`, must not be `None`")  # noqa: E501
        if percent_of_costs_covered is not None and percent_of_costs_covered > 1:  # noqa: E501
            raise ValueError("Invalid value for `percent_of_costs_covered`, must be a value less than or equal to `1`")  # noqa: E501
        if percent_of_costs_covered is not None and percent_of_costs_covered < 0:  # noqa: E501
            raise ValueError("Invalid value for `percent_of_costs_covered`, must be a value greater than or equal to `0`")  # noqa: E501

        self._percent_of_costs_covered = percent_of_costs_covered

    @property
    def projected_accumulation_savings(self):
        """Gets the projected_accumulation_savings of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The projected balance at the end of accumulation_horizon  # noqa: E501

        :return: The projected_accumulation_savings of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._projected_accumulation_savings

    @projected_accumulation_savings.setter
    def projected_accumulation_savings(self, projected_accumulation_savings):
        """Sets the projected_accumulation_savings of this EducationCalculatorPctcoveredResponse.

        The projected balance at the end of accumulation_horizon  # noqa: E501

        :param projected_accumulation_savings: The projected_accumulation_savings of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if projected_accumulation_savings is None:
            raise ValueError("Invalid value for `projected_accumulation_savings`, must not be `None`")  # noqa: E501

        self._projected_accumulation_savings = projected_accumulation_savings

    @property
    def total_earnings(self):
        """Gets the total_earnings of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The total earnings generated over the horizon  # noqa: E501

        :return: The total_earnings of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_earnings

    @total_earnings.setter
    def total_earnings(self, total_earnings):
        """Sets the total_earnings of this EducationCalculatorPctcoveredResponse.

        The total earnings generated over the horizon  # noqa: E501

        :param total_earnings: The total_earnings of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if total_earnings is None:
            raise ValueError("Invalid value for `total_earnings`, must not be `None`")  # noqa: E501

        self._total_earnings = total_earnings

    @property
    def total_contributions(self):
        """Gets the total_contributions of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The total contributions added over the horizon.  # noqa: E501

        :return: The total_contributions of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_contributions

    @total_contributions.setter
    def total_contributions(self, total_contributions):
        """Sets the total_contributions of this EducationCalculatorPctcoveredResponse.

        The total contributions added over the horizon.  # noqa: E501

        :param total_contributions: The total_contributions of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if total_contributions is None:
            raise ValueError("Invalid value for `total_contributions`, must not be `None`")  # noqa: E501

        self._total_contributions = total_contributions

    @property
    def total_cost(self):
        """Gets the total_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The total cost of education over the decumulation horizon, represented in future dollars.  # noqa: E501

        :return: The total_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this EducationCalculatorPctcoveredResponse.

        The total cost of education over the decumulation horizon, represented in future dollars.  # noqa: E501

        :param total_cost: The total_cost of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if total_cost is None:
            raise ValueError("Invalid value for `total_cost`, must not be `None`")  # noqa: E501
        if total_cost is not None and total_cost < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_cost`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_cost = total_cost

    @property
    def total_taxes(self):
        """Gets the total_taxes of this EducationCalculatorPctcoveredResponse.  # noqa: E501

        The total taxes paid on withdrawals over decumulation_horizon.  # noqa: E501

        :return: The total_taxes of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_taxes

    @total_taxes.setter
    def total_taxes(self, total_taxes):
        """Sets the total_taxes of this EducationCalculatorPctcoveredResponse.

        The total taxes paid on withdrawals over decumulation_horizon.  # noqa: E501

        :param total_taxes: The total_taxes of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: float
        """
        if total_taxes is None:
            raise ValueError("Invalid value for `total_taxes`, must not be `None`")  # noqa: E501

        self._total_taxes = total_taxes

    @property
    def return_details(self):
        """Gets the return_details of this EducationCalculatorPctcoveredResponse.  # noqa: E501


        :return: The return_details of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :rtype: dict(str, EducationCalculatorReturnDetail)
        """
        return self._return_details

    @return_details.setter
    def return_details(self, return_details):
        """Sets the return_details of this EducationCalculatorPctcoveredResponse.


        :param return_details: The return_details of this EducationCalculatorPctcoveredResponse.  # noqa: E501
        :type: dict(str, EducationCalculatorReturnDetail)
        """
        if return_details is None:
            raise ValueError("Invalid value for `return_details`, must not be `None`")  # noqa: E501

        self._return_details = return_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EducationCalculatorPctcoveredResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EducationCalculatorPctcoveredResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
