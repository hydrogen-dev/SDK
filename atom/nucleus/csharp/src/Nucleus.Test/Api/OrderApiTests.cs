/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing OrderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class OrderApiTests
    {
        private OrderApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OrderApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrderApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OrderApi
            //Assert.IsInstanceOfType(typeof(OrderApi), instance, "instance is a OrderApi");
        }

        
        /// <summary>
        /// Test CreateAccountOrderBulkUsingPost
        /// </summary>
        [Test]
        public void CreateAccountOrderBulkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //TokenDateRequest req = null;
            //var response = instance.CreateAccountOrderBulkUsingPost(accountId, req);
            //Assert.IsInstanceOf<List<Order>> (response, "response is List<Order>");
        }
        
        /// <summary>
        /// Test CreateAccountOrderBuyOnlyUsingPost
        /// </summary>
        [Test]
        public void CreateAccountOrderBuyOnlyUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreateAccountOrderBuyOnlyUsingPost(accountId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test CreateAccountOrderRebalanceUsingPost
        /// </summary>
        [Test]
        public void CreateAccountOrderRebalanceUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreateAccountOrderRebalanceUsingPost(accountId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test CreateAccountOrderReconciliation
        /// </summary>
        [Test]
        public void CreateAccountOrderReconciliationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //OrderReconcileRequest req = null;
            //var response = instance.CreateAccountOrderReconciliation(accountId, req);
            //Assert.IsInstanceOf<OrderReconcileReturnObject> (response, "response is OrderReconcileReturnObject");
        }
        
        /// <summary>
        /// Test CreateAccountOrderSellAllUsingPost
        /// </summary>
        [Test]
        public void CreateAccountOrderSellAllUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreateAccountOrderSellAllUsingPost(accountId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test CreateAccountOrderSellOnlyUsingPost
        /// </summary>
        [Test]
        public void CreateAccountOrderSellOnlyUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? accountId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreateAccountOrderSellOnlyUsingPost(accountId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test CreateClientOrderBulkUsingPost
        /// </summary>
        [Test]
        public void CreateClientOrderBulkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //TokenDateRequest req = null;
            //var response = instance.CreateClientOrderBulkUsingPost(clientId, req);
            //Assert.IsInstanceOf<List<Order>> (response, "response is List<Order>");
        }
        
        /// <summary>
        /// Test CreateOrderBulkUsingPost
        /// </summary>
        [Test]
        public void CreateOrderBulkUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TokenDateRequest req = null;
            //var response = instance.CreateOrderBulkUsingPost(req);
            //Assert.IsInstanceOf<List<Order>> (response, "response is List<Order>");
        }
        
        /// <summary>
        /// Test CreateOrderStatusUsingPost
        /// </summary>
        [Test]
        public void CreateOrderStatusUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderStatus orderStatusRequest = null;
            //var response = instance.CreateOrderStatusUsingPost(orderStatusRequest);
            //Assert.IsInstanceOf<OrderStatus> (response, "response is OrderStatus");
        }
        
        /// <summary>
        /// Test CreateOrderTrackUsingPost
        /// </summary>
        [Test]
        public void CreateOrderTrackUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderTrack orderTrackRequest = null;
            //var response = instance.CreateOrderTrackUsingPost(orderTrackRequest);
            //Assert.IsInstanceOf<OrderTrack> (response, "response is OrderTrack");
        }
        
        /// <summary>
        /// Test CreateOrderUsingPost
        /// </summary>
        [Test]
        public void CreateOrderUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Order orderInfoRequest = null;
            //var response = instance.CreateOrderUsingPost(orderInfoRequest);
            //Assert.IsInstanceOf<Order> (response, "response is Order");
        }
        
        /// <summary>
        /// Test CreatePortfolioOrderBuyOnlyUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioOrderBuyOnlyUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreatePortfolioOrderBuyOnlyUsingPost(portfolioId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test CreatePortfolioOrderRebalanceUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioOrderRebalanceUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreatePortfolioOrderRebalanceUsingPost(portfolioId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test CreatePortfolioOrderReconciliation
        /// </summary>
        [Test]
        public void CreatePortfolioOrderReconciliationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //OrderReconcileRequest req = null;
            //var response = instance.CreatePortfolioOrderReconciliation(portfolioId, req);
            //Assert.IsInstanceOf<OrderReconcileReturnObject> (response, "response is OrderReconcileReturnObject");
        }
        
        /// <summary>
        /// Test CreatePortfolioOrderSellAllUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioOrderSellAllUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreatePortfolioOrderSellAllUsingPost(portfolioId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test CreatePortfolioOrderSellOnlyUsingPost
        /// </summary>
        [Test]
        public void CreatePortfolioOrderSellOnlyUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? portfolioId = null;
            //AccountPortfolioRebalanceRequest req = null;
            //var response = instance.CreatePortfolioOrderSellOnlyUsingPost(portfolioId, req);
            //Assert.IsInstanceOf<List<OrderVoClone>> (response, "response is List<OrderVoClone>");
        }
        
        /// <summary>
        /// Test DeleteOrderStatusUsingDelete
        /// </summary>
        [Test]
        public void DeleteOrderStatusUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? orderStatusId = null;
            //instance.DeleteOrderStatusUsingDelete(orderStatusId);
            
        }
        
        /// <summary>
        /// Test DeleteOrderTrackUsingDelete
        /// </summary>
        [Test]
        public void DeleteOrderTrackUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? orderTrackId = null;
            //instance.DeleteOrderTrackUsingDelete(orderTrackId);
            
        }
        
        /// <summary>
        /// Test DeleteOrderUsingDelete
        /// </summary>
        [Test]
        public void DeleteOrderUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? orderId = null;
            //instance.DeleteOrderUsingDelete(orderId);
            
        }
        
        /// <summary>
        /// Test GetOrderAllUsingGet
        /// </summary>
        [Test]
        public void GetOrderAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetOrderAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageOrder> (response, "response is PageOrder");
        }
        
        /// <summary>
        /// Test GetOrderBulkAllUsingGet
        /// </summary>
        [Test]
        public void GetOrderBulkAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetOrderBulkAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageOrderBulk> (response, "response is PageOrderBulk");
        }
        
        /// <summary>
        /// Test GetOrderStatusAllUsingGet
        /// </summary>
        [Test]
        public void GetOrderStatusAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetOrderStatusAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageOrderStatus> (response, "response is PageOrderStatus");
        }
        
        /// <summary>
        /// Test GetOrderStatusUsingGet
        /// </summary>
        [Test]
        public void GetOrderStatusUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? orderStatusId = null;
            //var response = instance.GetOrderStatusUsingGet(orderStatusId);
            //Assert.IsInstanceOf<OrderStatus> (response, "response is OrderStatus");
        }
        
        /// <summary>
        /// Test GetOrderTrackAllUsingGet
        /// </summary>
        [Test]
        public void GetOrderTrackAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetOrderTrackAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageOrderTrack> (response, "response is PageOrderTrack");
        }
        
        /// <summary>
        /// Test GetOrderTrackUsingGet
        /// </summary>
        [Test]
        public void GetOrderTrackUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? orderTrackId = null;
            //var response = instance.GetOrderTrackUsingGet(orderTrackId);
            //Assert.IsInstanceOf<OrderTrack> (response, "response is OrderTrack");
        }
        
        /// <summary>
        /// Test GetOrderUsingGet
        /// </summary>
        [Test]
        public void GetOrderUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? orderId = null;
            //var response = instance.GetOrderUsingGet(orderId);
            //Assert.IsInstanceOf<Order> (response, "response is Order");
        }
        
        /// <summary>
        /// Test UpdateOrderStatusUsingPut
        /// </summary>
        [Test]
        public void UpdateOrderStatusUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object orderStatus = null;
            //Guid? orderStatusId = null;
            //var response = instance.UpdateOrderStatusUsingPut(orderStatus, orderStatusId);
            //Assert.IsInstanceOf<OrderStatus> (response, "response is OrderStatus");
        }
        
        /// <summary>
        /// Test UpdateOrderTrackUsingPut
        /// </summary>
        [Test]
        public void UpdateOrderTrackUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object orderTrack = null;
            //Guid? orderTrackId = null;
            //var response = instance.UpdateOrderTrackUsingPut(orderTrack, orderTrackId);
            //Assert.IsInstanceOf<OrderTrack> (response, "response is OrderTrack");
        }
        
        /// <summary>
        /// Test UpdateOrderUsingPut
        /// </summary>
        [Test]
        public void UpdateOrderUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object order = null;
            //Guid? orderId = null;
            //var response = instance.UpdateOrderUsingPut(order, orderId);
            //Assert.IsInstanceOf<Order> (response, "response is Order");
        }
        
    }

}
