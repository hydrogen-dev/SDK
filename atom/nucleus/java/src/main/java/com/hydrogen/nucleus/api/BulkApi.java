/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.BulkTransaction;
import com.hydrogen.nucleus.model.BulkTransactionVO;
import com.hydrogen.nucleus.model.JsonNode;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkApi {
    private ApiClient apiClient;

    public BulkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createBulkUsingPost
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBulkUsingPostCall(JsonNode data, String entityUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk/{entity_uri}"
            .replaceAll("\\{" + "entity_uri" + "\\}", apiClient.escapeString(entityUri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBulkUsingPostValidateBeforeCall(JsonNode data, String entityUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createBulkUsingPost(Async)");
        }
        
        // verify the required parameter 'entityUri' is set
        if (entityUri == null) {
            throw new ApiException("Missing the required parameter 'entityUri' when calling createBulkUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createBulkUsingPostCall(data, entityUri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a bulk data
     * Create a new bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @return BulkTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulkTransaction createBulkUsingPost(JsonNode data, String entityUri) throws ApiException {
        ApiResponse<BulkTransaction> resp = createBulkUsingPostWithHttpInfo(data, entityUri);
        return resp.getData();
    }

    /**
     * Create a bulk data
     * Create a new bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @return ApiResponse&lt;BulkTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulkTransaction> createBulkUsingPostWithHttpInfo(JsonNode data, String entityUri) throws ApiException {
        com.squareup.okhttp.Call call = createBulkUsingPostValidateBeforeCall(data, entityUri, null, null);
        Type localVarReturnType = new TypeToken<BulkTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a bulk data (asynchronously)
     * Create a new bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBulkUsingPostAsync(JsonNode data, String entityUri, final ApiCallback<BulkTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBulkUsingPostValidateBeforeCall(data, entityUri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteBulkUsingDelete
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBulkUsingDeleteCall(JsonNode data, String entityUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk/{entity_uri}"
            .replaceAll("\\{" + "entity_uri" + "\\}", apiClient.escapeString(entityUri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteBulkUsingDeleteValidateBeforeCall(JsonNode data, String entityUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling deleteBulkUsingDelete(Async)");
        }
        
        // verify the required parameter 'entityUri' is set
        if (entityUri == null) {
            throw new ApiException("Missing the required parameter 'entityUri' when calling deleteBulkUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteBulkUsingDeleteCall(data, entityUri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a bulk data
     * Delete a bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @return BulkTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulkTransaction deleteBulkUsingDelete(JsonNode data, String entityUri) throws ApiException {
        ApiResponse<BulkTransaction> resp = deleteBulkUsingDeleteWithHttpInfo(data, entityUri);
        return resp.getData();
    }

    /**
     * Delete a bulk data
     * Delete a bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @return ApiResponse&lt;BulkTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulkTransaction> deleteBulkUsingDeleteWithHttpInfo(JsonNode data, String entityUri) throws ApiException {
        com.squareup.okhttp.Call call = deleteBulkUsingDeleteValidateBeforeCall(data, entityUri, null, null);
        Type localVarReturnType = new TypeToken<BulkTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a bulk data (asynchronously)
     * Delete a bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBulkUsingDeleteAsync(JsonNode data, String entityUri, final ApiCallback<BulkTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBulkUsingDeleteValidateBeforeCall(data, entityUri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBulkStatusUsingGet
     * @param id UUID Bulk Transaction Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBulkStatusUsingGetCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk/status/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBulkStatusUsingGetValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBulkStatusUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getBulkStatusUsingGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Status of bulk transaction
     * Get the status of bulk transaction.
     * @param id UUID Bulk Transaction Id (required)
     * @return BulkTransactionVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulkTransactionVO getBulkStatusUsingGet(UUID id) throws ApiException {
        ApiResponse<BulkTransactionVO> resp = getBulkStatusUsingGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Status of bulk transaction
     * Get the status of bulk transaction.
     * @param id UUID Bulk Transaction Id (required)
     * @return ApiResponse&lt;BulkTransactionVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulkTransactionVO> getBulkStatusUsingGetWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = getBulkStatusUsingGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<BulkTransactionVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Status of bulk transaction (asynchronously)
     * Get the status of bulk transaction.
     * @param id UUID Bulk Transaction Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBulkStatusUsingGetAsync(UUID id, final ApiCallback<BulkTransactionVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBulkStatusUsingGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkTransactionVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateBulkUsingPut
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateBulkUsingPutCall(Object data, String entityUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/nucleus/v1/bulk/{entity_uri}"
            .replaceAll("\\{" + "entity_uri" + "\\}", apiClient.escapeString(entityUri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateBulkUsingPutValidateBeforeCall(Object data, String entityUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateBulkUsingPut(Async)");
        }
        
        // verify the required parameter 'entityUri' is set
        if (entityUri == null) {
            throw new ApiException("Missing the required parameter 'entityUri' when calling updateBulkUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateBulkUsingPutCall(data, entityUri, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a bulk data
     * Update a bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @return BulkTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BulkTransaction updateBulkUsingPut(Object data, String entityUri) throws ApiException {
        ApiResponse<BulkTransaction> resp = updateBulkUsingPutWithHttpInfo(data, entityUri);
        return resp.getData();
    }

    /**
     * Update a bulk data
     * Update a bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @return ApiResponse&lt;BulkTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BulkTransaction> updateBulkUsingPutWithHttpInfo(Object data, String entityUri) throws ApiException {
        com.squareup.okhttp.Call call = updateBulkUsingPutValidateBeforeCall(data, entityUri, null, null);
        Type localVarReturnType = new TypeToken<BulkTransaction>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a bulk data (asynchronously)
     * Update a bulk data for your firm.
     * @param data data (required)
     * @param entityUri UUID entity_uri (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateBulkUsingPutAsync(Object data, String entityUri, final ApiCallback<BulkTransaction> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateBulkUsingPutValidateBeforeCall(data, entityUri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BulkTransaction>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
