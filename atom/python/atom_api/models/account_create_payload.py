# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.account_create_client import AccountCreateClient  # noqa: F401,E501
from atom_api.models.account_create_goal import AccountCreateGoal  # noqa: F401,E501
from atom_api.models.secondary_id import SecondaryId  # noqa: F401,E501


class AccountCreatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'account_type_id': 'str',
        'managed': 'bool',
        'clients': 'list[AccountCreateClient]',
        'goals': 'list[AccountCreateGoal]',
        'currency_code': 'str',
        'metadata': 'object',
        'secondary_id': 'SecondaryId'
    }

    attribute_map = {
        'name': 'name',
        'account_type_id': 'account_type_id',
        'managed': 'managed',
        'clients': 'clients',
        'goals': 'goals',
        'currency_code': 'currency_code',
        'metadata': 'metadata',
        'secondary_id': 'secondary_id'
    }

    def __init__(self, name=None, account_type_id=None, managed=True, clients=None, goals=None, currency_code=None, metadata=None, secondary_id=None):  # noqa: E501
        """AccountCreatePayload - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._account_type_id = None
        self._managed = None
        self._clients = None
        self._goals = None
        self._currency_code = None
        self._metadata = None
        self._secondary_id = None
        self.discriminator = None

        self.name = name
        self.account_type_id = account_type_id
        if managed is not None:
            self.managed = managed
        if clients is not None:
            self.clients = clients
        if goals is not None:
            self.goals = goals
        if currency_code is not None:
            self.currency_code = currency_code
        if metadata is not None:
            self.metadata = metadata
        if secondary_id is not None:
            self.secondary_id = secondary_id

    @property
    def name(self):
        """Gets the name of this AccountCreatePayload.  # noqa: E501

        Name of the account  # noqa: E501

        :return: The name of this AccountCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountCreatePayload.

        Name of the account  # noqa: E501

        :param name: The name of this AccountCreatePayload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def account_type_id(self):
        """Gets the account_type_id of this AccountCreatePayload.  # noqa: E501

        The ID of the account type for the account. Account types are defined by your firm  # noqa: E501

        :return: The account_type_id of this AccountCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._account_type_id

    @account_type_id.setter
    def account_type_id(self, account_type_id):
        """Sets the account_type_id of this AccountCreatePayload.

        The ID of the account type for the account. Account types are defined by your firm  # noqa: E501

        :param account_type_id: The account_type_id of this AccountCreatePayload.  # noqa: E501
        :type: str
        """
        if account_type_id is None:
            raise ValueError("Invalid value for `account_type_id`, must not be `None`")  # noqa: E501

        self._account_type_id = account_type_id

    @property
    def managed(self):
        """Gets the managed of this AccountCreatePayload.  # noqa: E501

        Indicates if the account is managed or self directed. Defaults to true, or that it’s managed  # noqa: E501

        :return: The managed of this AccountCreatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._managed

    @managed.setter
    def managed(self, managed):
        """Sets the managed of this AccountCreatePayload.

        Indicates if the account is managed or self directed. Defaults to true, or that it’s managed  # noqa: E501

        :param managed: The managed of this AccountCreatePayload.  # noqa: E501
        :type: bool
        """

        self._managed = managed

    @property
    def clients(self):
        """Gets the clients of this AccountCreatePayload.  # noqa: E501

        List of clients associated with the account and their association type as well as signature data  # noqa: E501

        :return: The clients of this AccountCreatePayload.  # noqa: E501
        :rtype: list[AccountCreateClient]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this AccountCreatePayload.

        List of clients associated with the account and their association type as well as signature data  # noqa: E501

        :param clients: The clients of this AccountCreatePayload.  # noqa: E501
        :type: list[AccountCreateClient]
        """

        self._clients = clients

    @property
    def goals(self):
        """Gets the goals of this AccountCreatePayload.  # noqa: E501

        List of goals mapped to the account with information such as goal amount and horizon  # noqa: E501

        :return: The goals of this AccountCreatePayload.  # noqa: E501
        :rtype: list[AccountCreateGoal]
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this AccountCreatePayload.

        List of goals mapped to the account with information such as goal amount and horizon  # noqa: E501

        :param goals: The goals of this AccountCreatePayload.  # noqa: E501
        :type: list[AccountCreateGoal]
        """

        self._goals = goals

    @property
    def currency_code(self):
        """Gets the currency_code of this AccountCreatePayload.  # noqa: E501

        Alphabetic currency code for the base currency of the account, limited to 3 characters  # noqa: E501

        :return: The currency_code of this AccountCreatePayload.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AccountCreatePayload.

        Alphabetic currency code for the base currency of the account, limited to 3 characters  # noqa: E501

        :param currency_code: The currency_code of this AccountCreatePayload.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def metadata(self):
        """Gets the metadata of this AccountCreatePayload.  # noqa: E501

        Custom information associated with the account in the format key:value  # noqa: E501

        :return: The metadata of this AccountCreatePayload.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AccountCreatePayload.

        Custom information associated with the account in the format key:value  # noqa: E501

        :param metadata: The metadata of this AccountCreatePayload.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def secondary_id(self):
        """Gets the secondary_id of this AccountCreatePayload.  # noqa: E501


        :return: The secondary_id of this AccountCreatePayload.  # noqa: E501
        :rtype: SecondaryId
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this AccountCreatePayload.


        :param secondary_id: The secondary_id of this AccountCreatePayload.  # noqa: E501
        :type: SecondaryId
        """

        self._secondary_id = secondary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCreatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCreatePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
