# coding: utf-8

"""
    Hydrogen Molecule API

    The Hydrogen Molecule API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenSupplySpecificResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'available_supply': 'float',
        'token_id': 'str',
        'create_date': 'str',
        'update_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'available_supply': 'available_supply',
        'token_id': 'token_id',
        'create_date': 'create_date',
        'update_date': 'update_date'
    }

    def __init__(self, id=None, available_supply=None, token_id=None, create_date=None, update_date=None):  # noqa: E501
        """TokenSupplySpecificResponse - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._available_supply = None
        self._token_id = None
        self._create_date = None
        self._update_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if available_supply is not None:
            self.available_supply = available_supply
        if token_id is not None:
            self.token_id = token_id
        if create_date is not None:
            self.create_date = create_date
        if update_date is not None:
            self.update_date = update_date

    @property
    def id(self):
        """Gets the id of this TokenSupplySpecificResponse.  # noqa: E501

        ID of the token supply  # noqa: E501

        :return: The id of this TokenSupplySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TokenSupplySpecificResponse.

        ID of the token supply  # noqa: E501

        :param id: The id of this TokenSupplySpecificResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def available_supply(self):
        """Gets the available_supply of this TokenSupplySpecificResponse.  # noqa: E501

        Available supply in a token's crowdsale contract  # noqa: E501

        :return: The available_supply of this TokenSupplySpecificResponse.  # noqa: E501
        :rtype: float
        """
        return self._available_supply

    @available_supply.setter
    def available_supply(self, available_supply):
        """Sets the available_supply of this TokenSupplySpecificResponse.

        Available supply in a token's crowdsale contract  # noqa: E501

        :param available_supply: The available_supply of this TokenSupplySpecificResponse.  # noqa: E501
        :type: float
        """

        self._available_supply = available_supply

    @property
    def token_id(self):
        """Gets the token_id of this TokenSupplySpecificResponse.  # noqa: E501

        The ID of the associated token.  # noqa: E501

        :return: The token_id of this TokenSupplySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TokenSupplySpecificResponse.

        The ID of the associated token.  # noqa: E501

        :param token_id: The token_id of this TokenSupplySpecificResponse.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def create_date(self):
        """Gets the create_date of this TokenSupplySpecificResponse.  # noqa: E501

        Datetime the token supply record was created  # noqa: E501

        :return: The create_date of this TokenSupplySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this TokenSupplySpecificResponse.

        Datetime the token supply record was created  # noqa: E501

        :param create_date: The create_date of this TokenSupplySpecificResponse.  # noqa: E501
        :type: str
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this TokenSupplySpecificResponse.  # noqa: E501

        Datetime the token supply record was updated  # noqa: E501

        :return: The update_date of this TokenSupplySpecificResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this TokenSupplySpecificResponse.

        Datetime the token supply record was updated  # noqa: E501

        :param update_date: The update_date of this TokenSupplySpecificResponse.  # noqa: E501
        :type: str
        """

        self._update_date = update_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenSupplySpecificResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenSupplySpecificResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
