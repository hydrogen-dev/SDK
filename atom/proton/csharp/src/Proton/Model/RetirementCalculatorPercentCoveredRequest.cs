/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// RetirementCalculatorPercentCoveredRequest
    /// </summary>
    [DataContract]
    public partial class RetirementCalculatorPercentCoveredRequest :  IEquatable<RetirementCalculatorPercentCoveredRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetirementCalculatorPercentCoveredRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RetirementCalculatorPercentCoveredRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RetirementCalculatorPercentCoveredRequest" /> class.
        /// </summary>
        /// <param name="retirementSavings">retirementSavings (default to 0.0F).</param>
        /// <param name="currentAge">currentAge (required).</param>
        /// <param name="accountIds">accountIds.</param>
        /// <param name="retirementIncome">retirementIncome (default to 0.0F).</param>
        /// <param name="retirementTax">retirementTax (default to 0.0F).</param>
        /// <param name="deathAge">deathAge (required).</param>
        /// <param name="retirementAge">retirementAge (default to 65).</param>
        /// <param name="portfolioReturn">portfolioReturn (required).</param>
        /// <param name="retirementExpenses">retirementExpenses (required).</param>
        /// <param name="depositSchedule">depositSchedule.</param>
        /// <param name="inflationRate">inflationRate (default to 0.0F).</param>
        /// <param name="aggregationAccountIds">aggregationAccountIds.</param>
        public RetirementCalculatorPercentCoveredRequest(float? retirementSavings = 0.0F, int? currentAge = default(int?), List<Guid?> accountIds = default(List<Guid?>), float? retirementIncome = 0.0F, float? retirementTax = 0.0F, int? deathAge = default(int?), int? retirementAge = 65, float? portfolioReturn = default(float?), float? retirementExpenses = default(float?), CalculatorDepositSchedule1 depositSchedule = default(CalculatorDepositSchedule1), float? inflationRate = 0.0F, List<Guid?> aggregationAccountIds = default(List<Guid?>))
        {
            // to ensure "currentAge" is required (not null)
            if (currentAge == null)
            {
                throw new InvalidDataException("currentAge is a required property for RetirementCalculatorPercentCoveredRequest and cannot be null");
            }
            else
            {
                this.CurrentAge = currentAge;
            }
            // to ensure "deathAge" is required (not null)
            if (deathAge == null)
            {
                throw new InvalidDataException("deathAge is a required property for RetirementCalculatorPercentCoveredRequest and cannot be null");
            }
            else
            {
                this.DeathAge = deathAge;
            }
            // to ensure "portfolioReturn" is required (not null)
            if (portfolioReturn == null)
            {
                throw new InvalidDataException("portfolioReturn is a required property for RetirementCalculatorPercentCoveredRequest and cannot be null");
            }
            else
            {
                this.PortfolioReturn = portfolioReturn;
            }
            // to ensure "retirementExpenses" is required (not null)
            if (retirementExpenses == null)
            {
                throw new InvalidDataException("retirementExpenses is a required property for RetirementCalculatorPercentCoveredRequest and cannot be null");
            }
            else
            {
                this.RetirementExpenses = retirementExpenses;
            }
            // use default value if no "retirementSavings" provided
            if (retirementSavings == null)
            {
                this.RetirementSavings = 0.0F;
            }
            else
            {
                this.RetirementSavings = retirementSavings;
            }
            this.AccountIds = accountIds;
            // use default value if no "retirementIncome" provided
            if (retirementIncome == null)
            {
                this.RetirementIncome = 0.0F;
            }
            else
            {
                this.RetirementIncome = retirementIncome;
            }
            // use default value if no "retirementTax" provided
            if (retirementTax == null)
            {
                this.RetirementTax = 0.0F;
            }
            else
            {
                this.RetirementTax = retirementTax;
            }
            // use default value if no "retirementAge" provided
            if (retirementAge == null)
            {
                this.RetirementAge = 65;
            }
            else
            {
                this.RetirementAge = retirementAge;
            }
            this.DepositSchedule = depositSchedule;
            // use default value if no "inflationRate" provided
            if (inflationRate == null)
            {
                this.InflationRate = 0.0F;
            }
            else
            {
                this.InflationRate = inflationRate;
            }
            this.AggregationAccountIds = aggregationAccountIds;
        }
        
        /// <summary>
        /// Gets or Sets RetirementSavings
        /// </summary>
        [DataMember(Name="retirement_savings", EmitDefaultValue=false)]
        public float? RetirementSavings { get; set; }

        /// <summary>
        /// Gets or Sets CurrentAge
        /// </summary>
        [DataMember(Name="current_age", EmitDefaultValue=false)]
        public int? CurrentAge { get; set; }

        /// <summary>
        /// Gets or Sets AccountIds
        /// </summary>
        [DataMember(Name="account_ids", EmitDefaultValue=false)]
        public List<Guid?> AccountIds { get; set; }

        /// <summary>
        /// Gets or Sets RetirementIncome
        /// </summary>
        [DataMember(Name="retirement_income", EmitDefaultValue=false)]
        public float? RetirementIncome { get; set; }

        /// <summary>
        /// Gets or Sets RetirementTax
        /// </summary>
        [DataMember(Name="retirement_tax", EmitDefaultValue=false)]
        public float? RetirementTax { get; set; }

        /// <summary>
        /// Gets or Sets DeathAge
        /// </summary>
        [DataMember(Name="death_age", EmitDefaultValue=false)]
        public int? DeathAge { get; set; }

        /// <summary>
        /// Gets or Sets RetirementAge
        /// </summary>
        [DataMember(Name="retirement_age", EmitDefaultValue=false)]
        public int? RetirementAge { get; set; }

        /// <summary>
        /// Gets or Sets PortfolioReturn
        /// </summary>
        [DataMember(Name="portfolio_return", EmitDefaultValue=false)]
        public float? PortfolioReturn { get; set; }

        /// <summary>
        /// Gets or Sets RetirementExpenses
        /// </summary>
        [DataMember(Name="retirement_expenses", EmitDefaultValue=false)]
        public float? RetirementExpenses { get; set; }

        /// <summary>
        /// Gets or Sets DepositSchedule
        /// </summary>
        [DataMember(Name="deposit_schedule", EmitDefaultValue=false)]
        public CalculatorDepositSchedule1 DepositSchedule { get; set; }

        /// <summary>
        /// Gets or Sets InflationRate
        /// </summary>
        [DataMember(Name="inflation_rate", EmitDefaultValue=false)]
        public float? InflationRate { get; set; }

        /// <summary>
        /// Gets or Sets AggregationAccountIds
        /// </summary>
        [DataMember(Name="aggregation_account_ids", EmitDefaultValue=false)]
        public List<Guid?> AggregationAccountIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetirementCalculatorPercentCoveredRequest {\n");
            sb.Append("  RetirementSavings: ").Append(RetirementSavings).Append("\n");
            sb.Append("  CurrentAge: ").Append(CurrentAge).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  RetirementIncome: ").Append(RetirementIncome).Append("\n");
            sb.Append("  RetirementTax: ").Append(RetirementTax).Append("\n");
            sb.Append("  DeathAge: ").Append(DeathAge).Append("\n");
            sb.Append("  RetirementAge: ").Append(RetirementAge).Append("\n");
            sb.Append("  PortfolioReturn: ").Append(PortfolioReturn).Append("\n");
            sb.Append("  RetirementExpenses: ").Append(RetirementExpenses).Append("\n");
            sb.Append("  DepositSchedule: ").Append(DepositSchedule).Append("\n");
            sb.Append("  InflationRate: ").Append(InflationRate).Append("\n");
            sb.Append("  AggregationAccountIds: ").Append(AggregationAccountIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RetirementCalculatorPercentCoveredRequest);
        }

        /// <summary>
        /// Returns true if RetirementCalculatorPercentCoveredRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RetirementCalculatorPercentCoveredRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetirementCalculatorPercentCoveredRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RetirementSavings == input.RetirementSavings ||
                    (this.RetirementSavings != null &&
                    this.RetirementSavings.Equals(input.RetirementSavings))
                ) && 
                (
                    this.CurrentAge == input.CurrentAge ||
                    (this.CurrentAge != null &&
                    this.CurrentAge.Equals(input.CurrentAge))
                ) && 
                (
                    this.AccountIds == input.AccountIds ||
                    this.AccountIds != null &&
                    this.AccountIds.SequenceEqual(input.AccountIds)
                ) && 
                (
                    this.RetirementIncome == input.RetirementIncome ||
                    (this.RetirementIncome != null &&
                    this.RetirementIncome.Equals(input.RetirementIncome))
                ) && 
                (
                    this.RetirementTax == input.RetirementTax ||
                    (this.RetirementTax != null &&
                    this.RetirementTax.Equals(input.RetirementTax))
                ) && 
                (
                    this.DeathAge == input.DeathAge ||
                    (this.DeathAge != null &&
                    this.DeathAge.Equals(input.DeathAge))
                ) && 
                (
                    this.RetirementAge == input.RetirementAge ||
                    (this.RetirementAge != null &&
                    this.RetirementAge.Equals(input.RetirementAge))
                ) && 
                (
                    this.PortfolioReturn == input.PortfolioReturn ||
                    (this.PortfolioReturn != null &&
                    this.PortfolioReturn.Equals(input.PortfolioReturn))
                ) && 
                (
                    this.RetirementExpenses == input.RetirementExpenses ||
                    (this.RetirementExpenses != null &&
                    this.RetirementExpenses.Equals(input.RetirementExpenses))
                ) && 
                (
                    this.DepositSchedule == input.DepositSchedule ||
                    (this.DepositSchedule != null &&
                    this.DepositSchedule.Equals(input.DepositSchedule))
                ) && 
                (
                    this.InflationRate == input.InflationRate ||
                    (this.InflationRate != null &&
                    this.InflationRate.Equals(input.InflationRate))
                ) && 
                (
                    this.AggregationAccountIds == input.AggregationAccountIds ||
                    this.AggregationAccountIds != null &&
                    this.AggregationAccountIds.SequenceEqual(input.AggregationAccountIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RetirementSavings != null)
                    hashCode = hashCode * 59 + this.RetirementSavings.GetHashCode();
                if (this.CurrentAge != null)
                    hashCode = hashCode * 59 + this.CurrentAge.GetHashCode();
                if (this.AccountIds != null)
                    hashCode = hashCode * 59 + this.AccountIds.GetHashCode();
                if (this.RetirementIncome != null)
                    hashCode = hashCode * 59 + this.RetirementIncome.GetHashCode();
                if (this.RetirementTax != null)
                    hashCode = hashCode * 59 + this.RetirementTax.GetHashCode();
                if (this.DeathAge != null)
                    hashCode = hashCode * 59 + this.DeathAge.GetHashCode();
                if (this.RetirementAge != null)
                    hashCode = hashCode * 59 + this.RetirementAge.GetHashCode();
                if (this.PortfolioReturn != null)
                    hashCode = hashCode * 59 + this.PortfolioReturn.GetHashCode();
                if (this.RetirementExpenses != null)
                    hashCode = hashCode * 59 + this.RetirementExpenses.GetHashCode();
                if (this.DepositSchedule != null)
                    hashCode = hashCode * 59 + this.DepositSchedule.GetHashCode();
                if (this.InflationRate != null)
                    hashCode = hashCode * 59 + this.InflationRate.GetHashCode();
                if (this.AggregationAccountIds != null)
                    hashCode = hashCode * 59 + this.AggregationAccountIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RetirementSavings (float?) minimum
            if(this.RetirementSavings < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RetirementSavings, must be a value greater than or equal to 0.", new [] { "RetirementSavings" });
            }

            // CurrentAge (int?) minimum
            if(this.CurrentAge < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrentAge, must be a value greater than or equal to 0.", new [] { "CurrentAge" });
            }

            // RetirementIncome (float?) minimum
            if(this.RetirementIncome < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RetirementIncome, must be a value greater than or equal to 0.", new [] { "RetirementIncome" });
            }

            // RetirementTax (float?) maximum
            if(this.RetirementTax > (float?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RetirementTax, must be a value less than or equal to 1.", new [] { "RetirementTax" });
            }

            // RetirementTax (float?) minimum
            if(this.RetirementTax < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RetirementTax, must be a value greater than or equal to 0.", new [] { "RetirementTax" });
            }

            // DeathAge (int?) minimum
            if(this.DeathAge < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DeathAge, must be a value greater than or equal to 0.", new [] { "DeathAge" });
            }

            // RetirementAge (int?) minimum
            if(this.RetirementAge < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RetirementAge, must be a value greater than or equal to 0.", new [] { "RetirementAge" });
            }

            // PortfolioReturn (float?) minimum
            if(this.PortfolioReturn < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PortfolioReturn, must be a value greater than or equal to -1.", new [] { "PortfolioReturn" });
            }

            // RetirementExpenses (float?) minimum
            if(this.RetirementExpenses < (float?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RetirementExpenses, must be a value greater than or equal to 0.", new [] { "RetirementExpenses" });
            }

            // InflationRate (float?) minimum
            if(this.InflationRate < (float?)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InflationRate, must be a value greater than or equal to -1.", new [] { "InflationRate" });
            }

            yield break;
        }
    }

}
