# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from atom_api.models.spending_analysis_response_income import SpendingAnalysisResponseIncome  # noqa: F401,E501
from atom_api.models.spending_analysis_response_net import SpendingAnalysisResponseNet  # noqa: F401,E501
from atom_api.models.spending_analysis_response_spending import SpendingAnalysisResponseSpending  # noqa: F401,E501
from atom_api.models.spending_analysis_response_spending_by_category import SpendingAnalysisResponseSpendingByCategory  # noqa: F401,E501
from atom_api.models.spending_analysis_response_spending_history import SpendingAnalysisResponseSpendingHistory  # noqa: F401,E501


class SpendingAnalysisResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'spending_history': 'list[SpendingAnalysisResponseSpendingHistory]',
        'benchmark_spending_history': 'list[SpendingAnalysisResponseSpendingHistory]',
        'income': 'SpendingAnalysisResponseIncome',
        'spending': 'SpendingAnalysisResponseSpending',
        'net': 'SpendingAnalysisResponseNet',
        'spending_by_category': 'list[SpendingAnalysisResponseSpendingByCategory]'
    }

    attribute_map = {
        'spending_history': 'spending_history',
        'benchmark_spending_history': 'benchmark_spending_history',
        'income': 'income',
        'spending': 'spending',
        'net': 'net',
        'spending_by_category': 'spending_by_category'
    }

    def __init__(self, spending_history=None, benchmark_spending_history=None, income=None, spending=None, net=None, spending_by_category=None):  # noqa: E501
        """SpendingAnalysisResponse - a model defined in Swagger"""  # noqa: E501

        self._spending_history = None
        self._benchmark_spending_history = None
        self._income = None
        self._spending = None
        self._net = None
        self._spending_by_category = None
        self.discriminator = None

        if spending_history is not None:
            self.spending_history = spending_history
        if benchmark_spending_history is not None:
            self.benchmark_spending_history = benchmark_spending_history
        if income is not None:
            self.income = income
        if spending is not None:
            self.spending = spending
        if net is not None:
            self.net = net
        if spending_by_category is not None:
            self.spending_by_category = spending_by_category

    @property
    def spending_history(self):
        """Gets the spending_history of this SpendingAnalysisResponse.  # noqa: E501


        :return: The spending_history of this SpendingAnalysisResponse.  # noqa: E501
        :rtype: list[SpendingAnalysisResponseSpendingHistory]
        """
        return self._spending_history

    @spending_history.setter
    def spending_history(self, spending_history):
        """Sets the spending_history of this SpendingAnalysisResponse.


        :param spending_history: The spending_history of this SpendingAnalysisResponse.  # noqa: E501
        :type: list[SpendingAnalysisResponseSpendingHistory]
        """

        self._spending_history = spending_history

    @property
    def benchmark_spending_history(self):
        """Gets the benchmark_spending_history of this SpendingAnalysisResponse.  # noqa: E501


        :return: The benchmark_spending_history of this SpendingAnalysisResponse.  # noqa: E501
        :rtype: list[SpendingAnalysisResponseSpendingHistory]
        """
        return self._benchmark_spending_history

    @benchmark_spending_history.setter
    def benchmark_spending_history(self, benchmark_spending_history):
        """Sets the benchmark_spending_history of this SpendingAnalysisResponse.


        :param benchmark_spending_history: The benchmark_spending_history of this SpendingAnalysisResponse.  # noqa: E501
        :type: list[SpendingAnalysisResponseSpendingHistory]
        """

        self._benchmark_spending_history = benchmark_spending_history

    @property
    def income(self):
        """Gets the income of this SpendingAnalysisResponse.  # noqa: E501


        :return: The income of this SpendingAnalysisResponse.  # noqa: E501
        :rtype: SpendingAnalysisResponseIncome
        """
        return self._income

    @income.setter
    def income(self, income):
        """Sets the income of this SpendingAnalysisResponse.


        :param income: The income of this SpendingAnalysisResponse.  # noqa: E501
        :type: SpendingAnalysisResponseIncome
        """

        self._income = income

    @property
    def spending(self):
        """Gets the spending of this SpendingAnalysisResponse.  # noqa: E501


        :return: The spending of this SpendingAnalysisResponse.  # noqa: E501
        :rtype: SpendingAnalysisResponseSpending
        """
        return self._spending

    @spending.setter
    def spending(self, spending):
        """Sets the spending of this SpendingAnalysisResponse.


        :param spending: The spending of this SpendingAnalysisResponse.  # noqa: E501
        :type: SpendingAnalysisResponseSpending
        """

        self._spending = spending

    @property
    def net(self):
        """Gets the net of this SpendingAnalysisResponse.  # noqa: E501


        :return: The net of this SpendingAnalysisResponse.  # noqa: E501
        :rtype: SpendingAnalysisResponseNet
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this SpendingAnalysisResponse.


        :param net: The net of this SpendingAnalysisResponse.  # noqa: E501
        :type: SpendingAnalysisResponseNet
        """

        self._net = net

    @property
    def spending_by_category(self):
        """Gets the spending_by_category of this SpendingAnalysisResponse.  # noqa: E501


        :return: The spending_by_category of this SpendingAnalysisResponse.  # noqa: E501
        :rtype: list[SpendingAnalysisResponseSpendingByCategory]
        """
        return self._spending_by_category

    @spending_by_category.setter
    def spending_by_category(self, spending_by_category):
        """Sets the spending_by_category of this SpendingAnalysisResponse.


        :param spending_by_category: The spending_by_category of this SpendingAnalysisResponse.  # noqa: E501
        :type: list[SpendingAnalysisResponseSpendingByCategory]
        """

        self._spending_by_category = spending_by_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpendingAnalysisResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpendingAnalysisResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
