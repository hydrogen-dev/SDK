# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AggregationAccountTransactionPayloadInvestment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trade_signal': 'str',
        'ticker': 'str',
        'ticker_name': 'str',
        'price': 'float',
        'quantity': 'float',
        'fee': 'float',
        'status': 'str',
        'settle_date': 'str'
    }

    attribute_map = {
        'trade_signal': 'trade_signal',
        'ticker': 'ticker',
        'ticker_name': 'ticker_name',
        'price': 'price',
        'quantity': 'quantity',
        'fee': 'fee',
        'status': 'status',
        'settle_date': 'settle_date'
    }

    def __init__(self, trade_signal=None, ticker=None, ticker_name=None, price=None, quantity=None, fee=None, status=None, settle_date=None):  # noqa: E501
        """AggregationAccountTransactionPayloadInvestment - a model defined in Swagger"""  # noqa: E501

        self._trade_signal = None
        self._ticker = None
        self._ticker_name = None
        self._price = None
        self._quantity = None
        self._fee = None
        self._status = None
        self._settle_date = None
        self.discriminator = None

        self.trade_signal = trade_signal
        self.ticker = ticker
        if ticker_name is not None:
            self.ticker_name = ticker_name
        self.price = price
        self.quantity = quantity
        if fee is not None:
            self.fee = fee
        if status is not None:
            self.status = status
        if settle_date is not None:
            self.settle_date = settle_date

    @property
    def trade_signal(self):
        """Gets the trade_signal of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        Trade signal for an investment transaction  # noqa: E501

        :return: The trade_signal of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: str
        """
        return self._trade_signal

    @trade_signal.setter
    def trade_signal(self, trade_signal):
        """Sets the trade_signal of this AggregationAccountTransactionPayloadInvestment.

        Trade signal for an investment transaction  # noqa: E501

        :param trade_signal: The trade_signal of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: str
        """
        if trade_signal is None:
            raise ValueError("Invalid value for `trade_signal`, must not be `None`")  # noqa: E501

        self._trade_signal = trade_signal

    @property
    def ticker(self):
        """Gets the ticker of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        Ticker of the security for an investment transaction  # noqa: E501

        :return: The ticker of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this AggregationAccountTransactionPayloadInvestment.

        Ticker of the security for an investment transaction  # noqa: E501

        :param ticker: The ticker of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def ticker_name(self):
        """Gets the ticker_name of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        Ticker name of the security for an investment transaction  # noqa: E501

        :return: The ticker_name of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: str
        """
        return self._ticker_name

    @ticker_name.setter
    def ticker_name(self, ticker_name):
        """Sets the ticker_name of this AggregationAccountTransactionPayloadInvestment.

        Ticker name of the security for an investment transaction  # noqa: E501

        :param ticker_name: The ticker_name of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: str
        """

        self._ticker_name = ticker_name

    @property
    def price(self):
        """Gets the price of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        Price of the security for an investment transaction  # noqa: E501

        :return: The price of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AggregationAccountTransactionPayloadInvestment.

        Price of the security for an investment transaction  # noqa: E501

        :param price: The price of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        The number of units involved in this transaction, as reported by the financial institution  # noqa: E501

        :return: The quantity of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AggregationAccountTransactionPayloadInvestment.

        The number of units involved in this transaction, as reported by the financial institution  # noqa: E501

        :param quantity: The quantity of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def fee(self):
        """Gets the fee of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        Fee that is part of the transaction  # noqa: E501

        :return: The fee of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this AggregationAccountTransactionPayloadInvestment.

        Fee that is part of the transaction  # noqa: E501

        :param fee: The fee of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def status(self):
        """Gets the status of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        The position of an investment transaction within its lifecycle such as “Pending” or “Posted”  # noqa: E501

        :return: The status of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AggregationAccountTransactionPayloadInvestment.

        The position of an investment transaction within its lifecycle such as “Pending” or “Posted”  # noqa: E501

        :param status: The status of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def settle_date(self):
        """Gets the settle_date of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501

        Date on which this transaction was finalized  # noqa: E501

        :return: The settle_date of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :rtype: str
        """
        return self._settle_date

    @settle_date.setter
    def settle_date(self, settle_date):
        """Sets the settle_date of this AggregationAccountTransactionPayloadInvestment.

        Date on which this transaction was finalized  # noqa: E501

        :param settle_date: The settle_date of this AggregationAccountTransactionPayloadInvestment.  # noqa: E501
        :type: str
        """

        self._settle_date = settle_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggregationAccountTransactionPayloadInvestment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregationAccountTransactionPayloadInvestment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
