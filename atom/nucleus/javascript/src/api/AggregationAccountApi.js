/**
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AggregationAccount', 'model/AggregationAccountBalance', 'model/AggregationAccountHolding', 'model/AggregationAccountTransaction', 'model/PageAggregationAccount', 'model/PageAggregationAccountBalance', 'model/PageAggregationAccountHolding', 'model/PageAggregationAccountTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AggregationAccount'), require('../model/AggregationAccountBalance'), require('../model/AggregationAccountHolding'), require('../model/AggregationAccountTransaction'), require('../model/PageAggregationAccount'), require('../model/PageAggregationAccountBalance'), require('../model/PageAggregationAccountHolding'), require('../model/PageAggregationAccountTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.HydrogenNucleusApi) {
      root.HydrogenNucleusApi = {};
    }
    root.HydrogenNucleusApi.AggregationAccountApi = factory(root.HydrogenNucleusApi.ApiClient, root.HydrogenNucleusApi.AggregationAccount, root.HydrogenNucleusApi.AggregationAccountBalance, root.HydrogenNucleusApi.AggregationAccountHolding, root.HydrogenNucleusApi.AggregationAccountTransaction, root.HydrogenNucleusApi.PageAggregationAccount, root.HydrogenNucleusApi.PageAggregationAccountBalance, root.HydrogenNucleusApi.PageAggregationAccountHolding, root.HydrogenNucleusApi.PageAggregationAccountTransaction);
  }
}(this, function(ApiClient, AggregationAccount, AggregationAccountBalance, AggregationAccountHolding, AggregationAccountTransaction, PageAggregationAccount, PageAggregationAccountBalance, PageAggregationAccountHolding, PageAggregationAccountTransaction) {
  'use strict';

  /**
   * AggregationAccount service.
   * @module api/AggregationAccountApi
   * @version 1.9.5
   */

  /**
   * Constructs a new AggregationAccountApi. 
   * @alias module:api/AggregationAccountApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAggregationAccountBalanceBulkUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountBalanceBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AggregationAccountBalance>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */
    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account with aggregate data for a business.
     * @param {String} businessId UUID business_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/AggregationAccountApi~getAggregationAccountOverviewByBusinessIdUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAggregationAccountOverviewByBusinessIdUsingGet = function(businessId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getAggregationAccountOverviewByBusinessIdUsingGet");
      }


      var pathParams = {
        'business_id': businessId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion'],
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
          '/nucleus/v1/business/{business_id}/aggregation_account_overview', 'GET',
          pathParams, queryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Create a bulk aggregation account balance
     * Create a balance records under an aggregation accounts.
     * @param {Array.<module:model/AggregationAccountBalance>} aggregationAccountBalance aggregationAccountBalance
     * @param {module:api/AggregationAccountApi~createAggregationAccountBalanceBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AggregationAccountBalance>}
     */
    this.createAggregationAccountBalanceBulkUsingPost = function(aggregationAccountBalance, callback) {
      var postBody = aggregationAccountBalance;

      // verify the required parameter 'aggregationAccountBalance' is set
      if (aggregationAccountBalance === undefined || aggregationAccountBalance === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalance' when calling createAggregationAccountBalanceBulkUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [AggregationAccountBalance];

      return this.apiClient.callApi(
        '/nucleus/v1/bulk_aggregation_account_balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAggregationAccountBalanceUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountBalanceUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account balance
     * Create a balance record under an aggregation account.
     * @param {module:model/AggregationAccountBalance} aggregationAccountBalance aggregationAccountBalance
     * @param {module:api/AggregationAccountApi~createAggregationAccountBalanceUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountBalance}
     */
    this.createAggregationAccountBalanceUsingPost = function(aggregationAccountBalance, callback) {
      var postBody = aggregationAccountBalance;

      // verify the required parameter 'aggregationAccountBalance' is set
      if (aggregationAccountBalance === undefined || aggregationAccountBalance === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalance' when calling createAggregationAccountBalanceUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccountBalance;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAggregationAccountBulkUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AggregationAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bulk aggregation account
     * Create a bulk aggregation account under a client.
     * @param {Array.<module:model/AggregationAccount>} aggregationAccountList aggregationAccountList
     * @param {module:api/AggregationAccountApi~createAggregationAccountBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AggregationAccount>}
     */
    this.createAggregationAccountBulkUsingPost = function(aggregationAccountList, callback) {
      var postBody = aggregationAccountList;

      // verify the required parameter 'aggregationAccountList' is set
      if (aggregationAccountList === undefined || aggregationAccountList === null) {
        throw new Error("Missing the required parameter 'aggregationAccountList' when calling createAggregationAccountBulkUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [AggregationAccount];

      return this.apiClient.callApi(
        '/nucleus/v1/bulk_aggregation_account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAggregationAccountHoldingBulkUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountHoldingBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AggregationAccountHolding>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bulk aggregation account holding
     * Create a bulk aggregation account holding.
     * @param {Array.<module:model/AggregationAccountHolding>} aggregationTransaction aggregationTransaction
     * @param {module:api/AggregationAccountApi~createAggregationAccountHoldingBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AggregationAccountHolding>}
     */
    this.createAggregationAccountHoldingBulkUsingPost = function(aggregationTransaction, callback) {
      var postBody = aggregationTransaction;

      // verify the required parameter 'aggregationTransaction' is set
      if (aggregationTransaction === undefined || aggregationTransaction === null) {
        throw new Error("Missing the required parameter 'aggregationTransaction' when calling createAggregationAccountHoldingBulkUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [AggregationAccountHolding];

      return this.apiClient.callApi(
        '/nucleus/v1/bulk_aggregation_account_holding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAggregationAccountHoldingUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountHoldingUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account holding
     * Create a holding record under an aggregation account.
     * @param {module:model/AggregationAccountHolding} aggregationAccountHolding aggregationAccountHolding
     * @param {module:api/AggregationAccountApi~createAggregationAccountHoldingUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountHolding}
     */
    this.createAggregationAccountHoldingUsingPost = function(aggregationAccountHolding, callback) {
      var postBody = aggregationAccountHolding;

      // verify the required parameter 'aggregationAccountHolding' is set
      if (aggregationAccountHolding === undefined || aggregationAccountHolding === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHolding' when calling createAggregationAccountHoldingUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccountHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAggregationAccountTransactionBulkUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountTransactionBulkUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AggregationAccountTransaction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bulk aggregation account transaction
     * Create a bulk transaction record under an aggregation account.
     * @param {Array.<module:model/AggregationAccountTransaction>} aggregationAccountTransactions aggregationAccountTransactions
     * @param {module:api/AggregationAccountApi~createAggregationAccountTransactionBulkUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AggregationAccountTransaction>}
     */
    this.createAggregationAccountTransactionBulkUsingPost = function(aggregationAccountTransactions, callback) {
      var postBody = aggregationAccountTransactions;

      // verify the required parameter 'aggregationAccountTransactions' is set
      if (aggregationAccountTransactions === undefined || aggregationAccountTransactions === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransactions' when calling createAggregationAccountTransactionBulkUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [AggregationAccountTransaction];

      return this.apiClient.callApi(
        '/nucleus/v1/bulk_aggregation_account_transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAggregationAccountTransactionUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountTransactionUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account transaction
     * Create a transaction record under an aggregation account.
     * @param {module:model/AggregationAccountTransaction} aggregationAccountTransaction aggregationAccountTransaction
     * @param {module:api/AggregationAccountApi~createAggregationAccountTransactionUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountTransaction}
     */
    this.createAggregationAccountTransactionUsingPost = function(aggregationAccountTransaction, callback) {
      var postBody = aggregationAccountTransaction;

      // verify the required parameter 'aggregationAccountTransaction' is set
      if (aggregationAccountTransaction === undefined || aggregationAccountTransaction === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransaction' when calling createAggregationAccountTransactionUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccountTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAggregationAccountUsingPost operation.
     * @callback module:api/AggregationAccountApi~createAggregationAccountUsingPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an aggregation account
     * Create an aggregation account under a client.
     * @param {module:model/AggregationAccount} aggregationAccount aggregationAccount
     * @param {module:api/AggregationAccountApi~createAggregationAccountUsingPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccount}
     */
    this.createAggregationAccountUsingPost = function(aggregationAccount, callback) {
      var postBody = aggregationAccount;

      // verify the required parameter 'aggregationAccount' is set
      if (aggregationAccount === undefined || aggregationAccount === null) {
        throw new Error("Missing the required parameter 'aggregationAccount' when calling createAggregationAccountUsingPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccount;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccountBalanceUsingDelete operation.
     * @callback module:api/AggregationAccountApi~deleteAggregationAccountBalanceUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account balance
     * Permanently delete a balance record for an aggregation account.
     * @param {String} aggregationAccountBalanceId UUID aggregation_account_balance_id
     * @param {module:api/AggregationAccountApi~deleteAggregationAccountBalanceUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccountBalanceUsingDelete = function(aggregationAccountBalanceId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountBalanceId' is set
      if (aggregationAccountBalanceId === undefined || aggregationAccountBalanceId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalanceId' when calling deleteAggregationAccountBalanceUsingDelete");
      }


      var pathParams = {
        'aggregation_account_balance_id': aggregationAccountBalanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccountHoldingUsingDelete operation.
     * @callback module:api/AggregationAccountApi~deleteAggregationAccountHoldingUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account holding
     * Permanently delete a holding record for an aggregation account.
     * @param {String} aggregationAccountHoldingId UUID aggregation_account_holding_id
     * @param {module:api/AggregationAccountApi~deleteAggregationAccountHoldingUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccountHoldingUsingDelete = function(aggregationAccountHoldingId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountHoldingId' is set
      if (aggregationAccountHoldingId === undefined || aggregationAccountHoldingId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHoldingId' when calling deleteAggregationAccountHoldingUsingDelete");
      }


      var pathParams = {
        'aggregation_account_holding_id': aggregationAccountHoldingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccountTransactionUsingDelete operation.
     * @callback module:api/AggregationAccountApi~deleteAggregationAccountTransactionUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account transaction
     * Permanently delete a transaction record for an aggregation account.
     * @param {String} aggregationAccountTransactionId UUID aggregation_account_transaction_id
     * @param {module:api/AggregationAccountApi~deleteAggregationAccountTransactionUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccountTransactionUsingDelete = function(aggregationAccountTransactionId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountTransactionId' is set
      if (aggregationAccountTransactionId === undefined || aggregationAccountTransactionId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransactionId' when calling deleteAggregationAccountTransactionUsingDelete");
      }


      var pathParams = {
        'aggregation_account_transaction_id': aggregationAccountTransactionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAggregationAccountUsingDelete operation.
     * @callback module:api/AggregationAccountApi~deleteAggregationAccountUsingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an aggregation account
     * Permanently delete an aggregation account under a client.
     * @param {String} aggregationAccountId UUID aggregation_account_id
     * @param {module:api/AggregationAccountApi~deleteAggregationAccountUsingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAggregationAccountUsingDelete = function(aggregationAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountId' is set
      if (aggregationAccountId === undefined || aggregationAccountId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountId' when calling deleteAggregationAccountUsingDelete");
      }


      var pathParams = {
        'aggregation_account_id': aggregationAccountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountAggregateDataUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountAggregateDataUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param {String} aggregationAccountId UUID aggregation_account_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/AggregationAccountApi~getAggregationAccountAggregateDataUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAggregationAccountAggregateDataUsingGet = function(aggregationAccountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'aggregationAccountId' is set
      if (aggregationAccountId === undefined || aggregationAccountId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountId' when calling getAggregationAccountAggregateDataUsingGet");
      }


      var pathParams = {
        'aggregation_account_id': aggregationAccountId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account/{aggregation_account_id}/aggregate_data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountAllUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAggregationAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation accounts
     * Get information for all aggregation accounts for all clients defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AggregationAccountApi~getAggregationAccountAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAggregationAccount}
     */
    this.getAggregationAccountAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAggregationAccount;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountBalanceAllUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountBalanceAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAggregationAccountBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation account balances
     * Get all of the balance records for all aggregation accounts defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AggregationAccountApi~getAggregationAccountBalanceAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAggregationAccountBalance}
     */
    this.getAggregationAccountBalanceAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAggregationAccountBalance;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountBalanceUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountBalanceUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account balance
     * Retrieve the information for a specific balance record for an aggregation account.
     * @param {String} aggregationAccountBalanceId UUID aggregation_account_balance_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/AggregationAccountApi~getAggregationAccountBalanceUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountBalance}
     */
    this.getAggregationAccountBalanceUsingGet = function(aggregationAccountBalanceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'aggregationAccountBalanceId' is set
      if (aggregationAccountBalanceId === undefined || aggregationAccountBalanceId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalanceId' when calling getAggregationAccountBalanceUsingGet");
      }


      var pathParams = {
        'aggregation_account_balance_id': aggregationAccountBalanceId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AggregationAccountBalance;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountHoldingAllUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountHoldingAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAggregationAccountHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation account holdings
     * Get all of the holding records for all aggregation accounts defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AggregationAccountApi~getAggregationAccountHoldingAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAggregationAccountHolding}
     */
    this.getAggregationAccountHoldingAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAggregationAccountHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountHoldingUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountHoldingUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account holding
     * Retrieve the information for a specific holding record for an aggregation account.
     * @param {String} aggregationAccountHoldingId UUID aggregation_account_holding_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/AggregationAccountApi~getAggregationAccountHoldingUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountHolding}
     */
    this.getAggregationAccountHoldingUsingGet = function(aggregationAccountHoldingId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'aggregationAccountHoldingId' is set
      if (aggregationAccountHoldingId === undefined || aggregationAccountHoldingId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHoldingId' when calling getAggregationAccountHoldingUsingGet");
      }


      var pathParams = {
        'aggregation_account_holding_id': aggregationAccountHoldingId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AggregationAccountHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountOverviewUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountOverviewUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account aggregate data
     * Retrieve the information for a specific aggregation account with aggregate data for a client.
     * @param {String} clientId UUID client_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/AggregationAccountApi~getAggregationAccountOverviewUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getAggregationAccountOverviewUsingGet = function(clientId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getAggregationAccountOverviewUsingGet");
      }


      var pathParams = {
        'client_id': clientId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/nucleus/v1/client/{client_id}/aggregation_account_overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountTransactionAllUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountTransactionAllUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageAggregationAccountTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all aggregation account transactions
     * Get all of the transaction records for all aggregation accounts defined for your firm.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.ascending ascending (default to false)
     * @param {String} opts.currencyConversion currency_conversion
     * @param {String} opts.filter filter
     * @param {String} opts.orderBy order_by (default to update_date)
     * @param {Number} opts.page page (default to 0)
     * @param {Number} opts.size size (default to 25)
     * @param {module:api/AggregationAccountApi~getAggregationAccountTransactionAllUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageAggregationAccountTransaction}
     */
    this.getAggregationAccountTransactionAllUsingGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ascending': opts['ascending'],
        'currency_conversion': opts['currencyConversion'],
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = PageAggregationAccountTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountTransactionUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountTransactionUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account transaction
     * Retrieve the information for a specific transaction record for an aggregation account.
     * @param {String} aggregationAccountTransactionId UUID aggregation_account_transaction_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.currencyConversion USD
     * @param {module:api/AggregationAccountApi~getAggregationAccountTransactionUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountTransaction}
     */
    this.getAggregationAccountTransactionUsingGet = function(aggregationAccountTransactionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'aggregationAccountTransactionId' is set
      if (aggregationAccountTransactionId === undefined || aggregationAccountTransactionId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransactionId' when calling getAggregationAccountTransactionUsingGet");
      }


      var pathParams = {
        'aggregation_account_transaction_id': aggregationAccountTransactionId
      };
      var queryParams = {
        'currency_conversion': opts['currencyConversion']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AggregationAccountTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregationAccountUsingGet operation.
     * @callback module:api/AggregationAccountApi~getAggregationAccountUsingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an aggregation account
     * Retrieve the information for a specific aggregation account associated with a client.
     * @param {String} aggregationAccountId UUID aggregation_account_id
     * @param {module:api/AggregationAccountApi~getAggregationAccountUsingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccount}
     */
    this.getAggregationAccountUsingGet = function(aggregationAccountId, callback) {
      var postBody = null;

      // verify the required parameter 'aggregationAccountId' is set
      if (aggregationAccountId === undefined || aggregationAccountId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountId' when calling getAggregationAccountUsingGet");
      }


      var pathParams = {
        'aggregation_account_id': aggregationAccountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = AggregationAccount;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountBalanceUsingPut operation.
     * @callback module:api/AggregationAccountApi~updateAggregationAccountBalanceUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountBalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account balance
     * Update a balance record for an aggregation account.
     * @param {module:model/AggregationAccountBalance} aggregationAccountBalance aggregation_account_balance
     * @param {String} aggregationAccountBalanceId UUID aggregation_account_balance_id
     * @param {module:api/AggregationAccountApi~updateAggregationAccountBalanceUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountBalance}
     */
    this.updateAggregationAccountBalanceUsingPut = function(aggregationAccountBalance, aggregationAccountBalanceId, callback) {
      var postBody = aggregationAccountBalance;

      // verify the required parameter 'aggregationAccountBalance' is set
      if (aggregationAccountBalance === undefined || aggregationAccountBalance === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalance' when calling updateAggregationAccountBalanceUsingPut");
      }

      // verify the required parameter 'aggregationAccountBalanceId' is set
      if (aggregationAccountBalanceId === undefined || aggregationAccountBalanceId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountBalanceId' when calling updateAggregationAccountBalanceUsingPut");
      }


      var pathParams = {
        'aggregation_account_balance_id': aggregationAccountBalanceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccountBalance;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountBulkUsingPut operation.
     * @callback module:api/AggregationAccountApi~updateAggregationAccountBulkUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AggregationAccount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a bulk aggregation account
     * Update a bulk aggregation account under a client.
     * @param {Array.<module:model/AggregationAccount>} aggregationAccountList aggregationAccountList
     * @param {module:api/AggregationAccountApi~updateAggregationAccountBulkUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AggregationAccount>}
     */
    this.updateAggregationAccountBulkUsingPut = function(aggregationAccountList, callback) {
      var postBody = aggregationAccountList;

      // verify the required parameter 'aggregationAccountList' is set
      if (aggregationAccountList === undefined || aggregationAccountList === null) {
        throw new Error("Missing the required parameter 'aggregationAccountList' when calling updateAggregationAccountBulkUsingPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [AggregationAccount];

      return this.apiClient.callApi(
        '/nucleus/v1/bulk_aggregation_account', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountHoldingBulkUsingPut operation.
     * @callback module:api/AggregationAccountApi~updateAggregationAccountHoldingBulkUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AggregationAccountHolding>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an bulk aggregation account holding
     * Update a bulk holding record for an aggregation account.
     * @param {Array.<module:model/AggregationAccountHolding>} aggregationAccountHolding aggregationAccountHolding
     * @param {module:api/AggregationAccountApi~updateAggregationAccountHoldingBulkUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AggregationAccountHolding>}
     */
    this.updateAggregationAccountHoldingBulkUsingPut = function(aggregationAccountHolding, callback) {
      var postBody = aggregationAccountHolding;

      // verify the required parameter 'aggregationAccountHolding' is set
      if (aggregationAccountHolding === undefined || aggregationAccountHolding === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHolding' when calling updateAggregationAccountHoldingBulkUsingPut");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [AggregationAccountHolding];

      return this.apiClient.callApi(
        '/nucleus/v1/bulk_aggregation_account_holding', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountHoldingUsingPut operation.
     * @callback module:api/AggregationAccountApi~updateAggregationAccountHoldingUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountHolding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account holding
     * Update a holding record for an aggregation account.
     * @param {module:model/AggregationAccountHolding} aggregationAccountHolding aggregation_account_holding
     * @param {String} aggregationAccountHoldingId UUID aggregation_account_holding_id
     * @param {module:api/AggregationAccountApi~updateAggregationAccountHoldingUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountHolding}
     */
    this.updateAggregationAccountHoldingUsingPut = function(aggregationAccountHolding, aggregationAccountHoldingId, callback) {
      var postBody = aggregationAccountHolding;

      // verify the required parameter 'aggregationAccountHolding' is set
      if (aggregationAccountHolding === undefined || aggregationAccountHolding === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHolding' when calling updateAggregationAccountHoldingUsingPut");
      }

      // verify the required parameter 'aggregationAccountHoldingId' is set
      if (aggregationAccountHoldingId === undefined || aggregationAccountHoldingId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountHoldingId' when calling updateAggregationAccountHoldingUsingPut");
      }


      var pathParams = {
        'aggregation_account_holding_id': aggregationAccountHoldingId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccountHolding;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountTransactionUsingPut operation.
     * @callback module:api/AggregationAccountApi~updateAggregationAccountTransactionUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccountTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account transaction
     * Update a transaction record for an aggregation account.
     * @param {module:model/AggregationAccountTransaction} aggregationAccountTransaction aggregation_account_transaction
     * @param {String} aggregationAccountTransactionId UUID aggregation_account_transaction_id
     * @param {module:api/AggregationAccountApi~updateAggregationAccountTransactionUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccountTransaction}
     */
    this.updateAggregationAccountTransactionUsingPut = function(aggregationAccountTransaction, aggregationAccountTransactionId, callback) {
      var postBody = aggregationAccountTransaction;

      // verify the required parameter 'aggregationAccountTransaction' is set
      if (aggregationAccountTransaction === undefined || aggregationAccountTransaction === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransaction' when calling updateAggregationAccountTransactionUsingPut");
      }

      // verify the required parameter 'aggregationAccountTransactionId' is set
      if (aggregationAccountTransactionId === undefined || aggregationAccountTransactionId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountTransactionId' when calling updateAggregationAccountTransactionUsingPut");
      }


      var pathParams = {
        'aggregation_account_transaction_id': aggregationAccountTransactionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccountTransaction;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAggregationAccountUsingPut operation.
     * @callback module:api/AggregationAccountApi~updateAggregationAccountUsingPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregationAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an aggregation account
     * Update the information for an aggregation account.
     * @param {module:model/AggregationAccount} aggregationAccount aggregation_account
     * @param {String} aggregationAccountId UUID aggregation_account_id
     * @param {module:api/AggregationAccountApi~updateAggregationAccountUsingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregationAccount}
     */
    this.updateAggregationAccountUsingPut = function(aggregationAccount, aggregationAccountId, callback) {
      var postBody = aggregationAccount;

      // verify the required parameter 'aggregationAccount' is set
      if (aggregationAccount === undefined || aggregationAccount === null) {
        throw new Error("Missing the required parameter 'aggregationAccount' when calling updateAggregationAccountUsingPut");
      }

      // verify the required parameter 'aggregationAccountId' is set
      if (aggregationAccountId === undefined || aggregationAccountId === null) {
        throw new Error("Missing the required parameter 'aggregationAccountId' when calling updateAggregationAccountUsingPut");
      }


      var pathParams = {
        'aggregation_account_id': aggregationAccountId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AggregationAccount;

      return this.apiClient.callApi(
        '/nucleus/v1/aggregation_account/{aggregation_account_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
