/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Stage Object
    /// </summary>
    [DataContract]
    public partial class Stage :  IEquatable<Stage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Stage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Stage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Stage" /> class.
        /// </summary>
        /// <param name="applicationId">application_id.</param>
        /// <param name="category">category.</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id.</param>
        /// <param name="isAccount">is_account.</param>
        /// <param name="isActive">is_active.</param>
        /// <param name="isBusiness">is_business.</param>
        /// <param name="isClient">is_client.</param>
        /// <param name="isClosed">is_closed.</param>
        /// <param name="isConverted">is_converted.</param>
        /// <param name="isVerified">is_verified.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">name (required).</param>
        /// <param name="orderIndex">orderIndex.</param>
        /// <param name="secondaryId">secondaryId.</param>
        /// <param name="updateDate">updateDate.</param>
        public Stage(Guid? applicationId = default(Guid?), string category = default(string), DateTime? createDate = default(DateTime?), string description = default(string), Guid? id = default(Guid?), bool? isAccount = default(bool?), bool? isActive = default(bool?), bool? isBusiness = default(bool?), bool? isClient = default(bool?), bool? isClosed = default(bool?), bool? isConverted = default(bool?), bool? isVerified = default(bool?), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string), int? orderIndex = default(int?), string secondaryId = default(string), DateTime? updateDate = default(DateTime?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Stage and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.ApplicationId = applicationId;
            this.Category = category;
            this.CreateDate = createDate;
            this.Description = description;
            this.Id = id;
            this.IsAccount = isAccount;
            this.IsActive = isActive;
            this.IsBusiness = isBusiness;
            this.IsClient = isClient;
            this.IsClosed = isClosed;
            this.IsConverted = isConverted;
            this.IsVerified = isVerified;
            this.Metadata = metadata;
            this.OrderIndex = orderIndex;
            this.SecondaryId = secondaryId;
            this.UpdateDate = updateDate;
        }
        
        /// <summary>
        /// application_id
        /// </summary>
        /// <value>application_id</value>
        [DataMember(Name="application_id", EmitDefaultValue=false)]
        public Guid? ApplicationId { get; set; }

        /// <summary>
        /// category
        /// </summary>
        /// <value>category</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="create_date", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// description
        /// </summary>
        /// <value>description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// is_account
        /// </summary>
        /// <value>is_account</value>
        [DataMember(Name="is_account", EmitDefaultValue=false)]
        public bool? IsAccount { get; set; }

        /// <summary>
        /// is_active
        /// </summary>
        /// <value>is_active</value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// is_business
        /// </summary>
        /// <value>is_business</value>
        [DataMember(Name="is_business", EmitDefaultValue=false)]
        public bool? IsBusiness { get; set; }

        /// <summary>
        /// is_client
        /// </summary>
        /// <value>is_client</value>
        [DataMember(Name="is_client", EmitDefaultValue=false)]
        public bool? IsClient { get; set; }

        /// <summary>
        /// is_closed
        /// </summary>
        /// <value>is_closed</value>
        [DataMember(Name="is_closed", EmitDefaultValue=false)]
        public bool? IsClosed { get; set; }

        /// <summary>
        /// is_converted
        /// </summary>
        /// <value>is_converted</value>
        [DataMember(Name="is_converted", EmitDefaultValue=false)]
        public bool? IsConverted { get; set; }

        /// <summary>
        /// is_verified
        /// </summary>
        /// <value>is_verified</value>
        [DataMember(Name="is_verified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// name
        /// </summary>
        /// <value>name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// orderIndex
        /// </summary>
        /// <value>orderIndex</value>
        [DataMember(Name="order_index", EmitDefaultValue=false)]
        public int? OrderIndex { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryId
        /// </summary>
        [DataMember(Name="secondary_id", EmitDefaultValue=false)]
        public string SecondaryId { get; set; }

        /// <summary>
        /// Gets or Sets UpdateDate
        /// </summary>
        [DataMember(Name="update_date", EmitDefaultValue=false)]
        public DateTime? UpdateDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Stage {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAccount: ").Append(IsAccount).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsBusiness: ").Append(IsBusiness).Append("\n");
            sb.Append("  IsClient: ").Append(IsClient).Append("\n");
            sb.Append("  IsClosed: ").Append(IsClosed).Append("\n");
            sb.Append("  IsConverted: ").Append(IsConverted).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrderIndex: ").Append(OrderIndex).Append("\n");
            sb.Append("  SecondaryId: ").Append(SecondaryId).Append("\n");
            sb.Append("  UpdateDate: ").Append(UpdateDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Stage);
        }

        /// <summary>
        /// Returns true if Stage instances are equal
        /// </summary>
        /// <param name="input">Instance of Stage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Stage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationId == input.ApplicationId ||
                    (this.ApplicationId != null &&
                    this.ApplicationId.Equals(input.ApplicationId))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsAccount == input.IsAccount ||
                    (this.IsAccount != null &&
                    this.IsAccount.Equals(input.IsAccount))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsBusiness == input.IsBusiness ||
                    (this.IsBusiness != null &&
                    this.IsBusiness.Equals(input.IsBusiness))
                ) && 
                (
                    this.IsClient == input.IsClient ||
                    (this.IsClient != null &&
                    this.IsClient.Equals(input.IsClient))
                ) && 
                (
                    this.IsClosed == input.IsClosed ||
                    (this.IsClosed != null &&
                    this.IsClosed.Equals(input.IsClosed))
                ) && 
                (
                    this.IsConverted == input.IsConverted ||
                    (this.IsConverted != null &&
                    this.IsConverted.Equals(input.IsConverted))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OrderIndex == input.OrderIndex ||
                    (this.OrderIndex != null &&
                    this.OrderIndex.Equals(input.OrderIndex))
                ) && 
                (
                    this.SecondaryId == input.SecondaryId ||
                    (this.SecondaryId != null &&
                    this.SecondaryId.Equals(input.SecondaryId))
                ) && 
                (
                    this.UpdateDate == input.UpdateDate ||
                    (this.UpdateDate != null &&
                    this.UpdateDate.Equals(input.UpdateDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationId != null)
                    hashCode = hashCode * 59 + this.ApplicationId.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsAccount != null)
                    hashCode = hashCode * 59 + this.IsAccount.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsBusiness != null)
                    hashCode = hashCode * 59 + this.IsBusiness.GetHashCode();
                if (this.IsClient != null)
                    hashCode = hashCode * 59 + this.IsClient.GetHashCode();
                if (this.IsClosed != null)
                    hashCode = hashCode * 59 + this.IsClosed.GetHashCode();
                if (this.IsConverted != null)
                    hashCode = hashCode * 59 + this.IsConverted.GetHashCode();
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OrderIndex != null)
                    hashCode = hashCode * 59 + this.OrderIndex.GetHashCode();
                if (this.SecondaryId != null)
                    hashCode = hashCode * 59 + this.SecondaryId.GetHashCode();
                if (this.UpdateDate != null)
                    hashCode = hashCode * 59 + this.UpdateDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
