# coding: utf-8

"""
    Hydrogen Proton API

    Financial engineering module of Hydrogen Atom  # noqa: E501

    OpenAPI spec version: 1.9.2
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from proton_api.configuration import Configuration


class DimensionalRiskScoreRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'questionnaire_id': 'str',
        'client_id': 'str',
        'post_score': 'bool',
        'dims': 'list[str]',
        'answer_weights': 'list[float]',
        'max_answers': 'list[float]',
        'dim_weights': 'list[float]',
        'answers': 'list[float]',
        'answer_dims': 'list[list[str]]'
    }

    attribute_map = {
        'questionnaire_id': 'questionnaire_id',
        'client_id': 'client_id',
        'post_score': 'post_score',
        'dims': 'dims',
        'answer_weights': 'answer_weights',
        'max_answers': 'max_answers',
        'dim_weights': 'dim_weights',
        'answers': 'answers',
        'answer_dims': 'answer_dims'
    }

    def __init__(self, questionnaire_id=None, client_id=None, post_score=False, dims=None, answer_weights=None, max_answers=None, dim_weights=None, answers=None, answer_dims=None, _configuration=None):  # noqa: E501
        """DimensionalRiskScoreRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._questionnaire_id = None
        self._client_id = None
        self._post_score = None
        self._dims = None
        self._answer_weights = None
        self._max_answers = None
        self._dim_weights = None
        self._answers = None
        self._answer_dims = None
        self.discriminator = None

        if questionnaire_id is not None:
            self.questionnaire_id = questionnaire_id
        if client_id is not None:
            self.client_id = client_id
        if post_score is not None:
            self.post_score = post_score
        self.dims = dims
        if answer_weights is not None:
            self.answer_weights = answer_weights
        self.max_answers = max_answers
        if dim_weights is not None:
            self.dim_weights = dim_weights
        if answers is not None:
            self.answers = answers
        self.answer_dims = answer_dims

    @property
    def questionnaire_id(self):
        """Gets the questionnaire_id of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The questionnaire_id of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: str
        """
        return self._questionnaire_id

    @questionnaire_id.setter
    def questionnaire_id(self, questionnaire_id):
        """Sets the questionnaire_id of this DimensionalRiskScoreRequest.


        :param questionnaire_id: The questionnaire_id of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: str
        """

        self._questionnaire_id = questionnaire_id

    @property
    def client_id(self):
        """Gets the client_id of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The client_id of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DimensionalRiskScoreRequest.


        :param client_id: The client_id of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def post_score(self):
        """Gets the post_score of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The post_score of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: bool
        """
        return self._post_score

    @post_score.setter
    def post_score(self, post_score):
        """Sets the post_score of this DimensionalRiskScoreRequest.


        :param post_score: The post_score of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: bool
        """

        self._post_score = post_score

    @property
    def dims(self):
        """Gets the dims of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The dims of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._dims

    @dims.setter
    def dims(self, dims):
        """Sets the dims of this DimensionalRiskScoreRequest.


        :param dims: The dims of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and dims is None:
            raise ValueError("Invalid value for `dims`, must not be `None`")  # noqa: E501

        self._dims = dims

    @property
    def answer_weights(self):
        """Gets the answer_weights of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The answer_weights of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._answer_weights

    @answer_weights.setter
    def answer_weights(self, answer_weights):
        """Sets the answer_weights of this DimensionalRiskScoreRequest.


        :param answer_weights: The answer_weights of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: list[float]
        """

        self._answer_weights = answer_weights

    @property
    def max_answers(self):
        """Gets the max_answers of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The max_answers of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_answers

    @max_answers.setter
    def max_answers(self, max_answers):
        """Sets the max_answers of this DimensionalRiskScoreRequest.


        :param max_answers: The max_answers of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: list[float]
        """
        if self._configuration.client_side_validation and max_answers is None:
            raise ValueError("Invalid value for `max_answers`, must not be `None`")  # noqa: E501

        self._max_answers = max_answers

    @property
    def dim_weights(self):
        """Gets the dim_weights of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The dim_weights of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._dim_weights

    @dim_weights.setter
    def dim_weights(self, dim_weights):
        """Sets the dim_weights of this DimensionalRiskScoreRequest.


        :param dim_weights: The dim_weights of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: list[float]
        """

        self._dim_weights = dim_weights

    @property
    def answers(self):
        """Gets the answers of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The answers of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: list[float]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this DimensionalRiskScoreRequest.


        :param answers: The answers of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: list[float]
        """

        self._answers = answers

    @property
    def answer_dims(self):
        """Gets the answer_dims of this DimensionalRiskScoreRequest.  # noqa: E501


        :return: The answer_dims of this DimensionalRiskScoreRequest.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._answer_dims

    @answer_dims.setter
    def answer_dims(self, answer_dims):
        """Sets the answer_dims of this DimensionalRiskScoreRequest.


        :param answer_dims: The answer_dims of this DimensionalRiskScoreRequest.  # noqa: E501
        :type: list[list[str]]
        """
        if self._configuration.client_side_validation and answer_dims is None:
            raise ValueError("Invalid value for `answer_dims`, must not be `None`")  # noqa: E501

        self._answer_dims = answer_dims

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DimensionalRiskScoreRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DimensionalRiskScoreRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DimensionalRiskScoreRequest):
            return True

        return self.to_dict() != other.to_dict()
