/**
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NodeRelationshipPayload', 'model/SecondaryId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NodeRelationshipPayload'), require('./SecondaryId'));
  } else {
    // Browser globals (root is window)
    if (!root.atom_api) {
      root.atom_api = {};
    }
    root.atom_api.CreateNodeRelationshipResponse = factory(root.atom_api.ApiClient, root.atom_api.NodeRelationshipPayload, root.atom_api.SecondaryId);
  }
}(this, function(ApiClient, NodeRelationshipPayload, SecondaryId) {
  'use strict';




  /**
   * The CreateNodeRelationshipResponse model module.
   * @module model/CreateNodeRelationshipResponse
   * @version 1.0.1
   */

  /**
   * Constructs a new <code>CreateNodeRelationshipResponse</code>.
   * @alias module:model/CreateNodeRelationshipResponse
   * @class
   * @implements module:model/NodeRelationshipPayload
   * @param answerId {String} The ID of the answer to a question_id that corresponds to the node relationship
   * @param value {String} Value of the answer
   * @param decisionTreeId {String} The ID of the decision tree to which the node relationship belongs
   * @param nodeParentId {String} The ID for the parent node.
   */
  var exports = function(answerId, value, decisionTreeId, nodeParentId) {
    var _this = this;

    NodeRelationshipPayload.call(_this, answerId, value, decisionTreeId, nodeParentId);


  };

  /**
   * Constructs a <code>CreateNodeRelationshipResponse</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CreateNodeRelationshipResponse} obj Optional instance to populate.
   * @return {module:model/CreateNodeRelationshipResponse} The populated <code>CreateNodeRelationshipResponse</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      NodeRelationshipPayload.constructFromObject(data, obj);
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('create_date')) {
        obj['create_date'] = ApiClient.convertToType(data['create_date'], 'String');
      }
    }
    return obj;
  }

  /**
   * ID of the node relationship
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * Datetime the node relationship was created
   * @member {String} create_date
   */
  exports.prototype['create_date'] = undefined;

  // Implement NodeRelationshipPayload interface:
  /**
   * The ID of the answer to a question_id that corresponds to the node relationship
   * @member {String} answer_id
   */
exports.prototype['answer_id'] = undefined;

  /**
   * Value of the answer
   * @member {String} value
   */
exports.prototype['value'] = undefined;

  /**
   * The ID of the decision tree to which the node relationship belongs
   * @member {String} decision_tree_id
   */
exports.prototype['decision_tree_id'] = undefined;

  /**
   * The ID for the parent node.
   * @member {String} node_parent_id
   */
exports.prototype['node_parent_id'] = undefined;

  /**
   * The ID for the child node.
   * @member {String} node_child_id
   */
exports.prototype['node_child_id'] = undefined;

  /**
   * Indicator if the node relationship represents the last point in the decision tree branch. true indicates it is the last point and that is maps to an allocation or model
   * @member {Boolean} is_leaf
   */
exports.prototype['is_leaf'] = undefined;

  /**
   * @member {module:model/SecondaryId} secondary_id
   */
exports.prototype['secondary_id'] = undefined;

  /**
   * Custom information associated with the node relationship in the format key:value
   * @member {Object} metadata
   */
exports.prototype['metadata'] = undefined;



  return exports;
}));


