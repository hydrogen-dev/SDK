<?php
/**
 * FinancialPlanningApi
 * PHP version 5
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com\hydrogen\proton\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com\hydrogen\proton\ApiException;
use com\hydrogen\proton\Configuration;
use com\hydrogen\proton\HeaderSelector;
use com\hydrogen\proton\ObjectSerializer;

/**
 * FinancialPlanningApi Class Doc Comment
 *
 * @category Class
 * @package  com\hydrogen\proton
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FinancialPlanningApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation educationCalculatorAnnualCost
     *
     * Education Calculator - Annual Cost
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorAnnualCostRequest $education_calculator_annual_cost_request Request payload for Education Calculator - Annual Cost (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function educationCalculatorAnnualCost($education_calculator_annual_cost_request)
    {
        list($response) = $this->educationCalculatorAnnualCostWithHttpInfo($education_calculator_annual_cost_request);
        return $response;
    }

    /**
     * Operation educationCalculatorAnnualCostWithHttpInfo
     *
     * Education Calculator - Annual Cost
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorAnnualCostRequest $education_calculator_annual_cost_request Request payload for Education Calculator - Annual Cost (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function educationCalculatorAnnualCostWithHttpInfo($education_calculator_annual_cost_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->educationCalculatorAnnualCostRequest($education_calculator_annual_cost_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation educationCalculatorAnnualCostAsync
     *
     * Education Calculator - Annual Cost
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorAnnualCostRequest $education_calculator_annual_cost_request Request payload for Education Calculator - Annual Cost (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function educationCalculatorAnnualCostAsync($education_calculator_annual_cost_request)
    {
        return $this->educationCalculatorAnnualCostAsyncWithHttpInfo($education_calculator_annual_cost_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation educationCalculatorAnnualCostAsyncWithHttpInfo
     *
     * Education Calculator - Annual Cost
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorAnnualCostRequest $education_calculator_annual_cost_request Request payload for Education Calculator - Annual Cost (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function educationCalculatorAnnualCostAsyncWithHttpInfo($education_calculator_annual_cost_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->educationCalculatorAnnualCostRequest($education_calculator_annual_cost_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'educationCalculatorAnnualCost'
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorAnnualCostRequest $education_calculator_annual_cost_request Request payload for Education Calculator - Annual Cost (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function educationCalculatorAnnualCostRequest($education_calculator_annual_cost_request)
    {
        // verify the required parameter 'education_calculator_annual_cost_request' is set
        if ($education_calculator_annual_cost_request === null || (is_array($education_calculator_annual_cost_request) && count($education_calculator_annual_cost_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $education_calculator_annual_cost_request when calling educationCalculatorAnnualCost'
            );
        }

        $resourcePath = '/education_calculator/annual_cost';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($education_calculator_annual_cost_request)) {
            $_tempBody = $education_calculator_annual_cost_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation educationCalculatorDepositAmount
     *
     * Education Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorDepositAmountRequest $education_calculator_deposit_amount_request Request payload for Education Calculator - Deposit Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function educationCalculatorDepositAmount($education_calculator_deposit_amount_request)
    {
        list($response) = $this->educationCalculatorDepositAmountWithHttpInfo($education_calculator_deposit_amount_request);
        return $response;
    }

    /**
     * Operation educationCalculatorDepositAmountWithHttpInfo
     *
     * Education Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorDepositAmountRequest $education_calculator_deposit_amount_request Request payload for Education Calculator - Deposit Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function educationCalculatorDepositAmountWithHttpInfo($education_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->educationCalculatorDepositAmountRequest($education_calculator_deposit_amount_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation educationCalculatorDepositAmountAsync
     *
     * Education Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorDepositAmountRequest $education_calculator_deposit_amount_request Request payload for Education Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function educationCalculatorDepositAmountAsync($education_calculator_deposit_amount_request)
    {
        return $this->educationCalculatorDepositAmountAsyncWithHttpInfo($education_calculator_deposit_amount_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation educationCalculatorDepositAmountAsyncWithHttpInfo
     *
     * Education Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorDepositAmountRequest $education_calculator_deposit_amount_request Request payload for Education Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function educationCalculatorDepositAmountAsyncWithHttpInfo($education_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->educationCalculatorDepositAmountRequest($education_calculator_deposit_amount_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'educationCalculatorDepositAmount'
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorDepositAmountRequest $education_calculator_deposit_amount_request Request payload for Education Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function educationCalculatorDepositAmountRequest($education_calculator_deposit_amount_request)
    {
        // verify the required parameter 'education_calculator_deposit_amount_request' is set
        if ($education_calculator_deposit_amount_request === null || (is_array($education_calculator_deposit_amount_request) && count($education_calculator_deposit_amount_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $education_calculator_deposit_amount_request when calling educationCalculatorDepositAmount'
            );
        }

        $resourcePath = '/education_calculator/deposit_amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($education_calculator_deposit_amount_request)) {
            $_tempBody = $education_calculator_deposit_amount_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation educationCalculatorPercentCovered
     *
     * Education Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorPercentCoveredRequest $education_calculator_percent_covered_request Request payload for Education Calculator - Percent Covered (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function educationCalculatorPercentCovered($education_calculator_percent_covered_request)
    {
        list($response) = $this->educationCalculatorPercentCoveredWithHttpInfo($education_calculator_percent_covered_request);
        return $response;
    }

    /**
     * Operation educationCalculatorPercentCoveredWithHttpInfo
     *
     * Education Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorPercentCoveredRequest $education_calculator_percent_covered_request Request payload for Education Calculator - Percent Covered (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function educationCalculatorPercentCoveredWithHttpInfo($education_calculator_percent_covered_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->educationCalculatorPercentCoveredRequest($education_calculator_percent_covered_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation educationCalculatorPercentCoveredAsync
     *
     * Education Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorPercentCoveredRequest $education_calculator_percent_covered_request Request payload for Education Calculator - Percent Covered (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function educationCalculatorPercentCoveredAsync($education_calculator_percent_covered_request)
    {
        return $this->educationCalculatorPercentCoveredAsyncWithHttpInfo($education_calculator_percent_covered_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation educationCalculatorPercentCoveredAsyncWithHttpInfo
     *
     * Education Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorPercentCoveredRequest $education_calculator_percent_covered_request Request payload for Education Calculator - Percent Covered (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function educationCalculatorPercentCoveredAsyncWithHttpInfo($education_calculator_percent_covered_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->educationCalculatorPercentCoveredRequest($education_calculator_percent_covered_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'educationCalculatorPercentCovered'
     *
     * @param  \com\hydrogen\proton\Model\EducationCalculatorPercentCoveredRequest $education_calculator_percent_covered_request Request payload for Education Calculator - Percent Covered (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function educationCalculatorPercentCoveredRequest($education_calculator_percent_covered_request)
    {
        // verify the required parameter 'education_calculator_percent_covered_request' is set
        if ($education_calculator_percent_covered_request === null || (is_array($education_calculator_percent_covered_request) && count($education_calculator_percent_covered_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $education_calculator_percent_covered_request when calling educationCalculatorPercentCovered'
            );
        }

        $resourcePath = '/education_calculator/percent_covered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($education_calculator_percent_covered_request)) {
            $_tempBody = $education_calculator_percent_covered_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mortgageCalculatorDownPayment
     *
     * Mortgage Calculator - Down Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorDownPaymentRequest $mortgage_calculator_down_payment_request Request payload for Mortgage Calculator - Down Payment (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function mortgageCalculatorDownPayment($mortgage_calculator_down_payment_request)
    {
        list($response) = $this->mortgageCalculatorDownPaymentWithHttpInfo($mortgage_calculator_down_payment_request);
        return $response;
    }

    /**
     * Operation mortgageCalculatorDownPaymentWithHttpInfo
     *
     * Mortgage Calculator - Down Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorDownPaymentRequest $mortgage_calculator_down_payment_request Request payload for Mortgage Calculator - Down Payment (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function mortgageCalculatorDownPaymentWithHttpInfo($mortgage_calculator_down_payment_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->mortgageCalculatorDownPaymentRequest($mortgage_calculator_down_payment_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mortgageCalculatorDownPaymentAsync
     *
     * Mortgage Calculator - Down Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorDownPaymentRequest $mortgage_calculator_down_payment_request Request payload for Mortgage Calculator - Down Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mortgageCalculatorDownPaymentAsync($mortgage_calculator_down_payment_request)
    {
        return $this->mortgageCalculatorDownPaymentAsyncWithHttpInfo($mortgage_calculator_down_payment_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mortgageCalculatorDownPaymentAsyncWithHttpInfo
     *
     * Mortgage Calculator - Down Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorDownPaymentRequest $mortgage_calculator_down_payment_request Request payload for Mortgage Calculator - Down Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mortgageCalculatorDownPaymentAsyncWithHttpInfo($mortgage_calculator_down_payment_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->mortgageCalculatorDownPaymentRequest($mortgage_calculator_down_payment_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mortgageCalculatorDownPayment'
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorDownPaymentRequest $mortgage_calculator_down_payment_request Request payload for Mortgage Calculator - Down Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mortgageCalculatorDownPaymentRequest($mortgage_calculator_down_payment_request)
    {
        // verify the required parameter 'mortgage_calculator_down_payment_request' is set
        if ($mortgage_calculator_down_payment_request === null || (is_array($mortgage_calculator_down_payment_request) && count($mortgage_calculator_down_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mortgage_calculator_down_payment_request when calling mortgageCalculatorDownPayment'
            );
        }

        $resourcePath = '/mortgage_calculator/down_payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($mortgage_calculator_down_payment_request)) {
            $_tempBody = $mortgage_calculator_down_payment_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mortgageCalculatorHomePrice
     *
     * Mortgage Calculator - Home Price
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorHomePriceRequest $mortgage_calculator_home_price_request Request payload for Mortgage Calculator - Home Price (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function mortgageCalculatorHomePrice($mortgage_calculator_home_price_request)
    {
        list($response) = $this->mortgageCalculatorHomePriceWithHttpInfo($mortgage_calculator_home_price_request);
        return $response;
    }

    /**
     * Operation mortgageCalculatorHomePriceWithHttpInfo
     *
     * Mortgage Calculator - Home Price
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorHomePriceRequest $mortgage_calculator_home_price_request Request payload for Mortgage Calculator - Home Price (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function mortgageCalculatorHomePriceWithHttpInfo($mortgage_calculator_home_price_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->mortgageCalculatorHomePriceRequest($mortgage_calculator_home_price_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mortgageCalculatorHomePriceAsync
     *
     * Mortgage Calculator - Home Price
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorHomePriceRequest $mortgage_calculator_home_price_request Request payload for Mortgage Calculator - Home Price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mortgageCalculatorHomePriceAsync($mortgage_calculator_home_price_request)
    {
        return $this->mortgageCalculatorHomePriceAsyncWithHttpInfo($mortgage_calculator_home_price_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mortgageCalculatorHomePriceAsyncWithHttpInfo
     *
     * Mortgage Calculator - Home Price
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorHomePriceRequest $mortgage_calculator_home_price_request Request payload for Mortgage Calculator - Home Price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mortgageCalculatorHomePriceAsyncWithHttpInfo($mortgage_calculator_home_price_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->mortgageCalculatorHomePriceRequest($mortgage_calculator_home_price_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mortgageCalculatorHomePrice'
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorHomePriceRequest $mortgage_calculator_home_price_request Request payload for Mortgage Calculator - Home Price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mortgageCalculatorHomePriceRequest($mortgage_calculator_home_price_request)
    {
        // verify the required parameter 'mortgage_calculator_home_price_request' is set
        if ($mortgage_calculator_home_price_request === null || (is_array($mortgage_calculator_home_price_request) && count($mortgage_calculator_home_price_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mortgage_calculator_home_price_request when calling mortgageCalculatorHomePrice'
            );
        }

        $resourcePath = '/mortgage_calculator/home_price';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($mortgage_calculator_home_price_request)) {
            $_tempBody = $mortgage_calculator_home_price_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mortgageCalculatorPeriodicPayment
     *
     * Mortgage Calculator - Periodic Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorPeriodicPaymentRequest $mortgage_calculator_periodic_payment_request Request payload for Mortgage Calculator - Periodic Payment (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function mortgageCalculatorPeriodicPayment($mortgage_calculator_periodic_payment_request)
    {
        list($response) = $this->mortgageCalculatorPeriodicPaymentWithHttpInfo($mortgage_calculator_periodic_payment_request);
        return $response;
    }

    /**
     * Operation mortgageCalculatorPeriodicPaymentWithHttpInfo
     *
     * Mortgage Calculator - Periodic Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorPeriodicPaymentRequest $mortgage_calculator_periodic_payment_request Request payload for Mortgage Calculator - Periodic Payment (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function mortgageCalculatorPeriodicPaymentWithHttpInfo($mortgage_calculator_periodic_payment_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->mortgageCalculatorPeriodicPaymentRequest($mortgage_calculator_periodic_payment_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation mortgageCalculatorPeriodicPaymentAsync
     *
     * Mortgage Calculator - Periodic Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorPeriodicPaymentRequest $mortgage_calculator_periodic_payment_request Request payload for Mortgage Calculator - Periodic Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mortgageCalculatorPeriodicPaymentAsync($mortgage_calculator_periodic_payment_request)
    {
        return $this->mortgageCalculatorPeriodicPaymentAsyncWithHttpInfo($mortgage_calculator_periodic_payment_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mortgageCalculatorPeriodicPaymentAsyncWithHttpInfo
     *
     * Mortgage Calculator - Periodic Payment
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorPeriodicPaymentRequest $mortgage_calculator_periodic_payment_request Request payload for Mortgage Calculator - Periodic Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mortgageCalculatorPeriodicPaymentAsyncWithHttpInfo($mortgage_calculator_periodic_payment_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->mortgageCalculatorPeriodicPaymentRequest($mortgage_calculator_periodic_payment_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mortgageCalculatorPeriodicPayment'
     *
     * @param  \com\hydrogen\proton\Model\MortgageCalculatorPeriodicPaymentRequest $mortgage_calculator_periodic_payment_request Request payload for Mortgage Calculator - Periodic Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mortgageCalculatorPeriodicPaymentRequest($mortgage_calculator_periodic_payment_request)
    {
        // verify the required parameter 'mortgage_calculator_periodic_payment_request' is set
        if ($mortgage_calculator_periodic_payment_request === null || (is_array($mortgage_calculator_periodic_payment_request) && count($mortgage_calculator_periodic_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mortgage_calculator_periodic_payment_request when calling mortgageCalculatorPeriodicPayment'
            );
        }

        $resourcePath = '/mortgage_calculator/periodic_payment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($mortgage_calculator_periodic_payment_request)) {
            $_tempBody = $mortgage_calculator_periodic_payment_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseCalculatorAmount
     *
     * Purchase Calculator - Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorAmountRequest $purchase_calculator_amount_request Request payload for Purchase Calculator - Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function purchaseCalculatorAmount($purchase_calculator_amount_request)
    {
        list($response) = $this->purchaseCalculatorAmountWithHttpInfo($purchase_calculator_amount_request);
        return $response;
    }

    /**
     * Operation purchaseCalculatorAmountWithHttpInfo
     *
     * Purchase Calculator - Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorAmountRequest $purchase_calculator_amount_request Request payload for Purchase Calculator - Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseCalculatorAmountWithHttpInfo($purchase_calculator_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->purchaseCalculatorAmountRequest($purchase_calculator_amount_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseCalculatorAmountAsync
     *
     * Purchase Calculator - Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorAmountRequest $purchase_calculator_amount_request Request payload for Purchase Calculator - Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseCalculatorAmountAsync($purchase_calculator_amount_request)
    {
        return $this->purchaseCalculatorAmountAsyncWithHttpInfo($purchase_calculator_amount_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseCalculatorAmountAsyncWithHttpInfo
     *
     * Purchase Calculator - Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorAmountRequest $purchase_calculator_amount_request Request payload for Purchase Calculator - Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseCalculatorAmountAsyncWithHttpInfo($purchase_calculator_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->purchaseCalculatorAmountRequest($purchase_calculator_amount_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseCalculatorAmount'
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorAmountRequest $purchase_calculator_amount_request Request payload for Purchase Calculator - Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseCalculatorAmountRequest($purchase_calculator_amount_request)
    {
        // verify the required parameter 'purchase_calculator_amount_request' is set
        if ($purchase_calculator_amount_request === null || (is_array($purchase_calculator_amount_request) && count($purchase_calculator_amount_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_calculator_amount_request when calling purchaseCalculatorAmount'
            );
        }

        $resourcePath = '/purchase_calculator/amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($purchase_calculator_amount_request)) {
            $_tempBody = $purchase_calculator_amount_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseCalculatorDepositAmount
     *
     * Purchase Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorDepositAmountRequest $purchase_calculator_deposit_amount_request Request payload for Purchase Calculator - Deposit Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function purchaseCalculatorDepositAmount($purchase_calculator_deposit_amount_request)
    {
        list($response) = $this->purchaseCalculatorDepositAmountWithHttpInfo($purchase_calculator_deposit_amount_request);
        return $response;
    }

    /**
     * Operation purchaseCalculatorDepositAmountWithHttpInfo
     *
     * Purchase Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorDepositAmountRequest $purchase_calculator_deposit_amount_request Request payload for Purchase Calculator - Deposit Amount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseCalculatorDepositAmountWithHttpInfo($purchase_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->purchaseCalculatorDepositAmountRequest($purchase_calculator_deposit_amount_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseCalculatorDepositAmountAsync
     *
     * Purchase Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorDepositAmountRequest $purchase_calculator_deposit_amount_request Request payload for Purchase Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseCalculatorDepositAmountAsync($purchase_calculator_deposit_amount_request)
    {
        return $this->purchaseCalculatorDepositAmountAsyncWithHttpInfo($purchase_calculator_deposit_amount_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseCalculatorDepositAmountAsyncWithHttpInfo
     *
     * Purchase Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorDepositAmountRequest $purchase_calculator_deposit_amount_request Request payload for Purchase Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseCalculatorDepositAmountAsyncWithHttpInfo($purchase_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->purchaseCalculatorDepositAmountRequest($purchase_calculator_deposit_amount_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseCalculatorDepositAmount'
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorDepositAmountRequest $purchase_calculator_deposit_amount_request Request payload for Purchase Calculator - Deposit Amount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseCalculatorDepositAmountRequest($purchase_calculator_deposit_amount_request)
    {
        // verify the required parameter 'purchase_calculator_deposit_amount_request' is set
        if ($purchase_calculator_deposit_amount_request === null || (is_array($purchase_calculator_deposit_amount_request) && count($purchase_calculator_deposit_amount_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_calculator_deposit_amount_request when calling purchaseCalculatorDepositAmount'
            );
        }

        $resourcePath = '/purchase_calculator/deposit_amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($purchase_calculator_deposit_amount_request)) {
            $_tempBody = $purchase_calculator_deposit_amount_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseCalculatorHorizon
     *
     * Purchase Calculator - Horizon
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorHorizonRequest $purchase_calculator_horizon_request Request payload for Purchase Calculator - Horizon (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function purchaseCalculatorHorizon($purchase_calculator_horizon_request)
    {
        list($response) = $this->purchaseCalculatorHorizonWithHttpInfo($purchase_calculator_horizon_request);
        return $response;
    }

    /**
     * Operation purchaseCalculatorHorizonWithHttpInfo
     *
     * Purchase Calculator - Horizon
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorHorizonRequest $purchase_calculator_horizon_request Request payload for Purchase Calculator - Horizon (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseCalculatorHorizonWithHttpInfo($purchase_calculator_horizon_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->purchaseCalculatorHorizonRequest($purchase_calculator_horizon_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseCalculatorHorizonAsync
     *
     * Purchase Calculator - Horizon
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorHorizonRequest $purchase_calculator_horizon_request Request payload for Purchase Calculator - Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseCalculatorHorizonAsync($purchase_calculator_horizon_request)
    {
        return $this->purchaseCalculatorHorizonAsyncWithHttpInfo($purchase_calculator_horizon_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseCalculatorHorizonAsyncWithHttpInfo
     *
     * Purchase Calculator - Horizon
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorHorizonRequest $purchase_calculator_horizon_request Request payload for Purchase Calculator - Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseCalculatorHorizonAsyncWithHttpInfo($purchase_calculator_horizon_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->purchaseCalculatorHorizonRequest($purchase_calculator_horizon_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseCalculatorHorizon'
     *
     * @param  \com\hydrogen\proton\Model\PurchaseCalculatorHorizonRequest $purchase_calculator_horizon_request Request payload for Purchase Calculator - Horizon (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseCalculatorHorizonRequest($purchase_calculator_horizon_request)
    {
        // verify the required parameter 'purchase_calculator_horizon_request' is set
        if ($purchase_calculator_horizon_request === null || (is_array($purchase_calculator_horizon_request) && count($purchase_calculator_horizon_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_calculator_horizon_request when calling purchaseCalculatorHorizon'
            );
        }

        $resourcePath = '/purchase_calculator/horizon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($purchase_calculator_horizon_request)) {
            $_tempBody = $purchase_calculator_horizon_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retirementCalculatorDepositAmount
     *
     * Retirement Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorDepositAmountRequest $retirement_calculator_deposit_amount_request Request payload for Retirement Calculator - Deposit AMount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function retirementCalculatorDepositAmount($retirement_calculator_deposit_amount_request)
    {
        list($response) = $this->retirementCalculatorDepositAmountWithHttpInfo($retirement_calculator_deposit_amount_request);
        return $response;
    }

    /**
     * Operation retirementCalculatorDepositAmountWithHttpInfo
     *
     * Retirement Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorDepositAmountRequest $retirement_calculator_deposit_amount_request Request payload for Retirement Calculator - Deposit AMount (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function retirementCalculatorDepositAmountWithHttpInfo($retirement_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->retirementCalculatorDepositAmountRequest($retirement_calculator_deposit_amount_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retirementCalculatorDepositAmountAsync
     *
     * Retirement Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorDepositAmountRequest $retirement_calculator_deposit_amount_request Request payload for Retirement Calculator - Deposit AMount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retirementCalculatorDepositAmountAsync($retirement_calculator_deposit_amount_request)
    {
        return $this->retirementCalculatorDepositAmountAsyncWithHttpInfo($retirement_calculator_deposit_amount_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retirementCalculatorDepositAmountAsyncWithHttpInfo
     *
     * Retirement Calculator - Deposit Amount
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorDepositAmountRequest $retirement_calculator_deposit_amount_request Request payload for Retirement Calculator - Deposit AMount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retirementCalculatorDepositAmountAsyncWithHttpInfo($retirement_calculator_deposit_amount_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->retirementCalculatorDepositAmountRequest($retirement_calculator_deposit_amount_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retirementCalculatorDepositAmount'
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorDepositAmountRequest $retirement_calculator_deposit_amount_request Request payload for Retirement Calculator - Deposit AMount (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retirementCalculatorDepositAmountRequest($retirement_calculator_deposit_amount_request)
    {
        // verify the required parameter 'retirement_calculator_deposit_amount_request' is set
        if ($retirement_calculator_deposit_amount_request === null || (is_array($retirement_calculator_deposit_amount_request) && count($retirement_calculator_deposit_amount_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retirement_calculator_deposit_amount_request when calling retirementCalculatorDepositAmount'
            );
        }

        $resourcePath = '/retirement_calculator/deposit_amount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($retirement_calculator_deposit_amount_request)) {
            $_tempBody = $retirement_calculator_deposit_amount_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retirementCalculatorExpenses
     *
     * Retirement Calculator - Expenses
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorExpensesRequest $retirement_calculator_expenses_request Request payload for Retirement Calculator - Expenses (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function retirementCalculatorExpenses($retirement_calculator_expenses_request)
    {
        list($response) = $this->retirementCalculatorExpensesWithHttpInfo($retirement_calculator_expenses_request);
        return $response;
    }

    /**
     * Operation retirementCalculatorExpensesWithHttpInfo
     *
     * Retirement Calculator - Expenses
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorExpensesRequest $retirement_calculator_expenses_request Request payload for Retirement Calculator - Expenses (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function retirementCalculatorExpensesWithHttpInfo($retirement_calculator_expenses_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->retirementCalculatorExpensesRequest($retirement_calculator_expenses_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retirementCalculatorExpensesAsync
     *
     * Retirement Calculator - Expenses
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorExpensesRequest $retirement_calculator_expenses_request Request payload for Retirement Calculator - Expenses (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retirementCalculatorExpensesAsync($retirement_calculator_expenses_request)
    {
        return $this->retirementCalculatorExpensesAsyncWithHttpInfo($retirement_calculator_expenses_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retirementCalculatorExpensesAsyncWithHttpInfo
     *
     * Retirement Calculator - Expenses
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorExpensesRequest $retirement_calculator_expenses_request Request payload for Retirement Calculator - Expenses (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retirementCalculatorExpensesAsyncWithHttpInfo($retirement_calculator_expenses_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->retirementCalculatorExpensesRequest($retirement_calculator_expenses_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retirementCalculatorExpenses'
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorExpensesRequest $retirement_calculator_expenses_request Request payload for Retirement Calculator - Expenses (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retirementCalculatorExpensesRequest($retirement_calculator_expenses_request)
    {
        // verify the required parameter 'retirement_calculator_expenses_request' is set
        if ($retirement_calculator_expenses_request === null || (is_array($retirement_calculator_expenses_request) && count($retirement_calculator_expenses_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retirement_calculator_expenses_request when calling retirementCalculatorExpenses'
            );
        }

        $resourcePath = '/retirement_calculator/expenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($retirement_calculator_expenses_request)) {
            $_tempBody = $retirement_calculator_expenses_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retirementCalculatorPercentCovered
     *
     * Retirement Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorPercentCoveredRequest $retirement_calculator_percent_covered_request Request payload for Retirement Calculator - Percent Covered (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,object]
     */
    public function retirementCalculatorPercentCovered($retirement_calculator_percent_covered_request)
    {
        list($response) = $this->retirementCalculatorPercentCoveredWithHttpInfo($retirement_calculator_percent_covered_request);
        return $response;
    }

    /**
     * Operation retirementCalculatorPercentCoveredWithHttpInfo
     *
     * Retirement Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorPercentCoveredRequest $retirement_calculator_percent_covered_request Request payload for Retirement Calculator - Percent Covered (required)
     *
     * @throws \com\hydrogen\proton\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,object], HTTP status code, HTTP response headers (array of strings)
     */
    public function retirementCalculatorPercentCoveredWithHttpInfo($retirement_calculator_percent_covered_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->retirementCalculatorPercentCoveredRequest($retirement_calculator_percent_covered_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,object]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retirementCalculatorPercentCoveredAsync
     *
     * Retirement Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorPercentCoveredRequest $retirement_calculator_percent_covered_request Request payload for Retirement Calculator - Percent Covered (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retirementCalculatorPercentCoveredAsync($retirement_calculator_percent_covered_request)
    {
        return $this->retirementCalculatorPercentCoveredAsyncWithHttpInfo($retirement_calculator_percent_covered_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retirementCalculatorPercentCoveredAsyncWithHttpInfo
     *
     * Retirement Calculator - Percent Covered
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorPercentCoveredRequest $retirement_calculator_percent_covered_request Request payload for Retirement Calculator - Percent Covered (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retirementCalculatorPercentCoveredAsyncWithHttpInfo($retirement_calculator_percent_covered_request)
    {
        $returnType = 'map[string,object]';
        $request = $this->retirementCalculatorPercentCoveredRequest($retirement_calculator_percent_covered_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retirementCalculatorPercentCovered'
     *
     * @param  \com\hydrogen\proton\Model\RetirementCalculatorPercentCoveredRequest $retirement_calculator_percent_covered_request Request payload for Retirement Calculator - Percent Covered (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retirementCalculatorPercentCoveredRequest($retirement_calculator_percent_covered_request)
    {
        // verify the required parameter 'retirement_calculator_percent_covered_request' is set
        if ($retirement_calculator_percent_covered_request === null || (is_array($retirement_calculator_percent_covered_request) && count($retirement_calculator_percent_covered_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $retirement_calculator_percent_covered_request when calling retirementCalculatorPercentCovered'
            );
        }

        $resourcePath = '/retirement_calculator/percent_covered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($retirement_calculator_percent_covered_request)) {
            $_tempBody = $retirement_calculator_percent_covered_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
