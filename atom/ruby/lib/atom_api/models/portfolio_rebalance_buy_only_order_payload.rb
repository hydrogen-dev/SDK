=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'date'

module AtomApi
  class PortfolioRebalanceBuyOnlyOrderPayload
    # The ID of the transaction code to denote a buy transaction
    attr_accessor :buy_transaction_code_id

    # The ID of the transaction code to denote a sell transaction
    attr_accessor :sell_transaction_code_id

    # Buying threshold for the account as the number of shares. Defaults to 0
    attr_accessor :buy_threshold

    # The ID of the cash security for the portfolio
    attr_accessor :cash_sec_id

    # Indicates if the orders should be committed for execution. Defaults to true which indicates they should be committed
    attr_accessor :commit_orders

    # Indicates if purchasing/selling fractional shares of securities is allowed. Defaults to false which indicates it is allowed
    attr_accessor :non_fractional

    # Threshold for the minimum asset size the portfolio as a monetary amount for rebalancing to take place. Defaults to 0
    attr_accessor :port_threshold

    # Indicates if there are restrictions on the account that should be followed. Defaults to false which indicates there are not
    attr_accessor :restrictions_on

    # Selling threshold for the account as the number of shares. Defaults to 0
    attr_accessor :sell_threshold

    # Indicates if the account should be synced to strategic weights as opposed to current weights. Defaults to false which indicates it should not
    attr_accessor :use_strategic

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'buy_transaction_code_id' => :'buy_transaction_code_id',
        :'sell_transaction_code_id' => :'sell_transaction_code_id',
        :'buy_threshold' => :'buy_threshold',
        :'cash_sec_id' => :'cash_sec_id',
        :'commit_orders' => :'commit_orders',
        :'non_fractional' => :'non_fractional',
        :'port_threshold' => :'port_threshold',
        :'restrictions_on' => :'restrictions_on',
        :'sell_threshold' => :'sell_threshold',
        :'use_strategic' => :'use_strategic'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'buy_transaction_code_id' => :'String',
        :'sell_transaction_code_id' => :'String',
        :'buy_threshold' => :'Float',
        :'cash_sec_id' => :'String',
        :'commit_orders' => :'BOOLEAN',
        :'non_fractional' => :'BOOLEAN',
        :'port_threshold' => :'Float',
        :'restrictions_on' => :'BOOLEAN',
        :'sell_threshold' => :'Float',
        :'use_strategic' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'buy_transaction_code_id')
        self.buy_transaction_code_id = attributes[:'buy_transaction_code_id']
      end

      if attributes.has_key?(:'sell_transaction_code_id')
        self.sell_transaction_code_id = attributes[:'sell_transaction_code_id']
      end

      if attributes.has_key?(:'buy_threshold')
        self.buy_threshold = attributes[:'buy_threshold']
      else
        self.buy_threshold = 0.0
      end

      if attributes.has_key?(:'cash_sec_id')
        self.cash_sec_id = attributes[:'cash_sec_id']
      end

      if attributes.has_key?(:'commit_orders')
        self.commit_orders = attributes[:'commit_orders']
      else
        self.commit_orders = true
      end

      if attributes.has_key?(:'non_fractional')
        self.non_fractional = attributes[:'non_fractional']
      else
        self.non_fractional = false
      end

      if attributes.has_key?(:'port_threshold')
        self.port_threshold = attributes[:'port_threshold']
      else
        self.port_threshold = 0.0
      end

      if attributes.has_key?(:'restrictions_on')
        self.restrictions_on = attributes[:'restrictions_on']
      else
        self.restrictions_on = false
      end

      if attributes.has_key?(:'sell_threshold')
        self.sell_threshold = attributes[:'sell_threshold']
      else
        self.sell_threshold = 0.0
      end

      if attributes.has_key?(:'use_strategic')
        self.use_strategic = attributes[:'use_strategic']
      else
        self.use_strategic = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @buy_transaction_code_id.nil?
        invalid_properties.push('invalid value for "buy_transaction_code_id", buy_transaction_code_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @buy_transaction_code_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          buy_transaction_code_id == o.buy_transaction_code_id &&
          sell_transaction_code_id == o.sell_transaction_code_id &&
          buy_threshold == o.buy_threshold &&
          cash_sec_id == o.cash_sec_id &&
          commit_orders == o.commit_orders &&
          non_fractional == o.non_fractional &&
          port_threshold == o.port_threshold &&
          restrictions_on == o.restrictions_on &&
          sell_threshold == o.sell_threshold &&
          use_strategic == o.use_strategic
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [buy_transaction_code_id, sell_transaction_code_id, buy_threshold, cash_sec_id, commit_orders, non_fractional, port_threshold, restrictions_on, sell_threshold, use_strategic].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
