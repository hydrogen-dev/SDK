=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'uri'

module AtomApi
  class NucleusApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an account
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account(account_id, opts = {})
      delete_account_with_http_info(account_id, opts)
      nil
    end

    # Delete an account
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.delete_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account allocation
    # @param account_allocation_id UUID of an account allocation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_allocation(account_allocation_id, opts = {})
      delete_account_allocation_with_http_info(account_allocation_id, opts)
      nil
    end

    # Delete an account allocation
    # @param account_allocation_id UUID of an account allocation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_allocation_with_http_info(account_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_account_allocation ...'
      end
      # verify the required parameter 'account_allocation_id' is set
      if @api_client.config.client_side_validation && account_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_allocation_id' when calling NucleusApi.delete_account_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation/{account_allocation_id}'.sub('{' + 'account_allocation_id' + '}', account_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_account_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account's permissions
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_permission(account_id, opts = {})
      delete_account_permission_with_http_info(account_id, opts)
      nil
    end

    # Delete an account&#39;s permissions
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_permission_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_account_permission ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.delete_account_permission"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_account_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account stage
    # @param stage_id UUID of an account stage
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_stage(stage_id, opts = {})
      delete_account_stage_with_http_info(stage_id, opts)
      nil
    end

    # Delete an account stage
    # @param stage_id UUID of an account stage
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_stage_with_http_info(stage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_account_stage ...'
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling NucleusApi.delete_account_stage"
      end
      # resource path
      local_var_path = '/nucleus/v1/stage/{stage_id}'.sub('{' + 'stage_id' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_account_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account status
    # @param account_status_id UUID of an account status
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_status(account_status_id, opts = {})
      delete_account_status_with_http_info(account_status_id, opts)
      nil
    end

    # Delete an account status
    # @param account_status_id UUID of an account status
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_status_with_http_info(account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_account_status ...'
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling NucleusApi.delete_account_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_account_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account type
    # @param account_type_id UUID of an account type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_type(account_type_id, opts = {})
      delete_account_type_with_http_info(account_type_id, opts)
      nil
    end

    # Delete an account type
    # @param account_type_id UUID of an account type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_type_with_http_info(account_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_account_type ...'
      end
      # verify the required parameter 'account_type_id' is set
      if @api_client.config.client_side_validation && account_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_type_id' when calling NucleusApi.delete_account_type"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type/{account_type_id}'.sub('{' + 'account_type_id' + '}', account_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_account_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account
    # @param aggregation_account_id UUID of an aggregation account
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account(aggregation_account_id, opts = {})
      delete_aggregation_account_with_http_info(aggregation_account_id, opts)
      nil
    end

    # Delete an aggregation account
    # @param aggregation_account_id UUID of an aggregation account
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_with_http_info(aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_aggregation_account ...'
      end
      # verify the required parameter 'aggregation_account_id' is set
      if @api_client.config.client_side_validation && aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id' when calling NucleusApi.delete_aggregation_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account/{aggregation_account_id}'.sub('{' + 'aggregation_account_id' + '}', aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_aggregation_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account balance
    # @param aggregation_account_balance_id UUID of an aggregation account balance
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account_balance(aggregation_account_balance_id, opts = {})
      delete_aggregation_account_balance_with_http_info(aggregation_account_balance_id, opts)
      nil
    end

    # Delete an aggregation account balance
    # @param aggregation_account_balance_id UUID of an aggregation account balance
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_balance_with_http_info(aggregation_account_balance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_aggregation_account_balance ...'
      end
      # verify the required parameter 'aggregation_account_balance_id' is set
      if @api_client.config.client_side_validation && aggregation_account_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance_id' when calling NucleusApi.delete_aggregation_account_balance"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}'.sub('{' + 'aggregation_account_balance_id' + '}', aggregation_account_balance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_aggregation_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account holding
    # @param aggregation_account_holding_id UUID of an aggregation account holding
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account_holding(aggregation_account_holding_id, opts = {})
      delete_aggregation_account_holding_with_http_info(aggregation_account_holding_id, opts)
      nil
    end

    # Delete an aggregation account holding
    # @param aggregation_account_holding_id UUID of an aggregation account holding
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_holding_with_http_info(aggregation_account_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_aggregation_account_holding ...'
      end
      # verify the required parameter 'aggregation_account_holding_id' is set
      if @api_client.config.client_side_validation && aggregation_account_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding_id' when calling NucleusApi.delete_aggregation_account_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}'.sub('{' + 'aggregation_account_holding_id' + '}', aggregation_account_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_aggregation_account_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an aggregation account transaction
    # @param aggregation_account_transaction_id UUID of an aggregation account transaction
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_aggregation_account_transaction(aggregation_account_transaction_id, opts = {})
      delete_aggregation_account_transaction_with_http_info(aggregation_account_transaction_id, opts)
      nil
    end

    # Delete an aggregation account transaction
    # @param aggregation_account_transaction_id UUID of an aggregation account transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_aggregation_account_transaction_with_http_info(aggregation_account_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_aggregation_account_transaction ...'
      end
      # verify the required parameter 'aggregation_account_transaction_id' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction_id' when calling NucleusApi.delete_aggregation_account_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}'.sub('{' + 'aggregation_account_transaction_id' + '}', aggregation_account_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_aggregation_account_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an allocation
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_allocation(allocation_id, opts = {})
      delete_allocation_with_http_info(allocation_id, opts)
      nil
    end

    # Delete an allocation
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_allocation_with_http_info(allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_allocation ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling NucleusApi.delete_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation/{allocation_id}'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an allocation composition
    # @param allocation_composition_id UUID of an allocation composition
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_allocation_composition(allocation_composition_id, opts = {})
      delete_allocation_composition_with_http_info(allocation_composition_id, opts)
      nil
    end

    # Delete an allocation composition
    # @param allocation_composition_id UUID of an allocation composition
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_allocation_composition_with_http_info(allocation_composition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_allocation_composition ...'
      end
      # verify the required parameter 'allocation_composition_id' is set
      if @api_client.config.client_side_validation && allocation_composition_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_composition_id' when calling NucleusApi.delete_allocation_composition"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation_composition/{allocation_composition_id}'.sub('{' + 'allocation_composition_id' + '}', allocation_composition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_allocation_composition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a bank link
    # @param bank_link_id UUID of a bank link
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_bank_link(bank_link_id, opts = {})
      delete_bank_link_with_http_info(bank_link_id, opts)
      nil
    end

    # Delete a bank link
    # @param bank_link_id UUID of a bank link
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_bank_link_with_http_info(bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_bank_link ...'
      end
      # verify the required parameter 'bank_link_id' is set
      if @api_client.config.client_side_validation && bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_id' when calling NucleusApi.delete_bank_link"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link/{bank_link_id}'.sub('{' + 'bank_link_id' + '}', bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_bank_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a benchmark
    # @param benchmark_id UUID of a benchmark
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_benchmark(benchmark_id, opts = {})
      delete_benchmark_with_http_info(benchmark_id, opts)
      nil
    end

    # Delete a benchmark
    # @param benchmark_id UUID of a benchmark
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_benchmark_with_http_info(benchmark_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_benchmark ...'
      end
      # verify the required parameter 'benchmark_id' is set
      if @api_client.config.client_side_validation && benchmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'benchmark_id' when calling NucleusApi.delete_benchmark"
      end
      # resource path
      local_var_path = '/nucleus/v1/benchmark/{benchmark_id}'.sub('{' + 'benchmark_id' + '}', benchmark_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_benchmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a budget
    # @param budget_id UUID of a budget
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_budget(budget_id, opts = {})
      delete_budget_with_http_info(budget_id, opts)
      nil
    end

    # Delete a budget
    # @param budget_id UUID of a budget
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_budget_with_http_info(budget_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_budget ...'
      end
      # verify the required parameter 'budget_id' is set
      if @api_client.config.client_side_validation && budget_id.nil?
        fail ArgumentError, "Missing the required parameter 'budget_id' when calling NucleusApi.delete_budget"
      end
      # resource path
      local_var_path = '/nucleus/v1/budget/{budget_id}'.sub('{' + 'budget_id' + '}', budget_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a client
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client(client_id, opts = {})
      delete_client_with_http_info(client_id, opts)
      nil
    end

    # Delete a client
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_client ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.delete_client"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a client-hydro relationship
    # @param client_hydro_id UUID of a client-hydro relationship
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client_hydro(client_hydro_id, opts = {})
      delete_client_hydro_with_http_info(client_hydro_id, opts)
      nil
    end

    # Delete a client-hydro relationship
    # @param client_hydro_id UUID of a client-hydro relationship
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_hydro_with_http_info(client_hydro_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_client_hydro ...'
      end
      # verify the required parameter 'client_hydro_id' is set
      if @api_client.config.client_side_validation && client_hydro_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hydro_id' when calling NucleusApi.delete_client_hydro"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_hydro/{client_hydro_id}'.sub('{' + 'client_hydro_id' + '}', client_hydro_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_client_hydro\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a client response
    # @param client_response_id UUID of a client response
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_client_response(client_response_id, opts = {})
      delete_client_response_with_http_info(client_response_id, opts)
      nil
    end

    # Delete a client response
    # @param client_response_id UUID of a client response
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_client_response_with_http_info(client_response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_client_response ...'
      end
      # verify the required parameter 'client_response_id' is set
      if @api_client.config.client_side_validation && client_response_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_response_id' when calling NucleusApi.delete_client_response"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response/{client_response_id}'.sub('{' + 'client_response_id' + '}', client_response_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_client_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a decision tree
    # @param decision_tree_id UUID of a decision tree
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_decision_tree(decision_tree_id, opts = {})
      delete_decision_tree_with_http_info(decision_tree_id, opts)
      nil
    end

    # Delete a decision tree
    # @param decision_tree_id UUID of a decision tree
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_decision_tree_with_http_info(decision_tree_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_decision_tree ...'
      end
      # verify the required parameter 'decision_tree_id' is set
      if @api_client.config.client_side_validation && decision_tree_id.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree_id' when calling NucleusApi.delete_decision_tree"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree/{decision_tree_id}'.sub('{' + 'decision_tree_id' + '}', decision_tree_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_decision_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a deposit request
    # @param deposit_id UUID of a deposit record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_deposit_request(deposit_id, opts = {})
      delete_deposit_request_with_http_info(deposit_id, opts)
      nil
    end

    # Delete a deposit request
    # @param deposit_id UUID of a deposit record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_deposit_request_with_http_info(deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_deposit_request ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling NucleusApi.delete_deposit_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/deposit/{deposit_id}'.sub('{' + 'deposit_id' + '}', deposit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_deposit_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a financial offer
    # @param financial_offer_id UUID of a financial offer
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_financial_offer(financial_offer_id, opts = {})
      delete_financial_offer_with_http_info(financial_offer_id, opts)
      nil
    end

    # Delete a financial offer
    # @param financial_offer_id UUID of a financial offer
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_financial_offer_with_http_info(financial_offer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_financial_offer ...'
      end
      # verify the required parameter 'financial_offer_id' is set
      if @api_client.config.client_side_validation && financial_offer_id.nil?
        fail ArgumentError, "Missing the required parameter 'financial_offer_id' when calling NucleusApi.delete_financial_offer"
      end
      # resource path
      local_var_path = '/nucleus/v1/financial_offer/{financial_offer_id}'.sub('{' + 'financial_offer_id' + '}', financial_offer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_financial_offer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a funding request
    # @param funding_id UUID of a funding record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_funding_request(funding_id, opts = {})
      delete_funding_request_with_http_info(funding_id, opts)
      nil
    end

    # Delete a funding request
    # @param funding_id UUID of a funding record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_funding_request_with_http_info(funding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_funding_request ...'
      end
      # verify the required parameter 'funding_id' is set
      if @api_client.config.client_side_validation && funding_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_id' when calling NucleusApi.delete_funding_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding/{funding_id}'.sub('{' + 'funding_id' + '}', funding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_funding_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a goal
    # @param goal_id UUID of a goal
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_goal(goal_id, opts = {})
      delete_goal_with_http_info(goal_id, opts)
      nil
    end

    # Delete a goal
    # @param goal_id UUID of a goal
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_goal_with_http_info(goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_goal ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling NucleusApi.delete_goal"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a goal track record
    # @param goal_track_id UUID of a goal tracking record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_goal_track_record(goal_track_id, opts = {})
      delete_goal_track_record_with_http_info(goal_track_id, opts)
      nil
    end

    # Delete a goal track record
    # @param goal_track_id UUID of a goal tracking record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_goal_track_record_with_http_info(goal_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_goal_track_record ...'
      end
      # verify the required parameter 'goal_track_id' is set
      if @api_client.config.client_side_validation && goal_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track_id' when calling NucleusApi.delete_goal_track_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track/{goal_track_id}'.sub('{' + 'goal_track_id' + '}', goal_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_goal_track_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a model
    # @param model_id UUID of a model
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_model(model_id, opts = {})
      delete_model_with_http_info(model_id, opts)
      nil
    end

    # Delete a model
    # @param model_id UUID of a model
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_model_with_http_info(model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_model ...'
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling NucleusApi.delete_model"
      end
      # resource path
      local_var_path = '/nucleus/v1/model/{model_id}'.sub('{' + 'model_id' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a model asset size
    # @param model_asset_size_id UUID of a model asset size record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_model_asset_size(model_asset_size_id, opts = {})
      delete_model_asset_size_with_http_info(model_asset_size_id, opts)
      nil
    end

    # Delete a model asset size
    # @param model_asset_size_id UUID of a model asset size record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_model_asset_size_with_http_info(model_asset_size_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_model_asset_size ...'
      end
      # verify the required parameter 'model_asset_size_id' is set
      if @api_client.config.client_side_validation && model_asset_size_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_asset_size_id' when calling NucleusApi.delete_model_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_asset_size/{model_asset_size_id}'.sub('{' + 'model_asset_size_id' + '}', model_asset_size_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_model_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a model commentary
    # @param model_comment_id UUID of a model comment
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_model_comment(model_comment_id, opts = {})
      delete_model_comment_with_http_info(model_comment_id, opts)
      nil
    end

    # Delete a model commentary
    # @param model_comment_id UUID of a model comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_model_comment_with_http_info(model_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_model_comment ...'
      end
      # verify the required parameter 'model_comment_id' is set
      if @api_client.config.client_side_validation && model_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_comment_id' when calling NucleusApi.delete_model_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_comment/{model_comment_id}'.sub('{' + 'model_comment_id' + '}', model_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_model_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a model holding
    # @param model_holding_id UUID of a model holding record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_model_holding(model_holding_id, opts = {})
      delete_model_holding_with_http_info(model_holding_id, opts)
      nil
    end

    # Delete a model holding
    # @param model_holding_id UUID of a model holding record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_model_holding_with_http_info(model_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_model_holding ...'
      end
      # verify the required parameter 'model_holding_id' is set
      if @api_client.config.client_side_validation && model_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_holding_id' when calling NucleusApi.delete_model_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_holding/{model_holding_id}'.sub('{' + 'model_holding_id' + '}', model_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_model_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a model transaction
    # @param model_transaction_id UUID of a model transaction record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_model_transaction(model_transaction_id, opts = {})
      delete_model_transaction_with_http_info(model_transaction_id, opts)
      nil
    end

    # Delete a model transaction
    # @param model_transaction_id UUID of a model transaction record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_model_transaction_with_http_info(model_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_model_transaction ...'
      end
      # verify the required parameter 'model_transaction_id' is set
      if @api_client.config.client_side_validation && model_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_transaction_id' when calling NucleusApi.delete_model_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_transaction/{model_transaction_id}'.sub('{' + 'model_transaction_id' + '}', model_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_model_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a node
    # @param node_id UUID of a node
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_node(node_id, opts = {})
      delete_node_with_http_info(node_id, opts)
      nil
    end

    # Delete a node
    # @param node_id UUID of a node
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NucleusApi.delete_node"
      end
      # resource path
      local_var_path = '/nucleus/v1/node/{node_id}'.sub('{' + 'node_id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a node relationship
    # @param node_relationship_id UUID of a node relationship
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_node_relationship(node_relationship_id, opts = {})
      delete_node_relationship_with_http_info(node_relationship_id, opts)
      nil
    end

    # Delete a node relationship
    # @param node_relationship_id UUID of a node relationship
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_node_relationship_with_http_info(node_relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_node_relationship ...'
      end
      # verify the required parameter 'node_relationship_id' is set
      if @api_client.config.client_side_validation && node_relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_relationship_id' when calling NucleusApi.delete_node_relationship"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship/{node_relationship_id}'.sub('{' + 'node_relationship_id' + '}', node_relationship_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_node_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an order record
    # @param order_id UUID of an order record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_order_record(order_id, opts = {})
      delete_order_record_with_http_info(order_id, opts)
      nil
    end

    # Delete an order record
    # @param order_id UUID of an order record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_order_record_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_order_record ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling NucleusApi.delete_order_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order/{order_id}'.sub('{' + 'order_id' + '}', order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_order_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an order status
    # @param order_status_id UUID of an order status record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_order_status(order_status_id, opts = {})
      delete_order_status_with_http_info(order_status_id, opts)
      nil
    end

    # Delete an order status
    # @param order_status_id UUID of an order status record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_order_status_with_http_info(order_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_order_status ...'
      end
      # verify the required parameter 'order_status_id' is set
      if @api_client.config.client_side_validation && order_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_status_id' when calling NucleusApi.delete_order_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status/{order_status_id}'.sub('{' + 'order_status_id' + '}', order_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_order_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an order tracking record
    # @param order_track_id UUID of an order tracking record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_order_tracking_record(order_track_id, opts = {})
      delete_order_tracking_record_with_http_info(order_track_id, opts)
      nil
    end

    # Delete an order tracking record
    # @param order_track_id UUID of an order tracking record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_order_tracking_record_with_http_info(order_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_order_tracking_record ...'
      end
      # verify the required parameter 'order_track_id' is set
      if @api_client.config.client_side_validation && order_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_track_id' when calling NucleusApi.delete_order_tracking_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track/{order_track_id}'.sub('{' + 'order_track_id' + '}', order_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_order_tracking_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a portfolio
    # @param portfolio_id UUID of a portfolio
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_portfolio(portfolio_id, opts = {})
      delete_portfolio_with_http_info(portfolio_id, opts)
      nil
    end

    # Delete a portfolio
    # @param portfolio_id UUID of a portfolio
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_portfolio_with_http_info(portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.delete_portfolio"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a portfolio asset size
    # @param portfolio_asset_size_id UUID of a portfolio asset size record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_portfolio_asset_size(portfolio_asset_size_id, opts = {})
      delete_portfolio_asset_size_with_http_info(portfolio_asset_size_id, opts)
      nil
    end

    # Delete a portfolio asset size
    # @param portfolio_asset_size_id UUID of a portfolio asset size record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_portfolio_asset_size_with_http_info(portfolio_asset_size_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_portfolio_asset_size ...'
      end
      # verify the required parameter 'portfolio_asset_size_id' is set
      if @api_client.config.client_side_validation && portfolio_asset_size_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_asset_size_id' when calling NucleusApi.delete_portfolio_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}'.sub('{' + 'portfolio_asset_size_id' + '}', portfolio_asset_size_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_portfolio_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a portfolio commentary
    # @param portfolio_comment_id UUID of a portfolio comment
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_portfolio_comment(portfolio_comment_id, opts = {})
      delete_portfolio_comment_with_http_info(portfolio_comment_id, opts)
      nil
    end

    # Delete a portfolio commentary
    # @param portfolio_comment_id UUID of a portfolio comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_portfolio_comment_with_http_info(portfolio_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_portfolio_comment ...'
      end
      # verify the required parameter 'portfolio_comment_id' is set
      if @api_client.config.client_side_validation && portfolio_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_comment_id' when calling NucleusApi.delete_portfolio_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_comment/{portfolio_comment_id}'.sub('{' + 'portfolio_comment_id' + '}', portfolio_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_portfolio_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a portfolio holding
    # @param portfolio_holding_id UUID of a portfolio holding record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_portfolio_holding(portfolio_holding_id, opts = {})
      delete_portfolio_holding_with_http_info(portfolio_holding_id, opts)
      nil
    end

    # Delete a portfolio holding
    # @param portfolio_holding_id UUID of a portfolio holding record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_portfolio_holding_with_http_info(portfolio_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_portfolio_holding ...'
      end
      # verify the required parameter 'portfolio_holding_id' is set
      if @api_client.config.client_side_validation && portfolio_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_holding_id' when calling NucleusApi.delete_portfolio_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_holding/{portfolio_holding_id}'.sub('{' + 'portfolio_holding_id' + '}', portfolio_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_portfolio_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a portfolio transaction
    # @param portfolio_transaction_id UUID of a portfolio transaction record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_portfolio_transaction(portfolio_transaction_id, opts = {})
      delete_portfolio_transaction_with_http_info(portfolio_transaction_id, opts)
      nil
    end

    # Delete a portfolio transaction
    # @param portfolio_transaction_id UUID of a portfolio transaction record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_portfolio_transaction_with_http_info(portfolio_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_portfolio_transaction ...'
      end
      # verify the required parameter 'portfolio_transaction_id' is set
      if @api_client.config.client_side_validation && portfolio_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_transaction_id' when calling NucleusApi.delete_portfolio_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}'.sub('{' + 'portfolio_transaction_id' + '}', portfolio_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_portfolio_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a questionnaire
    # @param questionnaire_id UUID of a questionnaire
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_questionnaire(questionnaire_id, opts = {})
      delete_questionnaire_with_http_info(questionnaire_id, opts)
      nil
    end

    # Delete a questionnaire
    # @param questionnaire_id UUID of a questionnaire
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_questionnaire_with_http_info(questionnaire_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_questionnaire ...'
      end
      # verify the required parameter 'questionnaire_id' is set
      if @api_client.config.client_side_validation && questionnaire_id.nil?
        fail ArgumentError, "Missing the required parameter 'questionnaire_id' when calling NucleusApi.delete_questionnaire"
      end
      # resource path
      local_var_path = '/nucleus/v1/questionnaire/{questionnaire_id}'.sub('{' + 'questionnaire_id' + '}', questionnaire_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_questionnaire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a score
    # @param score_id UUID of a score record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_score(score_id, opts = {})
      delete_score_with_http_info(score_id, opts)
      nil
    end

    # Delete a score
    # @param score_id UUID of a score record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_score_with_http_info(score_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_score ...'
      end
      # verify the required parameter 'score_id' is set
      if @api_client.config.client_side_validation && score_id.nil?
        fail ArgumentError, "Missing the required parameter 'score_id' when calling NucleusApi.delete_score"
      end
      # resource path
      local_var_path = '/nucleus/v1/score/{score_id}'.sub('{' + 'score_id' + '}', score_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a security
    # @param security_id UUID of a security
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security(security_id, opts = {})
      delete_security_with_http_info(security_id, opts)
      nil
    end

    # Delete a security
    # @param security_id UUID of a security
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_with_http_info(security_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_security ...'
      end
      # verify the required parameter 'security_id' is set
      if @api_client.config.client_side_validation && security_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_id' when calling NucleusApi.delete_security"
      end
      # resource path
      local_var_path = '/nucleus/v1/security/{security_id}'.sub('{' + 'security_id' + '}', security_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_security\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a security exclusion
    # @param security_exclusion_id UUID of a security exclusion record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_exclusion(security_exclusion_id, opts = {})
      delete_security_exclusion_with_http_info(security_exclusion_id, opts)
      nil
    end

    # Delete a security exclusion
    # @param security_exclusion_id UUID of a security exclusion record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_exclusion_with_http_info(security_exclusion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_security_exclusion ...'
      end
      # verify the required parameter 'security_exclusion_id' is set
      if @api_client.config.client_side_validation && security_exclusion_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_exclusion_id' when calling NucleusApi.delete_security_exclusion"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_exclusion/{security_exclusion_id}'.sub('{' + 'security_exclusion_id' + '}', security_exclusion_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_security_exclusion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a security price
    # @param security_price_id UUID of a security price record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_security_price(security_price_id, opts = {})
      delete_security_price_with_http_info(security_price_id, opts)
      nil
    end

    # Delete a security price
    # @param security_price_id UUID of a security price record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_security_price_with_http_info(security_price_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_security_price ...'
      end
      # verify the required parameter 'security_price_id' is set
      if @api_client.config.client_side_validation && security_price_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_price_id' when calling NucleusApi.delete_security_price"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_price/{security_price_id}'.sub('{' + 'security_price_id' + '}', security_price_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_security_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a transaction code
    # @param transaction_code_id UUID of a transaction code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transaction_code(transaction_code_id, opts = {})
      delete_transaction_code_with_http_info(transaction_code_id, opts)
      nil
    end

    # Delete a transaction code
    # @param transaction_code_id UUID of a transaction code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transaction_code_with_http_info(transaction_code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_transaction_code ...'
      end
      # verify the required parameter 'transaction_code_id' is set
      if @api_client.config.client_side_validation && transaction_code_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_code_id' when calling NucleusApi.delete_transaction_code"
      end
      # resource path
      local_var_path = '/nucleus/v1/transaction_code/{transaction_code_id}'.sub('{' + 'transaction_code_id' + '}', transaction_code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_transaction_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a transfer request
    # @param transfer_id UUID of an account transfer record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_transfer_request(transfer_id, opts = {})
      delete_transfer_request_with_http_info(transfer_id, opts)
      nil
    end

    # Delete a transfer request
    # @param transfer_id UUID of an account transfer record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_transfer_request_with_http_info(transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_transfer_request ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling NucleusApi.delete_transfer_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer/{transfer_id}'.sub('{' + 'transfer_id' + '}', transfer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_transfer_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a withdrawal request
    # @param withdrawal_id UUID of a withdrawal request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_withdrawal_request(withdrawal_id, opts = {})
      delete_withdrawal_request_with_http_info(withdrawal_id, opts)
      nil
    end

    # Delete a withdrawal request
    # @param withdrawal_id UUID of a withdrawal request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_withdrawal_request_with_http_info(withdrawal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.delete_withdrawal_request ...'
      end
      # verify the required parameter 'withdrawal_id' is set
      if @api_client.config.client_side_validation && withdrawal_id.nil?
        fail ArgumentError, "Missing the required parameter 'withdrawal_id' when calling NucleusApi.delete_withdrawal_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/withdrawal/{withdrawal_id}'.sub('{' + 'withdrawal_id' + '}', withdrawal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#delete_withdrawal_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountResponse]
    def get_account(account_id, opts = {})
      data, _status_code, _headers = get_account_with_http_info(account_id, opts)
      data
    end

    # Retrieve an account
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountResponse, Fixnum, Hash)>] SpecificAccountResponse data, response status code and response headers
    def get_account_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.get_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account allocation
    # @param account_allocation_id UUID of an account allocation
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountAllocationResponse]
    def get_account_allocation(account_allocation_id, opts = {})
      data, _status_code, _headers = get_account_allocation_with_http_info(account_allocation_id, opts)
      data
    end

    # Retrieve an account allocation
    # @param account_allocation_id UUID of an account allocation
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountAllocationResponse, Fixnum, Hash)>] SpecificAccountAllocationResponse data, response status code and response headers
    def get_account_allocation_with_http_info(account_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_allocation ...'
      end
      # verify the required parameter 'account_allocation_id' is set
      if @api_client.config.client_side_validation && account_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_allocation_id' when calling NucleusApi.get_account_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation/{account_allocation_id}'.sub('{' + 'account_allocation_id' + '}', account_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account allocations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountAllocationResponse]
    def get_account_allocations(opts = {})
      data, _status_code, _headers = get_account_allocations_with_http_info(opts)
      data
    end

    # List all account allocations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountAllocationResponse, Fixnum, Hash)>] GetAccountAllocationResponse data, response status code and response headers
    def get_account_allocations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_allocations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_account_allocations, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_account_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/account_allocation'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account asset sizes
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountAssetSizeResponse]
    def get_account_asset_sizes(account_id, opts = {})
      data, _status_code, _headers = get_account_asset_sizes_with_http_info(account_id, opts)
      data
    end

    # List all account asset sizes
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountAssetSizeResponse, Fixnum, Hash)>] GetAccountAssetSizeResponse data, response status code and response headers
    def get_account_asset_sizes_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_asset_sizes ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.get_account_asset_sizes"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/asset_size'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_asset_sizes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account holdings
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountHoldingResponse]
    def get_account_holdings(account_id, opts = {})
      data, _status_code, _headers = get_account_holdings_with_http_info(account_id, opts)
      data
    end

    # List all account holdings
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountHoldingResponse, Fixnum, Hash)>] GetAccountHoldingResponse data, response status code and response headers
    def get_account_holdings_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_holdings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.get_account_holdings"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/holding'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get account performance
    # @param account_id UUID of an account
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_account_performance(account_id, stat, opts = {})
      data, _status_code, _headers = get_account_performance_with_http_info(account_id, stat, opts)
      data
    end

    # Get account performance
    # @param account_id UUID of an account
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_account_performance_with_http_info(account_id, stat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_performance ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.get_account_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_account_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/performance'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account's permission
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountPermissionResponse]
    def get_account_permission(account_id, opts = {})
      data, _status_code, _headers = get_account_permission_with_http_info(account_id, opts)
      data
    end

    # Retrieve an account&#39;s permission
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountPermissionResponse, Fixnum, Hash)>] SpecificAccountPermissionResponse data, response status code and response headers
    def get_account_permission_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_permission ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.get_account_permission"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountPermissionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account permissions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountPermissionsResponse]
    def get_account_permissions(opts = {})
      data, _status_code, _headers = get_account_permissions_with_http_info(opts)
      data
    end

    # List all account permissions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountPermissionsResponse, Fixnum, Hash)>] GetAccountPermissionsResponse data, response status code and response headers
    def get_account_permissions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_permissions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_account_permissions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_account_permissions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/account_permission'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountPermissionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account stage
    # @param stage_id UUID of an account stage
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountStageResponse]
    def get_account_stage(stage_id, opts = {})
      data, _status_code, _headers = get_account_stage_with_http_info(stage_id, opts)
      data
    end

    # Retrieve an account stage
    # @param stage_id UUID of an account stage
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountStageResponse, Fixnum, Hash)>] SpecificAccountStageResponse data, response status code and response headers
    def get_account_stage_with_http_info(stage_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_stage ...'
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling NucleusApi.get_account_stage"
      end
      # resource path
      local_var_path = '/nucleus/v1/stage/{stage_id}'.sub('{' + 'stage_id' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountStageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account stages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountStageResponse]
    def get_account_stages(opts = {})
      data, _status_code, _headers = get_account_stages_with_http_info(opts)
      data
    end

    # List all account stages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountStageResponse, Fixnum, Hash)>] GetAccountStageResponse data, response status code and response headers
    def get_account_stages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_stages ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_account_stages, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_account_stages, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/stage'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountStageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_stages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account status
    # @param account_status_id UUID of an account status
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountStatusResponse]
    def get_account_status(account_status_id, opts = {})
      data, _status_code, _headers = get_account_status_with_http_info(account_status_id, opts)
      data
    end

    # Retrieve an account status
    # @param account_status_id UUID of an account status
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountStatusResponse, Fixnum, Hash)>] SpecificAccountStatusResponse data, response status code and response headers
    def get_account_status_with_http_info(account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_status ...'
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling NucleusApi.get_account_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountStatusResponse]
    def get_account_statuses(opts = {})
      data, _status_code, _headers = get_account_statuses_with_http_info(opts)
      data
    end

    # List all account statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountStatusResponse, Fixnum, Hash)>] GetAccountStatusResponse data, response status code and response headers
    def get_account_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_statuses ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_account_statuses, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_account_statuses, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/account_status'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account transactions
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [AccountTransactionResponse]
    def get_account_transactions(account_id, opts = {})
      data, _status_code, _headers = get_account_transactions_with_http_info(account_id, opts)
      data
    end

    # List all account transactions
    # @param account_id UUID of an account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(AccountTransactionResponse, Fixnum, Hash)>] AccountTransactionResponse data, response status code and response headers
    def get_account_transactions_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_transactions ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.get_account_transactions"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/transaction'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account type
    # @param account_type_id UUID of an account type
    # @param [Hash] opts the optional parameters
    # @return [GetAccountTypeSubresponse]
    def get_account_type(account_type_id, opts = {})
      data, _status_code, _headers = get_account_type_with_http_info(account_type_id, opts)
      data
    end

    # Retrieve an account type
    # @param account_type_id UUID of an account type
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountTypeSubresponse, Fixnum, Hash)>] GetAccountTypeSubresponse data, response status code and response headers
    def get_account_type_with_http_info(account_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_type ...'
      end
      # verify the required parameter 'account_type_id' is set
      if @api_client.config.client_side_validation && account_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_type_id' when calling NucleusApi.get_account_type"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type/{account_type_id}'.sub('{' + 'account_type_id' + '}', account_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountTypeSubresponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account types
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountTypeResponse]
    def get_account_types(opts = {})
      data, _status_code, _headers = get_account_types_with_http_info(opts)
      data
    end

    # List all account types
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountTypeResponse, Fixnum, Hash)>] GetAccountTypeResponse data, response status code and response headers
    def get_account_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_account_types ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_account_types, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_account_types, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/account_type'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountTypeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_account_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get information for all accounts for all clients defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAccountResponse]
    def get_accounts(opts = {})
      data, _status_code, _headers = get_accounts_with_http_info(opts)
      data
    end

    # Get information for all accounts for all clients defined for your firm
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAccountResponse, Fixnum, Hash)>] GetAccountResponse data, response status code and response headers
    def get_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_accounts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_accounts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_accounts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/account'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account
    # @param aggregation_account_id UUID of an aggregation account
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountResponse]
    def get_aggregation_account(aggregation_account_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_with_http_info(aggregation_account_id, opts)
      data
    end

    # Retrieve an aggregation account
    # @param aggregation_account_id UUID of an aggregation account
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountResponse, Fixnum, Hash)>] SpecificAggregationAccountResponse data, response status code and response headers
    def get_aggregation_account_with_http_info(aggregation_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_account ...'
      end
      # verify the required parameter 'aggregation_account_id' is set
      if @api_client.config.client_side_validation && aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id' when calling NucleusApi.get_aggregation_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account/{aggregation_account_id}'.sub('{' + 'aggregation_account_id' + '}', aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account balance
    # @param aggregation_account_balance_id UUID of an aggregation account balance
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountBalanceResponse]
    def get_aggregation_account_balance(aggregation_account_balance_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_balance_with_http_info(aggregation_account_balance_id, opts)
      data
    end

    # Retrieve an aggregation account balance
    # @param aggregation_account_balance_id UUID of an aggregation account balance
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountBalanceResponse, Fixnum, Hash)>] SpecificAggregationAccountBalanceResponse data, response status code and response headers
    def get_aggregation_account_balance_with_http_info(aggregation_account_balance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_account_balance ...'
      end
      # verify the required parameter 'aggregation_account_balance_id' is set
      if @api_client.config.client_side_validation && aggregation_account_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance_id' when calling NucleusApi.get_aggregation_account_balance"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}'.sub('{' + 'aggregation_account_balance_id' + '}', aggregation_account_balance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountBalanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation account balances
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAggregationAccountBalanceResponse]
    def get_aggregation_account_balances(opts = {})
      data, _status_code, _headers = get_aggregation_account_balances_with_http_info(opts)
      data
    end

    # List all aggregation account balances
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAggregationAccountBalanceResponse, Fixnum, Hash)>] GetAggregationAccountBalanceResponse data, response status code and response headers
    def get_aggregation_account_balances_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_account_balances ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_aggregation_account_balances, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_aggregation_account_balances, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAggregationAccountBalanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_account_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account holding
    # @param aggregation_account_holding_id UUID of an aggregation account holding
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountHoldingResponse]
    def get_aggregation_account_holding(aggregation_account_holding_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_holding_with_http_info(aggregation_account_holding_id, opts)
      data
    end

    # Retrieve an aggregation account holding
    # @param aggregation_account_holding_id UUID of an aggregation account holding
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountHoldingResponse, Fixnum, Hash)>] SpecificAggregationAccountHoldingResponse data, response status code and response headers
    def get_aggregation_account_holding_with_http_info(aggregation_account_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_account_holding ...'
      end
      # verify the required parameter 'aggregation_account_holding_id' is set
      if @api_client.config.client_side_validation && aggregation_account_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding_id' when calling NucleusApi.get_aggregation_account_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}'.sub('{' + 'aggregation_account_holding_id' + '}', aggregation_account_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_account_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation account holdings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAggregationAccountHoldingsResponse]
    def get_aggregation_account_holdings(opts = {})
      data, _status_code, _headers = get_aggregation_account_holdings_with_http_info(opts)
      data
    end

    # List all aggregation account holdings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAggregationAccountHoldingsResponse, Fixnum, Hash)>] GetAggregationAccountHoldingsResponse data, response status code and response headers
    def get_aggregation_account_holdings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_account_holdings ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_aggregation_account_holdings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_aggregation_account_holdings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAggregationAccountHoldingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_account_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an aggregation account transaction
    # @param aggregation_account_transaction_id UUID of an aggregation account transaction
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountTransactionResponse]
    def get_aggregation_account_transaction(aggregation_account_transaction_id, opts = {})
      data, _status_code, _headers = get_aggregation_account_transaction_with_http_info(aggregation_account_transaction_id, opts)
      data
    end

    # Retrieve an aggregation account transaction
    # @param aggregation_account_transaction_id UUID of an aggregation account transaction
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountTransactionResponse, Fixnum, Hash)>] SpecificAggregationAccountTransactionResponse data, response status code and response headers
    def get_aggregation_account_transaction_with_http_info(aggregation_account_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_account_transaction ...'
      end
      # verify the required parameter 'aggregation_account_transaction_id' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction_id' when calling NucleusApi.get_aggregation_account_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}'.sub('{' + 'aggregation_account_transaction_id' + '}', aggregation_account_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_account_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation account transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAggregationAccountTransactionResponse]
    def get_aggregation_account_transactions(opts = {})
      data, _status_code, _headers = get_aggregation_account_transactions_with_http_info(opts)
      data
    end

    # List all aggregation account transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAggregationAccountTransactionResponse, Fixnum, Hash)>] GetAggregationAccountTransactionResponse data, response status code and response headers
    def get_aggregation_account_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_account_transactions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_aggregation_account_transactions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_aggregation_account_transactions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAggregationAccountTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_account_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all aggregation accounts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAggregationAccountsResponse]
    def get_aggregation_accounts(opts = {})
      data, _status_code, _headers = get_aggregation_accounts_with_http_info(opts)
      data
    end

    # List all aggregation accounts
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAggregationAccountsResponse, Fixnum, Hash)>] GetAggregationAccountsResponse data, response status code and response headers
    def get_aggregation_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_aggregation_accounts ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_aggregation_accounts, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_aggregation_accounts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/aggregation_account'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAggregationAccountsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_aggregation_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an allocation
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @return [SpecificAllocationResponse]
    def get_allocation(allocation_id, opts = {})
      data, _status_code, _headers = get_allocation_with_http_info(allocation_id, opts)
      data
    end

    # Retrieve an allocation
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAllocationResponse, Fixnum, Hash)>] SpecificAllocationResponse data, response status code and response headers
    def get_allocation_with_http_info(allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocation ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling NucleusApi.get_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation/{allocation_id}'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all allocation asset sizes
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [AllocationAssetSizeResponse]
    def get_allocation_asset_sizes(allocation_id, opts = {})
      data, _status_code, _headers = get_allocation_asset_sizes_with_http_info(allocation_id, opts)
      data
    end

    # List all allocation asset sizes
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(AllocationAssetSizeResponse, Fixnum, Hash)>] AllocationAssetSizeResponse data, response status code and response headers
    def get_allocation_asset_sizes_with_http_info(allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocation_asset_sizes ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling NucleusApi.get_allocation_asset_sizes"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation/{allocation_id}/asset_size'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AllocationAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocation_asset_sizes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an allocation composition
    # @param allocation_composition_id UUID of an allocation composition
    # @param [Hash] opts the optional parameters
    # @return [SpecificAllocationCompositionResponse]
    def get_allocation_composition(allocation_composition_id, opts = {})
      data, _status_code, _headers = get_allocation_composition_with_http_info(allocation_composition_id, opts)
      data
    end

    # Retrieve an allocation composition
    # @param allocation_composition_id UUID of an allocation composition
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAllocationCompositionResponse, Fixnum, Hash)>] SpecificAllocationCompositionResponse data, response status code and response headers
    def get_allocation_composition_with_http_info(allocation_composition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocation_composition ...'
      end
      # verify the required parameter 'allocation_composition_id' is set
      if @api_client.config.client_side_validation && allocation_composition_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_composition_id' when calling NucleusApi.get_allocation_composition"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation_composition/{allocation_composition_id}'.sub('{' + 'allocation_composition_id' + '}', allocation_composition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAllocationCompositionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocation_composition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all allocation compositions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAllocationCompositionResponse]
    def get_allocation_compositions(opts = {})
      data, _status_code, _headers = get_allocation_compositions_with_http_info(opts)
      data
    end

    # List all allocation compositions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAllocationCompositionResponse, Fixnum, Hash)>] GetAllocationCompositionResponse data, response status code and response headers
    def get_allocation_compositions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocation_compositions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_allocation_compositions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_allocation_compositions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/allocation_composition'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllocationCompositionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocation_compositions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all allocation holdings
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [AllocationHoldingsResponse]
    def get_allocation_holdings(allocation_id, opts = {})
      data, _status_code, _headers = get_allocation_holdings_with_http_info(allocation_id, opts)
      data
    end

    # List all allocation holdings
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(AllocationHoldingsResponse, Fixnum, Hash)>] AllocationHoldingsResponse data, response status code and response headers
    def get_allocation_holdings_with_http_info(allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocation_holdings ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling NucleusApi.get_allocation_holdings"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation/{allocation_id}/holding'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AllocationHoldingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocation_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get allocation performance
    # @param allocation_id UUID of an allocation
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_allocation_performance(allocation_id, stat, opts = {})
      data, _status_code, _headers = get_allocation_performance_with_http_info(allocation_id, stat, opts)
      data
    end

    # Get allocation performance
    # @param allocation_id UUID of an allocation
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_allocation_performance_with_http_info(allocation_id, stat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocation_performance ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling NucleusApi.get_allocation_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_allocation_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation/{allocation_id}/performance'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocation_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all allocation transactions
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [AllocationTransactionResponse]
    def get_allocation_transactions(allocation_id, opts = {})
      data, _status_code, _headers = get_allocation_transactions_with_http_info(allocation_id, opts)
      data
    end

    # List all allocation transactions
    # @param allocation_id UUID of an allocation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(AllocationTransactionResponse, Fixnum, Hash)>] AllocationTransactionResponse data, response status code and response headers
    def get_allocation_transactions_with_http_info(allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocation_transactions ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling NucleusApi.get_allocation_transactions"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation/{allocation_id}/transaction'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AllocationTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocation_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all allocations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetAllocationResponse]
    def get_allocations(opts = {})
      data, _status_code, _headers = get_allocations_with_http_info(opts)
      data
    end

    # List all allocations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetAllocationResponse, Fixnum, Hash)>] GetAllocationResponse data, response status code and response headers
    def get_allocations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_allocations ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_allocations, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_allocations, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/allocation'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_allocations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a bank link
    # @param bank_link_id UUID of a bank link
    # @param [Hash] opts the optional parameters
    # @return [SpecificBankLinkResponse]
    def get_bank_link(bank_link_id, opts = {})
      data, _status_code, _headers = get_bank_link_with_http_info(bank_link_id, opts)
      data
    end

    # Retrieve a bank link
    # @param bank_link_id UUID of a bank link
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificBankLinkResponse, Fixnum, Hash)>] SpecificBankLinkResponse data, response status code and response headers
    def get_bank_link_with_http_info(bank_link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_bank_link ...'
      end
      # verify the required parameter 'bank_link_id' is set
      if @api_client.config.client_side_validation && bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_id' when calling NucleusApi.get_bank_link"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link/{bank_link_id}'.sub('{' + 'bank_link_id' + '}', bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificBankLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_bank_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all bank links
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetBankLinkResponse]
    def get_bank_links(opts = {})
      data, _status_code, _headers = get_bank_links_with_http_info(opts)
      data
    end

    # List all bank links
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetBankLinkResponse, Fixnum, Hash)>] GetBankLinkResponse data, response status code and response headers
    def get_bank_links_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_bank_links ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_bank_links, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_bank_links, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/bank_link'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBankLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_bank_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a benchmark
    # @param benchmark_id UUID of a benchmark
    # @param [Hash] opts the optional parameters
    # @return [SpecificBenchmarkResponse]
    def get_benchmark(benchmark_id, opts = {})
      data, _status_code, _headers = get_benchmark_with_http_info(benchmark_id, opts)
      data
    end

    # Retrieve a benchmark
    # @param benchmark_id UUID of a benchmark
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificBenchmarkResponse, Fixnum, Hash)>] SpecificBenchmarkResponse data, response status code and response headers
    def get_benchmark_with_http_info(benchmark_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_benchmark ...'
      end
      # verify the required parameter 'benchmark_id' is set
      if @api_client.config.client_side_validation && benchmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'benchmark_id' when calling NucleusApi.get_benchmark"
      end
      # resource path
      local_var_path = '/nucleus/v1/benchmark/{benchmark_id}'.sub('{' + 'benchmark_id' + '}', benchmark_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificBenchmarkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_benchmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all benchmark asset sizes
    # @param benchmark_id UUID of a benchmark
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [BenchmarkAssetSizeResponse]
    def get_benchmark_asset_sizes(benchmark_id, opts = {})
      data, _status_code, _headers = get_benchmark_asset_sizes_with_http_info(benchmark_id, opts)
      data
    end

    # List all benchmark asset sizes
    # @param benchmark_id UUID of a benchmark
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(BenchmarkAssetSizeResponse, Fixnum, Hash)>] BenchmarkAssetSizeResponse data, response status code and response headers
    def get_benchmark_asset_sizes_with_http_info(benchmark_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_benchmark_asset_sizes ...'
      end
      # verify the required parameter 'benchmark_id' is set
      if @api_client.config.client_side_validation && benchmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'benchmark_id' when calling NucleusApi.get_benchmark_asset_sizes"
      end
      # resource path
      local_var_path = '/nucleus/v1/benchmark/{benchmark_id}/asset_size'.sub('{' + 'benchmark_id' + '}', benchmark_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BenchmarkAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_benchmark_asset_sizes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get benchmark performance
    # @param benchmark_id UUID of a benchmark
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_benchmark_performance(benchmark_id, stat, opts = {})
      data, _status_code, _headers = get_benchmark_performance_with_http_info(benchmark_id, stat, opts)
      data
    end

    # Get benchmark performance
    # @param benchmark_id UUID of a benchmark
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_benchmark_performance_with_http_info(benchmark_id, stat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_benchmark_performance ...'
      end
      # verify the required parameter 'benchmark_id' is set
      if @api_client.config.client_side_validation && benchmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'benchmark_id' when calling NucleusApi.get_benchmark_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_benchmark_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # resource path
      local_var_path = '/nucleus/v1/benchmark/{benchmark_id}/performance'.sub('{' + 'benchmark_id' + '}', benchmark_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_benchmark_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all benchmarks
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetBenchmarkResponse]
    def get_benchmarks(opts = {})
      data, _status_code, _headers = get_benchmarks_with_http_info(opts)
      data
    end

    # List all benchmarks
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetBenchmarkResponse, Fixnum, Hash)>] GetBenchmarkResponse data, response status code and response headers
    def get_benchmarks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_benchmarks ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_benchmarks, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_benchmarks, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/benchmark'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBenchmarkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_benchmarks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a budget
    # @param budget_id UUID of a budget
    # @param [Hash] opts the optional parameters
    # @return [SpecificBudgetResponse]
    def get_budget(budget_id, opts = {})
      data, _status_code, _headers = get_budget_with_http_info(budget_id, opts)
      data
    end

    # Retrieve a budget
    # @param budget_id UUID of a budget
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificBudgetResponse, Fixnum, Hash)>] SpecificBudgetResponse data, response status code and response headers
    def get_budget_with_http_info(budget_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_budget ...'
      end
      # verify the required parameter 'budget_id' is set
      if @api_client.config.client_side_validation && budget_id.nil?
        fail ArgumentError, "Missing the required parameter 'budget_id' when calling NucleusApi.get_budget"
      end
      # resource path
      local_var_path = '/nucleus/v1/budget/{budget_id}'.sub('{' + 'budget_id' + '}', budget_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificBudgetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all budgets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetBudgetResponse]
    def get_budgets(opts = {})
      data, _status_code, _headers = get_budgets_with_http_info(opts)
      data
    end

    # List all budgets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetBudgetResponse, Fixnum, Hash)>] GetBudgetResponse data, response status code and response headers
    def get_budgets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_budgets ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_budgets, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_budgets, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/budget'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBudgetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_budgets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all bulk orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetBulkOrderResponse]
    def get_bulk_orders(opts = {})
      data, _status_code, _headers = get_bulk_orders_with_http_info(opts)
      data
    end

    # List all bulk orders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetBulkOrderResponse, Fixnum, Hash)>] GetBulkOrderResponse data, response status code and response headers
    def get_bulk_orders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_bulk_orders ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_bulk_orders, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_bulk_orders, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/order_bulk'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetBulkOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_bulk_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a client
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientResponse]
    def get_client(client_id, opts = {})
      data, _status_code, _headers = get_client_with_http_info(client_id, opts)
      data
    end

    # Retrieve a client
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientResponse, Fixnum, Hash)>] SpecificClientResponse data, response status code and response headers
    def get_client_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_client"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client asset sizes
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [ClientAssetSizeResponse]
    def get_client_asset_sizes(client_id, opts = {})
      data, _status_code, _headers = get_client_asset_sizes_with_http_info(client_id, opts)
      data
    end

    # List all client asset sizes
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(ClientAssetSizeResponse, Fixnum, Hash)>] ClientAssetSizeResponse data, response status code and response headers
    def get_client_asset_sizes_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_asset_sizes ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_client_asset_sizes"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/asset_size'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_asset_sizes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client holdings
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [ClientHoldingsResponse]
    def get_client_holdings(client_id, opts = {})
      data, _status_code, _headers = get_client_holdings_with_http_info(client_id, opts)
      data
    end

    # List all client holdings
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(ClientHoldingsResponse, Fixnum, Hash)>] ClientHoldingsResponse data, response status code and response headers
    def get_client_holdings_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_holdings ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_client_holdings"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/holding'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientHoldingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a client-hydro relationship
    # @param client_hydro_id UUID of a client-hydro relationship
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientHydroResponse]
    def get_client_hydro(client_hydro_id, opts = {})
      data, _status_code, _headers = get_client_hydro_with_http_info(client_hydro_id, opts)
      data
    end

    # Retrieve a client-hydro relationship
    # @param client_hydro_id UUID of a client-hydro relationship
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientHydroResponse, Fixnum, Hash)>] SpecificClientHydroResponse data, response status code and response headers
    def get_client_hydro_with_http_info(client_hydro_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_hydro ...'
      end
      # verify the required parameter 'client_hydro_id' is set
      if @api_client.config.client_side_validation && client_hydro_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hydro_id' when calling NucleusApi.get_client_hydro"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_hydro/{client_hydro_id}'.sub('{' + 'client_hydro_id' + '}', client_hydro_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientHydroResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_hydro\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client-hydro relationships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetClientHydroResponse]
    def get_client_hydros(opts = {})
      data, _status_code, _headers = get_client_hydros_with_http_info(opts)
      data
    end

    # List all client-hydro relationships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetClientHydroResponse, Fixnum, Hash)>] GetClientHydroResponse data, response status code and response headers
    def get_client_hydros_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_hydros ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_client_hydros, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_client_hydros, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/client_hydro'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClientHydroResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_hydros\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get client performance
    # @param client_id UUID of a client
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_client_performance(client_id, stat, opts = {})
      data, _status_code, _headers = get_client_performance_with_http_info(client_id, stat, opts)
      data
    end

    # Get client performance
    # @param client_id UUID of a client
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_client_performance_with_http_info(client_id, stat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_performance ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_client_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_client_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/performance'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a client response
    # @param client_response_id UUID of a client response
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientResponseResponse]
    def get_client_response(client_response_id, opts = {})
      data, _status_code, _headers = get_client_response_with_http_info(client_response_id, opts)
      data
    end

    # Retrieve a client response
    # @param client_response_id UUID of a client response
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientResponseResponse, Fixnum, Hash)>] SpecificClientResponseResponse data, response status code and response headers
    def get_client_response_with_http_info(client_response_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_response ...'
      end
      # verify the required parameter 'client_response_id' is set
      if @api_client.config.client_side_validation && client_response_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_response_id' when calling NucleusApi.get_client_response"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response/{client_response_id}'.sub('{' + 'client_response_id' + '}', client_response_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientResponseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client responses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetClientResponseResponse]
    def get_client_responses(opts = {})
      data, _status_code, _headers = get_client_responses_with_http_info(opts)
      data
    end

    # List all client responses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetClientResponseResponse, Fixnum, Hash)>] GetClientResponseResponse data, response status code and response headers
    def get_client_responses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_responses ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_client_responses, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_client_responses, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/client_response'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClientResponseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_responses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client transactions
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [ClientTransactionResponse]
    def get_client_transactions(client_id, opts = {})
      data, _status_code, _headers = get_client_transactions_with_http_info(client_id, opts)
      data
    end

    # List all client transactions
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(ClientTransactionResponse, Fixnum, Hash)>] ClientTransactionResponse data, response status code and response headers
    def get_client_transactions_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_client_transactions ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_client_transactions"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/transaction'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClientTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_client_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all clients
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetClientResponse]
    def get_clients(opts = {})
      data, _status_code, _headers = get_clients_with_http_info(opts)
      data
    end

    # List all clients
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetClientResponse, Fixnum, Hash)>] GetClientResponse data, response status code and response headers
    def get_clients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_clients ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_clients, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_clients, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/client'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_clients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a decision tree
    # @param decision_tree_id UUID of a decision tree
    # @param [Hash] opts the optional parameters
    # @return [SpecificDecisionTreeResponse]
    def get_decision_tree(decision_tree_id, opts = {})
      data, _status_code, _headers = get_decision_tree_with_http_info(decision_tree_id, opts)
      data
    end

    # Retrieve a decision tree
    # @param decision_tree_id UUID of a decision tree
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificDecisionTreeResponse, Fixnum, Hash)>] SpecificDecisionTreeResponse data, response status code and response headers
    def get_decision_tree_with_http_info(decision_tree_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_decision_tree ...'
      end
      # verify the required parameter 'decision_tree_id' is set
      if @api_client.config.client_side_validation && decision_tree_id.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree_id' when calling NucleusApi.get_decision_tree"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree/{decision_tree_id}'.sub('{' + 'decision_tree_id' + '}', decision_tree_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificDecisionTreeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_decision_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all decision trees
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetDecisionTreeResponse]
    def get_decision_trees(opts = {})
      data, _status_code, _headers = get_decision_trees_with_http_info(opts)
      data
    end

    # List all decision trees
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetDecisionTreeResponse, Fixnum, Hash)>] GetDecisionTreeResponse data, response status code and response headers
    def get_decision_trees_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_decision_trees ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_decision_trees, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_decision_trees, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/decision_tree'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDecisionTreeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_decision_trees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a deposit request
    # @param deposit_id UUID of a deposit record
    # @param [Hash] opts the optional parameters
    # @return [SpecificDepositRequestResponse]
    def get_deposit_request(deposit_id, opts = {})
      data, _status_code, _headers = get_deposit_request_with_http_info(deposit_id, opts)
      data
    end

    # Retrieve a deposit request
    # @param deposit_id UUID of a deposit record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificDepositRequestResponse, Fixnum, Hash)>] SpecificDepositRequestResponse data, response status code and response headers
    def get_deposit_request_with_http_info(deposit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_deposit_request ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling NucleusApi.get_deposit_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/deposit/{deposit_id}'.sub('{' + 'deposit_id' + '}', deposit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificDepositRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_deposit_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all deposit requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetDepositRequestResponse]
    def get_deposit_requests(opts = {})
      data, _status_code, _headers = get_deposit_requests_with_http_info(opts)
      data
    end

    # List all deposit requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetDepositRequestResponse, Fixnum, Hash)>] GetDepositRequestResponse data, response status code and response headers
    def get_deposit_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_deposit_requests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_deposit_requests, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_deposit_requests, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/deposit'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetDepositRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_deposit_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a financial offer
    # @param financial_offer_id UUID of a financial offer
    # @param [Hash] opts the optional parameters
    # @return [SpecificFinancialOfferResponse]
    def get_financial_offer(financial_offer_id, opts = {})
      data, _status_code, _headers = get_financial_offer_with_http_info(financial_offer_id, opts)
      data
    end

    # Retrieve a financial offer
    # @param financial_offer_id UUID of a financial offer
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificFinancialOfferResponse, Fixnum, Hash)>] SpecificFinancialOfferResponse data, response status code and response headers
    def get_financial_offer_with_http_info(financial_offer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_financial_offer ...'
      end
      # verify the required parameter 'financial_offer_id' is set
      if @api_client.config.client_side_validation && financial_offer_id.nil?
        fail ArgumentError, "Missing the required parameter 'financial_offer_id' when calling NucleusApi.get_financial_offer"
      end
      # resource path
      local_var_path = '/nucleus/v1/financial_offer/{financial_offer_id}'.sub('{' + 'financial_offer_id' + '}', financial_offer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificFinancialOfferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_financial_offer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all financial offers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetFinancialOfferResponse]
    def get_financial_offers(opts = {})
      data, _status_code, _headers = get_financial_offers_with_http_info(opts)
      data
    end

    # List all financial offers
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetFinancialOfferResponse, Fixnum, Hash)>] GetFinancialOfferResponse data, response status code and response headers
    def get_financial_offers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_financial_offers ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_financial_offers, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_financial_offers, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/financial_offer'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetFinancialOfferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_financial_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a funding request
    # @param funding_id UUID of a funding record
    # @param [Hash] opts the optional parameters
    # @return [SpecificFundingRequestResponse]
    def get_funding_request(funding_id, opts = {})
      data, _status_code, _headers = get_funding_request_with_http_info(funding_id, opts)
      data
    end

    # Retrieve a funding request
    # @param funding_id UUID of a funding record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificFundingRequestResponse, Fixnum, Hash)>] SpecificFundingRequestResponse data, response status code and response headers
    def get_funding_request_with_http_info(funding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_funding_request ...'
      end
      # verify the required parameter 'funding_id' is set
      if @api_client.config.client_side_validation && funding_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_id' when calling NucleusApi.get_funding_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding/{funding_id}'.sub('{' + 'funding_id' + '}', funding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificFundingRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_funding_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all funding requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetFundingRequestResponse]
    def get_funding_requests(opts = {})
      data, _status_code, _headers = get_funding_requests_with_http_info(opts)
      data
    end

    # List all funding requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetFundingRequestResponse, Fixnum, Hash)>] GetFundingRequestResponse data, response status code and response headers
    def get_funding_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_funding_requests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_funding_requests, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_funding_requests, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/funding'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetFundingRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_funding_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a goal
    # @param goal_id UUID of a goal
    # @param [Hash] opts the optional parameters
    # @return [SpecificGoalResponse]
    def get_goal(goal_id, opts = {})
      data, _status_code, _headers = get_goal_with_http_info(goal_id, opts)
      data
    end

    # Retrieve a goal
    # @param goal_id UUID of a goal
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificGoalResponse, Fixnum, Hash)>] SpecificGoalResponse data, response status code and response headers
    def get_goal_with_http_info(goal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goal ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling NucleusApi.get_goal"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificGoalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List goal asset sizes
    # @param goal_id UUID of a goal
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GoalAssetSizeResponse]
    def get_goal_asset_sizes(goal_id, client_id, opts = {})
      data, _status_code, _headers = get_goal_asset_sizes_with_http_info(goal_id, client_id, opts)
      data
    end

    # List goal asset sizes
    # @param goal_id UUID of a goal
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GoalAssetSizeResponse, Fixnum, Hash)>] GoalAssetSizeResponse data, response status code and response headers
    def get_goal_asset_sizes_with_http_info(goal_id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goal_asset_sizes ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling NucleusApi.get_goal_asset_sizes"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_goal_asset_sizes"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}/asset_size'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_id'] = client_id
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goal_asset_sizes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List goal holdings
    # @param goal_id UUID of a goal
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GoalHoldingsResponse]
    def get_goal_holdings(goal_id, client_id, opts = {})
      data, _status_code, _headers = get_goal_holdings_with_http_info(goal_id, client_id, opts)
      data
    end

    # List goal holdings
    # @param goal_id UUID of a goal
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GoalHoldingsResponse, Fixnum, Hash)>] GoalHoldingsResponse data, response status code and response headers
    def get_goal_holdings_with_http_info(goal_id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goal_holdings ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling NucleusApi.get_goal_holdings"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_goal_holdings"
      end
      # resource path
      local_var_path = '/goal/{goal_id}/holding'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_id'] = client_id
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalHoldingsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goal_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get goal performance
    # @param goal_id UUID of a goal
    # @param stat Performance statistic
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_goal_performance(goal_id, stat, client_id, opts = {})
      data, _status_code, _headers = get_goal_performance_with_http_info(goal_id, stat, client_id, opts)
      data
    end

    # Get goal performance
    # @param goal_id UUID of a goal
    # @param stat Performance statistic
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_goal_performance_with_http_info(goal_id, stat, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goal_performance ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling NucleusApi.get_goal_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_goal_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_goal_performance"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}/performance'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat
      query_params[:'client_id'] = client_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goal_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a goal track record
    # @param goal_track_id UUID of a goal tracking record
    # @param [Hash] opts the optional parameters
    # @return [SpecificGoalTrackResponse]
    def get_goal_track_record(goal_track_id, opts = {})
      data, _status_code, _headers = get_goal_track_record_with_http_info(goal_track_id, opts)
      data
    end

    # Retrieve a goal track record
    # @param goal_track_id UUID of a goal tracking record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificGoalTrackResponse, Fixnum, Hash)>] SpecificGoalTrackResponse data, response status code and response headers
    def get_goal_track_record_with_http_info(goal_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goal_track_record ...'
      end
      # verify the required parameter 'goal_track_id' is set
      if @api_client.config.client_side_validation && goal_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track_id' when calling NucleusApi.get_goal_track_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track/{goal_track_id}'.sub('{' + 'goal_track_id' + '}', goal_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificGoalTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goal_track_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all goal track records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetGoalTrackResponse]
    def get_goal_track_records(opts = {})
      data, _status_code, _headers = get_goal_track_records_with_http_info(opts)
      data
    end

    # List all goal track records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetGoalTrackResponse, Fixnum, Hash)>] GetGoalTrackResponse data, response status code and response headers
    def get_goal_track_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goal_track_records ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_goal_track_records, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_goal_track_records, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/goal_track'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetGoalTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goal_track_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List goal transactions
    # @param goal_id UUID of a goal
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GoalTransactionsResponse]
    def get_goal_transactions(goal_id, client_id, opts = {})
      data, _status_code, _headers = get_goal_transactions_with_http_info(goal_id, client_id, opts)
      data
    end

    # List goal transactions
    # @param goal_id UUID of a goal
    # @param client_id UUID of a client
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GoalTransactionsResponse, Fixnum, Hash)>] GoalTransactionsResponse data, response status code and response headers
    def get_goal_transactions_with_http_info(goal_id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goal_transactions ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling NucleusApi.get_goal_transactions"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.get_goal_transactions"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_goal_transactions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_goal_transactions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}/transaction'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_id'] = client_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoalTransactionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goal_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all goals
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetGoalResponse]
    def get_goals(opts = {})
      data, _status_code, _headers = get_goals_with_http_info(opts)
      data
    end

    # List all goals
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetGoalResponse, Fixnum, Hash)>] GetGoalResponse data, response status code and response headers
    def get_goals_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_goals ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_goals, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_goals, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/goal'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetGoalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_goals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a model
    # @param model_id UUID of a model
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelResponse]
    def get_model(model_id, opts = {})
      data, _status_code, _headers = get_model_with_http_info(model_id, opts)
      data
    end

    # Retrieve a model
    # @param model_id UUID of a model
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelResponse, Fixnum, Hash)>] SpecificModelResponse data, response status code and response headers
    def get_model_with_http_info(model_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model ...'
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling NucleusApi.get_model"
      end
      # resource path
      local_var_path = '/nucleus/v1/model/{model_id}'.sub('{' + 'model_id' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a model asset size
    # @param model_asset_size_id UUID of a model asset size record
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelAssetSizeResponse]
    def get_model_asset_size(model_asset_size_id, opts = {})
      data, _status_code, _headers = get_model_asset_size_with_http_info(model_asset_size_id, opts)
      data
    end

    # Retrieve a model asset size
    # @param model_asset_size_id UUID of a model asset size record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelAssetSizeResponse, Fixnum, Hash)>] SpecificModelAssetSizeResponse data, response status code and response headers
    def get_model_asset_size_with_http_info(model_asset_size_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_asset_size ...'
      end
      # verify the required parameter 'model_asset_size_id' is set
      if @api_client.config.client_side_validation && model_asset_size_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_asset_size_id' when calling NucleusApi.get_model_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_asset_size/{model_asset_size_id}'.sub('{' + 'model_asset_size_id' + '}', model_asset_size_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all model asset sizes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetModelAssetSizeResponse]
    def get_model_asset_sizes(opts = {})
      data, _status_code, _headers = get_model_asset_sizes_with_http_info(opts)
      data
    end

    # List all model asset sizes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetModelAssetSizeResponse, Fixnum, Hash)>] GetModelAssetSizeResponse data, response status code and response headers
    def get_model_asset_sizes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_asset_sizes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_model_asset_sizes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_model_asset_sizes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/model_asset_size'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetModelAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_asset_sizes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a model commentary
    # @param model_comment_id UUID of a model comment
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelCommentResponse]
    def get_model_comment(model_comment_id, opts = {})
      data, _status_code, _headers = get_model_comment_with_http_info(model_comment_id, opts)
      data
    end

    # Retrieve a model commentary
    # @param model_comment_id UUID of a model comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelCommentResponse, Fixnum, Hash)>] SpecificModelCommentResponse data, response status code and response headers
    def get_model_comment_with_http_info(model_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_comment ...'
      end
      # verify the required parameter 'model_comment_id' is set
      if @api_client.config.client_side_validation && model_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_comment_id' when calling NucleusApi.get_model_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_comment/{model_comment_id}'.sub('{' + 'model_comment_id' + '}', model_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all model commentary
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetModelCommentResponse]
    def get_model_comments(opts = {})
      data, _status_code, _headers = get_model_comments_with_http_info(opts)
      data
    end

    # List all model commentary
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetModelCommentResponse, Fixnum, Hash)>] GetModelCommentResponse data, response status code and response headers
    def get_model_comments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_comments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_model_comments, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_model_comments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/model_comment'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetModelCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a model holding
    # @param model_holding_id UUID of a model holding record
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelHoldingResponse]
    def get_model_holding(model_holding_id, opts = {})
      data, _status_code, _headers = get_model_holding_with_http_info(model_holding_id, opts)
      data
    end

    # Retrieve a model holding
    # @param model_holding_id UUID of a model holding record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelHoldingResponse, Fixnum, Hash)>] SpecificModelHoldingResponse data, response status code and response headers
    def get_model_holding_with_http_info(model_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_holding ...'
      end
      # verify the required parameter 'model_holding_id' is set
      if @api_client.config.client_side_validation && model_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_holding_id' when calling NucleusApi.get_model_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_holding/{model_holding_id}'.sub('{' + 'model_holding_id' + '}', model_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all model holdings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetModelHoldingResponse]
    def get_model_holdings(opts = {})
      data, _status_code, _headers = get_model_holdings_with_http_info(opts)
      data
    end

    # List all model holdings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetModelHoldingResponse, Fixnum, Hash)>] GetModelHoldingResponse data, response status code and response headers
    def get_model_holdings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_holdings ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_model_holdings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_model_holdings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/model_holding'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetModelHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get model performance
    # @param model_id UUID of a model
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_model_performance(model_id, stat, opts = {})
      data, _status_code, _headers = get_model_performance_with_http_info(model_id, stat, opts)
      data
    end

    # Get model performance
    # @param model_id UUID of a model
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_model_performance_with_http_info(model_id, stat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_performance ...'
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling NucleusApi.get_model_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_model_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # resource path
      local_var_path = '/nucleus/v1/model/{model_id}/performance'.sub('{' + 'model_id' + '}', model_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a model transaction
    # @param model_transaction_id UUID of a model transaction record
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelTransactionResponse]
    def get_model_transaction(model_transaction_id, opts = {})
      data, _status_code, _headers = get_model_transaction_with_http_info(model_transaction_id, opts)
      data
    end

    # Retrieve a model transaction
    # @param model_transaction_id UUID of a model transaction record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelTransactionResponse, Fixnum, Hash)>] SpecificModelTransactionResponse data, response status code and response headers
    def get_model_transaction_with_http_info(model_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_transaction ...'
      end
      # verify the required parameter 'model_transaction_id' is set
      if @api_client.config.client_side_validation && model_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_transaction_id' when calling NucleusApi.get_model_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_transaction/{model_transaction_id}'.sub('{' + 'model_transaction_id' + '}', model_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all model transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetModelTransactionResponse]
    def get_model_transactions(opts = {})
      data, _status_code, _headers = get_model_transactions_with_http_info(opts)
      data
    end

    # List all model transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetModelTransactionResponse, Fixnum, Hash)>] GetModelTransactionResponse data, response status code and response headers
    def get_model_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_model_transactions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_model_transactions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_model_transactions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/model_transaction'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetModelTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_model_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all models
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetModelResponse]
    def get_models(opts = {})
      data, _status_code, _headers = get_models_with_http_info(opts)
      data
    end

    # List all models
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetModelResponse, Fixnum, Hash)>] GetModelResponse data, response status code and response headers
    def get_models_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_models ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_models, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_models, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/model'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetModelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_models\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a node
    # @param node_id UUID of a node
    # @param [Hash] opts the optional parameters
    # @return [SpecificNodeResponse]
    def get_node(node_id, opts = {})
      data, _status_code, _headers = get_node_with_http_info(node_id, opts)
      data
    end

    # Retrieve a node
    # @param node_id UUID of a node
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificNodeResponse, Fixnum, Hash)>] SpecificNodeResponse data, response status code and response headers
    def get_node_with_http_info(node_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NucleusApi.get_node"
      end
      # resource path
      local_var_path = '/nucleus/v1/node/{node_id}'.sub('{' + 'node_id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificNodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a node relationship
    # @param node_relationship_id UUID of a node relationship
    # @param [Hash] opts the optional parameters
    # @return [SpecificNodeRelationshipResponse]
    def get_node_relationship(node_relationship_id, opts = {})
      data, _status_code, _headers = get_node_relationship_with_http_info(node_relationship_id, opts)
      data
    end

    # Retrieve a node relationship
    # @param node_relationship_id UUID of a node relationship
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificNodeRelationshipResponse, Fixnum, Hash)>] SpecificNodeRelationshipResponse data, response status code and response headers
    def get_node_relationship_with_http_info(node_relationship_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_node_relationship ...'
      end
      # verify the required parameter 'node_relationship_id' is set
      if @api_client.config.client_side_validation && node_relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_relationship_id' when calling NucleusApi.get_node_relationship"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship/{node_relationship_id}'.sub('{' + 'node_relationship_id' + '}', node_relationship_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificNodeRelationshipResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_node_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all node relationships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetNodeRelationshipResponse]
    def get_node_relationships(opts = {})
      data, _status_code, _headers = get_node_relationships_with_http_info(opts)
      data
    end

    # List all node relationships
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetNodeRelationshipResponse, Fixnum, Hash)>] GetNodeRelationshipResponse data, response status code and response headers
    def get_node_relationships_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_node_relationships ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_node_relationships, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_node_relationships, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/node_relationship'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetNodeRelationshipResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_node_relationships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all nodes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetNodeResponse]
    def get_nodes(opts = {})
      data, _status_code, _headers = get_nodes_with_http_info(opts)
      data
    end

    # List all nodes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetNodeResponse, Fixnum, Hash)>] GetNodeResponse data, response status code and response headers
    def get_nodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_nodes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_nodes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_nodes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/node'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetNodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an order record
    # @param order_id UUID of an order record
    # @param [Hash] opts the optional parameters
    # @return [SpecificOrderResponse]
    def get_order_record(order_id, opts = {})
      data, _status_code, _headers = get_order_record_with_http_info(order_id, opts)
      data
    end

    # Retrieve an order record
    # @param order_id UUID of an order record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificOrderResponse, Fixnum, Hash)>] SpecificOrderResponse data, response status code and response headers
    def get_order_record_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_order_record ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling NucleusApi.get_order_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order/{order_id}'.sub('{' + 'order_id' + '}', order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_order_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all order records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetOrderResponse]
    def get_order_records(opts = {})
      data, _status_code, _headers = get_order_records_with_http_info(opts)
      data
    end

    # List all order records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetOrderResponse, Fixnum, Hash)>] GetOrderResponse data, response status code and response headers
    def get_order_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_order_records ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_order_records, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_order_records, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/order'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_order_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an order status
    # @param order_status_id UUID of an order status record
    # @param [Hash] opts the optional parameters
    # @return [SpecificOrderStatusResponse]
    def get_order_status(order_status_id, opts = {})
      data, _status_code, _headers = get_order_status_with_http_info(order_status_id, opts)
      data
    end

    # Retrieve an order status
    # @param order_status_id UUID of an order status record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificOrderStatusResponse, Fixnum, Hash)>] SpecificOrderStatusResponse data, response status code and response headers
    def get_order_status_with_http_info(order_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_order_status ...'
      end
      # verify the required parameter 'order_status_id' is set
      if @api_client.config.client_side_validation && order_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_status_id' when calling NucleusApi.get_order_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status/{order_status_id}'.sub('{' + 'order_status_id' + '}', order_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificOrderStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_order_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all order statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetOrderStatusResponse]
    def get_order_statuses(opts = {})
      data, _status_code, _headers = get_order_statuses_with_http_info(opts)
      data
    end

    # List all order statuses
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetOrderStatusResponse, Fixnum, Hash)>] GetOrderStatusResponse data, response status code and response headers
    def get_order_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_order_statuses ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_order_statuses, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_order_statuses, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/order_status'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetOrderStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_order_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an order tracking record
    # @param order_track_id UUID of an order tracking record
    # @param [Hash] opts the optional parameters
    # @return [SpecificOrderTrackResponse]
    def get_order_tracking_record(order_track_id, opts = {})
      data, _status_code, _headers = get_order_tracking_record_with_http_info(order_track_id, opts)
      data
    end

    # Retrieve an order tracking record
    # @param order_track_id UUID of an order tracking record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificOrderTrackResponse, Fixnum, Hash)>] SpecificOrderTrackResponse data, response status code and response headers
    def get_order_tracking_record_with_http_info(order_track_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_order_tracking_record ...'
      end
      # verify the required parameter 'order_track_id' is set
      if @api_client.config.client_side_validation && order_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_track_id' when calling NucleusApi.get_order_tracking_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track/{order_track_id}'.sub('{' + 'order_track_id' + '}', order_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificOrderTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_order_tracking_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all order tracking records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetOrderTrackResponse]
    def get_order_tracking_records(opts = {})
      data, _status_code, _headers = get_order_tracking_records_with_http_info(opts)
      data
    end

    # List all order tracking records
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetOrderTrackResponse, Fixnum, Hash)>] GetOrderTrackResponse data, response status code and response headers
    def get_order_tracking_records_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_order_tracking_records ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_order_tracking_records, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_order_tracking_records, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/order_track'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetOrderTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_order_tracking_records\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a portfolio
    # @param portfolio_id UUID of a portfolio
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioResponse]
    def get_portfolio(portfolio_id, opts = {})
      data, _status_code, _headers = get_portfolio_with_http_info(portfolio_id, opts)
      data
    end

    # Retrieve a portfolio
    # @param portfolio_id UUID of a portfolio
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioResponse, Fixnum, Hash)>] SpecificPortfolioResponse data, response status code and response headers
    def get_portfolio_with_http_info(portfolio_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.get_portfolio"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a portfolio asset size
    # @param portfolio_asset_size_id UUID of a portfolio asset size record
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioAssetSizeResponse]
    def get_portfolio_asset_size(portfolio_asset_size_id, opts = {})
      data, _status_code, _headers = get_portfolio_asset_size_with_http_info(portfolio_asset_size_id, opts)
      data
    end

    # Retrieve a portfolio asset size
    # @param portfolio_asset_size_id UUID of a portfolio asset size record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioAssetSizeResponse, Fixnum, Hash)>] SpecificPortfolioAssetSizeResponse data, response status code and response headers
    def get_portfolio_asset_size_with_http_info(portfolio_asset_size_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_asset_size ...'
      end
      # verify the required parameter 'portfolio_asset_size_id' is set
      if @api_client.config.client_side_validation && portfolio_asset_size_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_asset_size_id' when calling NucleusApi.get_portfolio_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}'.sub('{' + 'portfolio_asset_size_id' + '}', portfolio_asset_size_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all portfolio asset sizes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetPortfolioAssetSizeResponse]
    def get_portfolio_asset_sizes(opts = {})
      data, _status_code, _headers = get_portfolio_asset_sizes_with_http_info(opts)
      data
    end

    # List all portfolio asset sizes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetPortfolioAssetSizeResponse, Fixnum, Hash)>] GetPortfolioAssetSizeResponse data, response status code and response headers
    def get_portfolio_asset_sizes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_asset_sizes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_portfolio_asset_sizes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_portfolio_asset_sizes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/portfolio_asset_size'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPortfolioAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_asset_sizes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a portfolio commentary
    # @param portfolio_comment_id UUID of a portfolio comment
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioCommentResponse]
    def get_portfolio_comment(portfolio_comment_id, opts = {})
      data, _status_code, _headers = get_portfolio_comment_with_http_info(portfolio_comment_id, opts)
      data
    end

    # Retrieve a portfolio commentary
    # @param portfolio_comment_id UUID of a portfolio comment
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioCommentResponse, Fixnum, Hash)>] SpecificPortfolioCommentResponse data, response status code and response headers
    def get_portfolio_comment_with_http_info(portfolio_comment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_comment ...'
      end
      # verify the required parameter 'portfolio_comment_id' is set
      if @api_client.config.client_side_validation && portfolio_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_comment_id' when calling NucleusApi.get_portfolio_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_comment/{portfolio_comment_id}'.sub('{' + 'portfolio_comment_id' + '}', portfolio_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all portfolio commentary
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetPortfolioCommentResponse]
    def get_portfolio_comments(opts = {})
      data, _status_code, _headers = get_portfolio_comments_with_http_info(opts)
      data
    end

    # List all portfolio commentary
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetPortfolioCommentResponse, Fixnum, Hash)>] GetPortfolioCommentResponse data, response status code and response headers
    def get_portfolio_comments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_comments ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_portfolio_comments, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_portfolio_comments, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/portfolio_comment'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPortfolioCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a portfolio holding
    # @param portfolio_holding_id UUID of a portfolio holding record
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioHoldingResponse]
    def get_portfolio_holding(portfolio_holding_id, opts = {})
      data, _status_code, _headers = get_portfolio_holding_with_http_info(portfolio_holding_id, opts)
      data
    end

    # Retrieve a portfolio holding
    # @param portfolio_holding_id UUID of a portfolio holding record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioHoldingResponse, Fixnum, Hash)>] SpecificPortfolioHoldingResponse data, response status code and response headers
    def get_portfolio_holding_with_http_info(portfolio_holding_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_holding ...'
      end
      # verify the required parameter 'portfolio_holding_id' is set
      if @api_client.config.client_side_validation && portfolio_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_holding_id' when calling NucleusApi.get_portfolio_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_holding/{portfolio_holding_id}'.sub('{' + 'portfolio_holding_id' + '}', portfolio_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all portfolio holdings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetPortfolioHoldingResponse]
    def get_portfolio_holdings(opts = {})
      data, _status_code, _headers = get_portfolio_holdings_with_http_info(opts)
      data
    end

    # List all portfolio holdings
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetPortfolioHoldingResponse, Fixnum, Hash)>] GetPortfolioHoldingResponse data, response status code and response headers
    def get_portfolio_holdings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_holdings ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_portfolio_holdings, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_portfolio_holdings, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/portfolio_holding'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPortfolioHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_holdings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get portfolio performance
    # @param portfolio_id UUID of a portfolio
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_portfolio_performance(portfolio_id, stat, opts = {})
      data, _status_code, _headers = get_portfolio_performance_with_http_info(portfolio_id, stat, opts)
      data
    end

    # Get portfolio performance
    # @param portfolio_id UUID of a portfolio
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_portfolio_performance_with_http_info(portfolio_id, stat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_performance ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.get_portfolio_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_portfolio_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/performance'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a portfolio transaction
    # @param portfolio_transaction_id UUID of a portfolio transaction record
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioTransactionResponse]
    def get_portfolio_transaction(portfolio_transaction_id, opts = {})
      data, _status_code, _headers = get_portfolio_transaction_with_http_info(portfolio_transaction_id, opts)
      data
    end

    # Retrieve a portfolio transaction
    # @param portfolio_transaction_id UUID of a portfolio transaction record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioTransactionResponse, Fixnum, Hash)>] SpecificPortfolioTransactionResponse data, response status code and response headers
    def get_portfolio_transaction_with_http_info(portfolio_transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_transaction ...'
      end
      # verify the required parameter 'portfolio_transaction_id' is set
      if @api_client.config.client_side_validation && portfolio_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_transaction_id' when calling NucleusApi.get_portfolio_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}'.sub('{' + 'portfolio_transaction_id' + '}', portfolio_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all portfolio transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetPortfolioTransactionResponse]
    def get_portfolio_transactions(opts = {})
      data, _status_code, _headers = get_portfolio_transactions_with_http_info(opts)
      data
    end

    # List all portfolio transactions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetPortfolioTransactionResponse, Fixnum, Hash)>] GetPortfolioTransactionResponse data, response status code and response headers
    def get_portfolio_transactions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolio_transactions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_portfolio_transactions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_portfolio_transactions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/portfolio_transaction'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPortfolioTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolio_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all portfolios
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetPortfolioResponse]
    def get_portfolios(opts = {})
      data, _status_code, _headers = get_portfolios_with_http_info(opts)
      data
    end

    # List all portfolios
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetPortfolioResponse, Fixnum, Hash)>] GetPortfolioResponse data, response status code and response headers
    def get_portfolios_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_portfolios ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_portfolios, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_portfolios, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/portfolio'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetPortfolioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_portfolios\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a questionnaire
    # @param questionnaire_id UUID of a questionnaire
    # @param [Hash] opts the optional parameters
    # @return [SpecificQuestionnaireResponse]
    def get_questionnaire(questionnaire_id, opts = {})
      data, _status_code, _headers = get_questionnaire_with_http_info(questionnaire_id, opts)
      data
    end

    # Retrieve a questionnaire
    # @param questionnaire_id UUID of a questionnaire
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificQuestionnaireResponse, Fixnum, Hash)>] SpecificQuestionnaireResponse data, response status code and response headers
    def get_questionnaire_with_http_info(questionnaire_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_questionnaire ...'
      end
      # verify the required parameter 'questionnaire_id' is set
      if @api_client.config.client_side_validation && questionnaire_id.nil?
        fail ArgumentError, "Missing the required parameter 'questionnaire_id' when calling NucleusApi.get_questionnaire"
      end
      # resource path
      local_var_path = '/nucleus/v1/questionnaire/{questionnaire_id}'.sub('{' + 'questionnaire_id' + '}', questionnaire_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificQuestionnaireResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_questionnaire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all questionnaires
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetQuestionnaireResponse]
    def get_questionnaires(opts = {})
      data, _status_code, _headers = get_questionnaires_with_http_info(opts)
      data
    end

    # List all questionnaires
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetQuestionnaireResponse, Fixnum, Hash)>] GetQuestionnaireResponse data, response status code and response headers
    def get_questionnaires_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_questionnaires ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_questionnaires, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_questionnaires, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/questionnaire'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetQuestionnaireResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_questionnaires\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a score
    # @param score_id UUID of a score record
    # @param [Hash] opts the optional parameters
    # @return [SpecificScoreResponse]
    def get_score(score_id, opts = {})
      data, _status_code, _headers = get_score_with_http_info(score_id, opts)
      data
    end

    # Retrieve a score
    # @param score_id UUID of a score record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificScoreResponse, Fixnum, Hash)>] SpecificScoreResponse data, response status code and response headers
    def get_score_with_http_info(score_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_score ...'
      end
      # verify the required parameter 'score_id' is set
      if @api_client.config.client_side_validation && score_id.nil?
        fail ArgumentError, "Missing the required parameter 'score_id' when calling NucleusApi.get_score"
      end
      # resource path
      local_var_path = '/nucleus/v1/score/{score_id}'.sub('{' + 'score_id' + '}', score_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all scores
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetScoreResponse]
    def get_scores(opts = {})
      data, _status_code, _headers = get_scores_with_http_info(opts)
      data
    end

    # List all scores
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetScoreResponse, Fixnum, Hash)>] GetScoreResponse data, response status code and response headers
    def get_scores_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_scores ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_scores, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_scores, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/score'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_scores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all securities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetSecurityResponse]
    def get_securities(opts = {})
      data, _status_code, _headers = get_securities_with_http_info(opts)
      data
    end

    # List all securities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetSecurityResponse, Fixnum, Hash)>] GetSecurityResponse data, response status code and response headers
    def get_securities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_securities ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_securities, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_securities, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/security'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSecurityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_securities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a security
    # @param security_id UUID of a security
    # @param [Hash] opts the optional parameters
    # @return [SpecificSecurityResponse]
    def get_security(security_id, opts = {})
      data, _status_code, _headers = get_security_with_http_info(security_id, opts)
      data
    end

    # Retrieve a security
    # @param security_id UUID of a security
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSecurityResponse, Fixnum, Hash)>] SpecificSecurityResponse data, response status code and response headers
    def get_security_with_http_info(security_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_security ...'
      end
      # verify the required parameter 'security_id' is set
      if @api_client.config.client_side_validation && security_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_id' when calling NucleusApi.get_security"
      end
      # resource path
      local_var_path = '/nucleus/v1/security/{security_id}'.sub('{' + 'security_id' + '}', security_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSecurityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_security\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a security exclusion
    # @param security_exclusion_id UUID of a security exclusion record
    # @param [Hash] opts the optional parameters
    # @return [SpecificSecurityExclusionResponse]
    def get_security_exclusion(security_exclusion_id, opts = {})
      data, _status_code, _headers = get_security_exclusion_with_http_info(security_exclusion_id, opts)
      data
    end

    # Retrieve a security exclusion
    # @param security_exclusion_id UUID of a security exclusion record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSecurityExclusionResponse, Fixnum, Hash)>] SpecificSecurityExclusionResponse data, response status code and response headers
    def get_security_exclusion_with_http_info(security_exclusion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_security_exclusion ...'
      end
      # verify the required parameter 'security_exclusion_id' is set
      if @api_client.config.client_side_validation && security_exclusion_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_exclusion_id' when calling NucleusApi.get_security_exclusion"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_exclusion/{security_exclusion_id}'.sub('{' + 'security_exclusion_id' + '}', security_exclusion_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSecurityExclusionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_security_exclusion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all security exclusions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetSecurityExclusionResponse]
    def get_security_exclusions(opts = {})
      data, _status_code, _headers = get_security_exclusions_with_http_info(opts)
      data
    end

    # List all security exclusions
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetSecurityExclusionResponse, Fixnum, Hash)>] GetSecurityExclusionResponse data, response status code and response headers
    def get_security_exclusions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_security_exclusions ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_security_exclusions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_security_exclusions, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/security_exclusion'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSecurityExclusionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_security_exclusions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get security performance
    # @param security_id UUID of a security
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [PerformanceResponse]
    def get_security_performance(security_id, stat, opts = {})
      data, _status_code, _headers = get_security_performance_with_http_info(security_id, stat, opts)
      data
    end

    # Get security performance
    # @param security_id UUID of a security
    # @param stat Performance statistic
    # @param [Hash] opts the optional parameters
    # @return [Array<(PerformanceResponse, Fixnum, Hash)>] PerformanceResponse data, response status code and response headers
    def get_security_performance_with_http_info(security_id, stat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_security_performance ...'
      end
      # verify the required parameter 'security_id' is set
      if @api_client.config.client_side_validation && security_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_id' when calling NucleusApi.get_security_performance"
      end
      # verify the required parameter 'stat' is set
      if @api_client.config.client_side_validation && stat.nil?
        fail ArgumentError, "Missing the required parameter 'stat' when calling NucleusApi.get_security_performance"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cum_return', 'ann_return', 'daily_return', 'mtd_return', 'ytd_return', 'rolling_n_day_return', 'calendar_monthly_return', 'calendar_quarterly_return', 'calendar_yearly_return', 'one_yr_return', 'three_yr_return', 'five_yr_return', 'seven_yr_return', 'ten_yr_return', 'best_month', 'worst_month', 'best_yr', 'worst_yr', 'best_qtr', 'worst_qtr', 'avg_return', 'avg_gain', 'avg_loss', 'alpha', 'active_premium', 'tracking_error', 'moving_avg_n_day', 'dollar_growth', 'ann_vol', 'daily_vol', 'rolling_n_day_vol', 'downside_deviation', 'semi_deviation', 'beta', 'correlation', 'covariance', 'r_squared', 'drawdown', 'max_drawdown', 'rolling_n_day_max_drawdown', 'upside_risk', 'downside_risk', 'current_drawdown', 'var', 'sharpe_ratio', 'treynor_ratio', 'sortino_ratio', 'up_capture', 'down_capture', 'information_ratio', 'calmar_ratio', 'pct_gain_ratio', 'pct_loss_ratio', 'gain_loss_ratio', 'profit_loss_ratio', 'up_pct_ratio', 'down_pct_ratio', 'sterling_ratio', 'skewness', 'kurtosis', 'monte_carlo', 'histogram', 'tstat'].include?(stat)
        fail ArgumentError, "invalid value for 'stat', must be one of cum_return, ann_return, daily_return, mtd_return, ytd_return, rolling_n_day_return, calendar_monthly_return, calendar_quarterly_return, calendar_yearly_return, one_yr_return, three_yr_return, five_yr_return, seven_yr_return, ten_yr_return, best_month, worst_month, best_yr, worst_yr, best_qtr, worst_qtr, avg_return, avg_gain, avg_loss, alpha, active_premium, tracking_error, moving_avg_n_day, dollar_growth, ann_vol, daily_vol, rolling_n_day_vol, downside_deviation, semi_deviation, beta, correlation, covariance, r_squared, drawdown, max_drawdown, rolling_n_day_max_drawdown, upside_risk, downside_risk, current_drawdown, var, sharpe_ratio, treynor_ratio, sortino_ratio, up_capture, down_capture, information_ratio, calmar_ratio, pct_gain_ratio, pct_loss_ratio, gain_loss_ratio, profit_loss_ratio, up_pct_ratio, down_pct_ratio, sterling_ratio, skewness, kurtosis, monte_carlo, histogram, tstat"
      end
      # resource path
      local_var_path = '/nucleus/v1/security/{security_id}/performance'.sub('{' + 'security_id' + '}', security_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'stat'] = stat

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PerformanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_security_performance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a security price
    # @param security_price_id UUID of a security price record
    # @param [Hash] opts the optional parameters
    # @return [SpecificSecurityPriceResponse]
    def get_security_price(security_price_id, opts = {})
      data, _status_code, _headers = get_security_price_with_http_info(security_price_id, opts)
      data
    end

    # Retrieve a security price
    # @param security_price_id UUID of a security price record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSecurityPriceResponse, Fixnum, Hash)>] SpecificSecurityPriceResponse data, response status code and response headers
    def get_security_price_with_http_info(security_price_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_security_price ...'
      end
      # verify the required parameter 'security_price_id' is set
      if @api_client.config.client_side_validation && security_price_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_price_id' when calling NucleusApi.get_security_price"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_price/{security_price_id}'.sub('{' + 'security_price_id' + '}', security_price_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSecurityPriceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_security_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all security prices
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetSecurityPriceResponse]
    def get_security_prices(opts = {})
      data, _status_code, _headers = get_security_prices_with_http_info(opts)
      data
    end

    # List all security prices
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetSecurityPriceResponse, Fixnum, Hash)>] GetSecurityPriceResponse data, response status code and response headers
    def get_security_prices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_security_prices ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_security_prices, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_security_prices, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/security_price'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSecurityPriceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_security_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a transaction code
    # @param transaction_code_id UUID of a transaction code
    # @param [Hash] opts the optional parameters
    # @return [SpecificTransactionCodeResponse]
    def get_transaction_code(transaction_code_id, opts = {})
      data, _status_code, _headers = get_transaction_code_with_http_info(transaction_code_id, opts)
      data
    end

    # Retrieve a transaction code
    # @param transaction_code_id UUID of a transaction code
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificTransactionCodeResponse, Fixnum, Hash)>] SpecificTransactionCodeResponse data, response status code and response headers
    def get_transaction_code_with_http_info(transaction_code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_transaction_code ...'
      end
      # verify the required parameter 'transaction_code_id' is set
      if @api_client.config.client_side_validation && transaction_code_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_code_id' when calling NucleusApi.get_transaction_code"
      end
      # resource path
      local_var_path = '/nucleus/v1/transaction_code/{transaction_code_id}'.sub('{' + 'transaction_code_id' + '}', transaction_code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificTransactionCodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_transaction_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all transaction codes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetTransactionCodeResponse]
    def get_transaction_codes(opts = {})
      data, _status_code, _headers = get_transaction_codes_with_http_info(opts)
      data
    end

    # List all transaction codes
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetTransactionCodeResponse, Fixnum, Hash)>] GetTransactionCodeResponse data, response status code and response headers
    def get_transaction_codes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_transaction_codes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_transaction_codes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_transaction_codes, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/transaction_code'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTransactionCodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_transaction_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a transfer request
    # @param transfer_id UUID of an account transfer record
    # @param [Hash] opts the optional parameters
    # @return [SpecificTransferResponse]
    def get_transfer_request(transfer_id, opts = {})
      data, _status_code, _headers = get_transfer_request_with_http_info(transfer_id, opts)
      data
    end

    # Retrieve a transfer request
    # @param transfer_id UUID of an account transfer record
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificTransferResponse, Fixnum, Hash)>] SpecificTransferResponse data, response status code and response headers
    def get_transfer_request_with_http_info(transfer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_transfer_request ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling NucleusApi.get_transfer_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer/{transfer_id}'.sub('{' + 'transfer_id' + '}', transfer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificTransferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_transfer_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all transfer requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetTransferResponse]
    def get_transfer_requests(opts = {})
      data, _status_code, _headers = get_transfer_requests_with_http_info(opts)
      data
    end

    # List all transfer requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetTransferResponse, Fixnum, Hash)>] GetTransferResponse data, response status code and response headers
    def get_transfer_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_transfer_requests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_transfer_requests, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_transfer_requests, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/transfer'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetTransferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_transfer_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a withdrawal request
    # @param withdrawal_id UUID of a withdrawal request
    # @param [Hash] opts the optional parameters
    # @return [SpecificWithdrawalResponse]
    def get_withdrawal_request(withdrawal_id, opts = {})
      data, _status_code, _headers = get_withdrawal_request_with_http_info(withdrawal_id, opts)
      data
    end

    # Retrieve a withdrawal request
    # @param withdrawal_id UUID of a withdrawal request
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificWithdrawalResponse, Fixnum, Hash)>] SpecificWithdrawalResponse data, response status code and response headers
    def get_withdrawal_request_with_http_info(withdrawal_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_withdrawal_request ...'
      end
      # verify the required parameter 'withdrawal_id' is set
      if @api_client.config.client_side_validation && withdrawal_id.nil?
        fail ArgumentError, "Missing the required parameter 'withdrawal_id' when calling NucleusApi.get_withdrawal_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/withdrawal/{withdrawal_id}'.sub('{' + 'withdrawal_id' + '}', withdrawal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificWithdrawalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_withdrawal_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all withdrawal requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0 (default to 0)
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value. (default to 25)
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date. (default to update_date)
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending. (default to false)
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [GetWithdrawalResponse]
    def get_withdrawal_requests(opts = {})
      data, _status_code, _headers = get_withdrawal_requests_with_http_info(opts)
      data
    end

    # List all withdrawal requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
    # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
    # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
    # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
    # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
    # @return [Array<(GetWithdrawalResponse, Fixnum, Hash)>] GetWithdrawalResponse data, response status code and response headers
    def get_withdrawal_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.get_withdrawal_requests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling NucleusApi.get_withdrawal_requests, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'size'].nil? && opts[:'size'] < 0
        fail ArgumentError, 'invalid value for "opts[:"size"]" when calling NucleusApi.get_withdrawal_requests, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/nucleus/v1/withdrawal'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetWithdrawalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#get_withdrawal_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account under a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAccountResponse]
    def post_account(payload, opts = {})
      data, _status_code, _headers = post_account_with_http_info(payload, opts)
      data
    end

    # Create an account under a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAccountResponse, Fixnum, Hash)>] CreateAccountResponse data, response status code and response headers
    def post_account_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountAllocationResponse]
    def post_account_allocation(payload, opts = {})
      data, _status_code, _headers = post_account_allocation_with_http_info(payload, opts)
      data
    end

    # Create an account allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountAllocationResponse, Fixnum, Hash)>] SpecificAccountAllocationResponse data, response status code and response headers
    def post_account_allocation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_allocation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk orders for an account
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [BulkOrderFirmclientaccountResponse]
    def post_account_bulk_order(account_id, payload, opts = {})
      data, _status_code, _headers = post_account_bulk_order_with_http_info(account_id, payload, opts)
      data
    end

    # Bulk orders for an account
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkOrderFirmclientaccountResponse, Fixnum, Hash)>] BulkOrderFirmclientaccountResponse data, response status code and response headers
    def post_account_bulk_order_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_bulk_order ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.post_account_bulk_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_bulk_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_bulk'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkOrderFirmclientaccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_bulk_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create buy-only account rebalance orders
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_account_rebalance_buy_only_order(account_id, payload, opts = {})
      post_account_rebalance_buy_only_order_with_http_info(account_id, payload, opts)
      nil
    end

    # Create buy-only account rebalance orders
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_account_rebalance_buy_only_order_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_rebalance_buy_only_order ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.post_account_rebalance_buy_only_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_rebalance_buy_only_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_buy_only'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_rebalance_buy_only_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create account rebalance orders
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificOrderTrackResponse]
    def post_account_rebalance_order(account_id, payload, opts = {})
      data, _status_code, _headers = post_account_rebalance_order_with_http_info(account_id, payload, opts)
      data
    end

    # Create account rebalance orders
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificOrderTrackResponse, Fixnum, Hash)>] SpecificOrderTrackResponse data, response status code and response headers
    def post_account_rebalance_order_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_rebalance_order ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.post_account_rebalance_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_rebalance_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_rebalance'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificOrderTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_rebalance_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create sell-only account rebalance orders
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_account_rebalance_sell_only_order(account_id, payload, opts = {})
      post_account_rebalance_sell_only_order_with_http_info(account_id, payload, opts)
      nil
    end

    # Create sell-only account rebalance orders
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_account_rebalance_sell_only_order_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_rebalance_sell_only_order ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.post_account_rebalance_sell_only_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_rebalance_sell_only_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_sell_only'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_rebalance_sell_only_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sell all account order
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SellAllAccountResponse]
    def post_account_sell_all_order(account_id, payload, opts = {})
      data, _status_code, _headers = post_account_sell_all_order_with_http_info(account_id, payload, opts)
      data
    end

    # Sell all account order
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SellAllAccountResponse, Fixnum, Hash)>] SellAllAccountResponse data, response status code and response headers
    def post_account_sell_all_order_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_sell_all_order ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.post_account_sell_all_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_sell_all_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/order_sell_all'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SellAllAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_sell_all_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account stage
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountStageResponse]
    def post_account_stage(payload, opts = {})
      data, _status_code, _headers = post_account_stage_with_http_info(payload, opts)
      data
    end

    # Create an account stage
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountStageResponse, Fixnum, Hash)>] SpecificAccountStageResponse data, response status code and response headers
    def post_account_stage_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_stage ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_stage"
      end
      # resource path
      local_var_path = '/nucleus/v1/stage'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountStageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAccountStatusResponse]
    def post_account_status(payload, opts = {})
      data, _status_code, _headers = post_account_status_with_http_info(payload, opts)
      data
    end

    # Create an account status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAccountStatusResponse, Fixnum, Hash)>] CreateAccountStatusResponse data, response status code and response headers
    def post_account_status_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_status ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAccountStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account type
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GetAccountTypeSubresponse]
    def post_account_type(payload, opts = {})
      data, _status_code, _headers = post_account_type_with_http_info(payload, opts)
      data
    end

    # Create an account type
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountTypeSubresponse, Fixnum, Hash)>] GetAccountTypeSubresponse data, response status code and response headers
    def post_account_type_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_account_type ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_account_type"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountTypeSubresponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_account_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAggregationAccountResponse]
    def post_aggregation_account(payload, opts = {})
      data, _status_code, _headers = post_aggregation_account_with_http_info(payload, opts)
      data
    end

    # Create an aggregation account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAggregationAccountResponse, Fixnum, Hash)>] CreateAggregationAccountResponse data, response status code and response headers
    def post_aggregation_account_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_aggregation_account ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_aggregation_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAggregationAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_aggregation_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account balance
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAggregationAccountBalanceResponse]
    def post_aggregation_account_balance(payload, opts = {})
      data, _status_code, _headers = post_aggregation_account_balance_with_http_info(payload, opts)
      data
    end

    # Create an aggregation account balance
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAggregationAccountBalanceResponse, Fixnum, Hash)>] CreateAggregationAccountBalanceResponse data, response status code and response headers
    def post_aggregation_account_balance_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_aggregation_account_balance ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_aggregation_account_balance"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAggregationAccountBalanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_aggregation_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAggregationAccountHoldingResponse]
    def post_aggregation_account_holding(payload, opts = {})
      data, _status_code, _headers = post_aggregation_account_holding_with_http_info(payload, opts)
      data
    end

    # Create an aggregation account holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAggregationAccountHoldingResponse, Fixnum, Hash)>] CreateAggregationAccountHoldingResponse data, response status code and response headers
    def post_aggregation_account_holding_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_aggregation_account_holding ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_aggregation_account_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAggregationAccountHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_aggregation_account_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an aggregation account transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAggregationAccountTransactionResponse]
    def post_aggregation_account_transaction(payload, opts = {})
      data, _status_code, _headers = post_aggregation_account_transaction_with_http_info(payload, opts)
      data
    end

    # Create an aggregation account transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAggregationAccountTransactionResponse, Fixnum, Hash)>] CreateAggregationAccountTransactionResponse data, response status code and response headers
    def post_aggregation_account_transaction_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_aggregation_account_transaction ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_aggregation_account_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAggregationAccountTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_aggregation_account_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAllocationResponse]
    def post_allocation(payload, opts = {})
      data, _status_code, _headers = post_allocation_with_http_info(payload, opts)
      data
    end

    # Create an allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAllocationResponse, Fixnum, Hash)>] CreateAllocationResponse data, response status code and response headers
    def post_allocation_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_allocation ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an allocation composition
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateAllocationCompositionResponse]
    def post_allocation_composition(payload, opts = {})
      data, _status_code, _headers = post_allocation_composition_with_http_info(payload, opts)
      data
    end

    # Create an allocation composition
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAllocationCompositionResponse, Fixnum, Hash)>] CreateAllocationCompositionResponse data, response status code and response headers
    def post_allocation_composition_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_allocation_composition ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_allocation_composition"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation_composition'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateAllocationCompositionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_allocation_composition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a bank link
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateBankLinkResponse]
    def post_bank_link(payload, opts = {})
      data, _status_code, _headers = post_bank_link_with_http_info(payload, opts)
      data
    end

    # Create a bank link
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBankLinkResponse, Fixnum, Hash)>] CreateBankLinkResponse data, response status code and response headers
    def post_bank_link_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_bank_link ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_bank_link"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateBankLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_bank_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a benchmark
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateBenchmarkResponse]
    def post_benchmark(payload, opts = {})
      data, _status_code, _headers = post_benchmark_with_http_info(payload, opts)
      data
    end

    # Create a benchmark
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBenchmarkResponse, Fixnum, Hash)>] CreateBenchmarkResponse data, response status code and response headers
    def post_benchmark_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_benchmark ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_benchmark"
      end
      # resource path
      local_var_path = '/nucleus/v1/benchmark'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateBenchmarkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_benchmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a budget
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateBudgetResponse]
    def post_budget(payload, opts = {})
      data, _status_code, _headers = post_budget_with_http_info(payload, opts)
      data
    end

    # Create a budget
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBudgetResponse, Fixnum, Hash)>] CreateBudgetResponse data, response status code and response headers
    def post_budget_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_budget ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_budget"
      end
      # resource path
      local_var_path = '/nucleus/v1/budget'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateBudgetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk orders for your firm
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [BulkOrderFirmclientaccountResponse]
    def post_bulk_order(payload, opts = {})
      data, _status_code, _headers = post_bulk_order_with_http_info(payload, opts)
      data
    end

    # Bulk orders for your firm
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkOrderFirmclientaccountResponse, Fixnum, Hash)>] BulkOrderFirmclientaccountResponse data, response status code and response headers
    def post_bulk_order_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_bulk_order ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_bulk_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_bulk'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkOrderFirmclientaccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_bulk_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateClientResponse]
    def post_client(payload, opts = {})
      data, _status_code, _headers = post_client_with_http_info(payload, opts)
      data
    end

    # Create a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClientResponse, Fixnum, Hash)>] CreateClientResponse data, response status code and response headers
    def post_client_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_client ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_client"
      end
      # resource path
      local_var_path = '/nucleus/v1/client'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Bulk orders for a client
    # @param client_id UUID of a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [BulkOrderFirmclientaccountResponse]
    def post_client_bulk_order(client_id, payload, opts = {})
      data, _status_code, _headers = post_client_bulk_order_with_http_info(client_id, payload, opts)
      data
    end

    # Bulk orders for a client
    # @param client_id UUID of a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BulkOrderFirmclientaccountResponse, Fixnum, Hash)>] BulkOrderFirmclientaccountResponse data, response status code and response headers
    def post_client_bulk_order_with_http_info(client_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_client_bulk_order ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.post_client_bulk_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_client_bulk_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}/order_bulk'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BulkOrderFirmclientaccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_client_bulk_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a client-hydro relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateClientHydroResponse]
    def post_client_hydro(payload, opts = {})
      data, _status_code, _headers = post_client_hydro_with_http_info(payload, opts)
      data
    end

    # Create a client-hydro relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClientHydroResponse, Fixnum, Hash)>] CreateClientHydroResponse data, response status code and response headers
    def post_client_hydro_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_client_hydro ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_client_hydro"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_hydro'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateClientHydroResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_client_hydro\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a client response
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateClientResponseResponse]
    def post_client_response(payload, opts = {})
      data, _status_code, _headers = post_client_response_with_http_info(payload, opts)
      data
    end

    # Create a client response
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClientResponseResponse, Fixnum, Hash)>] CreateClientResponseResponse data, response status code and response headers
    def post_client_response_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_client_response ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_client_response"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateClientResponseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_client_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a decision tree
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateDecisionTreeResponse]
    def post_decision_tree(payload, opts = {})
      data, _status_code, _headers = post_decision_tree_with_http_info(payload, opts)
      data
    end

    # Create a decision tree
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDecisionTreeResponse, Fixnum, Hash)>] CreateDecisionTreeResponse data, response status code and response headers
    def post_decision_tree_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_decision_tree ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_decision_tree"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateDecisionTreeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_decision_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a deposit request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateDepositRequestResponse]
    def post_deposit_request(payload, opts = {})
      data, _status_code, _headers = post_deposit_request_with_http_info(payload, opts)
      data
    end

    # Create a deposit request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDepositRequestResponse, Fixnum, Hash)>] CreateDepositRequestResponse data, response status code and response headers
    def post_deposit_request_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_deposit_request ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_deposit_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/deposit'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateDepositRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_deposit_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a financial offer
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateFinancialOfferResponse]
    def post_financial_offer(payload, opts = {})
      data, _status_code, _headers = post_financial_offer_with_http_info(payload, opts)
      data
    end

    # Create a financial offer
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateFinancialOfferResponse, Fixnum, Hash)>] CreateFinancialOfferResponse data, response status code and response headers
    def post_financial_offer_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_financial_offer ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_financial_offer"
      end
      # resource path
      local_var_path = '/nucleus/v1/financial_offer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateFinancialOfferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_financial_offer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a funding request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateFundingRequestResponse]
    def post_funding_request(payload, opts = {})
      data, _status_code, _headers = post_funding_request_with_http_info(payload, opts)
      data
    end

    # Create a funding request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateFundingRequestResponse, Fixnum, Hash)>] CreateFundingRequestResponse data, response status code and response headers
    def post_funding_request_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_funding_request ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_funding_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateFundingRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_funding_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a goal
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateGoalResponse]
    def post_goal(payload, opts = {})
      data, _status_code, _headers = post_goal_with_http_info(payload, opts)
      data
    end

    # Create a goal
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGoalResponse, Fixnum, Hash)>] CreateGoalResponse data, response status code and response headers
    def post_goal_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_goal ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_goal"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateGoalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a goal track record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateGoalTrackResponse]
    def post_goal_track_record(payload, opts = {})
      data, _status_code, _headers = post_goal_track_record_with_http_info(payload, opts)
      data
    end

    # Create a goal track record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGoalTrackResponse, Fixnum, Hash)>] CreateGoalTrackResponse data, response status code and response headers
    def post_goal_track_record_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_goal_track_record ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_goal_track_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateGoalTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_goal_track_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a model
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateModelResponse]
    def post_model(payload, opts = {})
      data, _status_code, _headers = post_model_with_http_info(payload, opts)
      data
    end

    # Create a model
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateModelResponse, Fixnum, Hash)>] CreateModelResponse data, response status code and response headers
    def post_model_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_model ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_model"
      end
      # resource path
      local_var_path = '/nucleus/v1/model'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateModelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a model asset size
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateModelAssetSizeResponse]
    def post_model_asset_size(payload, opts = {})
      data, _status_code, _headers = post_model_asset_size_with_http_info(payload, opts)
      data
    end

    # Create a model asset size
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateModelAssetSizeResponse, Fixnum, Hash)>] CreateModelAssetSizeResponse data, response status code and response headers
    def post_model_asset_size_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_model_asset_size ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_model_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_asset_size'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateModelAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_model_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a model commentary
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateModelCommentResponse]
    def post_model_comment(payload, opts = {})
      data, _status_code, _headers = post_model_comment_with_http_info(payload, opts)
      data
    end

    # Create a model commentary
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateModelCommentResponse, Fixnum, Hash)>] CreateModelCommentResponse data, response status code and response headers
    def post_model_comment_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_model_comment ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_model_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_comment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateModelCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_model_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a model holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateModelHoldingResponse]
    def post_model_holding(payload, opts = {})
      data, _status_code, _headers = post_model_holding_with_http_info(payload, opts)
      data
    end

    # Create a model holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateModelHoldingResponse, Fixnum, Hash)>] CreateModelHoldingResponse data, response status code and response headers
    def post_model_holding_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_model_holding ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_model_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_holding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateModelHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_model_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a model transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateModelTransactionResponse]
    def post_model_transaction(payload, opts = {})
      data, _status_code, _headers = post_model_transaction_with_http_info(payload, opts)
      data
    end

    # Create a model transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateModelTransactionResponse, Fixnum, Hash)>] CreateModelTransactionResponse data, response status code and response headers
    def post_model_transaction_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_model_transaction ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_model_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_transaction'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateModelTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_model_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a node
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateNodeResponse]
    def post_node(payload, opts = {})
      data, _status_code, _headers = post_node_with_http_info(payload, opts)
      data
    end

    # Create a node
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateNodeResponse, Fixnum, Hash)>] CreateNodeResponse data, response status code and response headers
    def post_node_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_node ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_node"
      end
      # resource path
      local_var_path = '/nucleus/v1/node'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateNodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a node relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateNodeRelationshipResponse]
    def post_node_relationship(payload, opts = {})
      data, _status_code, _headers = post_node_relationship_with_http_info(payload, opts)
      data
    end

    # Create a node relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateNodeRelationshipResponse, Fixnum, Hash)>] CreateNodeRelationshipResponse data, response status code and response headers
    def post_node_relationship_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_node_relationship ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_node_relationship"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateNodeRelationshipResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_node_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an order record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateOrderResponse]
    def post_order_record(payload, opts = {})
      data, _status_code, _headers = post_order_record_with_http_info(payload, opts)
      data
    end

    # Create an order record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrderResponse, Fixnum, Hash)>] CreateOrderResponse data, response status code and response headers
    def post_order_record_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_order_record ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_order_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_order_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an order status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateOrderStatusResponse]
    def post_order_status(payload, opts = {})
      data, _status_code, _headers = post_order_status_with_http_info(payload, opts)
      data
    end

    # Create an order status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrderStatusResponse, Fixnum, Hash)>] CreateOrderStatusResponse data, response status code and response headers
    def post_order_status_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_order_status ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_order_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateOrderStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_order_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an order tracking record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateOrderTrackResponse]
    def post_order_tracking_record(payload, opts = {})
      data, _status_code, _headers = post_order_tracking_record_with_http_info(payload, opts)
      data
    end

    # Create an order tracking record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrderTrackResponse, Fixnum, Hash)>] CreateOrderTrackResponse data, response status code and response headers
    def post_order_tracking_record_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_order_tracking_record ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_order_tracking_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateOrderTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_order_tracking_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreatePortfolioResponse]
    def post_portfolio(payload, opts = {})
      data, _status_code, _headers = post_portfolio_with_http_info(payload, opts)
      data
    end

    # Create a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePortfolioResponse, Fixnum, Hash)>] CreatePortfolioResponse data, response status code and response headers
    def post_portfolio_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePortfolioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a portfolio asset size
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreatePortfolioAssetSizeResponse]
    def post_portfolio_asset_size(payload, opts = {})
      data, _status_code, _headers = post_portfolio_asset_size_with_http_info(payload, opts)
      data
    end

    # Create a portfolio asset size
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePortfolioAssetSizeResponse, Fixnum, Hash)>] CreatePortfolioAssetSizeResponse data, response status code and response headers
    def post_portfolio_asset_size_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_asset_size ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_asset_size'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePortfolioAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a portfolio commentary
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreatePortfolioCommentResponse]
    def post_portfolio_comment(payload, opts = {})
      data, _status_code, _headers = post_portfolio_comment_with_http_info(payload, opts)
      data
    end

    # Create a portfolio commentary
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePortfolioCommentResponse, Fixnum, Hash)>] CreatePortfolioCommentResponse data, response status code and response headers
    def post_portfolio_comment_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_comment ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_comment'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePortfolioCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a portfolio holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreatePortfolioHoldingResponse]
    def post_portfolio_holding(payload, opts = {})
      data, _status_code, _headers = post_portfolio_holding_with_http_info(payload, opts)
      data
    end

    # Create a portfolio holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePortfolioHoldingResponse, Fixnum, Hash)>] CreatePortfolioHoldingResponse data, response status code and response headers
    def post_portfolio_holding_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_holding ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_holding'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePortfolioHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create buy-only portfolio rebalance orders
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PortfolioRebalanceBuyOnlyOrderPayload]
    def post_portfolio_rebalance_buy_only_order(portfolio_id, payload, opts = {})
      data, _status_code, _headers = post_portfolio_rebalance_buy_only_order_with_http_info(portfolio_id, payload, opts)
      data
    end

    # Create buy-only portfolio rebalance orders
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortfolioRebalanceBuyOnlyOrderPayload, Fixnum, Hash)>] PortfolioRebalanceBuyOnlyOrderPayload data, response status code and response headers
    def post_portfolio_rebalance_buy_only_order_with_http_info(portfolio_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_rebalance_buy_only_order ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.post_portfolio_rebalance_buy_only_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_rebalance_buy_only_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_buy_only'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortfolioRebalanceBuyOnlyOrderPayload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_rebalance_buy_only_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create portfolio rebalance orders
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PortfolioRebalanceOrderPayload]
    def post_portfolio_rebalance_order(portfolio_id, payload, opts = {})
      data, _status_code, _headers = post_portfolio_rebalance_order_with_http_info(portfolio_id, payload, opts)
      data
    end

    # Create portfolio rebalance orders
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortfolioRebalanceOrderPayload, Fixnum, Hash)>] PortfolioRebalanceOrderPayload data, response status code and response headers
    def post_portfolio_rebalance_order_with_http_info(portfolio_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_rebalance_order ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.post_portfolio_rebalance_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_rebalance_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_rebalance'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortfolioRebalanceOrderPayload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_rebalance_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create sell-only portfolio rebalance orders
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [PortfolioRebalanceSellOnlyOrderPayload]
    def post_portfolio_rebalance_sell_only_order(portfolio_id, payload, opts = {})
      data, _status_code, _headers = post_portfolio_rebalance_sell_only_order_with_http_info(portfolio_id, payload, opts)
      data
    end

    # Create sell-only portfolio rebalance orders
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PortfolioRebalanceSellOnlyOrderPayload, Fixnum, Hash)>] PortfolioRebalanceSellOnlyOrderPayload data, response status code and response headers
    def post_portfolio_rebalance_sell_only_order_with_http_info(portfolio_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_rebalance_sell_only_order ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.post_portfolio_rebalance_sell_only_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_rebalance_sell_only_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_sell_only'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PortfolioRebalanceSellOnlyOrderPayload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_rebalance_sell_only_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sell all portfolio order
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SellAllPortfolioResponse]
    def post_portfolio_sell_all_order(portfolio_id, payload, opts = {})
      data, _status_code, _headers = post_portfolio_sell_all_order_with_http_info(portfolio_id, payload, opts)
      data
    end

    # Sell all portfolio order
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SellAllPortfolioResponse, Fixnum, Hash)>] SellAllPortfolioResponse data, response status code and response headers
    def post_portfolio_sell_all_order_with_http_info(portfolio_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_sell_all_order ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.post_portfolio_sell_all_order"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_sell_all_order"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}/order_sell_all'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SellAllPortfolioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_sell_all_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a portfolio transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreatePortfolioTransactionResponse]
    def post_portfolio_transaction(payload, opts = {})
      data, _status_code, _headers = post_portfolio_transaction_with_http_info(payload, opts)
      data
    end

    # Create a portfolio transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePortfolioTransactionResponse, Fixnum, Hash)>] CreatePortfolioTransactionResponse data, response status code and response headers
    def post_portfolio_transaction_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_portfolio_transaction ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_portfolio_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_transaction'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreatePortfolioTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_portfolio_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a questionnaire
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateQuestionnaireResponse]
    def post_questionnaire(payload, opts = {})
      data, _status_code, _headers = post_questionnaire_with_http_info(payload, opts)
      data
    end

    # Create a questionnaire
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateQuestionnaireResponse, Fixnum, Hash)>] CreateQuestionnaireResponse data, response status code and response headers
    def post_questionnaire_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_questionnaire ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_questionnaire"
      end
      # resource path
      local_var_path = '/nucleus/v1/questionnaire'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateQuestionnaireResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_questionnaire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateScoreResponse]
    def post_score(payload, opts = {})
      data, _status_code, _headers = post_score_with_http_info(payload, opts)
      data
    end

    # Create a score
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateScoreResponse, Fixnum, Hash)>] CreateScoreResponse data, response status code and response headers
    def post_score_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_score ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_score"
      end
      # resource path
      local_var_path = '/nucleus/v1/score'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a security
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateSecurityResponse]
    def post_security(payload, opts = {})
      data, _status_code, _headers = post_security_with_http_info(payload, opts)
      data
    end

    # Create a security
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSecurityResponse, Fixnum, Hash)>] CreateSecurityResponse data, response status code and response headers
    def post_security_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_security ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_security"
      end
      # resource path
      local_var_path = '/nucleus/v1/security'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSecurityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_security\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a security exclusion
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateSecurityExclusionResponse]
    def post_security_exclusion(payload, opts = {})
      data, _status_code, _headers = post_security_exclusion_with_http_info(payload, opts)
      data
    end

    # Create a security exclusion
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSecurityExclusionResponse, Fixnum, Hash)>] CreateSecurityExclusionResponse data, response status code and response headers
    def post_security_exclusion_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_security_exclusion ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_security_exclusion"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_exclusion'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSecurityExclusionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_security_exclusion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a security price
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateSecurityPriceResponse]
    def post_security_price(payload, opts = {})
      data, _status_code, _headers = post_security_price_with_http_info(payload, opts)
      data
    end

    # Create a security price
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSecurityPriceResponse, Fixnum, Hash)>] CreateSecurityPriceResponse data, response status code and response headers
    def post_security_price_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_security_price ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_security_price"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_price'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateSecurityPriceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_security_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a transaction code
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateTransactionCodeResponse]
    def post_transaction_code(payload, opts = {})
      data, _status_code, _headers = post_transaction_code_with_http_info(payload, opts)
      data
    end

    # Create a transaction code
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTransactionCodeResponse, Fixnum, Hash)>] CreateTransactionCodeResponse data, response status code and response headers
    def post_transaction_code_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_transaction_code ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_transaction_code"
      end
      # resource path
      local_var_path = '/nucleus/v1/transaction_code'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateTransactionCodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_transaction_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a transfer request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateTransferResponse]
    def post_transfer_request(payload, opts = {})
      data, _status_code, _headers = post_transfer_request_with_http_info(payload, opts)
      data
    end

    # Create a transfer request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTransferResponse, Fixnum, Hash)>] CreateTransferResponse data, response status code and response headers
    def post_transfer_request_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_transfer_request ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_transfer_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateTransferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_transfer_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a withdrawal request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [CreateWithdrawalResponse]
    def post_withdrawal_request(payload, opts = {})
      data, _status_code, _headers = post_withdrawal_request_with_http_info(payload, opts)
      data
    end

    # Create a withdrawal request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateWithdrawalResponse, Fixnum, Hash)>] CreateWithdrawalResponse data, response status code and response headers
    def post_withdrawal_request_with_http_info(payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.post_withdrawal_request ...'
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.post_withdrawal_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/withdrawal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateWithdrawalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#post_withdrawal_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Subscribe an account
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SubscribeAccountResponse]
    def subscribe_account(account_id, payload, opts = {})
      data, _status_code, _headers = subscribe_account_with_http_info(account_id, payload, opts)
      data
    end

    # Subscribe an account
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscribeAccountResponse, Fixnum, Hash)>] SubscribeAccountResponse data, response status code and response headers
    def subscribe_account_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.subscribe_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.subscribe_account"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.subscribe_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/subscribe'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscribeAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#subscribe_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountResponse]
    def update_account(account_id, payload, opts = {})
      data, _status_code, _headers = update_account_with_http_info(account_id, payload, opts)
      data
    end

    # Update an account
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountResponse, Fixnum, Hash)>] SpecificAccountResponse data, response status code and response headers
    def update_account_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.update_account"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account allocation
    # @param account_allocation_id UUID of an account allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountAllocationResponse]
    def update_account_allocation(account_allocation_id, payload, opts = {})
      data, _status_code, _headers = update_account_allocation_with_http_info(account_allocation_id, payload, opts)
      data
    end

    # Update an account allocation
    # @param account_allocation_id UUID of an account allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountAllocationResponse, Fixnum, Hash)>] SpecificAccountAllocationResponse data, response status code and response headers
    def update_account_allocation_with_http_info(account_allocation_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_account_allocation ...'
      end
      # verify the required parameter 'account_allocation_id' is set
      if @api_client.config.client_side_validation && account_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_allocation_id' when calling NucleusApi.update_account_allocation"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_account_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation/{account_allocation_id}'.sub('{' + 'account_allocation_id' + '}', account_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_account_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account's permissions
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountPermissionResponse]
    def update_account_permission(account_id, payload, opts = {})
      data, _status_code, _headers = update_account_permission_with_http_info(account_id, payload, opts)
      data
    end

    # Update an account&#39;s permissions
    # @param account_id UUID of an account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountPermissionResponse, Fixnum, Hash)>] SpecificAccountPermissionResponse data, response status code and response headers
    def update_account_permission_with_http_info(account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_account_permission ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling NucleusApi.update_account_permission"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_account_permission"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountPermissionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_account_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account stage
    # @param stage_id UUID of an account stage
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountStageResponse]
    def update_account_stage(stage_id, payload, opts = {})
      data, _status_code, _headers = update_account_stage_with_http_info(stage_id, payload, opts)
      data
    end

    # Update an account stage
    # @param stage_id UUID of an account stage
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountStageResponse, Fixnum, Hash)>] SpecificAccountStageResponse data, response status code and response headers
    def update_account_stage_with_http_info(stage_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_account_stage ...'
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling NucleusApi.update_account_stage"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_account_stage"
      end
      # resource path
      local_var_path = '/nucleus/v1/stage/{stage_id}'.sub('{' + 'stage_id' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountStageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_account_stage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account status
    # @param account_status_id UUID of an account status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAccountStatusResponse]
    def update_account_status(account_status_id, payload, opts = {})
      data, _status_code, _headers = update_account_status_with_http_info(account_status_id, payload, opts)
      data
    end

    # Update an account status
    # @param account_status_id UUID of an account status
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAccountStatusResponse, Fixnum, Hash)>] SpecificAccountStatusResponse data, response status code and response headers
    def update_account_status_with_http_info(account_status_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_account_status ...'
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling NucleusApi.update_account_status"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_account_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAccountStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_account_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account type
    # @param account_type_id UUID of an account type
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GetAccountTypeSubresponse]
    def update_account_type(account_type_id, payload, opts = {})
      data, _status_code, _headers = update_account_type_with_http_info(account_type_id, payload, opts)
      data
    end

    # Update an account type
    # @param account_type_id UUID of an account type
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountTypeSubresponse, Fixnum, Hash)>] GetAccountTypeSubresponse data, response status code and response headers
    def update_account_type_with_http_info(account_type_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_account_type ...'
      end
      # verify the required parameter 'account_type_id' is set
      if @api_client.config.client_side_validation && account_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_type_id' when calling NucleusApi.update_account_type"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_account_type"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type/{account_type_id}'.sub('{' + 'account_type_id' + '}', account_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAccountTypeSubresponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_account_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account
    # @param aggregation_account_id UUID of an aggregation account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountResponse]
    def update_aggregation_account(aggregation_account_id, payload, opts = {})
      data, _status_code, _headers = update_aggregation_account_with_http_info(aggregation_account_id, payload, opts)
      data
    end

    # Update an aggregation account
    # @param aggregation_account_id UUID of an aggregation account
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountResponse, Fixnum, Hash)>] SpecificAggregationAccountResponse data, response status code and response headers
    def update_aggregation_account_with_http_info(aggregation_account_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_aggregation_account ...'
      end
      # verify the required parameter 'aggregation_account_id' is set
      if @api_client.config.client_side_validation && aggregation_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_id' when calling NucleusApi.update_aggregation_account"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_aggregation_account"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account/{aggregation_account_id}'.sub('{' + 'aggregation_account_id' + '}', aggregation_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_aggregation_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account balance
    # @param aggregation_account_balance_id UUID of an aggregation account balance
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountBalanceResponse]
    def update_aggregation_account_balance(aggregation_account_balance_id, payload, opts = {})
      data, _status_code, _headers = update_aggregation_account_balance_with_http_info(aggregation_account_balance_id, payload, opts)
      data
    end

    # Update an aggregation account balance
    # @param aggregation_account_balance_id UUID of an aggregation account balance
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountBalanceResponse, Fixnum, Hash)>] SpecificAggregationAccountBalanceResponse data, response status code and response headers
    def update_aggregation_account_balance_with_http_info(aggregation_account_balance_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_aggregation_account_balance ...'
      end
      # verify the required parameter 'aggregation_account_balance_id' is set
      if @api_client.config.client_side_validation && aggregation_account_balance_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_balance_id' when calling NucleusApi.update_aggregation_account_balance"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_aggregation_account_balance"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_balance/{aggregation_account_balance_id}'.sub('{' + 'aggregation_account_balance_id' + '}', aggregation_account_balance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountBalanceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_aggregation_account_balance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account holding
    # @param aggregation_account_holding_id UUID of an aggregation account holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountHoldingResponse]
    def update_aggregation_account_holding(aggregation_account_holding_id, payload, opts = {})
      data, _status_code, _headers = update_aggregation_account_holding_with_http_info(aggregation_account_holding_id, payload, opts)
      data
    end

    # Update an aggregation account holding
    # @param aggregation_account_holding_id UUID of an aggregation account holding
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountHoldingResponse, Fixnum, Hash)>] SpecificAggregationAccountHoldingResponse data, response status code and response headers
    def update_aggregation_account_holding_with_http_info(aggregation_account_holding_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_aggregation_account_holding ...'
      end
      # verify the required parameter 'aggregation_account_holding_id' is set
      if @api_client.config.client_side_validation && aggregation_account_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_holding_id' when calling NucleusApi.update_aggregation_account_holding"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_aggregation_account_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_holding/{aggregation_account_holding_id}'.sub('{' + 'aggregation_account_holding_id' + '}', aggregation_account_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_aggregation_account_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an aggregation account transaction
    # @param aggregation_account_transaction_id UUID of an aggregation account transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAggregationAccountTransactionResponse]
    def update_aggregation_account_transaction(aggregation_account_transaction_id, payload, opts = {})
      data, _status_code, _headers = update_aggregation_account_transaction_with_http_info(aggregation_account_transaction_id, payload, opts)
      data
    end

    # Update an aggregation account transaction
    # @param aggregation_account_transaction_id UUID of an aggregation account transaction
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAggregationAccountTransactionResponse, Fixnum, Hash)>] SpecificAggregationAccountTransactionResponse data, response status code and response headers
    def update_aggregation_account_transaction_with_http_info(aggregation_account_transaction_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_aggregation_account_transaction ...'
      end
      # verify the required parameter 'aggregation_account_transaction_id' is set
      if @api_client.config.client_side_validation && aggregation_account_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'aggregation_account_transaction_id' when calling NucleusApi.update_aggregation_account_transaction"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_aggregation_account_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/aggregation_account_transaction/{aggregation_account_transaction_id}'.sub('{' + 'aggregation_account_transaction_id' + '}', aggregation_account_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAggregationAccountTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_aggregation_account_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an allocation
    # @param allocation_id UUID of an allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificAllocationResponse]
    def update_allocation(allocation_id, payload, opts = {})
      data, _status_code, _headers = update_allocation_with_http_info(allocation_id, payload, opts)
      data
    end

    # Update an allocation
    # @param allocation_id UUID of an allocation
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificAllocationResponse, Fixnum, Hash)>] SpecificAllocationResponse data, response status code and response headers
    def update_allocation_with_http_info(allocation_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_allocation ...'
      end
      # verify the required parameter 'allocation_id' is set
      if @api_client.config.client_side_validation && allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_id' when calling NucleusApi.update_allocation"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_allocation"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation/{allocation_id}'.sub('{' + 'allocation_id' + '}', allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificAllocationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_allocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an allocation composition
    # @param allocation_composition_id UUID of an allocation composition
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [GetAllocationCompositionResponse]
    def update_allocation_composition(allocation_composition_id, payload, opts = {})
      data, _status_code, _headers = update_allocation_composition_with_http_info(allocation_composition_id, payload, opts)
      data
    end

    # Update an allocation composition
    # @param allocation_composition_id UUID of an allocation composition
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAllocationCompositionResponse, Fixnum, Hash)>] GetAllocationCompositionResponse data, response status code and response headers
    def update_allocation_composition_with_http_info(allocation_composition_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_allocation_composition ...'
      end
      # verify the required parameter 'allocation_composition_id' is set
      if @api_client.config.client_side_validation && allocation_composition_id.nil?
        fail ArgumentError, "Missing the required parameter 'allocation_composition_id' when calling NucleusApi.update_allocation_composition"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_allocation_composition"
      end
      # resource path
      local_var_path = '/nucleus/v1/allocation_composition/{allocation_composition_id}'.sub('{' + 'allocation_composition_id' + '}', allocation_composition_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetAllocationCompositionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_allocation_composition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a bank link
    # @param bank_link_id UUID of a bank link
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificBankLinkResponse]
    def update_bank_link(bank_link_id, payload, opts = {})
      data, _status_code, _headers = update_bank_link_with_http_info(bank_link_id, payload, opts)
      data
    end

    # Update a bank link
    # @param bank_link_id UUID of a bank link
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificBankLinkResponse, Fixnum, Hash)>] SpecificBankLinkResponse data, response status code and response headers
    def update_bank_link_with_http_info(bank_link_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_bank_link ...'
      end
      # verify the required parameter 'bank_link_id' is set
      if @api_client.config.client_side_validation && bank_link_id.nil?
        fail ArgumentError, "Missing the required parameter 'bank_link_id' when calling NucleusApi.update_bank_link"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_bank_link"
      end
      # resource path
      local_var_path = '/nucleus/v1/bank_link/{bank_link_id}'.sub('{' + 'bank_link_id' + '}', bank_link_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificBankLinkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_bank_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a benchmark
    # @param benchmark_id UUID of a benchmark
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificBenchmarkResponse]
    def update_benchmark(benchmark_id, payload, opts = {})
      data, _status_code, _headers = update_benchmark_with_http_info(benchmark_id, payload, opts)
      data
    end

    # Update a benchmark
    # @param benchmark_id UUID of a benchmark
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificBenchmarkResponse, Fixnum, Hash)>] SpecificBenchmarkResponse data, response status code and response headers
    def update_benchmark_with_http_info(benchmark_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_benchmark ...'
      end
      # verify the required parameter 'benchmark_id' is set
      if @api_client.config.client_side_validation && benchmark_id.nil?
        fail ArgumentError, "Missing the required parameter 'benchmark_id' when calling NucleusApi.update_benchmark"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_benchmark"
      end
      # resource path
      local_var_path = '/nucleus/v1/benchmark/{benchmark_id}'.sub('{' + 'benchmark_id' + '}', benchmark_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificBenchmarkResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_benchmark\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a budget
    # @param budget_id UUID of a budget
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificBudgetResponse]
    def update_budget(budget_id, payload, opts = {})
      data, _status_code, _headers = update_budget_with_http_info(budget_id, payload, opts)
      data
    end

    # Update a budget
    # @param budget_id UUID of a budget
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificBudgetResponse, Fixnum, Hash)>] SpecificBudgetResponse data, response status code and response headers
    def update_budget_with_http_info(budget_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_budget ...'
      end
      # verify the required parameter 'budget_id' is set
      if @api_client.config.client_side_validation && budget_id.nil?
        fail ArgumentError, "Missing the required parameter 'budget_id' when calling NucleusApi.update_budget"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_budget"
      end
      # resource path
      local_var_path = '/nucleus/v1/budget/{budget_id}'.sub('{' + 'budget_id' + '}', budget_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificBudgetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_budget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client
    # @param client_id UUID of a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientResponse]
    def update_client(client_id, payload, opts = {})
      data, _status_code, _headers = update_client_with_http_info(client_id, payload, opts)
      data
    end

    # Update a client
    # @param client_id UUID of a client
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientResponse, Fixnum, Hash)>] SpecificClientResponse data, response status code and response headers
    def update_client_with_http_info(client_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_client ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling NucleusApi.update_client"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_client"
      end
      # resource path
      local_var_path = '/nucleus/v1/client/{client_id}'.sub('{' + 'client_id' + '}', client_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client-hydro relationship
    # @param client_hydro_id UUID of a client-hydro relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientHydroResponse]
    def update_client_hydro(client_hydro_id, payload, opts = {})
      data, _status_code, _headers = update_client_hydro_with_http_info(client_hydro_id, payload, opts)
      data
    end

    # Update a client-hydro relationship
    # @param client_hydro_id UUID of a client-hydro relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientHydroResponse, Fixnum, Hash)>] SpecificClientHydroResponse data, response status code and response headers
    def update_client_hydro_with_http_info(client_hydro_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_client_hydro ...'
      end
      # verify the required parameter 'client_hydro_id' is set
      if @api_client.config.client_side_validation && client_hydro_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_hydro_id' when calling NucleusApi.update_client_hydro"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_client_hydro"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_hydro/{client_hydro_id}'.sub('{' + 'client_hydro_id' + '}', client_hydro_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientHydroResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_client_hydro\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a client response
    # @param client_response_id UUID of a client response
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificClientResponseResponse]
    def update_client_response(client_response_id, payload, opts = {})
      data, _status_code, _headers = update_client_response_with_http_info(client_response_id, payload, opts)
      data
    end

    # Update a client response
    # @param client_response_id UUID of a client response
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificClientResponseResponse, Fixnum, Hash)>] SpecificClientResponseResponse data, response status code and response headers
    def update_client_response_with_http_info(client_response_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_client_response ...'
      end
      # verify the required parameter 'client_response_id' is set
      if @api_client.config.client_side_validation && client_response_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_response_id' when calling NucleusApi.update_client_response"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_client_response"
      end
      # resource path
      local_var_path = '/nucleus/v1/client_response/{client_response_id}'.sub('{' + 'client_response_id' + '}', client_response_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificClientResponseResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_client_response\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a decision tree
    # @param decision_tree_id UUID of a decision tree
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificDecisionTreeResponse]
    def update_decision_tree(decision_tree_id, payload, opts = {})
      data, _status_code, _headers = update_decision_tree_with_http_info(decision_tree_id, payload, opts)
      data
    end

    # Update a decision tree
    # @param decision_tree_id UUID of a decision tree
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificDecisionTreeResponse, Fixnum, Hash)>] SpecificDecisionTreeResponse data, response status code and response headers
    def update_decision_tree_with_http_info(decision_tree_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_decision_tree ...'
      end
      # verify the required parameter 'decision_tree_id' is set
      if @api_client.config.client_side_validation && decision_tree_id.nil?
        fail ArgumentError, "Missing the required parameter 'decision_tree_id' when calling NucleusApi.update_decision_tree"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_decision_tree"
      end
      # resource path
      local_var_path = '/nucleus/v1/decision_tree/{decision_tree_id}'.sub('{' + 'decision_tree_id' + '}', decision_tree_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificDecisionTreeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_decision_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a deposit request
    # @param deposit_id UUID of a deposit record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificDepositRequestResponse]
    def update_deposit_request(deposit_id, payload, opts = {})
      data, _status_code, _headers = update_deposit_request_with_http_info(deposit_id, payload, opts)
      data
    end

    # Update a deposit request
    # @param deposit_id UUID of a deposit record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificDepositRequestResponse, Fixnum, Hash)>] SpecificDepositRequestResponse data, response status code and response headers
    def update_deposit_request_with_http_info(deposit_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_deposit_request ...'
      end
      # verify the required parameter 'deposit_id' is set
      if @api_client.config.client_side_validation && deposit_id.nil?
        fail ArgumentError, "Missing the required parameter 'deposit_id' when calling NucleusApi.update_deposit_request"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_deposit_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/deposit/{deposit_id}'.sub('{' + 'deposit_id' + '}', deposit_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificDepositRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_deposit_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a financial offer
    # @param financial_offer_id UUID of a financial offer
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificFinancialOfferResponse]
    def update_financial_offer(financial_offer_id, payload, opts = {})
      data, _status_code, _headers = update_financial_offer_with_http_info(financial_offer_id, payload, opts)
      data
    end

    # Update a financial offer
    # @param financial_offer_id UUID of a financial offer
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificFinancialOfferResponse, Fixnum, Hash)>] SpecificFinancialOfferResponse data, response status code and response headers
    def update_financial_offer_with_http_info(financial_offer_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_financial_offer ...'
      end
      # verify the required parameter 'financial_offer_id' is set
      if @api_client.config.client_side_validation && financial_offer_id.nil?
        fail ArgumentError, "Missing the required parameter 'financial_offer_id' when calling NucleusApi.update_financial_offer"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_financial_offer"
      end
      # resource path
      local_var_path = '/nucleus/v1/financial_offer/{financial_offer_id}'.sub('{' + 'financial_offer_id' + '}', financial_offer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificFinancialOfferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_financial_offer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a funding request
    # @param funding_id UUID of a funding record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificFundingRequestResponse]
    def update_funding_request(funding_id, payload, opts = {})
      data, _status_code, _headers = update_funding_request_with_http_info(funding_id, payload, opts)
      data
    end

    # Update a funding request
    # @param funding_id UUID of a funding record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificFundingRequestResponse, Fixnum, Hash)>] SpecificFundingRequestResponse data, response status code and response headers
    def update_funding_request_with_http_info(funding_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_funding_request ...'
      end
      # verify the required parameter 'funding_id' is set
      if @api_client.config.client_side_validation && funding_id.nil?
        fail ArgumentError, "Missing the required parameter 'funding_id' when calling NucleusApi.update_funding_request"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_funding_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/funding/{funding_id}'.sub('{' + 'funding_id' + '}', funding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificFundingRequestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_funding_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a goal
    # @param goal_id UUID of a goal
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificGoalResponse]
    def update_goal(goal_id, payload, opts = {})
      data, _status_code, _headers = update_goal_with_http_info(goal_id, payload, opts)
      data
    end

    # Update a goal
    # @param goal_id UUID of a goal
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificGoalResponse, Fixnum, Hash)>] SpecificGoalResponse data, response status code and response headers
    def update_goal_with_http_info(goal_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_goal ...'
      end
      # verify the required parameter 'goal_id' is set
      if @api_client.config.client_side_validation && goal_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_id' when calling NucleusApi.update_goal"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_goal"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal/{goal_id}'.sub('{' + 'goal_id' + '}', goal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificGoalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_goal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a goal track record
    # @param goal_track_id UUID of a goal tracking record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificGoalTrackResponse]
    def update_goal_track_record(goal_track_id, payload, opts = {})
      data, _status_code, _headers = update_goal_track_record_with_http_info(goal_track_id, payload, opts)
      data
    end

    # Update a goal track record
    # @param goal_track_id UUID of a goal tracking record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificGoalTrackResponse, Fixnum, Hash)>] SpecificGoalTrackResponse data, response status code and response headers
    def update_goal_track_record_with_http_info(goal_track_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_goal_track_record ...'
      end
      # verify the required parameter 'goal_track_id' is set
      if @api_client.config.client_side_validation && goal_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'goal_track_id' when calling NucleusApi.update_goal_track_record"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_goal_track_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/goal_track/{goal_track_id}'.sub('{' + 'goal_track_id' + '}', goal_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificGoalTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_goal_track_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a model
    # @param model_id UUID of a model
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelResponse]
    def update_model(model_id, payload, opts = {})
      data, _status_code, _headers = update_model_with_http_info(model_id, payload, opts)
      data
    end

    # Update a model
    # @param model_id UUID of a model
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelResponse, Fixnum, Hash)>] SpecificModelResponse data, response status code and response headers
    def update_model_with_http_info(model_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_model ...'
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling NucleusApi.update_model"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_model"
      end
      # resource path
      local_var_path = '/nucleus/v1/model/{model_id}'.sub('{' + 'model_id' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a model asset size
    # @param model_asset_size_id UUID of a model asset size record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelAssetSizeResponse]
    def update_model_asset_size(model_asset_size_id, payload, opts = {})
      data, _status_code, _headers = update_model_asset_size_with_http_info(model_asset_size_id, payload, opts)
      data
    end

    # Update a model asset size
    # @param model_asset_size_id UUID of a model asset size record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelAssetSizeResponse, Fixnum, Hash)>] SpecificModelAssetSizeResponse data, response status code and response headers
    def update_model_asset_size_with_http_info(model_asset_size_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_model_asset_size ...'
      end
      # verify the required parameter 'model_asset_size_id' is set
      if @api_client.config.client_side_validation && model_asset_size_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_asset_size_id' when calling NucleusApi.update_model_asset_size"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_model_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_asset_size/{model_asset_size_id}'.sub('{' + 'model_asset_size_id' + '}', model_asset_size_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_model_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a model commentary
    # @param model_comment_id UUID of a model comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelCommentResponse]
    def update_model_comment(model_comment_id, payload, opts = {})
      data, _status_code, _headers = update_model_comment_with_http_info(model_comment_id, payload, opts)
      data
    end

    # Update a model commentary
    # @param model_comment_id UUID of a model comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelCommentResponse, Fixnum, Hash)>] SpecificModelCommentResponse data, response status code and response headers
    def update_model_comment_with_http_info(model_comment_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_model_comment ...'
      end
      # verify the required parameter 'model_comment_id' is set
      if @api_client.config.client_side_validation && model_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_comment_id' when calling NucleusApi.update_model_comment"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_model_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_comment/{model_comment_id}'.sub('{' + 'model_comment_id' + '}', model_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_model_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Change a model composition
    # @param model_id UUID of a model
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [ChangeModelCompositionResponse]
    def update_model_composition(model_id, payload, opts = {})
      data, _status_code, _headers = update_model_composition_with_http_info(model_id, payload, opts)
      data
    end

    # Change a model composition
    # @param model_id UUID of a model
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChangeModelCompositionResponse, Fixnum, Hash)>] ChangeModelCompositionResponse data, response status code and response headers
    def update_model_composition_with_http_info(model_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_model_composition ...'
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling NucleusApi.update_model_composition"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_model_composition"
      end
      # resource path
      local_var_path = '/nucleus/v1/model/{model_id}/model_change'.sub('{' + 'model_id' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChangeModelCompositionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_model_composition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a model holding
    # @param model_holding_id UUID of a model holding record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelHoldingResponse]
    def update_model_holding(model_holding_id, payload, opts = {})
      data, _status_code, _headers = update_model_holding_with_http_info(model_holding_id, payload, opts)
      data
    end

    # Update a model holding
    # @param model_holding_id UUID of a model holding record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelHoldingResponse, Fixnum, Hash)>] SpecificModelHoldingResponse data, response status code and response headers
    def update_model_holding_with_http_info(model_holding_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_model_holding ...'
      end
      # verify the required parameter 'model_holding_id' is set
      if @api_client.config.client_side_validation && model_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_holding_id' when calling NucleusApi.update_model_holding"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_model_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_holding/{model_holding_id}'.sub('{' + 'model_holding_id' + '}', model_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_model_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a model transaction
    # @param model_transaction_id UUID of a model transaction record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificModelTransactionResponse]
    def update_model_transaction(model_transaction_id, payload, opts = {})
      data, _status_code, _headers = update_model_transaction_with_http_info(model_transaction_id, payload, opts)
      data
    end

    # Update a model transaction
    # @param model_transaction_id UUID of a model transaction record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificModelTransactionResponse, Fixnum, Hash)>] SpecificModelTransactionResponse data, response status code and response headers
    def update_model_transaction_with_http_info(model_transaction_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_model_transaction ...'
      end
      # verify the required parameter 'model_transaction_id' is set
      if @api_client.config.client_side_validation && model_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_transaction_id' when calling NucleusApi.update_model_transaction"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_model_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/model_transaction/{model_transaction_id}'.sub('{' + 'model_transaction_id' + '}', model_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificModelTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_model_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a node
    # @param node_id UUID of a node
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificNodeResponse]
    def update_node(node_id, payload, opts = {})
      data, _status_code, _headers = update_node_with_http_info(node_id, payload, opts)
      data
    end

    # Update a node
    # @param node_id UUID of a node
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificNodeResponse, Fixnum, Hash)>] SpecificNodeResponse data, response status code and response headers
    def update_node_with_http_info(node_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_node ...'
      end
      # verify the required parameter 'node_id' is set
      if @api_client.config.client_side_validation && node_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_id' when calling NucleusApi.update_node"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_node"
      end
      # resource path
      local_var_path = '/nucleus/v1/node/{node_id}'.sub('{' + 'node_id' + '}', node_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificNodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a node relationship
    # @param node_relationship_id UUID of a node relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificNodeRelationshipResponse]
    def update_node_relationship(node_relationship_id, payload, opts = {})
      data, _status_code, _headers = update_node_relationship_with_http_info(node_relationship_id, payload, opts)
      data
    end

    # Update a node relationship
    # @param node_relationship_id UUID of a node relationship
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificNodeRelationshipResponse, Fixnum, Hash)>] SpecificNodeRelationshipResponse data, response status code and response headers
    def update_node_relationship_with_http_info(node_relationship_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_node_relationship ...'
      end
      # verify the required parameter 'node_relationship_id' is set
      if @api_client.config.client_side_validation && node_relationship_id.nil?
        fail ArgumentError, "Missing the required parameter 'node_relationship_id' when calling NucleusApi.update_node_relationship"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_node_relationship"
      end
      # resource path
      local_var_path = '/nucleus/v1/node_relationship/{node_relationship_id}'.sub('{' + 'node_relationship_id' + '}', node_relationship_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificNodeRelationshipResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_node_relationship\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an order record
    # @param order_id UUID of an order record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificOrderResponse]
    def update_order_record(order_id, payload, opts = {})
      data, _status_code, _headers = update_order_record_with_http_info(order_id, payload, opts)
      data
    end

    # Update an order record
    # @param order_id UUID of an order record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificOrderResponse, Fixnum, Hash)>] SpecificOrderResponse data, response status code and response headers
    def update_order_record_with_http_info(order_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_order_record ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling NucleusApi.update_order_record"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_order_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order/{order_id}'.sub('{' + 'order_id' + '}', order_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificOrderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_order_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an order status
    # @param order_status_id UUID of an order status record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificOrderStatusResponse]
    def update_order_status(order_status_id, payload, opts = {})
      data, _status_code, _headers = update_order_status_with_http_info(order_status_id, payload, opts)
      data
    end

    # Update an order status
    # @param order_status_id UUID of an order status record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificOrderStatusResponse, Fixnum, Hash)>] SpecificOrderStatusResponse data, response status code and response headers
    def update_order_status_with_http_info(order_status_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_order_status ...'
      end
      # verify the required parameter 'order_status_id' is set
      if @api_client.config.client_side_validation && order_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_status_id' when calling NucleusApi.update_order_status"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_order_status"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_status/{order_status_id}'.sub('{' + 'order_status_id' + '}', order_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificOrderStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_order_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an order tracking record
    # @param order_track_id UUID of an order tracking record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificOrderTrackResponse]
    def update_order_tracking_record(order_track_id, payload, opts = {})
      data, _status_code, _headers = update_order_tracking_record_with_http_info(order_track_id, payload, opts)
      data
    end

    # Update an order tracking record
    # @param order_track_id UUID of an order tracking record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificOrderTrackResponse, Fixnum, Hash)>] SpecificOrderTrackResponse data, response status code and response headers
    def update_order_tracking_record_with_http_info(order_track_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_order_tracking_record ...'
      end
      # verify the required parameter 'order_track_id' is set
      if @api_client.config.client_side_validation && order_track_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_track_id' when calling NucleusApi.update_order_tracking_record"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_order_tracking_record"
      end
      # resource path
      local_var_path = '/nucleus/v1/order_track/{order_track_id}'.sub('{' + 'order_track_id' + '}', order_track_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificOrderTrackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_order_tracking_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a portfolio
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioResponse]
    def update_portfolio(portfolio_id, payload, opts = {})
      data, _status_code, _headers = update_portfolio_with_http_info(portfolio_id, payload, opts)
      data
    end

    # Update a portfolio
    # @param portfolio_id UUID of a portfolio
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioResponse, Fixnum, Hash)>] SpecificPortfolioResponse data, response status code and response headers
    def update_portfolio_with_http_info(portfolio_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_portfolio ...'
      end
      # verify the required parameter 'portfolio_id' is set
      if @api_client.config.client_side_validation && portfolio_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_id' when calling NucleusApi.update_portfolio"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_portfolio"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio/{portfolio_id}'.sub('{' + 'portfolio_id' + '}', portfolio_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_portfolio\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a portfolio asset size
    # @param portfolio_asset_size_id UUID of a portfolio asset size record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioAssetSizeResponse]
    def update_portfolio_asset_size(portfolio_asset_size_id, payload, opts = {})
      data, _status_code, _headers = update_portfolio_asset_size_with_http_info(portfolio_asset_size_id, payload, opts)
      data
    end

    # Update a portfolio asset size
    # @param portfolio_asset_size_id UUID of a portfolio asset size record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioAssetSizeResponse, Fixnum, Hash)>] SpecificPortfolioAssetSizeResponse data, response status code and response headers
    def update_portfolio_asset_size_with_http_info(portfolio_asset_size_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_portfolio_asset_size ...'
      end
      # verify the required parameter 'portfolio_asset_size_id' is set
      if @api_client.config.client_side_validation && portfolio_asset_size_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_asset_size_id' when calling NucleusApi.update_portfolio_asset_size"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_portfolio_asset_size"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_asset_size/{portfolio_asset_size_id}'.sub('{' + 'portfolio_asset_size_id' + '}', portfolio_asset_size_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioAssetSizeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_portfolio_asset_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a portfolio commentary
    # @param portfolio_comment_id UUID of a portfolio comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioCommentResponse]
    def update_portfolio_comment(portfolio_comment_id, payload, opts = {})
      data, _status_code, _headers = update_portfolio_comment_with_http_info(portfolio_comment_id, payload, opts)
      data
    end

    # Update a portfolio commentary
    # @param portfolio_comment_id UUID of a portfolio comment
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioCommentResponse, Fixnum, Hash)>] SpecificPortfolioCommentResponse data, response status code and response headers
    def update_portfolio_comment_with_http_info(portfolio_comment_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_portfolio_comment ...'
      end
      # verify the required parameter 'portfolio_comment_id' is set
      if @api_client.config.client_side_validation && portfolio_comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_comment_id' when calling NucleusApi.update_portfolio_comment"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_portfolio_comment"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_comment/{portfolio_comment_id}'.sub('{' + 'portfolio_comment_id' + '}', portfolio_comment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioCommentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_portfolio_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a portfolio holding
    # @param portfolio_holding_id UUID of a portfolio holding record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioHoldingResponse]
    def update_portfolio_holding(portfolio_holding_id, payload, opts = {})
      data, _status_code, _headers = update_portfolio_holding_with_http_info(portfolio_holding_id, payload, opts)
      data
    end

    # Update a portfolio holding
    # @param portfolio_holding_id UUID of a portfolio holding record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioHoldingResponse, Fixnum, Hash)>] SpecificPortfolioHoldingResponse data, response status code and response headers
    def update_portfolio_holding_with_http_info(portfolio_holding_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_portfolio_holding ...'
      end
      # verify the required parameter 'portfolio_holding_id' is set
      if @api_client.config.client_side_validation && portfolio_holding_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_holding_id' when calling NucleusApi.update_portfolio_holding"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_portfolio_holding"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_holding/{portfolio_holding_id}'.sub('{' + 'portfolio_holding_id' + '}', portfolio_holding_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioHoldingResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_portfolio_holding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a portfolio transaction
    # @param portfolio_transaction_id UUID of a portfolio transaction record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificPortfolioTransactionResponse]
    def update_portfolio_transaction(portfolio_transaction_id, payload, opts = {})
      data, _status_code, _headers = update_portfolio_transaction_with_http_info(portfolio_transaction_id, payload, opts)
      data
    end

    # Update a portfolio transaction
    # @param portfolio_transaction_id UUID of a portfolio transaction record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificPortfolioTransactionResponse, Fixnum, Hash)>] SpecificPortfolioTransactionResponse data, response status code and response headers
    def update_portfolio_transaction_with_http_info(portfolio_transaction_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_portfolio_transaction ...'
      end
      # verify the required parameter 'portfolio_transaction_id' is set
      if @api_client.config.client_side_validation && portfolio_transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'portfolio_transaction_id' when calling NucleusApi.update_portfolio_transaction"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_portfolio_transaction"
      end
      # resource path
      local_var_path = '/nucleus/v1/portfolio_transaction/{portfolio_transaction_id}'.sub('{' + 'portfolio_transaction_id' + '}', portfolio_transaction_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificPortfolioTransactionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_portfolio_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a questionnaire
    # @param questionnaire_id UUID of a questionnaire
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificQuestionnaireResponse]
    def update_questionnaire(questionnaire_id, payload, opts = {})
      data, _status_code, _headers = update_questionnaire_with_http_info(questionnaire_id, payload, opts)
      data
    end

    # Update a questionnaire
    # @param questionnaire_id UUID of a questionnaire
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificQuestionnaireResponse, Fixnum, Hash)>] SpecificQuestionnaireResponse data, response status code and response headers
    def update_questionnaire_with_http_info(questionnaire_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_questionnaire ...'
      end
      # verify the required parameter 'questionnaire_id' is set
      if @api_client.config.client_side_validation && questionnaire_id.nil?
        fail ArgumentError, "Missing the required parameter 'questionnaire_id' when calling NucleusApi.update_questionnaire"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_questionnaire"
      end
      # resource path
      local_var_path = '/nucleus/v1/questionnaire/{questionnaire_id}'.sub('{' + 'questionnaire_id' + '}', questionnaire_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificQuestionnaireResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_questionnaire\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a score
    # @param score_id UUID of a score record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificScoreResponse]
    def update_score(score_id, payload, opts = {})
      data, _status_code, _headers = update_score_with_http_info(score_id, payload, opts)
      data
    end

    # Update a score
    # @param score_id UUID of a score record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificScoreResponse, Fixnum, Hash)>] SpecificScoreResponse data, response status code and response headers
    def update_score_with_http_info(score_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_score ...'
      end
      # verify the required parameter 'score_id' is set
      if @api_client.config.client_side_validation && score_id.nil?
        fail ArgumentError, "Missing the required parameter 'score_id' when calling NucleusApi.update_score"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_score"
      end
      # resource path
      local_var_path = '/nucleus/v1/score/{score_id}'.sub('{' + 'score_id' + '}', score_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificScoreResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a security
    # @param security_id UUID of a security
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificSecurityResponse]
    def update_security(security_id, payload, opts = {})
      data, _status_code, _headers = update_security_with_http_info(security_id, payload, opts)
      data
    end

    # Update a security
    # @param security_id UUID of a security
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSecurityResponse, Fixnum, Hash)>] SpecificSecurityResponse data, response status code and response headers
    def update_security_with_http_info(security_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_security ...'
      end
      # verify the required parameter 'security_id' is set
      if @api_client.config.client_side_validation && security_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_id' when calling NucleusApi.update_security"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_security"
      end
      # resource path
      local_var_path = '/nucleus/v1/security/{security_id}'.sub('{' + 'security_id' + '}', security_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSecurityResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_security\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a security exclusion
    # @param security_exclusion_id UUID of a security exclusion record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificSecurityExclusionResponse]
    def update_security_exclusion(security_exclusion_id, payload, opts = {})
      data, _status_code, _headers = update_security_exclusion_with_http_info(security_exclusion_id, payload, opts)
      data
    end

    # Update a security exclusion
    # @param security_exclusion_id UUID of a security exclusion record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSecurityExclusionResponse, Fixnum, Hash)>] SpecificSecurityExclusionResponse data, response status code and response headers
    def update_security_exclusion_with_http_info(security_exclusion_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_security_exclusion ...'
      end
      # verify the required parameter 'security_exclusion_id' is set
      if @api_client.config.client_side_validation && security_exclusion_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_exclusion_id' when calling NucleusApi.update_security_exclusion"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_security_exclusion"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_exclusion/{security_exclusion_id}'.sub('{' + 'security_exclusion_id' + '}', security_exclusion_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSecurityExclusionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_security_exclusion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a security price
    # @param security_price_id UUID of a security price record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificSecurityPriceResponse]
    def update_security_price(security_price_id, payload, opts = {})
      data, _status_code, _headers = update_security_price_with_http_info(security_price_id, payload, opts)
      data
    end

    # Update a security price
    # @param security_price_id UUID of a security price record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificSecurityPriceResponse, Fixnum, Hash)>] SpecificSecurityPriceResponse data, response status code and response headers
    def update_security_price_with_http_info(security_price_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_security_price ...'
      end
      # verify the required parameter 'security_price_id' is set
      if @api_client.config.client_side_validation && security_price_id.nil?
        fail ArgumentError, "Missing the required parameter 'security_price_id' when calling NucleusApi.update_security_price"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_security_price"
      end
      # resource path
      local_var_path = '/nucleus/v1/security_price/{security_price_id}'.sub('{' + 'security_price_id' + '}', security_price_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificSecurityPriceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_security_price\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a transaction code
    # @param transaction_code_id UUID of a transaction code
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificTransactionCodeResponse]
    def update_transaction_code(transaction_code_id, payload, opts = {})
      data, _status_code, _headers = update_transaction_code_with_http_info(transaction_code_id, payload, opts)
      data
    end

    # Update a transaction code
    # @param transaction_code_id UUID of a transaction code
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificTransactionCodeResponse, Fixnum, Hash)>] SpecificTransactionCodeResponse data, response status code and response headers
    def update_transaction_code_with_http_info(transaction_code_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_transaction_code ...'
      end
      # verify the required parameter 'transaction_code_id' is set
      if @api_client.config.client_side_validation && transaction_code_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_code_id' when calling NucleusApi.update_transaction_code"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_transaction_code"
      end
      # resource path
      local_var_path = '/nucleus/v1/transaction_code/{transaction_code_id}'.sub('{' + 'transaction_code_id' + '}', transaction_code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificTransactionCodeResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_transaction_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a transfer request
    # @param transfer_id UUID of an account transfer record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificTransferResponse]
    def update_transfer_request(transfer_id, payload, opts = {})
      data, _status_code, _headers = update_transfer_request_with_http_info(transfer_id, payload, opts)
      data
    end

    # Update a transfer request
    # @param transfer_id UUID of an account transfer record
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificTransferResponse, Fixnum, Hash)>] SpecificTransferResponse data, response status code and response headers
    def update_transfer_request_with_http_info(transfer_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_transfer_request ...'
      end
      # verify the required parameter 'transfer_id' is set
      if @api_client.config.client_side_validation && transfer_id.nil?
        fail ArgumentError, "Missing the required parameter 'transfer_id' when calling NucleusApi.update_transfer_request"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_transfer_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/transfer/{transfer_id}'.sub('{' + 'transfer_id' + '}', transfer_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificTransferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_transfer_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a withdrawal request
    # @param withdrawal_id UUID of a withdrawal request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [SpecificWithdrawalResponse]
    def update_withdrawal_request(withdrawal_id, payload, opts = {})
      data, _status_code, _headers = update_withdrawal_request_with_http_info(withdrawal_id, payload, opts)
      data
    end

    # Update a withdrawal request
    # @param withdrawal_id UUID of a withdrawal request
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SpecificWithdrawalResponse, Fixnum, Hash)>] SpecificWithdrawalResponse data, response status code and response headers
    def update_withdrawal_request_with_http_info(withdrawal_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NucleusApi.update_withdrawal_request ...'
      end
      # verify the required parameter 'withdrawal_id' is set
      if @api_client.config.client_side_validation && withdrawal_id.nil?
        fail ArgumentError, "Missing the required parameter 'withdrawal_id' when calling NucleusApi.update_withdrawal_request"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling NucleusApi.update_withdrawal_request"
      end
      # resource path
      local_var_path = '/nucleus/v1/withdrawal/{withdrawal_id}'.sub('{' + 'withdrawal_id' + '}', withdrawal_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SpecificWithdrawalResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NucleusApi#update_withdrawal_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
