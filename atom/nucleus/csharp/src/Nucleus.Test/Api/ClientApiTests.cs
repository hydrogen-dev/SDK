/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing ClientApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ClientApiTests
    {
        private ClientApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ClientApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ClientApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ClientApi
            //Assert.IsInstanceOfType(typeof(ClientApi), instance, "instance is a ClientApi");
        }

        
        /// <summary>
        /// Test CreateClientResponseUsingPost
        /// </summary>
        [Test]
        public void CreateClientResponseUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientResponse clientResponse = null;
            //var response = instance.CreateClientResponseUsingPost(clientResponse);
            //Assert.IsInstanceOf<ClientResponse> (response, "response is ClientResponse");
        }
        
        /// <summary>
        /// Test CreateClientStatusUsingPost
        /// </summary>
        [Test]
        public void CreateClientStatusUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ClientStatus clientStatusRequest = null;
            //var response = instance.CreateClientStatusUsingPost(clientStatusRequest);
            //Assert.IsInstanceOf<ClientStatus> (response, "response is ClientStatus");
        }
        
        /// <summary>
        /// Test CreateClientUsingPost
        /// </summary>
        [Test]
        public void CreateClientUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelClient clientRequest = null;
            //var response = instance.CreateClientUsingPost(clientRequest);
            //Assert.IsInstanceOf<ModelClient> (response, "response is ModelClient");
        }
        
        /// <summary>
        /// Test DeleteClientResponseUsingDelete
        /// </summary>
        [Test]
        public void DeleteClientResponseUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientResponseId = null;
            //instance.DeleteClientResponseUsingDelete(clientResponseId);
            
        }
        
        /// <summary>
        /// Test DeleteClientStatusUsingDelete
        /// </summary>
        [Test]
        public void DeleteClientStatusUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientStatusId = null;
            //instance.DeleteClientStatusUsingDelete(clientStatusId);
            
        }
        
        /// <summary>
        /// Test DeleteClientUsingDelete
        /// </summary>
        [Test]
        public void DeleteClientUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //instance.DeleteClientUsingDelete(clientId);
            
        }
        
        /// <summary>
        /// Test GetClientAccountOverviewUsingGet
        /// </summary>
        [Test]
        public void GetClientAccountOverviewUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //bool? ascending = null;
            //string orderBy = null;
            //var response = instance.GetClientAccountOverviewUsingGet(clientId, ascending, orderBy);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetClientAdvisorOverviewUsingGet
        /// </summary>
        [Test]
        public void GetClientAdvisorOverviewUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //bool? showClients = null;
            //var response = instance.GetClientAdvisorOverviewUsingGet(clientId, showClients);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test GetClientAllUsingGet
        /// </summary>
        [Test]
        public void GetClientAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetClientAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageClient> (response, "response is PageClient");
        }
        
        /// <summary>
        /// Test GetClientAssetSizeUsingGet
        /// </summary>
        [Test]
        public void GetClientAssetSizeUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //string currencyConversion = null;
            //DateTime? endDate = null;
            //bool? excludeSubledger = null;
            //bool? getLatest = null;
            //string sortType = null;
            //DateTime? startDate = null;
            //var response = instance.GetClientAssetSizeUsingGet(clientId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
            //Assert.IsInstanceOf<List<AvailableDateDoubleVO>> (response, "response is List<AvailableDateDoubleVO>");
        }
        
        /// <summary>
        /// Test GetClientGoalOverviewUsingGet
        /// </summary>
        [Test]
        public void GetClientGoalOverviewUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //bool? portfolioGoal = null;
            //var response = instance.GetClientGoalOverviewUsingGet(clientId, portfolioGoal);
            //Assert.IsInstanceOf<VClientGoalViewData> (response, "response is VClientGoalViewData");
        }
        
        /// <summary>
        /// Test GetClientHoldingUsingGet
        /// </summary>
        [Test]
        public void GetClientHoldingUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //bool? ascending = null;
            //string currencyConversion = null;
            //string endDate = null;
            //string filter = null;
            //bool? getLatest = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //string startDate = null;
            //var response = instance.GetClientHoldingUsingGet(clientId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
            //Assert.IsInstanceOf<PagePortfolioHoldingAgg> (response, "response is PagePortfolioHoldingAgg");
        }
        
        /// <summary>
        /// Test GetClientResponseAllUsingGet
        /// </summary>
        [Test]
        public void GetClientResponseAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetClientResponseAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageClientResponse> (response, "response is PageClientResponse");
        }
        
        /// <summary>
        /// Test GetClientResponseUsingGet
        /// </summary>
        [Test]
        public void GetClientResponseUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientResponseId = null;
            //var response = instance.GetClientResponseUsingGet(clientResponseId);
            //Assert.IsInstanceOf<ClientResponse> (response, "response is ClientResponse");
        }
        
        /// <summary>
        /// Test GetClientStatusAllUsingGet
        /// </summary>
        [Test]
        public void GetClientStatusAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetClientStatusAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageClientStatus> (response, "response is PageClientStatus");
        }
        
        /// <summary>
        /// Test GetClientStatusUsingGet
        /// </summary>
        [Test]
        public void GetClientStatusUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientStatusId = null;
            //var response = instance.GetClientStatusUsingGet(clientStatusId);
            //Assert.IsInstanceOf<ClientStatus> (response, "response is ClientStatus");
        }
        
        /// <summary>
        /// Test GetClientTransactionAllUsingGet
        /// </summary>
        [Test]
        public void GetClientTransactionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //bool? ascending = null;
            //string currencyConversion = null;
            //string endDate = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //string startDate = null;
            //var response = instance.GetClientTransactionAllUsingGet(clientId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
            //Assert.IsInstanceOf<PagePortfolioTransaction> (response, "response is PagePortfolioTransaction");
        }
        
        /// <summary>
        /// Test GetClientUsingGet
        /// </summary>
        [Test]
        public void GetClientUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? clientId = null;
            //var response = instance.GetClientUsingGet(clientId);
            //Assert.IsInstanceOf<ModelClient> (response, "response is ModelClient");
        }
        
        /// <summary>
        /// Test UpdateClientResponseUsingPut
        /// </summary>
        [Test]
        public void UpdateClientResponseUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object clientResponse = null;
            //Guid? clientResponseId = null;
            //var response = instance.UpdateClientResponseUsingPut(clientResponse, clientResponseId);
            //Assert.IsInstanceOf<ClientResponse> (response, "response is ClientResponse");
        }
        
        /// <summary>
        /// Test UpdateClientStatusUsingPut
        /// </summary>
        [Test]
        public void UpdateClientStatusUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object clientStatus = null;
            //Guid? clientStatusId = null;
            //var response = instance.UpdateClientStatusUsingPut(clientStatus, clientStatusId);
            //Assert.IsInstanceOf<ClientStatus> (response, "response is ClientStatus");
        }
        
        /// <summary>
        /// Test UpdateClientUsingPut
        /// </summary>
        [Test]
        public void UpdateClientUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object _client = null;
            //Guid? clientId = null;
            //var response = instance.UpdateClientUsingPut(_client, clientId);
            //Assert.IsInstanceOf<ModelClient> (response, "response is ModelClient");
        }
        
    }

}
