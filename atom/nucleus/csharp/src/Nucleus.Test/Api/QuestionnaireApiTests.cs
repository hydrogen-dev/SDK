/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing QuestionnaireApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class QuestionnaireApiTests
    {
        private QuestionnaireApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new QuestionnaireApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of QuestionnaireApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' QuestionnaireApi
            //Assert.IsInstanceOfType(typeof(QuestionnaireApi), instance, "instance is a QuestionnaireApi");
        }

        
        /// <summary>
        /// Test CreateAnswerUsingPost
        /// </summary>
        [Test]
        public void CreateAnswerUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Answer answer = null;
            //var response = instance.CreateAnswerUsingPost(answer);
            //Assert.IsInstanceOf<Answer> (response, "response is Answer");
        }
        
        /// <summary>
        /// Test CreateQuestionUsingPost
        /// </summary>
        [Test]
        public void CreateQuestionUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Question question = null;
            //var response = instance.CreateQuestionUsingPost(question);
            //Assert.IsInstanceOf<Question> (response, "response is Question");
        }
        
        /// <summary>
        /// Test CreateQuestionnaireUsingPost
        /// </summary>
        [Test]
        public void CreateQuestionnaireUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Questionnaire questionnaire = null;
            //var response = instance.CreateQuestionnaireUsingPost(questionnaire);
            //Assert.IsInstanceOf<Questionnaire> (response, "response is Questionnaire");
        }
        
        /// <summary>
        /// Test DeleteAnswerUsingDelete
        /// </summary>
        [Test]
        public void DeleteAnswerUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? answerId = null;
            //instance.DeleteAnswerUsingDelete(answerId);
            
        }
        
        /// <summary>
        /// Test DeleteQuestionUsingDelete
        /// </summary>
        [Test]
        public void DeleteQuestionUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? questionId = null;
            //instance.DeleteQuestionUsingDelete(questionId);
            
        }
        
        /// <summary>
        /// Test DeleteQuestionnaireUsingDelete
        /// </summary>
        [Test]
        public void DeleteQuestionnaireUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? questionnaireId = null;
            //instance.DeleteQuestionnaireUsingDelete(questionnaireId);
            
        }
        
        /// <summary>
        /// Test GetAnswerAllUsingGet
        /// </summary>
        [Test]
        public void GetAnswerAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetAnswerAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageAnswer> (response, "response is PageAnswer");
        }
        
        /// <summary>
        /// Test GetAnswerUsingGet
        /// </summary>
        [Test]
        public void GetAnswerUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? answerId = null;
            //var response = instance.GetAnswerUsingGet(answerId);
            //Assert.IsInstanceOf<Answer> (response, "response is Answer");
        }
        
        /// <summary>
        /// Test GetQuestionAllUsingGet
        /// </summary>
        [Test]
        public void GetQuestionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetQuestionAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageQuestion> (response, "response is PageQuestion");
        }
        
        /// <summary>
        /// Test GetQuestionUsingGet
        /// </summary>
        [Test]
        public void GetQuestionUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? questionId = null;
            //var response = instance.GetQuestionUsingGet(questionId);
            //Assert.IsInstanceOf<Question> (response, "response is Question");
        }
        
        /// <summary>
        /// Test GetQuestionnaireAllUsingGet
        /// </summary>
        [Test]
        public void GetQuestionnaireAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetQuestionnaireAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageQuestionnaire> (response, "response is PageQuestionnaire");
        }
        
        /// <summary>
        /// Test GetQuestionnaireUsingGet
        /// </summary>
        [Test]
        public void GetQuestionnaireUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? questionnaireId = null;
            //var response = instance.GetQuestionnaireUsingGet(questionnaireId);
            //Assert.IsInstanceOf<Questionnaire> (response, "response is Questionnaire");
        }
        
        /// <summary>
        /// Test UpdateAnswerUsingPut
        /// </summary>
        [Test]
        public void UpdateAnswerUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object answer = null;
            //Guid? answerId = null;
            //var response = instance.UpdateAnswerUsingPut(answer, answerId);
            //Assert.IsInstanceOf<Answer> (response, "response is Answer");
        }
        
        /// <summary>
        /// Test UpdateQuestionUsingPut
        /// </summary>
        [Test]
        public void UpdateQuestionUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object question = null;
            //Guid? questionId = null;
            //var response = instance.UpdateQuestionUsingPut(question, questionId);
            //Assert.IsInstanceOf<Question> (response, "response is Question");
        }
        
        /// <summary>
        /// Test UpdateQuestionnaireUsingPut
        /// </summary>
        [Test]
        public void UpdateQuestionnaireUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object questionnaire = null;
            //Guid? questionnaireId = null;
            //var response = instance.UpdateQuestionnaireUsingPut(questionnaire, questionnaireId);
            //Assert.IsInstanceOf<Questionnaire> (response, "response is Questionnaire");
        }
        
    }

}
