/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * AccountPortfolioRebalanceRequest Object
 */
@ApiModel(description = "AccountPortfolioRebalanceRequest Object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-24T10:39:20.203Z")
public class AccountPortfolioRebalanceRequest {
  @SerializedName("buy_threshold")
  private Double buyThreshold = null;

  @SerializedName("buy_transaction_code_id")
  private UUID buyTransactionCodeId = null;

  @SerializedName("cash_portfolio_id")
  private UUID cashPortfolioId = null;

  @SerializedName("cash_sec_id")
  private UUID cashSecId = null;

  @SerializedName("client_id")
  private UUID clientId = null;

  @SerializedName("commit_orders")
  private Boolean commitOrders = null;

  @SerializedName("non_fractional")
  private Boolean nonFractional = null;

  @SerializedName("port_threshold")
  private Double portThreshold = null;

  @SerializedName("restrictions_on")
  private Boolean restrictionsOn = null;

  @SerializedName("sell_threshold")
  private Double sellThreshold = null;

  @SerializedName("sell_transaction_code_id")
  private UUID sellTransactionCodeId = null;

  @SerializedName("tenant_id")
  private UUID tenantId = null;

  @SerializedName("use_cash_available")
  private Boolean useCashAvailable = null;

  @SerializedName("use_strategic")
  private Boolean useStrategic = null;

  public AccountPortfolioRebalanceRequest buyThreshold(Double buyThreshold) {
    this.buyThreshold = buyThreshold;
    return this;
  }

   /**
   * buyThreshold
   * @return buyThreshold
  **/
  @ApiModelProperty(example = "1.0", value = "buyThreshold")
  public Double getBuyThreshold() {
    return buyThreshold;
  }

  public void setBuyThreshold(Double buyThreshold) {
    this.buyThreshold = buyThreshold;
  }

  public AccountPortfolioRebalanceRequest buyTransactionCodeId(UUID buyTransactionCodeId) {
    this.buyTransactionCodeId = buyTransactionCodeId;
    return this;
  }

   /**
   * buyTransactionCodeId
   * @return buyTransactionCodeId
  **/
  @ApiModelProperty(example = "f5af397b-7d22-433f-b01e-8202184a6386", value = "buyTransactionCodeId")
  public UUID getBuyTransactionCodeId() {
    return buyTransactionCodeId;
  }

  public void setBuyTransactionCodeId(UUID buyTransactionCodeId) {
    this.buyTransactionCodeId = buyTransactionCodeId;
  }

  public AccountPortfolioRebalanceRequest cashPortfolioId(UUID cashPortfolioId) {
    this.cashPortfolioId = cashPortfolioId;
    return this;
  }

   /**
   * cashPortfolioId
   * @return cashPortfolioId
  **/
  @ApiModelProperty(example = "c34794e9-f927-468b-b47e-ea17c3d533c5", value = "cashPortfolioId")
  public UUID getCashPortfolioId() {
    return cashPortfolioId;
  }

  public void setCashPortfolioId(UUID cashPortfolioId) {
    this.cashPortfolioId = cashPortfolioId;
  }

  public AccountPortfolioRebalanceRequest cashSecId(UUID cashSecId) {
    this.cashSecId = cashSecId;
    return this;
  }

   /**
   * cashSecId
   * @return cashSecId
  **/
  @ApiModelProperty(example = "5276c9a5-5263-4aea-8027-327003738cef", value = "cashSecId")
  public UUID getCashSecId() {
    return cashSecId;
  }

  public void setCashSecId(UUID cashSecId) {
    this.cashSecId = cashSecId;
  }

  public AccountPortfolioRebalanceRequest clientId(UUID clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * clientId
   * @return clientId
  **/
  @ApiModelProperty(example = "2035f52d-2c5b-4e07-8904-cb037bad7aff", value = "clientId")
  public UUID getClientId() {
    return clientId;
  }

  public void setClientId(UUID clientId) {
    this.clientId = clientId;
  }

  public AccountPortfolioRebalanceRequest commitOrders(Boolean commitOrders) {
    this.commitOrders = commitOrders;
    return this;
  }

   /**
   * commitOrders
   * @return commitOrders
  **/
  @ApiModelProperty(example = "true", value = "commitOrders")
  public Boolean isCommitOrders() {
    return commitOrders;
  }

  public void setCommitOrders(Boolean commitOrders) {
    this.commitOrders = commitOrders;
  }

  public AccountPortfolioRebalanceRequest nonFractional(Boolean nonFractional) {
    this.nonFractional = nonFractional;
    return this;
  }

   /**
   * nonFractional
   * @return nonFractional
  **/
  @ApiModelProperty(example = "true", value = "nonFractional")
  public Boolean isNonFractional() {
    return nonFractional;
  }

  public void setNonFractional(Boolean nonFractional) {
    this.nonFractional = nonFractional;
  }

  public AccountPortfolioRebalanceRequest portThreshold(Double portThreshold) {
    this.portThreshold = portThreshold;
    return this;
  }

   /**
   * portThreshold
   * @return portThreshold
  **/
  @ApiModelProperty(example = "1.0", value = "portThreshold")
  public Double getPortThreshold() {
    return portThreshold;
  }

  public void setPortThreshold(Double portThreshold) {
    this.portThreshold = portThreshold;
  }

  public AccountPortfolioRebalanceRequest restrictionsOn(Boolean restrictionsOn) {
    this.restrictionsOn = restrictionsOn;
    return this;
  }

   /**
   * restrictionsOn
   * @return restrictionsOn
  **/
  @ApiModelProperty(example = "true", value = "restrictionsOn")
  public Boolean isRestrictionsOn() {
    return restrictionsOn;
  }

  public void setRestrictionsOn(Boolean restrictionsOn) {
    this.restrictionsOn = restrictionsOn;
  }

  public AccountPortfolioRebalanceRequest sellThreshold(Double sellThreshold) {
    this.sellThreshold = sellThreshold;
    return this;
  }

   /**
   * sellThreshold
   * @return sellThreshold
  **/
  @ApiModelProperty(example = "1.0", value = "sellThreshold")
  public Double getSellThreshold() {
    return sellThreshold;
  }

  public void setSellThreshold(Double sellThreshold) {
    this.sellThreshold = sellThreshold;
  }

  public AccountPortfolioRebalanceRequest sellTransactionCodeId(UUID sellTransactionCodeId) {
    this.sellTransactionCodeId = sellTransactionCodeId;
    return this;
  }

   /**
   * sellTransactionCodeId
   * @return sellTransactionCodeId
  **/
  @ApiModelProperty(example = "7d8d41d0-ed4b-4ae2-acb3-e0baed2ff1cc", value = "sellTransactionCodeId")
  public UUID getSellTransactionCodeId() {
    return sellTransactionCodeId;
  }

  public void setSellTransactionCodeId(UUID sellTransactionCodeId) {
    this.sellTransactionCodeId = sellTransactionCodeId;
  }

  public AccountPortfolioRebalanceRequest tenantId(UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * tenantId
   * @return tenantId
  **/
  @ApiModelProperty(example = "04907eaa-3f33-49be-a35b-378cdf639fba", value = "tenantId")
  public UUID getTenantId() {
    return tenantId;
  }

  public void setTenantId(UUID tenantId) {
    this.tenantId = tenantId;
  }

  public AccountPortfolioRebalanceRequest useCashAvailable(Boolean useCashAvailable) {
    this.useCashAvailable = useCashAvailable;
    return this;
  }

   /**
   * useCashAvailable
   * @return useCashAvailable
  **/
  @ApiModelProperty(example = "true", value = "useCashAvailable")
  public Boolean isUseCashAvailable() {
    return useCashAvailable;
  }

  public void setUseCashAvailable(Boolean useCashAvailable) {
    this.useCashAvailable = useCashAvailable;
  }

  public AccountPortfolioRebalanceRequest useStrategic(Boolean useStrategic) {
    this.useStrategic = useStrategic;
    return this;
  }

   /**
   * useStrategic
   * @return useStrategic
  **/
  @ApiModelProperty(example = "false", value = "useStrategic")
  public Boolean isUseStrategic() {
    return useStrategic;
  }

  public void setUseStrategic(Boolean useStrategic) {
    this.useStrategic = useStrategic;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountPortfolioRebalanceRequest accountPortfolioRebalanceRequest = (AccountPortfolioRebalanceRequest) o;
    return Objects.equals(this.buyThreshold, accountPortfolioRebalanceRequest.buyThreshold) &&
        Objects.equals(this.buyTransactionCodeId, accountPortfolioRebalanceRequest.buyTransactionCodeId) &&
        Objects.equals(this.cashPortfolioId, accountPortfolioRebalanceRequest.cashPortfolioId) &&
        Objects.equals(this.cashSecId, accountPortfolioRebalanceRequest.cashSecId) &&
        Objects.equals(this.clientId, accountPortfolioRebalanceRequest.clientId) &&
        Objects.equals(this.commitOrders, accountPortfolioRebalanceRequest.commitOrders) &&
        Objects.equals(this.nonFractional, accountPortfolioRebalanceRequest.nonFractional) &&
        Objects.equals(this.portThreshold, accountPortfolioRebalanceRequest.portThreshold) &&
        Objects.equals(this.restrictionsOn, accountPortfolioRebalanceRequest.restrictionsOn) &&
        Objects.equals(this.sellThreshold, accountPortfolioRebalanceRequest.sellThreshold) &&
        Objects.equals(this.sellTransactionCodeId, accountPortfolioRebalanceRequest.sellTransactionCodeId) &&
        Objects.equals(this.tenantId, accountPortfolioRebalanceRequest.tenantId) &&
        Objects.equals(this.useCashAvailable, accountPortfolioRebalanceRequest.useCashAvailable) &&
        Objects.equals(this.useStrategic, accountPortfolioRebalanceRequest.useStrategic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buyThreshold, buyTransactionCodeId, cashPortfolioId, cashSecId, clientId, commitOrders, nonFractional, portThreshold, restrictionsOn, sellThreshold, sellTransactionCodeId, tenantId, useCashAvailable, useStrategic);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountPortfolioRebalanceRequest {\n");
    
    sb.append("    buyThreshold: ").append(toIndentedString(buyThreshold)).append("\n");
    sb.append("    buyTransactionCodeId: ").append(toIndentedString(buyTransactionCodeId)).append("\n");
    sb.append("    cashPortfolioId: ").append(toIndentedString(cashPortfolioId)).append("\n");
    sb.append("    cashSecId: ").append(toIndentedString(cashSecId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    commitOrders: ").append(toIndentedString(commitOrders)).append("\n");
    sb.append("    nonFractional: ").append(toIndentedString(nonFractional)).append("\n");
    sb.append("    portThreshold: ").append(toIndentedString(portThreshold)).append("\n");
    sb.append("    restrictionsOn: ").append(toIndentedString(restrictionsOn)).append("\n");
    sb.append("    sellThreshold: ").append(toIndentedString(sellThreshold)).append("\n");
    sb.append("    sellTransactionCodeId: ").append(toIndentedString(sellTransactionCodeId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    useCashAvailable: ").append(toIndentedString(useCashAvailable)).append("\n");
    sb.append("    useStrategic: ").append(toIndentedString(useStrategic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

