# coding: utf-8

"""
    Hydrogen Nucleus API

    The Hydrogen Nucleus API  # noqa: E501

    OpenAPI spec version: 1.9.5
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nucleus_api.configuration import Configuration


class AllocationAggregatedVO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocation_category': 'str',
        'allocation_compositions': 'list[AllocationCompositionAggregatedVO]',
        'allocation_description': 'str',
        'allocation_id': 'str',
        'allocation_name': 'str',
        'allocation_secondary_id': 'str'
    }

    attribute_map = {
        'allocation_category': 'allocation_category',
        'allocation_compositions': 'allocation_compositions',
        'allocation_description': 'allocation_description',
        'allocation_id': 'allocation_id',
        'allocation_name': 'allocation_name',
        'allocation_secondary_id': 'allocation_secondary_id'
    }

    def __init__(self, allocation_category=None, allocation_compositions=None, allocation_description=None, allocation_id=None, allocation_name=None, allocation_secondary_id=None, _configuration=None):  # noqa: E501
        """AllocationAggregatedVO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allocation_category = None
        self._allocation_compositions = None
        self._allocation_description = None
        self._allocation_id = None
        self._allocation_name = None
        self._allocation_secondary_id = None
        self.discriminator = None

        if allocation_category is not None:
            self.allocation_category = allocation_category
        if allocation_compositions is not None:
            self.allocation_compositions = allocation_compositions
        if allocation_description is not None:
            self.allocation_description = allocation_description
        if allocation_id is not None:
            self.allocation_id = allocation_id
        if allocation_name is not None:
            self.allocation_name = allocation_name
        if allocation_secondary_id is not None:
            self.allocation_secondary_id = allocation_secondary_id

    @property
    def allocation_category(self):
        """Gets the allocation_category of this AllocationAggregatedVO.  # noqa: E501


        :return: The allocation_category of this AllocationAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._allocation_category

    @allocation_category.setter
    def allocation_category(self, allocation_category):
        """Sets the allocation_category of this AllocationAggregatedVO.


        :param allocation_category: The allocation_category of this AllocationAggregatedVO.  # noqa: E501
        :type: str
        """

        self._allocation_category = allocation_category

    @property
    def allocation_compositions(self):
        """Gets the allocation_compositions of this AllocationAggregatedVO.  # noqa: E501


        :return: The allocation_compositions of this AllocationAggregatedVO.  # noqa: E501
        :rtype: list[AllocationCompositionAggregatedVO]
        """
        return self._allocation_compositions

    @allocation_compositions.setter
    def allocation_compositions(self, allocation_compositions):
        """Sets the allocation_compositions of this AllocationAggregatedVO.


        :param allocation_compositions: The allocation_compositions of this AllocationAggregatedVO.  # noqa: E501
        :type: list[AllocationCompositionAggregatedVO]
        """

        self._allocation_compositions = allocation_compositions

    @property
    def allocation_description(self):
        """Gets the allocation_description of this AllocationAggregatedVO.  # noqa: E501


        :return: The allocation_description of this AllocationAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._allocation_description

    @allocation_description.setter
    def allocation_description(self, allocation_description):
        """Sets the allocation_description of this AllocationAggregatedVO.


        :param allocation_description: The allocation_description of this AllocationAggregatedVO.  # noqa: E501
        :type: str
        """

        self._allocation_description = allocation_description

    @property
    def allocation_id(self):
        """Gets the allocation_id of this AllocationAggregatedVO.  # noqa: E501


        :return: The allocation_id of this AllocationAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._allocation_id

    @allocation_id.setter
    def allocation_id(self, allocation_id):
        """Sets the allocation_id of this AllocationAggregatedVO.


        :param allocation_id: The allocation_id of this AllocationAggregatedVO.  # noqa: E501
        :type: str
        """

        self._allocation_id = allocation_id

    @property
    def allocation_name(self):
        """Gets the allocation_name of this AllocationAggregatedVO.  # noqa: E501


        :return: The allocation_name of this AllocationAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._allocation_name

    @allocation_name.setter
    def allocation_name(self, allocation_name):
        """Sets the allocation_name of this AllocationAggregatedVO.


        :param allocation_name: The allocation_name of this AllocationAggregatedVO.  # noqa: E501
        :type: str
        """

        self._allocation_name = allocation_name

    @property
    def allocation_secondary_id(self):
        """Gets the allocation_secondary_id of this AllocationAggregatedVO.  # noqa: E501


        :return: The allocation_secondary_id of this AllocationAggregatedVO.  # noqa: E501
        :rtype: str
        """
        return self._allocation_secondary_id

    @allocation_secondary_id.setter
    def allocation_secondary_id(self, allocation_secondary_id):
        """Sets the allocation_secondary_id of this AllocationAggregatedVO.


        :param allocation_secondary_id: The allocation_secondary_id of this AllocationAggregatedVO.  # noqa: E501
        :type: str
        """

        self._allocation_secondary_id = allocation_secondary_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllocationAggregatedVO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllocationAggregatedVO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AllocationAggregatedVO):
            return True

        return self.to_dict() != other.to_dict()
