/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * AccountCreateClient
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-16T14:10:50.140-04:00")
public class AccountCreateClient {
  @SerializedName("client_id")
  private UUID clientId = null;

  @SerializedName("client_account_association_type")
  private String clientAccountAssociationType = null;

  @SerializedName("signature_data")
  private String signatureData = null;

  public AccountCreateClient clientId(UUID clientId) {
    this.clientId = clientId;
    return this;
  }

   /**
   * The ID of a client associated with the account
   * @return clientId
  **/
  @ApiModelProperty(required = true, value = "The ID of a client associated with the account")
  public UUID getClientId() {
    return clientId;
  }

  public void setClientId(UUID clientId) {
    this.clientId = clientId;
  }

  public AccountCreateClient clientAccountAssociationType(String clientAccountAssociationType) {
    this.clientAccountAssociationType = clientAccountAssociationType;
    return this;
  }

   /**
   * The role of the client as it relates to the account defined by your firm. Roles may be joint, owner, trustee, viewer, or admin. Only the owner will be able to execute transactions and trades on the account
   * @return clientAccountAssociationType
  **/
  @ApiModelProperty(required = true, value = "The role of the client as it relates to the account defined by your firm. Roles may be joint, owner, trustee, viewer, or admin. Only the owner will be able to execute transactions and trades on the account")
  public String getClientAccountAssociationType() {
    return clientAccountAssociationType;
  }

  public void setClientAccountAssociationType(String clientAccountAssociationType) {
    this.clientAccountAssociationType = clientAccountAssociationType;
  }

  public AccountCreateClient signatureData(String signatureData) {
    this.signatureData = signatureData;
    return this;
  }

   /**
   * Stored signature for the client on the account such as a Base30 or Base64 string
   * @return signatureData
  **/
  @ApiModelProperty(value = "Stored signature for the client on the account such as a Base30 or Base64 string")
  public String getSignatureData() {
    return signatureData;
  }

  public void setSignatureData(String signatureData) {
    this.signatureData = signatureData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountCreateClient accountCreateClient = (AccountCreateClient) o;
    return Objects.equals(this.clientId, accountCreateClient.clientId) &&
        Objects.equals(this.clientAccountAssociationType, accountCreateClient.clientAccountAssociationType) &&
        Objects.equals(this.signatureData, accountCreateClient.signatureData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientAccountAssociationType, signatureData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountCreateClient {\n");
    
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientAccountAssociationType: ").append(toIndentedString(clientAccountAssociationType)).append("\n");
    sb.append("    signatureData: ").append(toIndentedString(signatureData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

