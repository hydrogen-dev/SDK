/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.19
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HydrogenProtonApi);
  }
}(this, function(expect, HydrogenProtonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HydrogenProtonApi.GoalsApi();
  });

  describe('(package)', function() {
    describe('GoalsApi', function() {
      describe('goalAccumulationAllocation', function() {
        it('should call goalAccumulationAllocation successfully', function(done) {
          // TODO: uncomment, update parameter values for goalAccumulationAllocation call and complete the assertions
          /*
          var goalAccumulationAllocationRequest = new HydrogenProtonApi.GoalAccumulationAllocationRequest();
          goalAccumulationAllocationRequest.recommendationConfig = new HydrogenProtonApi.RecommendationConfig();
          goalAccumulationAllocationRequest.recommendationConfig.horizonMax = 0;
          goalAccumulationAllocationRequest.recommendationConfig.depMin = ;
          goalAccumulationAllocationRequest.recommendationConfig.invMax = ;
          goalAccumulationAllocationRequest.recommendationConfig.invMin = ;
          goalAccumulationAllocationRequest.recommendationConfig.recommendedInflation = 0.0;
          goalAccumulationAllocationRequest.recommendationConfig.horizonMin = 0;
          goalAccumulationAllocationRequest.recommendationConfig.recommend = false;
          goalAccumulationAllocationRequest.recommendationConfig.depMax = ;
          goalAccumulationAllocationRequest.compoundingRate = 0.0;
          goalAccumulationAllocationRequest.riskScore = ;
          goalAccumulationAllocationRequest.recommendType = "recurring";
          goalAccumulationAllocationRequest.createLog = false;
          goalAccumulationAllocationRequest.goalConfig = new HydrogenProtonApi.GoalConfig();
          goalAccumulationAllocationRequest.goalConfig.goalAmount = ;
          goalAccumulationAllocationRequest.goalConfig.goalInflation = 0.0;
          goalAccumulationAllocationRequest.n = 0;
          goalAccumulationAllocationRequest.allocationMethod = "select";
          goalAccumulationAllocationRequest.allocationPriority = "goal";
          goalAccumulationAllocationRequest.removeOutliers = false;
          goalAccumulationAllocationRequest.adjustForCompounding = false;
          goalAccumulationAllocationRequest.goalId = """00000000-0000-0000-0000-000000000000";
          goalAccumulationAllocationRequest.confTgt = 0.0;
          goalAccumulationAllocationRequest.tradingDaysPerYear = 0;
          goalAccumulationAllocationRequest.useProxyData = false;
          goalAccumulationAllocationRequest.thresh = ;
          goalAccumulationAllocationRequest.withdrawalTax = 0.0;
          goalAccumulationAllocationRequest.clientId = """00000000-0000-0000-0000-000000000000";
          goalAccumulationAllocationRequest.optConfig = new HydrogenProtonApi.OptConfig();
          goalAccumulationAllocationRequest.optConfig.tickers = [""];
          goalAccumulationAllocationRequest.optConfig.wConfig = new HydrogenProtonApi.WConfig();
          goalAccumulationAllocationRequest.optConfig.wConfig.wMinMinor = 0.0;
          goalAccumulationAllocationRequest.optConfig.wConfig.wMinMajor = 0.0;
          goalAccumulationAllocationRequest.optConfig.wConfig.cashAmount = 0.0;
          goalAccumulationAllocationRequest.optConfig.wConfig.wMaxMajor = 0.0;
          goalAccumulationAllocationRequest.optConfig.wConfig.wMaxMinor = 0.0;
          goalAccumulationAllocationRequest.optConfig.minAssets = 0;
          goalAccumulationAllocationRequest.optConfig.endDate = new Date();
          goalAccumulationAllocationRequest.optConfig.wAssetConfig = ;
          goalAccumulationAllocationRequest.optConfig.startDate = new Date();
          goalAccumulationAllocationRequest.optConfig.secTypes = ["major"]"major";
          goalAccumulationAllocationRequest.marketDataSource = "nucleus";
          goalAccumulationAllocationRequest.threshType = "amnt";
          goalAccumulationAllocationRequest.horizonFrequency = "year";
          goalAccumulationAllocationRequest.horizon = 0;
          goalAccumulationAllocationRequest.allocations = ["""00000000-0000-0000-0000-000000000000"];
          goalAccumulationAllocationRequest.currInv = ;
          goalAccumulationAllocationRequest.depositConfig = [new HydrogenProtonApi.AccumulationGoalDepositConfig()];
          goalAccumulationAllocationRequest.depositConfig[0].depEndPeriod = 0;
          goalAccumulationAllocationRequest.depositConfig[0].depAmount = ;
          goalAccumulationAllocationRequest.depositConfig[0].depEndReference = "a_start";
          goalAccumulationAllocationRequest.depositConfig[0].depStartPeriod = 0;
          goalAccumulationAllocationRequest.depositConfig[0].depFrequency = "year";
          goalAccumulationAllocationRequest.depositConfig[0].depInflation = 0.0;
          goalAccumulationAllocationRequest.depositConfig[0].depStartReference = "a_start";

          instance.goalAccumulationAllocation(goalAccumulationAllocationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('goalAccumulationRecommendation', function() {
        it('should call goalAccumulationRecommendation successfully', function(done) {
          // TODO: uncomment, update parameter values for goalAccumulationRecommendation call and complete the assertions
          /*
          var goalAccumulationRecommendationRequest = new HydrogenProtonApi.GoalAccumulationRecommendationRequest();
          goalAccumulationRecommendationRequest.recommendationConfig = new HydrogenProtonApi.RecommendationConfig1();
          goalAccumulationRecommendationRequest.recommendationConfig.horizonMax = 0;
          goalAccumulationRecommendationRequest.recommendationConfig.depMin = ;
          goalAccumulationRecommendationRequest.recommendationConfig.invMax = ;
          goalAccumulationRecommendationRequest.recommendationConfig.invMin = ;
          goalAccumulationRecommendationRequest.recommendationConfig.recommendedInflation = 0.0;
          goalAccumulationRecommendationRequest.recommendationConfig.horizonMin = 0;
          goalAccumulationRecommendationRequest.recommendationConfig.depMax = ;
          goalAccumulationRecommendationRequest.compoundingRate = 0.0;
          goalAccumulationRecommendationRequest.recommendType = "recurring";
          goalAccumulationRecommendationRequest.createLog = false;
          goalAccumulationRecommendationRequest.goalConfig = new HydrogenProtonApi.GoalConfig();
          goalAccumulationRecommendationRequest.goalConfig.goalAmount = ;
          goalAccumulationRecommendationRequest.goalConfig.goalInflation = 0.0;
          goalAccumulationRecommendationRequest.n = 0;
          goalAccumulationRecommendationRequest.pRisk = [0.0];
          goalAccumulationRecommendationRequest.removeOutliers = false;
          goalAccumulationRecommendationRequest.adjustForCompounding = false;
          goalAccumulationRecommendationRequest.goalId = """00000000-0000-0000-0000-000000000000";
          goalAccumulationRecommendationRequest.confTgt = 0.0;
          goalAccumulationRecommendationRequest.tradingDaysPerYear = 0;
          goalAccumulationRecommendationRequest.thresh = ;
          goalAccumulationRecommendationRequest.withdrawalTax = 0.0;
          goalAccumulationRecommendationRequest.clientId = """00000000-0000-0000-0000-000000000000";
          goalAccumulationRecommendationRequest.threshType = "amnt";
          goalAccumulationRecommendationRequest.horizonFrequency = "year";
          goalAccumulationRecommendationRequest.horizon = 0;
          goalAccumulationRecommendationRequest.currInv = ;
          goalAccumulationRecommendationRequest.depositConfig = [new HydrogenProtonApi.AccumulationGoalDepositConfig()];
          goalAccumulationRecommendationRequest.depositConfig[0].depEndPeriod = 0;
          goalAccumulationRecommendationRequest.depositConfig[0].depAmount = ;
          goalAccumulationRecommendationRequest.depositConfig[0].depEndReference = "a_start";
          goalAccumulationRecommendationRequest.depositConfig[0].depStartPeriod = 0;
          goalAccumulationRecommendationRequest.depositConfig[0].depFrequency = "year";
          goalAccumulationRecommendationRequest.depositConfig[0].depInflation = 0.0;
          goalAccumulationRecommendationRequest.depositConfig[0].depStartReference = "a_start";
          goalAccumulationRecommendationRequest.pRet = [0.0];

          instance.goalAccumulationRecommendation(goalAccumulationRecommendationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('goalAccumulationStatus', function() {
        it('should call goalAccumulationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for goalAccumulationStatus call and complete the assertions
          /*
          var goalAccumulationStatusRequest = new HydrogenProtonApi.GoalAccumulationStatusRequest();
          goalAccumulationStatusRequest.recommendationConfig = new HydrogenProtonApi.RecommendationConfig();
          goalAccumulationStatusRequest.recommendationConfig.horizonMax = 0;
          goalAccumulationStatusRequest.recommendationConfig.depMin = ;
          goalAccumulationStatusRequest.recommendationConfig.invMax = ;
          goalAccumulationStatusRequest.recommendationConfig.invMin = ;
          goalAccumulationStatusRequest.recommendationConfig.recommendedInflation = 0.0;
          goalAccumulationStatusRequest.recommendationConfig.horizonMin = 0;
          goalAccumulationStatusRequest.recommendationConfig.recommend = false;
          goalAccumulationStatusRequest.recommendationConfig.depMax = ;
          goalAccumulationStatusRequest.compoundingRate = 0.0;
          goalAccumulationStatusRequest.recommendType = "recurring";
          goalAccumulationStatusRequest.createLog = false;
          goalAccumulationStatusRequest.goalConfig = new HydrogenProtonApi.GoalConfig();
          goalAccumulationStatusRequest.goalConfig.goalAmount = ;
          goalAccumulationStatusRequest.goalConfig.goalInflation = 0.0;
          goalAccumulationStatusRequest.n = 0;
          goalAccumulationStatusRequest.pRisk = [0.0];
          goalAccumulationStatusRequest.removeOutliers = false;
          goalAccumulationStatusRequest.adjustForCompounding = false;
          goalAccumulationStatusRequest.goalId = """00000000-0000-0000-0000-000000000000";
          goalAccumulationStatusRequest.confTgt = 0.0;
          goalAccumulationStatusRequest.tradingDaysPerYear = 0;
          goalAccumulationStatusRequest.thresh = ;
          goalAccumulationStatusRequest.withdrawalTax = 0.0;
          goalAccumulationStatusRequest.clientId = """00000000-0000-0000-0000-000000000000";
          goalAccumulationStatusRequest.threshType = "amnt";
          goalAccumulationStatusRequest.horizonFrequency = "year";
          goalAccumulationStatusRequest.horizon = 0;
          goalAccumulationStatusRequest.currInv = ;
          goalAccumulationStatusRequest.depositConfig = [new HydrogenProtonApi.AccumulationGoalDepositConfig()];
          goalAccumulationStatusRequest.depositConfig[0].depEndPeriod = 0;
          goalAccumulationStatusRequest.depositConfig[0].depAmount = ;
          goalAccumulationStatusRequest.depositConfig[0].depEndReference = "a_start";
          goalAccumulationStatusRequest.depositConfig[0].depStartPeriod = 0;
          goalAccumulationStatusRequest.depositConfig[0].depFrequency = "year";
          goalAccumulationStatusRequest.depositConfig[0].depInflation = 0.0;
          goalAccumulationStatusRequest.depositConfig[0].depStartReference = "a_start";
          goalAccumulationStatusRequest.pRet = [0.0];

          instance.goalAccumulationStatus(goalAccumulationStatusRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('goalDecumulationAllocation', function() {
        it('should call goalDecumulationAllocation successfully', function(done) {
          // TODO: uncomment, update parameter values for goalDecumulationAllocation call and complete the assertions
          /*
          var goalDecumulationAllocationRequest = new HydrogenProtonApi.GoalDecumulationAllocationRequest();
          goalDecumulationAllocationRequest.recommendationConfig = new HydrogenProtonApi.RecommendationConfig();
          goalDecumulationAllocationRequest.recommendationConfig.horizonMax = 0;
          goalDecumulationAllocationRequest.recommendationConfig.depMin = ;
          goalDecumulationAllocationRequest.recommendationConfig.invMax = ;
          goalDecumulationAllocationRequest.recommendationConfig.invMin = ;
          goalDecumulationAllocationRequest.recommendationConfig.recommendedInflation = 0.0;
          goalDecumulationAllocationRequest.recommendationConfig.horizonMin = 0;
          goalDecumulationAllocationRequest.recommendationConfig.recommend = false;
          goalDecumulationAllocationRequest.recommendationConfig.depMax = ;
          goalDecumulationAllocationRequest.compoundingRate = 0.0;
          goalDecumulationAllocationRequest.riskScore = ;
          goalDecumulationAllocationRequest.recommendType = "recurring";
          goalDecumulationAllocationRequest.createLog = false;
          goalDecumulationAllocationRequest.n = 0;
          goalDecumulationAllocationRequest.aHorizon = 0;
          goalDecumulationAllocationRequest.allocationMethod = "select";
          goalDecumulationAllocationRequest.allocationPriority = "goal";
          goalDecumulationAllocationRequest.removeOutliers = false;
          goalDecumulationAllocationRequest.adjustForCompounding = false;
          goalDecumulationAllocationRequest.goalId = """00000000-0000-0000-0000-000000000000";
          goalDecumulationAllocationRequest.confTgt = 0.0;
          goalDecumulationAllocationRequest.tradingDaysPerYear = 0;
          goalDecumulationAllocationRequest.useProxyData = false;
          goalDecumulationAllocationRequest.thresh = ;
          goalDecumulationAllocationRequest.withdrawalTax = 0.0;
          goalDecumulationAllocationRequest.dHorizon = 0;
          goalDecumulationAllocationRequest.clientId = """00000000-0000-0000-0000-000000000000";
          goalDecumulationAllocationRequest.optConfig = new HydrogenProtonApi.OptConfig();
          goalDecumulationAllocationRequest.optConfig.tickers = [""];
          goalDecumulationAllocationRequest.optConfig.wConfig = new HydrogenProtonApi.WConfig();
          goalDecumulationAllocationRequest.optConfig.wConfig.wMinMinor = 0.0;
          goalDecumulationAllocationRequest.optConfig.wConfig.wMinMajor = 0.0;
          goalDecumulationAllocationRequest.optConfig.wConfig.cashAmount = 0.0;
          goalDecumulationAllocationRequest.optConfig.wConfig.wMaxMajor = 0.0;
          goalDecumulationAllocationRequest.optConfig.wConfig.wMaxMinor = 0.0;
          goalDecumulationAllocationRequest.optConfig.minAssets = 0;
          goalDecumulationAllocationRequest.optConfig.endDate = new Date();
          goalDecumulationAllocationRequest.optConfig.wAssetConfig = ;
          goalDecumulationAllocationRequest.optConfig.startDate = new Date();
          goalDecumulationAllocationRequest.optConfig.secTypes = ["major"]"major";
          goalDecumulationAllocationRequest.marketDataSource = "nucleus";
          goalDecumulationAllocationRequest.threshType = "amnt";
          goalDecumulationAllocationRequest.horizonFrequency = "year";
          goalDecumulationAllocationRequest.withdrawalConfig = [new HydrogenProtonApi.GoalWithdrawalConfig()];
          goalDecumulationAllocationRequest.withdrawalConfig[0].withInflation = 0.0;
          goalDecumulationAllocationRequest.withdrawalConfig[0].withFrequency = "year";
          goalDecumulationAllocationRequest.withdrawalConfig[0].withEndReference = "a_end";
          goalDecumulationAllocationRequest.withdrawalConfig[0].withStartReference = "a_end";
          goalDecumulationAllocationRequest.withdrawalConfig[0].withEndPeriod = 0;
          goalDecumulationAllocationRequest.withdrawalConfig[0].withAmount = ;
          goalDecumulationAllocationRequest.withdrawalConfig[0].withStartPeriod = 0;
          goalDecumulationAllocationRequest.allocations = ["""00000000-0000-0000-0000-000000000000"];
          goalDecumulationAllocationRequest.currInv = ;
          goalDecumulationAllocationRequest.depositConfig = [new HydrogenProtonApi.DecumulationGoalDepositConfig()];
          goalDecumulationAllocationRequest.depositConfig[0].depEndPeriod = 0;
          goalDecumulationAllocationRequest.depositConfig[0].depAmount = ;
          goalDecumulationAllocationRequest.depositConfig[0].depEndReference = "a_start";
          goalDecumulationAllocationRequest.depositConfig[0].depStartPeriod = 0;
          goalDecumulationAllocationRequest.depositConfig[0].depFrequency = "year";
          goalDecumulationAllocationRequest.depositConfig[0].depInflation = 0.0;
          goalDecumulationAllocationRequest.depositConfig[0].depStartReference = "a_start";

          instance.goalDecumulationAllocation(goalDecumulationAllocationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('goalDecumulationRecommendation', function() {
        it('should call goalDecumulationRecommendation successfully', function(done) {
          // TODO: uncomment, update parameter values for goalDecumulationRecommendation call and complete the assertions
          /*
          var goalDecumulationRecommendationRequest = new HydrogenProtonApi.GoalDecumulationRecommendationRequest();
          goalDecumulationRecommendationRequest.recommendationConfig = new HydrogenProtonApi.RecommendationConfig1();
          goalDecumulationRecommendationRequest.recommendationConfig.horizonMax = 0;
          goalDecumulationRecommendationRequest.recommendationConfig.depMin = ;
          goalDecumulationRecommendationRequest.recommendationConfig.invMax = ;
          goalDecumulationRecommendationRequest.recommendationConfig.invMin = ;
          goalDecumulationRecommendationRequest.recommendationConfig.recommendedInflation = 0.0;
          goalDecumulationRecommendationRequest.recommendationConfig.horizonMin = 0;
          goalDecumulationRecommendationRequest.recommendationConfig.depMax = ;
          goalDecumulationRecommendationRequest.compoundingRate = 0.0;
          goalDecumulationRecommendationRequest.recommendType = "recurring";
          goalDecumulationRecommendationRequest.createLog = false;
          goalDecumulationRecommendationRequest.n = 0;
          goalDecumulationRecommendationRequest.aHorizon = 0;
          goalDecumulationRecommendationRequest.pRisk = [0.0];
          goalDecumulationRecommendationRequest.removeOutliers = false;
          goalDecumulationRecommendationRequest.adjustForCompounding = false;
          goalDecumulationRecommendationRequest.goalId = """00000000-0000-0000-0000-000000000000";
          goalDecumulationRecommendationRequest.confTgt = 0.0;
          goalDecumulationRecommendationRequest.tradingDaysPerYear = 0;
          goalDecumulationRecommendationRequest.thresh = ;
          goalDecumulationRecommendationRequest.withdrawalTax = 0.0;
          goalDecumulationRecommendationRequest.dHorizon = 0;
          goalDecumulationRecommendationRequest.clientId = """00000000-0000-0000-0000-000000000000";
          goalDecumulationRecommendationRequest.threshType = "amnt";
          goalDecumulationRecommendationRequest.horizonFrequency = "year";
          goalDecumulationRecommendationRequest.withdrawalConfig = [new HydrogenProtonApi.GoalWithdrawalConfig()];
          goalDecumulationRecommendationRequest.withdrawalConfig[0].withInflation = 0.0;
          goalDecumulationRecommendationRequest.withdrawalConfig[0].withFrequency = "year";
          goalDecumulationRecommendationRequest.withdrawalConfig[0].withEndReference = "a_end";
          goalDecumulationRecommendationRequest.withdrawalConfig[0].withStartReference = "a_end";
          goalDecumulationRecommendationRequest.withdrawalConfig[0].withEndPeriod = 0;
          goalDecumulationRecommendationRequest.withdrawalConfig[0].withAmount = ;
          goalDecumulationRecommendationRequest.withdrawalConfig[0].withStartPeriod = 0;
          goalDecumulationRecommendationRequest.currInv = ;
          goalDecumulationRecommendationRequest.depositConfig = [new HydrogenProtonApi.DecumulationGoalDepositConfig()];
          goalDecumulationRecommendationRequest.depositConfig[0].depEndPeriod = 0;
          goalDecumulationRecommendationRequest.depositConfig[0].depAmount = ;
          goalDecumulationRecommendationRequest.depositConfig[0].depEndReference = "a_start";
          goalDecumulationRecommendationRequest.depositConfig[0].depStartPeriod = 0;
          goalDecumulationRecommendationRequest.depositConfig[0].depFrequency = "year";
          goalDecumulationRecommendationRequest.depositConfig[0].depInflation = 0.0;
          goalDecumulationRecommendationRequest.depositConfig[0].depStartReference = "a_start";
          goalDecumulationRecommendationRequest.pRet = [0.0];

          instance.goalDecumulationRecommendation(goalDecumulationRecommendationRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('goalDecumulationStatus', function() {
        it('should call goalDecumulationStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for goalDecumulationStatus call and complete the assertions
          /*
          var goalDecumulationStatusRequest = new HydrogenProtonApi.GoalDecumulationStatusRequest();
          goalDecumulationStatusRequest.recommendationConfig = new HydrogenProtonApi.RecommendationConfig();
          goalDecumulationStatusRequest.recommendationConfig.horizonMax = 0;
          goalDecumulationStatusRequest.recommendationConfig.depMin = ;
          goalDecumulationStatusRequest.recommendationConfig.invMax = ;
          goalDecumulationStatusRequest.recommendationConfig.invMin = ;
          goalDecumulationStatusRequest.recommendationConfig.recommendedInflation = 0.0;
          goalDecumulationStatusRequest.recommendationConfig.horizonMin = 0;
          goalDecumulationStatusRequest.recommendationConfig.recommend = false;
          goalDecumulationStatusRequest.recommendationConfig.depMax = ;
          goalDecumulationStatusRequest.compoundingRate = 0.0;
          goalDecumulationStatusRequest.recommendType = "recurring";
          goalDecumulationStatusRequest.createLog = false;
          goalDecumulationStatusRequest.n = 0;
          goalDecumulationStatusRequest.aHorizon = 0;
          goalDecumulationStatusRequest.pRisk = [0.0];
          goalDecumulationStatusRequest.removeOutliers = false;
          goalDecumulationStatusRequest.adjustForCompounding = false;
          goalDecumulationStatusRequest.goalId = """00000000-0000-0000-0000-000000000000";
          goalDecumulationStatusRequest.confTgt = 0.0;
          goalDecumulationStatusRequest.tradingDaysPerYear = 0;
          goalDecumulationStatusRequest.thresh = ;
          goalDecumulationStatusRequest.withdrawalTax = 0.0;
          goalDecumulationStatusRequest.dHorizon = 0;
          goalDecumulationStatusRequest.clientId = """00000000-0000-0000-0000-000000000000";
          goalDecumulationStatusRequest.threshType = "amnt";
          goalDecumulationStatusRequest.horizonFrequency = "year";
          goalDecumulationStatusRequest.withdrawalConfig = [new HydrogenProtonApi.GoalWithdrawalConfig()];
          goalDecumulationStatusRequest.withdrawalConfig[0].withInflation = 0.0;
          goalDecumulationStatusRequest.withdrawalConfig[0].withFrequency = "year";
          goalDecumulationStatusRequest.withdrawalConfig[0].withEndReference = "a_end";
          goalDecumulationStatusRequest.withdrawalConfig[0].withStartReference = "a_end";
          goalDecumulationStatusRequest.withdrawalConfig[0].withEndPeriod = 0;
          goalDecumulationStatusRequest.withdrawalConfig[0].withAmount = ;
          goalDecumulationStatusRequest.withdrawalConfig[0].withStartPeriod = 0;
          goalDecumulationStatusRequest.currInv = ;
          goalDecumulationStatusRequest.depositConfig = [new HydrogenProtonApi.DecumulationGoalDepositConfig()];
          goalDecumulationStatusRequest.depositConfig[0].depEndPeriod = 0;
          goalDecumulationStatusRequest.depositConfig[0].depAmount = ;
          goalDecumulationStatusRequest.depositConfig[0].depEndReference = "a_start";
          goalDecumulationStatusRequest.depositConfig[0].depStartPeriod = 0;
          goalDecumulationStatusRequest.depositConfig[0].depFrequency = "year";
          goalDecumulationStatusRequest.depositConfig[0].depInflation = 0.0;
          goalDecumulationStatusRequest.depositConfig[0].depStartReference = "a_start";
          goalDecumulationStatusRequest.pRet = [0.0];

          instance.goalDecumulationStatus(goalDecumulationStatusRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Object);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
