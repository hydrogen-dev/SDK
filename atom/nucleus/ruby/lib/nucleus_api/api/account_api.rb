=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.20

=end

require 'uri'

module NucleusApi
  class AccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an account allocation
    # Create an account-allocation mapping for an account.
    # @param alloc_request allocRequest
    # @param [Hash] opts the optional parameters
    # @return [AccountAllocationMapping]
    def create_account_allocation_mapping_using_post(alloc_request, opts = {})
      data, _status_code, _headers = create_account_allocation_mapping_using_post_with_http_info(alloc_request, opts)
      data
    end

    # Create an account allocation
    # Create an account-allocation mapping for an account.
    # @param alloc_request allocRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountAllocationMapping, Fixnum, Hash)>] AccountAllocationMapping data, response status code and response headers
    def create_account_allocation_mapping_using_post_with_http_info(alloc_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.create_account_allocation_mapping_using_post ...'
      end
      # verify the required parameter 'alloc_request' is set
      if @api_client.config.client_side_validation && alloc_request.nil?
        fail ArgumentError, "Missing the required parameter 'alloc_request' when calling AccountApi.create_account_allocation_mapping_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alloc_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountAllocationMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_account_allocation_mapping_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account status
    # Create an account status record for an account.
    # @param account_status_request accountStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [AccountStatus]
    def create_account_status_using_post(account_status_request, opts = {})
      data, _status_code, _headers = create_account_status_using_post_with_http_info(account_status_request, opts)
      data
    end

    # Create an account status
    # Create an account status record for an account.
    # @param account_status_request accountStatusRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountStatus, Fixnum, Hash)>] AccountStatus data, response status code and response headers
    def create_account_status_using_post_with_http_info(account_status_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.create_account_status_using_post ...'
      end
      # verify the required parameter 'account_status_request' is set
      if @api_client.config.client_side_validation && account_status_request.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_request' when calling AccountApi.create_account_status_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_status_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_account_status_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account type
    # Create a new account type for your firm.
    # @param account_type_request accountTypeRequest
    # @param [Hash] opts the optional parameters
    # @return [AccountType]
    def create_account_type_using_post(account_type_request, opts = {})
      data, _status_code, _headers = create_account_type_using_post_with_http_info(account_type_request, opts)
      data
    end

    # Create an account type
    # Create a new account type for your firm.
    # @param account_type_request accountTypeRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountType, Fixnum, Hash)>] AccountType data, response status code and response headers
    def create_account_type_using_post_with_http_info(account_type_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.create_account_type_using_post ...'
      end
      # verify the required parameter 'account_type_request' is set
      if @api_client.config.client_side_validation && account_type_request.nil?
        fail ArgumentError, "Missing the required parameter 'account_type_request' when calling AccountApi.create_account_type_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_type_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_account_type_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create an account
    # Create an account under a client.
    # @param account account
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def create_account_using_post(account, opts = {})
      data, _status_code, _headers = create_account_using_post_with_http_info(account, opts)
      data
    end

    # Create an account
    # Create an account under a client.
    # @param account account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Fixnum, Hash)>] Account data, response status code and response headers
    def create_account_using_post_with_http_info(account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.create_account_using_post ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling AccountApi.create_account_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Account')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#create_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account allocation
    # Permanently delete an account-allocation mapping for an account.
    # @param account_allocation_id UUID account_allocation_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_allocation_mapping_using_delete(account_allocation_id, opts = {})
      delete_account_allocation_mapping_using_delete_with_http_info(account_allocation_id, opts)
      nil
    end

    # Delete an account allocation
    # Permanently delete an account-allocation mapping for an account.
    # @param account_allocation_id UUID account_allocation_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_allocation_mapping_using_delete_with_http_info(account_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_account_allocation_mapping_using_delete ...'
      end
      # verify the required parameter 'account_allocation_id' is set
      if @api_client.config.client_side_validation && account_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_allocation_id' when calling AccountApi.delete_account_allocation_mapping_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation/{account_allocation_id}'.sub('{' + 'account_allocation_id' + '}', account_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_account_allocation_mapping_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account permission
    # Delete an account permission
    # @param account_id account_id
    # @param [Hash] opts the optional parameters
    # @return [AccountPermissionVO]
    def delete_account_permission_using_delete(account_id, opts = {})
      data, _status_code, _headers = delete_account_permission_using_delete_with_http_info(account_id, opts)
      data
    end

    # Delete an account permission
    # Delete an account permission
    # @param account_id account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountPermissionVO, Fixnum, Hash)>] AccountPermissionVO data, response status code and response headers
    def delete_account_permission_using_delete_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_account_permission_using_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.delete_account_permission_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountPermissionVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_account_permission_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account status
    # Permanently delete an account status record from an account’s history.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_status_using_delete(account_status_id, opts = {})
      delete_account_status_using_delete_with_http_info(account_status_id, opts)
      nil
    end

    # Delete an account status
    # Permanently delete an account status record from an account’s history.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_status_using_delete_with_http_info(account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_account_status_using_delete ...'
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling AccountApi.delete_account_status_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_account_status_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account type
    # Permanently delete a possible account type defined for your firm.
    # @param account_type_id UUID account_type_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_type_using_delete(account_type_id, opts = {})
      delete_account_type_using_delete_with_http_info(account_type_id, opts)
      nil
    end

    # Delete an account type
    # Permanently delete a possible account type defined for your firm.
    # @param account_type_id UUID account_type_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_type_using_delete_with_http_info(account_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_account_type_using_delete ...'
      end
      # verify the required parameter 'account_type_id' is set
      if @api_client.config.client_side_validation && account_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_type_id' when calling AccountApi.delete_account_type_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type/{account_type_id}'.sub('{' + 'account_type_id' + '}', account_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_account_type_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an account
    # Permanently delete an account under a client.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_account_using_delete(account_id, opts = {})
      delete_account_using_delete_with_http_info(account_id, opts)
      nil
    end

    # Delete an account
    # Permanently delete an account under a client.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_account_using_delete_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.delete_account_using_delete ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.delete_account_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#delete_account_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all accounts
    # Get information for all accounts for all clients defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAccount]
    def get_account_all_using_get(opts = {})
      data, _status_code, _headers = get_account_all_using_get_with_http_info(opts)
      data
    end

    # List all accounts
    # Get information for all accounts for all clients defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAccount, Fixnum, Hash)>] PageAccount data, response status code and response headers
    def get_account_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/account'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account allocations
    # Get information for all account-allocation mappings for all accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAccountAllocationMapping]
    def get_account_allocation_mapping_all_using_get(opts = {})
      data, _status_code, _headers = get_account_allocation_mapping_all_using_get_with_http_info(opts)
      data
    end

    # List all account allocations
    # Get information for all account-allocation mappings for all accounts defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAccountAllocationMapping, Fixnum, Hash)>] PageAccountAllocationMapping data, response status code and response headers
    def get_account_allocation_mapping_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_allocation_mapping_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAccountAllocationMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_allocation_mapping_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account allocation
    # Retrieve the information for a specific account-allocation mapping for an account.
    # @param account_allocation_id UUID account_allocation_id
    # @param [Hash] opts the optional parameters
    # @return [AccountAllocationMapping]
    def get_account_allocation_mapping_using_get(account_allocation_id, opts = {})
      data, _status_code, _headers = get_account_allocation_mapping_using_get_with_http_info(account_allocation_id, opts)
      data
    end

    # Retrieve an account allocation
    # Retrieve the information for a specific account-allocation mapping for an account.
    # @param account_allocation_id UUID account_allocation_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountAllocationMapping, Fixnum, Hash)>] AccountAllocationMapping data, response status code and response headers
    def get_account_allocation_mapping_using_get_with_http_info(account_allocation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_allocation_mapping_using_get ...'
      end
      # verify the required parameter 'account_allocation_id' is set
      if @api_client.config.client_side_validation && account_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_allocation_id' when calling AccountApi.get_account_allocation_mapping_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation/{account_allocation_id}'.sub('{' + 'account_allocation_id' + '}', account_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountAllocationMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_allocation_mapping_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account asset sizes
    # Get a list of asset sizes by date for an account.
    # @param account_id Account Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date
    # @option opts [BOOLEAN] :exclude_subledger true or false
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :sort_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
    # @option opts [Date] :start_date start date
    # @return [Array<AvailableDateDoubleVO>]
    def get_account_asset_size_agg_all_using_get(account_id, opts = {})
      data, _status_code, _headers = get_account_asset_size_agg_all_using_get_with_http_info(account_id, opts)
      data
    end

    # List all account asset sizes
    # Get a list of asset sizes by date for an account.
    # @param account_id Account Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date
    # @option opts [BOOLEAN] :exclude_subledger true or false
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :sort_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
    # @option opts [Date] :start_date start date
    # @return [Array<(Array<AvailableDateDoubleVO>, Fixnum, Hash)>] Array<AvailableDateDoubleVO> data, response status code and response headers
    def get_account_asset_size_agg_all_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_asset_size_agg_all_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.get_account_asset_size_agg_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/asset_size'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'exclude_subledger'] = opts[:'exclude_subledger'] if !opts[:'exclude_subledger'].nil?
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'sort_type'] = opts[:'sort_type'] if !opts[:'sort_type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AvailableDateDoubleVO>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_asset_size_agg_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all Account overview
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :order_by order_by (default to update_date)
    # @return [Object]
    def get_account_overview_using_get(account_id, opts = {})
      data, _status_code, _headers = get_account_overview_using_get_with_http_info(account_id, opts)
      data
    end

    # List all Account overview
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :order_by order_by
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_account_overview_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_overview_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.get_account_overview_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/account_overview'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_overview_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an account permission
    # Get an account permission
    # @param account_id account_id
    # @param [Hash] opts the optional parameters
    # @return [AccountPermissionVO]
    def get_account_permission_using_get(account_id, opts = {})
      data, _status_code, _headers = get_account_permission_using_get_with_http_info(account_id, opts)
      data
    end

    # Get an account permission
    # Get an account permission
    # @param account_id account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountPermissionVO, Fixnum, Hash)>] AccountPermissionVO data, response status code and response headers
    def get_account_permission_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_permission_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.get_account_permission_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountPermissionVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_permission_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account statuses
    # Get the account status history information for all accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAccountStatus]
    def get_account_status_all_using_get(opts = {})
      data, _status_code, _headers = get_account_status_all_using_get_with_http_info(opts)
      data
    end

    # List all account statuses
    # Get the account status history information for all accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAccountStatus, Fixnum, Hash)>] PageAccountStatus data, response status code and response headers
    def get_account_status_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_status_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_status_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account status
    # Retrieve the information for a specific account status record for an account.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [AccountStatus]
    def get_account_status_using_get(account_status_id, opts = {})
      data, _status_code, _headers = get_account_status_using_get_with_http_info(account_status_id, opts)
      data
    end

    # Retrieve an account status
    # Retrieve the information for a specific account status record for an account.
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountStatus, Fixnum, Hash)>] AccountStatus data, response status code and response headers
    def get_account_status_using_get_with_http_info(account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_status_using_get ...'
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling AccountApi.get_account_status_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_status_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account types
    # List all account types defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAccountType]
    def get_account_type_all_using_get(opts = {})
      data, _status_code, _headers = get_account_type_all_using_get_with_http_info(opts)
      data
    end

    # List all account types
    # List all account types defined for your firm.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAccountType, Fixnum, Hash)>] PageAccountType data, response status code and response headers
    def get_account_type_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_type_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAccountType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_type_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get an Account Type
    # Get an account types defined for your firm.
    # @param account_type_id UUID account_type_id
    # @param [Hash] opts the optional parameters
    # @return [AccountType]
    def get_account_type_using_get(account_type_id, opts = {})
      data, _status_code, _headers = get_account_type_using_get_with_http_info(account_type_id, opts)
      data
    end

    # Get an Account Type
    # Get an account types defined for your firm.
    # @param account_type_id UUID account_type_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountType, Fixnum, Hash)>] AccountType data, response status code and response headers
    def get_account_type_using_get_with_http_info(account_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_type_using_get ...'
      end
      # verify the required parameter 'account_type_id' is set
      if @api_client.config.client_side_validation && account_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_type_id' when calling AccountApi.get_account_type_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type/{account_type_id}'.sub('{' + 'account_type_id' + '}', account_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_type_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an account
    # Retrieve the information for a specific account associated with a client.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def get_account_using_get(account_id, opts = {})
      data, _status_code, _headers = get_account_using_get_with_http_info(account_id, opts)
      data
    end

    # Retrieve an account
    # Retrieve the information for a specific account associated with a client.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Fixnum, Hash)>] Account data, response status code and response headers
    def get_account_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_account_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.get_account_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Account')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_account_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account permission
    # List all account permission
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageAccountPermissionVO]
    def get_all_account_permission_using_get(opts = {})
      data, _status_code, _headers = get_all_account_permission_using_get_with_http_info(opts)
      data
    end

    # List all account permission
    # List all account permission
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageAccountPermissionVO, Fixnum, Hash)>] PageAccountPermissionVO data, response status code and response headers
    def get_all_account_permission_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_all_account_permission_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageAccountPermissionVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_all_account_permission_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account holdings
    # Get information for all the securities that are currently being held by an account.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date 
    # @option opts [String] :filter filter
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :order_by order_by (default to date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [Date] :start_date start date 
    # @return [PagePortfolioHoldingAgg]
    def get_portfolio_holding_agg_all_using_get(account_id, opts = {})
      data, _status_code, _headers = get_portfolio_holding_agg_all_using_get_with_http_info(account_id, opts)
      data
    end

    # List all account holdings
    # Get information for all the securities that are currently being held by an account.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date 
    # @option opts [String] :filter filter
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @option opts [Date] :start_date start date 
    # @return [Array<(PagePortfolioHoldingAgg, Fixnum, Hash)>] PagePortfolioHoldingAgg data, response status code and response headers
    def get_portfolio_holding_agg_all_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_portfolio_holding_agg_all_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.get_portfolio_holding_agg_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/holding'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioHoldingAgg')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_portfolio_holding_agg_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all account transactions
    # Get the information for all transactions for an account.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date 
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [Date] :start_date start date 
    # @return [PagePortfolioTransaction]
    def get_portfolio_transaction_agg_all_using_get(account_id, opts = {})
      data, _status_code, _headers = get_portfolio_transaction_agg_all_using_get_with_http_info(account_id, opts)
      data
    end

    # List all account transactions
    # Get the information for all transactions for an account.
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date 
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @option opts [Date] :start_date start date 
    # @return [Array<(PagePortfolioTransaction, Fixnum, Hash)>] PagePortfolioTransaction data, response status code and response headers
    def get_portfolio_transaction_agg_all_using_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.get_portfolio_transaction_agg_all_using_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.get_portfolio_transaction_agg_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/transaction'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#get_portfolio_transaction_agg_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # create an account permission
    # create an account permission
    # @param acl_client_permission_vo aclClientPermissionVO
    # @param [Hash] opts the optional parameters
    # @return [AccountPermissionVO]
    def insert_account_and_related_permission_using_post(acl_client_permission_vo, opts = {})
      data, _status_code, _headers = insert_account_and_related_permission_using_post_with_http_info(acl_client_permission_vo, opts)
      data
    end

    # create an account permission
    # create an account permission
    # @param acl_client_permission_vo aclClientPermissionVO
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountPermissionVO, Fixnum, Hash)>] AccountPermissionVO data, response status code and response headers
    def insert_account_and_related_permission_using_post_with_http_info(acl_client_permission_vo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.insert_account_and_related_permission_using_post ...'
      end
      # verify the required parameter 'acl_client_permission_vo' is set
      if @api_client.config.client_side_validation && acl_client_permission_vo.nil?
        fail ArgumentError, "Missing the required parameter 'acl_client_permission_vo' when calling AccountApi.insert_account_and_related_permission_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(acl_client_permission_vo)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountPermissionVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#insert_account_and_related_permission_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Subscribe an account
    # After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
    # @param account_id UUID account_id
    # @param alloc_request allocRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<Portfolio>]
    def subscribe_account_using_post(account_id, alloc_request, opts = {})
      data, _status_code, _headers = subscribe_account_using_post_with_http_info(account_id, alloc_request, opts)
      data
    end

    # Subscribe an account
    # After creating an account, you may create portfolios for the account to track a client’s investment, savings, or insurance products.
    # @param account_id UUID account_id
    # @param alloc_request allocRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Portfolio>, Fixnum, Hash)>] Array<Portfolio> data, response status code and response headers
    def subscribe_account_using_post_with_http_info(account_id, alloc_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.subscribe_account_using_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.subscribe_account_using_post"
      end
      # verify the required parameter 'alloc_request' is set
      if @api_client.config.client_side_validation && alloc_request.nil?
        fail ArgumentError, "Missing the required parameter 'alloc_request' when calling AccountApi.subscribe_account_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}/subscribe'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(alloc_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Portfolio>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#subscribe_account_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account allocation
    # Update the information for an account-allocation mapping.
    # @param account_allocation_id UUID account_allocation_id
    # @param account_allocation_mapping account_allocation_mapping
    # @param [Hash] opts the optional parameters
    # @return [AccountAllocationMapping]
    def update_account_allocation_mapping_using_put(account_allocation_id, account_allocation_mapping, opts = {})
      data, _status_code, _headers = update_account_allocation_mapping_using_put_with_http_info(account_allocation_id, account_allocation_mapping, opts)
      data
    end

    # Update an account allocation
    # Update the information for an account-allocation mapping.
    # @param account_allocation_id UUID account_allocation_id
    # @param account_allocation_mapping account_allocation_mapping
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountAllocationMapping, Fixnum, Hash)>] AccountAllocationMapping data, response status code and response headers
    def update_account_allocation_mapping_using_put_with_http_info(account_allocation_id, account_allocation_mapping, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.update_account_allocation_mapping_using_put ...'
      end
      # verify the required parameter 'account_allocation_id' is set
      if @api_client.config.client_side_validation && account_allocation_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_allocation_id' when calling AccountApi.update_account_allocation_mapping_using_put"
      end
      # verify the required parameter 'account_allocation_mapping' is set
      if @api_client.config.client_side_validation && account_allocation_mapping.nil?
        fail ArgumentError, "Missing the required parameter 'account_allocation_mapping' when calling AccountApi.update_account_allocation_mapping_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_allocation/{account_allocation_id}'.sub('{' + 'account_allocation_id' + '}', account_allocation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_allocation_mapping)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountAllocationMapping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_account_allocation_mapping_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account status
    # Update an account status record for an account.
    # @param account_status account_status
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [AccountStatus]
    def update_account_status_using_put(account_status, account_status_id, opts = {})
      data, _status_code, _headers = update_account_status_using_put_with_http_info(account_status, account_status_id, opts)
      data
    end

    # Update an account status
    # Update an account status record for an account.
    # @param account_status account_status
    # @param account_status_id UUID account_status_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountStatus, Fixnum, Hash)>] AccountStatus data, response status code and response headers
    def update_account_status_using_put_with_http_info(account_status, account_status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.update_account_status_using_put ...'
      end
      # verify the required parameter 'account_status' is set
      if @api_client.config.client_side_validation && account_status.nil?
        fail ArgumentError, "Missing the required parameter 'account_status' when calling AccountApi.update_account_status_using_put"
      end
      # verify the required parameter 'account_status_id' is set
      if @api_client.config.client_side_validation && account_status_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_status_id' when calling AccountApi.update_account_status_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_status/{account_status_id}'.sub('{' + 'account_status_id' + '}', account_status_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_status)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_account_status_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account type
    # Update the information for a possible account type defined for your firm.
    # @param account_type account_type
    # @param account_type_id UUID account_type_id
    # @param [Hash] opts the optional parameters
    # @return [AccountType]
    def update_account_type_using_put(account_type, account_type_id, opts = {})
      data, _status_code, _headers = update_account_type_using_put_with_http_info(account_type, account_type_id, opts)
      data
    end

    # Update an account type
    # Update the information for a possible account type defined for your firm.
    # @param account_type account_type
    # @param account_type_id UUID account_type_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountType, Fixnum, Hash)>] AccountType data, response status code and response headers
    def update_account_type_using_put_with_http_info(account_type, account_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.update_account_type_using_put ...'
      end
      # verify the required parameter 'account_type' is set
      if @api_client.config.client_side_validation && account_type.nil?
        fail ArgumentError, "Missing the required parameter 'account_type' when calling AccountApi.update_account_type_using_put"
      end
      # verify the required parameter 'account_type_id' is set
      if @api_client.config.client_side_validation && account_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_type_id' when calling AccountApi.update_account_type_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_type/{account_type_id}'.sub('{' + 'account_type_id' + '}', account_type_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account_type)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountType')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_account_type_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account
    # Update the information for an account.
    # @param account account
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @return [Account]
    def update_account_using_put(account, account_id, opts = {})
      data, _status_code, _headers = update_account_using_put_with_http_info(account, account_id, opts)
      data
    end

    # Update an account
    # Update the information for an account.
    # @param account account
    # @param account_id UUID account_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Account, Fixnum, Hash)>] Account data, response status code and response headers
    def update_account_using_put_with_http_info(account, account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.update_account_using_put ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling AccountApi.update_account_using_put"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.update_account_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/account/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(account)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Account')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_account_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an account permission
    # Update an account permission
    # @param account_id account_id
    # @param acl_client_permission_vo aclClientPermissionVO
    # @param [Hash] opts the optional parameters
    # @return [AccountPermissionVO]
    def update_client_account_permission_using_put(account_id, acl_client_permission_vo, opts = {})
      data, _status_code, _headers = update_client_account_permission_using_put_with_http_info(account_id, acl_client_permission_vo, opts)
      data
    end

    # Update an account permission
    # Update an account permission
    # @param account_id account_id
    # @param acl_client_permission_vo aclClientPermissionVO
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountPermissionVO, Fixnum, Hash)>] AccountPermissionVO data, response status code and response headers
    def update_client_account_permission_using_put_with_http_info(account_id, acl_client_permission_vo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.update_client_account_permission_using_put ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountApi.update_client_account_permission_using_put"
      end
      # verify the required parameter 'acl_client_permission_vo' is set
      if @api_client.config.client_side_validation && acl_client_permission_vo.nil?
        fail ArgumentError, "Missing the required parameter 'acl_client_permission_vo' when calling AccountApi.update_client_account_permission_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/account_permission/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(acl_client_permission_vo)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountPermissionVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#update_client_account_permission_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
