# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PfloDiversificationScoreResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_standard_deviation': 'float',
        'holdings_standard_deviation': 'dict(str, float)',
        'diversification_score': 'int'
    }

    attribute_map = {
        'portfolio_standard_deviation': 'portfolio_standard_deviation',
        'holdings_standard_deviation': 'holdings_standard_deviation',
        'diversification_score': 'diversification_score'
    }

    def __init__(self, portfolio_standard_deviation=None, holdings_standard_deviation=None, diversification_score=None):  # noqa: E501
        """PfloDiversificationScoreResponse - a model defined in Swagger"""  # noqa: E501

        self._portfolio_standard_deviation = None
        self._holdings_standard_deviation = None
        self._diversification_score = None
        self.discriminator = None

        if portfolio_standard_deviation is not None:
            self.portfolio_standard_deviation = portfolio_standard_deviation
        if holdings_standard_deviation is not None:
            self.holdings_standard_deviation = holdings_standard_deviation
        if diversification_score is not None:
            self.diversification_score = diversification_score

    @property
    def portfolio_standard_deviation(self):
        """Gets the portfolio_standard_deviation of this PfloDiversificationScoreResponse.  # noqa: E501

        The annualized standard deviation of the overall portfolio.  # noqa: E501

        :return: The portfolio_standard_deviation of this PfloDiversificationScoreResponse.  # noqa: E501
        :rtype: float
        """
        return self._portfolio_standard_deviation

    @portfolio_standard_deviation.setter
    def portfolio_standard_deviation(self, portfolio_standard_deviation):
        """Sets the portfolio_standard_deviation of this PfloDiversificationScoreResponse.

        The annualized standard deviation of the overall portfolio.  # noqa: E501

        :param portfolio_standard_deviation: The portfolio_standard_deviation of this PfloDiversificationScoreResponse.  # noqa: E501
        :type: float
        """
        if portfolio_standard_deviation is not None and portfolio_standard_deviation < 0:  # noqa: E501
            raise ValueError("Invalid value for `portfolio_standard_deviation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._portfolio_standard_deviation = portfolio_standard_deviation

    @property
    def holdings_standard_deviation(self):
        """Gets the holdings_standard_deviation of this PfloDiversificationScoreResponse.  # noqa: E501


        :return: The holdings_standard_deviation of this PfloDiversificationScoreResponse.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._holdings_standard_deviation

    @holdings_standard_deviation.setter
    def holdings_standard_deviation(self, holdings_standard_deviation):
        """Sets the holdings_standard_deviation of this PfloDiversificationScoreResponse.


        :param holdings_standard_deviation: The holdings_standard_deviation of this PfloDiversificationScoreResponse.  # noqa: E501
        :type: dict(str, float)
        """

        self._holdings_standard_deviation = holdings_standard_deviation

    @property
    def diversification_score(self):
        """Gets the diversification_score of this PfloDiversificationScoreResponse.  # noqa: E501

        A score from 0 to 100, in which 0 indicates no diversification and 100 indicates the maximum theoretical diversification level.  # noqa: E501

        :return: The diversification_score of this PfloDiversificationScoreResponse.  # noqa: E501
        :rtype: int
        """
        return self._diversification_score

    @diversification_score.setter
    def diversification_score(self, diversification_score):
        """Sets the diversification_score of this PfloDiversificationScoreResponse.

        A score from 0 to 100, in which 0 indicates no diversification and 100 indicates the maximum theoretical diversification level.  # noqa: E501

        :param diversification_score: The diversification_score of this PfloDiversificationScoreResponse.  # noqa: E501
        :type: int
        """
        if diversification_score is not None and diversification_score > 100:  # noqa: E501
            raise ValueError("Invalid value for `diversification_score`, must be a value less than or equal to `100`")  # noqa: E501
        if diversification_score is not None and diversification_score < 0:  # noqa: E501
            raise ValueError("Invalid value for `diversification_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._diversification_score = diversification_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PfloDiversificationScoreResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PfloDiversificationScoreResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
