/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// Member
    /// </summary>
    [DataContract]
    public partial class Member :  IEquatable<Member>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Member" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Member() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Member" /> class.
        /// </summary>
        /// <param name="clientId">clientId (required).</param>
        /// <param name="clientRelationships">clientRelationships.</param>
        /// <param name="household">household.</param>
        /// <param name="isPrimary">isPrimary.</param>
        public Member(Guid? clientId = default(Guid?), List<ClientRelationship> clientRelationships = default(List<ClientRelationship>), Household household = default(Household), bool? isPrimary = default(bool?))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for Member and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            this.ClientRelationships = clientRelationships;
            this.Household = household;
            this.IsPrimary = isPrimary;
        }
        
        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientRelationships
        /// </summary>
        [DataMember(Name="client_relationships", EmitDefaultValue=false)]
        public List<ClientRelationship> ClientRelationships { get; set; }

        /// <summary>
        /// Gets or Sets Household
        /// </summary>
        [DataMember(Name="household", EmitDefaultValue=false)]
        public Household Household { get; set; }

        /// <summary>
        /// isPrimary
        /// </summary>
        /// <value>isPrimary</value>
        [DataMember(Name="is_primary", EmitDefaultValue=false)]
        public bool? IsPrimary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Member {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientRelationships: ").Append(ClientRelationships).Append("\n");
            sb.Append("  Household: ").Append(Household).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Member);
        }

        /// <summary>
        /// Returns true if Member instances are equal
        /// </summary>
        /// <param name="input">Instance of Member to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Member input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientRelationships == input.ClientRelationships ||
                    this.ClientRelationships != null &&
                    this.ClientRelationships.SequenceEqual(input.ClientRelationships)
                ) && 
                (
                    this.Household == input.Household ||
                    (this.Household != null &&
                    this.Household.Equals(input.Household))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientRelationships != null)
                    hashCode = hashCode * 59 + this.ClientRelationships.GetHashCode();
                if (this.Household != null)
                    hashCode = hashCode * 59 + this.Household.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
