=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for AtomApi::NucleusApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'NucleusApi' do
  before do
    # run before each test
    @instance = AtomApi::NucleusApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of NucleusApi' do
    it 'should create an instance of NucleusApi' do
      expect(@instance).to be_instance_of(AtomApi::NucleusApi)
    end
  end

  # unit tests for delete_account
  # Delete an account
  # @param account_id UUID of an account
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_allocation
  # Delete an account allocation
  # @param account_allocation_id UUID of an account allocation
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_permission
  # Delete an account&#39;s permissions
  # @param account_id UUID of an account
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_permission test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_stage
  # Delete an account stage
  # @param stage_id UUID of an account stage
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_stage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_status
  # Delete an account status
  # @param account_status_id UUID of an account status
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_type
  # Delete an account type
  # @param account_type_id UUID of an account type
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_aggregation_account
  # Delete an aggregation account
  # @param aggregation_account_id UUID of an aggregation account
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_aggregation_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_aggregation_account_balance
  # Delete an aggregation account balance
  # @param aggregation_account_balance_id UUID of an aggregation account balance
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_aggregation_account_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_aggregation_account_holding
  # Delete an aggregation account holding
  # @param aggregation_account_holding_id UUID of an aggregation account holding
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_aggregation_account_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_aggregation_account_transaction
  # Delete an aggregation account transaction
  # @param aggregation_account_transaction_id UUID of an aggregation account transaction
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_aggregation_account_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_allocation
  # Delete an allocation
  # @param allocation_id UUID of an allocation
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_allocation_composition
  # Delete an allocation composition
  # @param allocation_composition_id UUID of an allocation composition
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_allocation_composition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_bank_link
  # Delete a bank link
  # @param bank_link_id UUID of a bank link
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_bank_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_benchmark
  # Delete a benchmark
  # @param benchmark_id UUID of a benchmark
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_benchmark test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_budget
  # Delete a budget
  # @param budget_id UUID of a budget
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_budget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_client
  # Delete a client
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_client test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_client_hydro
  # Delete a client-hydro relationship
  # @param client_hydro_id UUID of a client-hydro relationship
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_client_hydro test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_client_response
  # Delete a client response
  # @param client_response_id UUID of a client response
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_client_response test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_decision_tree
  # Delete a decision tree
  # @param decision_tree_id UUID of a decision tree
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_decision_tree test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_deposit_request
  # Delete a deposit request
  # @param deposit_id UUID of a deposit record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_deposit_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_financial_offer
  # Delete a financial offer
  # @param financial_offer_id UUID of a financial offer
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_financial_offer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_funding_request
  # Delete a funding request
  # @param funding_id UUID of a funding record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_funding_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_goal
  # Delete a goal
  # @param goal_id UUID of a goal
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_goal_track_record
  # Delete a goal track record
  # @param goal_track_id UUID of a goal tracking record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_goal_track_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model
  # Delete a model
  # @param model_id UUID of a model
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_asset_size
  # Delete a model asset size
  # @param model_asset_size_id UUID of a model asset size record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_comment
  # Delete a model commentary
  # @param model_comment_id UUID of a model comment
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_holding
  # Delete a model holding
  # @param model_holding_id UUID of a model holding record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_model_transaction
  # Delete a model transaction
  # @param model_transaction_id UUID of a model transaction record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_model_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_node
  # Delete a node
  # @param node_id UUID of a node
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_node_relationship
  # Delete a node relationship
  # @param node_relationship_id UUID of a node relationship
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_node_relationship test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_order_record
  # Delete an order record
  # @param order_id UUID of an order record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_order_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_order_status
  # Delete an order status
  # @param order_status_id UUID of an order status record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_order_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_order_tracking_record
  # Delete an order tracking record
  # @param order_track_id UUID of an order tracking record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_order_tracking_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_portfolio
  # Delete a portfolio
  # @param portfolio_id UUID of a portfolio
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_portfolio test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_portfolio_asset_size
  # Delete a portfolio asset size
  # @param portfolio_asset_size_id UUID of a portfolio asset size record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_portfolio_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_portfolio_comment
  # Delete a portfolio commentary
  # @param portfolio_comment_id UUID of a portfolio comment
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_portfolio_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_portfolio_holding
  # Delete a portfolio holding
  # @param portfolio_holding_id UUID of a portfolio holding record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_portfolio_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_portfolio_transaction
  # Delete a portfolio transaction
  # @param portfolio_transaction_id UUID of a portfolio transaction record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_portfolio_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_questionnaire
  # Delete a questionnaire
  # @param questionnaire_id UUID of a questionnaire
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_questionnaire test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_score
  # Delete a score
  # @param score_id UUID of a score record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_score test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_security
  # Delete a security
  # @param security_id UUID of a security
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_security test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_security_exclusion
  # Delete a security exclusion
  # @param security_exclusion_id UUID of a security exclusion record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_security_exclusion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_security_price
  # Delete a security price
  # @param security_price_id UUID of a security price record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_security_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_transaction_code
  # Delete a transaction code
  # @param transaction_code_id UUID of a transaction code
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_transaction_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_transfer_request
  # Delete a transfer request
  # @param transfer_id UUID of an account transfer record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_transfer_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_withdrawal_request
  # Delete a withdrawal request
  # @param withdrawal_id UUID of a withdrawal request
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_withdrawal_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account
  # Retrieve an account
  # @param account_id UUID of an account
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountResponse]
  describe 'get_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_allocation
  # Retrieve an account allocation
  # @param account_allocation_id UUID of an account allocation
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountAllocationResponse]
  describe 'get_account_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_allocations
  # List all account allocations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountAllocationResponse]
  describe 'get_account_allocations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_asset_sizes
  # List all account asset sizes
  # @param account_id UUID of an account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountAssetSizeResponse]
  describe 'get_account_asset_sizes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_holdings
  # List all account holdings
  # @param account_id UUID of an account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountHoldingResponse]
  describe 'get_account_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_performance
  # Get account performance
  # @param account_id UUID of an account
  # @param stat Performance statistic
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_account_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_permission
  # Retrieve an account&#39;s permission
  # @param account_id UUID of an account
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountPermissionResponse]
  describe 'get_account_permission test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_permissions
  # List all account permissions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountPermissionsResponse]
  describe 'get_account_permissions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_stage
  # Retrieve an account stage
  # @param stage_id UUID of an account stage
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountStageResponse]
  describe 'get_account_stage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_stages
  # List all account stages
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountStageResponse]
  describe 'get_account_stages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_status
  # Retrieve an account status
  # @param account_status_id UUID of an account status
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountStatusResponse]
  describe 'get_account_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_statuses
  # List all account statuses
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountStatusResponse]
  describe 'get_account_statuses test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_transactions
  # List all account transactions
  # @param account_id UUID of an account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [AccountTransactionResponse]
  describe 'get_account_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_type
  # Retrieve an account type
  # @param account_type_id UUID of an account type
  # @param [Hash] opts the optional parameters
  # @return [GetAccountTypeSubresponse]
  describe 'get_account_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_types
  # List all account types
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountTypeResponse]
  describe 'get_account_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_accounts
  # Get information for all accounts for all clients defined for your firm
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAccountResponse]
  describe 'get_accounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_account
  # Retrieve an aggregation account
  # @param aggregation_account_id UUID of an aggregation account
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountResponse]
  describe 'get_aggregation_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_account_balance
  # Retrieve an aggregation account balance
  # @param aggregation_account_balance_id UUID of an aggregation account balance
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountBalanceResponse]
  describe 'get_aggregation_account_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_account_balances
  # List all aggregation account balances
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAggregationAccountBalanceResponse]
  describe 'get_aggregation_account_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_account_holding
  # Retrieve an aggregation account holding
  # @param aggregation_account_holding_id UUID of an aggregation account holding
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountHoldingResponse]
  describe 'get_aggregation_account_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_account_holdings
  # List all aggregation account holdings
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAggregationAccountHoldingsResponse]
  describe 'get_aggregation_account_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_account_transaction
  # Retrieve an aggregation account transaction
  # @param aggregation_account_transaction_id UUID of an aggregation account transaction
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountTransactionResponse]
  describe 'get_aggregation_account_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_account_transactions
  # List all aggregation account transactions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAggregationAccountTransactionResponse]
  describe 'get_aggregation_account_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_aggregation_accounts
  # List all aggregation accounts
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAggregationAccountsResponse]
  describe 'get_aggregation_accounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation
  # Retrieve an allocation
  # @param allocation_id UUID of an allocation
  # @param [Hash] opts the optional parameters
  # @return [SpecificAllocationResponse]
  describe 'get_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_asset_sizes
  # List all allocation asset sizes
  # @param allocation_id UUID of an allocation
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [AllocationAssetSizeResponse]
  describe 'get_allocation_asset_sizes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_composition
  # Retrieve an allocation composition
  # @param allocation_composition_id UUID of an allocation composition
  # @param [Hash] opts the optional parameters
  # @return [SpecificAllocationCompositionResponse]
  describe 'get_allocation_composition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_compositions
  # List all allocation compositions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAllocationCompositionResponse]
  describe 'get_allocation_compositions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_holdings
  # List all allocation holdings
  # @param allocation_id UUID of an allocation
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [AllocationHoldingsResponse]
  describe 'get_allocation_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_performance
  # Get allocation performance
  # @param allocation_id UUID of an allocation
  # @param stat Performance statistic
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_allocation_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocation_transactions
  # List all allocation transactions
  # @param allocation_id UUID of an allocation
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [AllocationTransactionResponse]
  describe 'get_allocation_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_allocations
  # List all allocations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetAllocationResponse]
  describe 'get_allocations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_link
  # Retrieve a bank link
  # @param bank_link_id UUID of a bank link
  # @param [Hash] opts the optional parameters
  # @return [SpecificBankLinkResponse]
  describe 'get_bank_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_links
  # List all bank links
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetBankLinkResponse]
  describe 'get_bank_links test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benchmark
  # Retrieve a benchmark
  # @param benchmark_id UUID of a benchmark
  # @param [Hash] opts the optional parameters
  # @return [SpecificBenchmarkResponse]
  describe 'get_benchmark test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benchmark_asset_sizes
  # List all benchmark asset sizes
  # @param benchmark_id UUID of a benchmark
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [BenchmarkAssetSizeResponse]
  describe 'get_benchmark_asset_sizes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benchmark_performance
  # Get benchmark performance
  # @param benchmark_id UUID of a benchmark
  # @param stat Performance statistic
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_benchmark_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_benchmarks
  # List all benchmarks
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetBenchmarkResponse]
  describe 'get_benchmarks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_budget
  # Retrieve a budget
  # @param budget_id UUID of a budget
  # @param [Hash] opts the optional parameters
  # @return [SpecificBudgetResponse]
  describe 'get_budget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_budgets
  # List all budgets
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetBudgetResponse]
  describe 'get_budgets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bulk_orders
  # List all bulk orders
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetBulkOrderResponse]
  describe 'get_bulk_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client
  # Retrieve a client
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @return [SpecificClientResponse]
  describe 'get_client test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_asset_sizes
  # List all client asset sizes
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [ClientAssetSizeResponse]
  describe 'get_client_asset_sizes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_holdings
  # List all client holdings
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [ClientHoldingsResponse]
  describe 'get_client_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_hydro
  # Retrieve a client-hydro relationship
  # @param client_hydro_id UUID of a client-hydro relationship
  # @param [Hash] opts the optional parameters
  # @return [SpecificClientHydroResponse]
  describe 'get_client_hydro test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_hydros
  # List all client-hydro relationships
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetClientHydroResponse]
  describe 'get_client_hydros test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_performance
  # Get client performance
  # @param client_id UUID of a client
  # @param stat Performance statistic
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_client_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_response
  # Retrieve a client response
  # @param client_response_id UUID of a client response
  # @param [Hash] opts the optional parameters
  # @return [SpecificClientResponseResponse]
  describe 'get_client_response test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_responses
  # List all client responses
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetClientResponseResponse]
  describe 'get_client_responses test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_client_transactions
  # List all client transactions
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [ClientTransactionResponse]
  describe 'get_client_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_clients
  # List all clients
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetClientResponse]
  describe 'get_clients test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_decision_tree
  # Retrieve a decision tree
  # @param decision_tree_id UUID of a decision tree
  # @param [Hash] opts the optional parameters
  # @return [SpecificDecisionTreeResponse]
  describe 'get_decision_tree test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_decision_trees
  # List all decision trees
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetDecisionTreeResponse]
  describe 'get_decision_trees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_deposit_request
  # Retrieve a deposit request
  # @param deposit_id UUID of a deposit record
  # @param [Hash] opts the optional parameters
  # @return [SpecificDepositRequestResponse]
  describe 'get_deposit_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_deposit_requests
  # List all deposit requests
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetDepositRequestResponse]
  describe 'get_deposit_requests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_financial_offer
  # Retrieve a financial offer
  # @param financial_offer_id UUID of a financial offer
  # @param [Hash] opts the optional parameters
  # @return [SpecificFinancialOfferResponse]
  describe 'get_financial_offer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_financial_offers
  # List all financial offers
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetFinancialOfferResponse]
  describe 'get_financial_offers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_request
  # Retrieve a funding request
  # @param funding_id UUID of a funding record
  # @param [Hash] opts the optional parameters
  # @return [SpecificFundingRequestResponse]
  describe 'get_funding_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_funding_requests
  # List all funding requests
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetFundingRequestResponse]
  describe 'get_funding_requests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal
  # Retrieve a goal
  # @param goal_id UUID of a goal
  # @param [Hash] opts the optional parameters
  # @return [SpecificGoalResponse]
  describe 'get_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal_asset_sizes
  # List goal asset sizes
  # @param goal_id UUID of a goal
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GoalAssetSizeResponse]
  describe 'get_goal_asset_sizes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal_holdings
  # List goal holdings
  # @param goal_id UUID of a goal
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GoalHoldingsResponse]
  describe 'get_goal_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal_performance
  # Get goal performance
  # @param goal_id UUID of a goal
  # @param stat Performance statistic
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_goal_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal_track_record
  # Retrieve a goal track record
  # @param goal_track_id UUID of a goal tracking record
  # @param [Hash] opts the optional parameters
  # @return [SpecificGoalTrackResponse]
  describe 'get_goal_track_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal_track_records
  # List all goal track records
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetGoalTrackResponse]
  describe 'get_goal_track_records test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goal_transactions
  # List goal transactions
  # @param goal_id UUID of a goal
  # @param client_id UUID of a client
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GoalTransactionsResponse]
  describe 'get_goal_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_goals
  # List all goals
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetGoalResponse]
  describe 'get_goals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model
  # Retrieve a model
  # @param model_id UUID of a model
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelResponse]
  describe 'get_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_asset_size
  # Retrieve a model asset size
  # @param model_asset_size_id UUID of a model asset size record
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelAssetSizeResponse]
  describe 'get_model_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_asset_sizes
  # List all model asset sizes
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetModelAssetSizeResponse]
  describe 'get_model_asset_sizes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_comment
  # Retrieve a model commentary
  # @param model_comment_id UUID of a model comment
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelCommentResponse]
  describe 'get_model_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_comments
  # List all model commentary
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetModelCommentResponse]
  describe 'get_model_comments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_holding
  # Retrieve a model holding
  # @param model_holding_id UUID of a model holding record
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelHoldingResponse]
  describe 'get_model_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_holdings
  # List all model holdings
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetModelHoldingResponse]
  describe 'get_model_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_performance
  # Get model performance
  # @param model_id UUID of a model
  # @param stat Performance statistic
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_model_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_transaction
  # Retrieve a model transaction
  # @param model_transaction_id UUID of a model transaction record
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelTransactionResponse]
  describe 'get_model_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_model_transactions
  # List all model transactions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetModelTransactionResponse]
  describe 'get_model_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_models
  # List all models
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetModelResponse]
  describe 'get_models test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_node
  # Retrieve a node
  # @param node_id UUID of a node
  # @param [Hash] opts the optional parameters
  # @return [SpecificNodeResponse]
  describe 'get_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_node_relationship
  # Retrieve a node relationship
  # @param node_relationship_id UUID of a node relationship
  # @param [Hash] opts the optional parameters
  # @return [SpecificNodeRelationshipResponse]
  describe 'get_node_relationship test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_node_relationships
  # List all node relationships
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetNodeRelationshipResponse]
  describe 'get_node_relationships test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_nodes
  # List all nodes
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetNodeResponse]
  describe 'get_nodes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_record
  # Retrieve an order record
  # @param order_id UUID of an order record
  # @param [Hash] opts the optional parameters
  # @return [SpecificOrderResponse]
  describe 'get_order_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_records
  # List all order records
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetOrderResponse]
  describe 'get_order_records test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_status
  # Retrieve an order status
  # @param order_status_id UUID of an order status record
  # @param [Hash] opts the optional parameters
  # @return [SpecificOrderStatusResponse]
  describe 'get_order_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_statuses
  # List all order statuses
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetOrderStatusResponse]
  describe 'get_order_statuses test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_tracking_record
  # Retrieve an order tracking record
  # @param order_track_id UUID of an order tracking record
  # @param [Hash] opts the optional parameters
  # @return [SpecificOrderTrackResponse]
  describe 'get_order_tracking_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_order_tracking_records
  # List all order tracking records
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetOrderTrackResponse]
  describe 'get_order_tracking_records test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio
  # Retrieve a portfolio
  # @param portfolio_id UUID of a portfolio
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioResponse]
  describe 'get_portfolio test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_asset_size
  # Retrieve a portfolio asset size
  # @param portfolio_asset_size_id UUID of a portfolio asset size record
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioAssetSizeResponse]
  describe 'get_portfolio_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_asset_sizes
  # List all portfolio asset sizes
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetPortfolioAssetSizeResponse]
  describe 'get_portfolio_asset_sizes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_comment
  # Retrieve a portfolio commentary
  # @param portfolio_comment_id UUID of a portfolio comment
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioCommentResponse]
  describe 'get_portfolio_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_comments
  # List all portfolio commentary
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetPortfolioCommentResponse]
  describe 'get_portfolio_comments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_holding
  # Retrieve a portfolio holding
  # @param portfolio_holding_id UUID of a portfolio holding record
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioHoldingResponse]
  describe 'get_portfolio_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_holdings
  # List all portfolio holdings
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetPortfolioHoldingResponse]
  describe 'get_portfolio_holdings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_performance
  # Get portfolio performance
  # @param portfolio_id UUID of a portfolio
  # @param stat Performance statistic
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_portfolio_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_transaction
  # Retrieve a portfolio transaction
  # @param portfolio_transaction_id UUID of a portfolio transaction record
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioTransactionResponse]
  describe 'get_portfolio_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolio_transactions
  # List all portfolio transactions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetPortfolioTransactionResponse]
  describe 'get_portfolio_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_portfolios
  # List all portfolios
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetPortfolioResponse]
  describe 'get_portfolios test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_questionnaire
  # Retrieve a questionnaire
  # @param questionnaire_id UUID of a questionnaire
  # @param [Hash] opts the optional parameters
  # @return [SpecificQuestionnaireResponse]
  describe 'get_questionnaire test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_questionnaires
  # List all questionnaires
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetQuestionnaireResponse]
  describe 'get_questionnaires test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_score
  # Retrieve a score
  # @param score_id UUID of a score record
  # @param [Hash] opts the optional parameters
  # @return [SpecificScoreResponse]
  describe 'get_score test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_scores
  # List all scores
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetScoreResponse]
  describe 'get_scores test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_securities
  # List all securities
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetSecurityResponse]
  describe 'get_securities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_security
  # Retrieve a security
  # @param security_id UUID of a security
  # @param [Hash] opts the optional parameters
  # @return [SpecificSecurityResponse]
  describe 'get_security test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_security_exclusion
  # Retrieve a security exclusion
  # @param security_exclusion_id UUID of a security exclusion record
  # @param [Hash] opts the optional parameters
  # @return [SpecificSecurityExclusionResponse]
  describe 'get_security_exclusion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_security_exclusions
  # List all security exclusions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetSecurityExclusionResponse]
  describe 'get_security_exclusions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_security_performance
  # Get security performance
  # @param security_id UUID of a security
  # @param stat Performance statistic
  # @param [Hash] opts the optional parameters
  # @return [PerformanceResponse]
  describe 'get_security_performance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_security_price
  # Retrieve a security price
  # @param security_price_id UUID of a security price record
  # @param [Hash] opts the optional parameters
  # @return [SpecificSecurityPriceResponse]
  describe 'get_security_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_security_prices
  # List all security prices
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetSecurityPriceResponse]
  describe 'get_security_prices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transaction_code
  # Retrieve a transaction code
  # @param transaction_code_id UUID of a transaction code
  # @param [Hash] opts the optional parameters
  # @return [SpecificTransactionCodeResponse]
  describe 'get_transaction_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transaction_codes
  # List all transaction codes
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetTransactionCodeResponse]
  describe 'get_transaction_codes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transfer_request
  # Retrieve a transfer request
  # @param transfer_id UUID of an account transfer record
  # @param [Hash] opts the optional parameters
  # @return [SpecificTransferResponse]
  describe 'get_transfer_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_transfer_requests
  # List all transfer requests
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetTransferResponse]
  describe 'get_transfer_requests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_withdrawal_request
  # Retrieve a withdrawal request
  # @param withdrawal_id UUID of a withdrawal request
  # @param [Hash] opts the optional parameters
  # @return [SpecificWithdrawalResponse]
  describe 'get_withdrawal_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_withdrawal_requests
  # List all withdrawal requests
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page number for the page that should be returned as the starting page. For example, if this is specified as 0, then the first page of the results will be the shown, if it is set as 3 then the third page of the results will be shown, and so on. The default is 0
  # @option opts [Integer] :size The number or records to be included per page. The default is 25. There is no max value.
  # @option opts [String] :order_by The field in the response body to order the list by. Default is update_date.
  # @option opts [BOOLEAN] :ascending If true, order the results in ascending order. For an alphabetical result this would be A-Z. If false, order the results in descending order. For an alphabetical result this would be Z-A. Default is false which would order by descending.
  # @option opts [String] :filter Every field within an object using the GET method can be filtered except for fields stored under metadata. Filtering is especially useful for calls that return many different fields.
  # @return [GetWithdrawalResponse]
  describe 'get_withdrawal_requests test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account
  # Create an account under a client
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAccountResponse]
  describe 'post_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_allocation
  # Create an account allocation
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountAllocationResponse]
  describe 'post_account_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_bulk_order
  # Bulk orders for an account
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [BulkOrderFirmclientaccountResponse]
  describe 'post_account_bulk_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_rebalance_buy_only_order
  # Create buy-only account rebalance orders
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_account_rebalance_buy_only_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_rebalance_order
  # Create account rebalance orders
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificOrderTrackResponse]
  describe 'post_account_rebalance_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_rebalance_sell_only_order
  # Create sell-only account rebalance orders
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'post_account_rebalance_sell_only_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_sell_all_order
  # Sell all account order
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SellAllAccountResponse]
  describe 'post_account_sell_all_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_stage
  # Create an account stage
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountStageResponse]
  describe 'post_account_stage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_status
  # Create an account status
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAccountStatusResponse]
  describe 'post_account_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_account_type
  # Create an account type
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [GetAccountTypeSubresponse]
  describe 'post_account_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_aggregation_account
  # Create an aggregation account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAggregationAccountResponse]
  describe 'post_aggregation_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_aggregation_account_balance
  # Create an aggregation account balance
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAggregationAccountBalanceResponse]
  describe 'post_aggregation_account_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_aggregation_account_holding
  # Create an aggregation account holding
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAggregationAccountHoldingResponse]
  describe 'post_aggregation_account_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_aggregation_account_transaction
  # Create an aggregation account transaction
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAggregationAccountTransactionResponse]
  describe 'post_aggregation_account_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_allocation
  # Create an allocation
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAllocationResponse]
  describe 'post_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_allocation_composition
  # Create an allocation composition
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateAllocationCompositionResponse]
  describe 'post_allocation_composition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_bank_link
  # Create a bank link
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateBankLinkResponse]
  describe 'post_bank_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_benchmark
  # Create a benchmark
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateBenchmarkResponse]
  describe 'post_benchmark test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_budget
  # Create a budget
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateBudgetResponse]
  describe 'post_budget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_bulk_order
  # Bulk orders for your firm
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [BulkOrderFirmclientaccountResponse]
  describe 'post_bulk_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_client
  # Create a client
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateClientResponse]
  describe 'post_client test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_client_bulk_order
  # Bulk orders for a client
  # @param client_id UUID of a client
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [BulkOrderFirmclientaccountResponse]
  describe 'post_client_bulk_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_client_hydro
  # Create a client-hydro relationship
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateClientHydroResponse]
  describe 'post_client_hydro test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_client_response
  # Create a client response
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateClientResponseResponse]
  describe 'post_client_response test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_decision_tree
  # Create a decision tree
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateDecisionTreeResponse]
  describe 'post_decision_tree test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_deposit_request
  # Create a deposit request
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateDepositRequestResponse]
  describe 'post_deposit_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_financial_offer
  # Create a financial offer
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateFinancialOfferResponse]
  describe 'post_financial_offer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_funding_request
  # Create a funding request
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateFundingRequestResponse]
  describe 'post_funding_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_goal
  # Create a goal
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateGoalResponse]
  describe 'post_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_goal_track_record
  # Create a goal track record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateGoalTrackResponse]
  describe 'post_goal_track_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_model
  # Create a model
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateModelResponse]
  describe 'post_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_model_asset_size
  # Create a model asset size
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateModelAssetSizeResponse]
  describe 'post_model_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_model_comment
  # Create a model commentary
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateModelCommentResponse]
  describe 'post_model_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_model_holding
  # Create a model holding
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateModelHoldingResponse]
  describe 'post_model_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_model_transaction
  # Create a model transaction
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateModelTransactionResponse]
  describe 'post_model_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_node
  # Create a node
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateNodeResponse]
  describe 'post_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_node_relationship
  # Create a node relationship
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateNodeRelationshipResponse]
  describe 'post_node_relationship test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_order_record
  # Create an order record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateOrderResponse]
  describe 'post_order_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_order_status
  # Create an order status
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateOrderStatusResponse]
  describe 'post_order_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_order_tracking_record
  # Create an order tracking record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateOrderTrackResponse]
  describe 'post_order_tracking_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio
  # Create a portfolio
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreatePortfolioResponse]
  describe 'post_portfolio test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_asset_size
  # Create a portfolio asset size
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreatePortfolioAssetSizeResponse]
  describe 'post_portfolio_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_comment
  # Create a portfolio commentary
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreatePortfolioCommentResponse]
  describe 'post_portfolio_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_holding
  # Create a portfolio holding
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreatePortfolioHoldingResponse]
  describe 'post_portfolio_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_rebalance_buy_only_order
  # Create buy-only portfolio rebalance orders
  # @param portfolio_id UUID of a portfolio
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [PortfolioRebalanceBuyOnlyOrderPayload]
  describe 'post_portfolio_rebalance_buy_only_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_rebalance_order
  # Create portfolio rebalance orders
  # @param portfolio_id UUID of a portfolio
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [PortfolioRebalanceOrderPayload]
  describe 'post_portfolio_rebalance_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_rebalance_sell_only_order
  # Create sell-only portfolio rebalance orders
  # @param portfolio_id UUID of a portfolio
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [PortfolioRebalanceSellOnlyOrderPayload]
  describe 'post_portfolio_rebalance_sell_only_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_sell_all_order
  # Sell all portfolio order
  # @param portfolio_id UUID of a portfolio
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SellAllPortfolioResponse]
  describe 'post_portfolio_sell_all_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_portfolio_transaction
  # Create a portfolio transaction
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreatePortfolioTransactionResponse]
  describe 'post_portfolio_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_questionnaire
  # Create a questionnaire
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateQuestionnaireResponse]
  describe 'post_questionnaire test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_score
  # Create a score
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateScoreResponse]
  describe 'post_score test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_security
  # Create a security
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateSecurityResponse]
  describe 'post_security test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_security_exclusion
  # Create a security exclusion
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateSecurityExclusionResponse]
  describe 'post_security_exclusion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_security_price
  # Create a security price
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateSecurityPriceResponse]
  describe 'post_security_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_transaction_code
  # Create a transaction code
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateTransactionCodeResponse]
  describe 'post_transaction_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_transfer_request
  # Create a transfer request
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateTransferResponse]
  describe 'post_transfer_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_withdrawal_request
  # Create a withdrawal request
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [CreateWithdrawalResponse]
  describe 'post_withdrawal_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for subscribe_account
  # Subscribe an account
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SubscribeAccountResponse]
  describe 'subscribe_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account
  # Update an account
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountResponse]
  describe 'update_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_allocation
  # Update an account allocation
  # @param account_allocation_id UUID of an account allocation
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountAllocationResponse]
  describe 'update_account_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_permission
  # Update an account&#39;s permissions
  # @param account_id UUID of an account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountPermissionResponse]
  describe 'update_account_permission test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_stage
  # Update an account stage
  # @param stage_id UUID of an account stage
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountStageResponse]
  describe 'update_account_stage test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_status
  # Update an account status
  # @param account_status_id UUID of an account status
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAccountStatusResponse]
  describe 'update_account_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_type
  # Update an account type
  # @param account_type_id UUID of an account type
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [GetAccountTypeSubresponse]
  describe 'update_account_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_aggregation_account
  # Update an aggregation account
  # @param aggregation_account_id UUID of an aggregation account
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountResponse]
  describe 'update_aggregation_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_aggregation_account_balance
  # Update an aggregation account balance
  # @param aggregation_account_balance_id UUID of an aggregation account balance
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountBalanceResponse]
  describe 'update_aggregation_account_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_aggregation_account_holding
  # Update an aggregation account holding
  # @param aggregation_account_holding_id UUID of an aggregation account holding
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountHoldingResponse]
  describe 'update_aggregation_account_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_aggregation_account_transaction
  # Update an aggregation account transaction
  # @param aggregation_account_transaction_id UUID of an aggregation account transaction
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAggregationAccountTransactionResponse]
  describe 'update_aggregation_account_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_allocation
  # Update an allocation
  # @param allocation_id UUID of an allocation
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificAllocationResponse]
  describe 'update_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_allocation_composition
  # Update an allocation composition
  # @param allocation_composition_id UUID of an allocation composition
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [GetAllocationCompositionResponse]
  describe 'update_allocation_composition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_bank_link
  # Update a bank link
  # @param bank_link_id UUID of a bank link
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificBankLinkResponse]
  describe 'update_bank_link test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_benchmark
  # Update a benchmark
  # @param benchmark_id UUID of a benchmark
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificBenchmarkResponse]
  describe 'update_benchmark test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_budget
  # Update a budget
  # @param budget_id UUID of a budget
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificBudgetResponse]
  describe 'update_budget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_client
  # Update a client
  # @param client_id UUID of a client
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificClientResponse]
  describe 'update_client test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_client_hydro
  # Update a client-hydro relationship
  # @param client_hydro_id UUID of a client-hydro relationship
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificClientHydroResponse]
  describe 'update_client_hydro test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_client_response
  # Update a client response
  # @param client_response_id UUID of a client response
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificClientResponseResponse]
  describe 'update_client_response test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_decision_tree
  # Update a decision tree
  # @param decision_tree_id UUID of a decision tree
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificDecisionTreeResponse]
  describe 'update_decision_tree test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_deposit_request
  # Update a deposit request
  # @param deposit_id UUID of a deposit record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificDepositRequestResponse]
  describe 'update_deposit_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_financial_offer
  # Update a financial offer
  # @param financial_offer_id UUID of a financial offer
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificFinancialOfferResponse]
  describe 'update_financial_offer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_funding_request
  # Update a funding request
  # @param funding_id UUID of a funding record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificFundingRequestResponse]
  describe 'update_funding_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_goal
  # Update a goal
  # @param goal_id UUID of a goal
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificGoalResponse]
  describe 'update_goal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_goal_track_record
  # Update a goal track record
  # @param goal_track_id UUID of a goal tracking record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificGoalTrackResponse]
  describe 'update_goal_track_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model
  # Update a model
  # @param model_id UUID of a model
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelResponse]
  describe 'update_model test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_asset_size
  # Update a model asset size
  # @param model_asset_size_id UUID of a model asset size record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelAssetSizeResponse]
  describe 'update_model_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_comment
  # Update a model commentary
  # @param model_comment_id UUID of a model comment
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelCommentResponse]
  describe 'update_model_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_composition
  # Change a model composition
  # @param model_id UUID of a model
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [ChangeModelCompositionResponse]
  describe 'update_model_composition test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_holding
  # Update a model holding
  # @param model_holding_id UUID of a model holding record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelHoldingResponse]
  describe 'update_model_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_model_transaction
  # Update a model transaction
  # @param model_transaction_id UUID of a model transaction record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificModelTransactionResponse]
  describe 'update_model_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_node
  # Update a node
  # @param node_id UUID of a node
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificNodeResponse]
  describe 'update_node test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_node_relationship
  # Update a node relationship
  # @param node_relationship_id UUID of a node relationship
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificNodeRelationshipResponse]
  describe 'update_node_relationship test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_order_record
  # Update an order record
  # @param order_id UUID of an order record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificOrderResponse]
  describe 'update_order_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_order_status
  # Update an order status
  # @param order_status_id UUID of an order status record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificOrderStatusResponse]
  describe 'update_order_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_order_tracking_record
  # Update an order tracking record
  # @param order_track_id UUID of an order tracking record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificOrderTrackResponse]
  describe 'update_order_tracking_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_portfolio
  # Update a portfolio
  # @param portfolio_id UUID of a portfolio
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioResponse]
  describe 'update_portfolio test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_portfolio_asset_size
  # Update a portfolio asset size
  # @param portfolio_asset_size_id UUID of a portfolio asset size record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioAssetSizeResponse]
  describe 'update_portfolio_asset_size test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_portfolio_comment
  # Update a portfolio commentary
  # @param portfolio_comment_id UUID of a portfolio comment
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioCommentResponse]
  describe 'update_portfolio_comment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_portfolio_holding
  # Update a portfolio holding
  # @param portfolio_holding_id UUID of a portfolio holding record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioHoldingResponse]
  describe 'update_portfolio_holding test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_portfolio_transaction
  # Update a portfolio transaction
  # @param portfolio_transaction_id UUID of a portfolio transaction record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificPortfolioTransactionResponse]
  describe 'update_portfolio_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_questionnaire
  # Update a questionnaire
  # @param questionnaire_id UUID of a questionnaire
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificQuestionnaireResponse]
  describe 'update_questionnaire test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_score
  # Update a score
  # @param score_id UUID of a score record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificScoreResponse]
  describe 'update_score test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_security
  # Update a security
  # @param security_id UUID of a security
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificSecurityResponse]
  describe 'update_security test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_security_exclusion
  # Update a security exclusion
  # @param security_exclusion_id UUID of a security exclusion record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificSecurityExclusionResponse]
  describe 'update_security_exclusion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_security_price
  # Update a security price
  # @param security_price_id UUID of a security price record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificSecurityPriceResponse]
  describe 'update_security_price test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_transaction_code
  # Update a transaction code
  # @param transaction_code_id UUID of a transaction code
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificTransactionCodeResponse]
  describe 'update_transaction_code test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_transfer_request
  # Update a transfer request
  # @param transfer_id UUID of an account transfer record
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificTransferResponse]
  describe 'update_transfer_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_withdrawal_request
  # Update a withdrawal request
  # @param withdrawal_id UUID of a withdrawal request
  # @param payload 
  # @param [Hash] opts the optional parameters
  # @return [SpecificWithdrawalResponse]
  describe 'update_withdrawal_request test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
