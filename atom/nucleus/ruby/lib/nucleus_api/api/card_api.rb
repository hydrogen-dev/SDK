=begin
#Hydrogen Nucleus API

#The Hydrogen Nucleus API

OpenAPI spec version: 1.9.5
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.19

=end

require 'uri'

module NucleusApi
  class CardApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a cardProgram request
    # Create a new cardProgram request.
    # @param card_program_request cardProgramRequest
    # @param [Hash] opts the optional parameters
    # @return [CardProgram]
    def create_card_program_using_post(card_program_request, opts = {})
      data, _status_code, _headers = create_card_program_using_post_with_http_info(card_program_request, opts)
      data
    end

    # Create a cardProgram request
    # Create a new cardProgram request.
    # @param card_program_request cardProgramRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardProgram, Fixnum, Hash)>] CardProgram data, response status code and response headers
    def create_card_program_using_post_with_http_info(card_program_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_program_using_post ...'
      end
      # verify the required parameter 'card_program_request' is set
      if @api_client.config.client_side_validation && card_program_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_program_request' when calling CardApi.create_card_program_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/card_program'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card_program_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_program_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a card request
    # Create a new card request.
    # @param card_request cardRequest
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def create_card_using_post(card_request, opts = {})
      data, _status_code, _headers = create_card_using_post_with_http_info(card_request, opts)
      data
    end

    # Create a card request
    # Create a new card request.
    # @param card_request cardRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def create_card_using_post_with_http_info(card_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.create_card_using_post ...'
      end
      # verify the required parameter 'card_request' is set
      if @api_client.config.client_side_validation && card_request.nil?
        fail ArgumentError, "Missing the required parameter 'card_request' when calling CardApi.create_card_using_post"
      end
      # resource path
      local_var_path = '/nucleus/v1/card'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card_request)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#create_card_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete an cardProgram
    # Permanently delete an cardProgram.
    # @param card_program_id UUID card_program_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_card_program_using_delete(card_program_id, opts = {})
      delete_card_program_using_delete_with_http_info(card_program_id, opts)
      nil
    end

    # Delete an cardProgram
    # Permanently delete an cardProgram.
    # @param card_program_id UUID card_program_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_card_program_using_delete_with_http_info(card_program_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.delete_card_program_using_delete ...'
      end
      # verify the required parameter 'card_program_id' is set
      if @api_client.config.client_side_validation && card_program_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_program_id' when calling CardApi.delete_card_program_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/card_program/{card_program_id}'.sub('{' + 'card_program_id' + '}', card_program_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#delete_card_program_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a card request
    # Permanently delete a card request.
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_card_using_delete(card_id, opts = {})
      delete_card_using_delete_with_http_info(card_id, opts)
      nil
    end

    # Delete a card request
    # Permanently delete a card request.
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_card_using_delete_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.delete_card_using_delete ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.delete_card_using_delete"
      end
      # resource path
      local_var_path = '/nucleus/v1/card/{card_id}'.sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#delete_card_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all client cards
    # Get the information for all cards for an client.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion USD
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageClientBusinessCardVO]
    def get_all_client_cards_using_get(opts = {})
      data, _status_code, _headers = get_all_client_cards_using_get_with_http_info(opts)
      data
    end

    # List all client cards
    # Get the information for all cards for an client.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion USD
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageClientBusinessCardVO, Fixnum, Hash)>] PageClientBusinessCardVO data, response status code and response headers
    def get_all_client_cards_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_all_client_cards_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/card/cardholder_overview'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageClientBusinessCardVO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_all_client_cards_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all card requests
    # Get the information for all card requests.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageCard]
    def get_card_all_using_get(opts = {})
      data, _status_code, _headers = get_card_all_using_get_with_http_info(opts)
      data
    end

    # List all card requests
    # Get the information for all card requests.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageCard, Fixnum, Hash)>] PageCard data, response status code and response headers
    def get_card_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/card'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCard')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all card asset sizes
    # Get a list of asset sizes by date for an card.
    # @param card_id Card Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :sort_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
    # @option opts [Date] :start_date start date
    # @return [Array<Object>]
    def get_card_asset_size_agg_all_using_get(card_id, opts = {})
      data, _status_code, _headers = get_card_asset_size_agg_all_using_get_with_http_info(card_id, opts)
      data
    end

    # List all card asset sizes
    # Get a list of asset sizes by date for an card.
    # @param card_id Card Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date
    # @option opts [BOOLEAN] :get_latest true or false
    # @option opts [String] :sort_type  Quarter (Q), Monthly (M) , Annually (Y), Daily (D) --caps matter, codes in ()
    # @option opts [Date] :start_date start date
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_card_asset_size_agg_all_using_get_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_asset_size_agg_all_using_get ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.get_card_asset_size_agg_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/card/{card_id}/asset_size'.sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'get_latest'] = opts[:'get_latest'] if !opts[:'get_latest'].nil?
      query_params[:'sort_type'] = opts[:'sort_type'] if !opts[:'sort_type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_asset_size_agg_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all cardProgram
    # Get information for all cardProgram.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @return [PageCardProgram]
    def get_card_program_all_using_get(opts = {})
      data, _status_code, _headers = get_card_program_all_using_get_with_http_info(opts)
      data
    end

    # List all cardProgram
    # Get information for all cardProgram.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @return [Array<(PageCardProgram, Fixnum, Hash)>] PageCardProgram data, response status code and response headers
    def get_card_program_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_program_all_using_get ...'
      end
      # resource path
      local_var_path = '/nucleus/v1/card_program'

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageCardProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_program_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an cardProgram
    # Retrieve the information for a specific cardProgram.
    # @param card_program_id UUID card_program_id
    # @param [Hash] opts the optional parameters
    # @return [CardProgram]
    def get_card_program_using_get(card_program_id, opts = {})
      data, _status_code, _headers = get_card_program_using_get_with_http_info(card_program_id, opts)
      data
    end

    # Retrieve an cardProgram
    # Retrieve the information for a specific cardProgram.
    # @param card_program_id UUID card_program_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardProgram, Fixnum, Hash)>] CardProgram data, response status code and response headers
    def get_card_program_using_get_with_http_info(card_program_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_program_using_get ...'
      end
      # verify the required parameter 'card_program_id' is set
      if @api_client.config.client_side_validation && card_program_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_program_id' when calling CardApi.get_card_program_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/card_program/{card_program_id}'.sub('{' + 'card_program_id' + '}', card_program_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_program_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all card transactions
    # Get the information for all transactions for an card.
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [Date] :start_date start date
    # @return [PagePortfolioTransaction]
    def get_card_transaction_agg_all_using_get(card_id, opts = {})
      data, _status_code, _headers = get_card_transaction_agg_all_using_get_with_http_info(card_id, opts)
      data
    end

    # List all card transactions
    # Get the information for all transactions for an card.
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion USD
    # @option opts [Date] :end_date end date
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @option opts [Date] :start_date start date
    # @return [Array<(PagePortfolioTransaction, Fixnum, Hash)>] PagePortfolioTransaction data, response status code and response headers
    def get_card_transaction_agg_all_using_get_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_transaction_agg_all_using_get ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.get_card_transaction_agg_all_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/card/{card_id}/transaction'.sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_transaction_agg_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all card transactions
    # Get the information for all transactions for an card.
    # @param card_id card_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending (default to false)
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [DateTime] :end_date end_date (default to null)
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by (default to update_date)
    # @option opts [Integer] :page page (default to 0)
    # @option opts [Integer] :size size (default to 25)
    # @option opts [DateTime] :start_date start_date (default to null)
    # @return [PagePortfolioTransaction]
    def get_card_transaction_agg_all_using_get1(card_id, opts = {})
      data, _status_code, _headers = get_card_transaction_agg_all_using_get1_with_http_info(card_id, opts)
      data
    end

    # List all card transactions
    # Get the information for all transactions for an card.
    # @param card_id card_id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :ascending ascending
    # @option opts [String] :currency_conversion currency_conversion
    # @option opts [DateTime] :end_date end_date
    # @option opts [String] :filter filter
    # @option opts [String] :order_by order_by
    # @option opts [Integer] :page page
    # @option opts [Integer] :size size
    # @option opts [DateTime] :start_date start_date
    # @return [Array<(PagePortfolioTransaction, Fixnum, Hash)>] PagePortfolioTransaction data, response status code and response headers
    def get_card_transaction_agg_all_using_get1_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_transaction_agg_all_using_get1 ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.get_card_transaction_agg_all_using_get1"
      end
      # resource path
      local_var_path = '/nucleus/v1/card/{card_id}/transaction'.sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'ascending'] = opts[:'ascending'] if !opts[:'ascending'].nil?
      query_params[:'currency_conversion'] = opts[:'currency_conversion'] if !opts[:'currency_conversion'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PagePortfolioTransaction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_transaction_agg_all_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a card request
    # Retrieve the information for a card request.
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def get_card_using_get(card_id, opts = {})
      data, _status_code, _headers = get_card_using_get_with_http_info(card_id, opts)
      data
    end

    # Retrieve a card request
    # Retrieve the information for a card request.
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def get_card_using_get_with_http_info(card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.get_card_using_get ...'
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.get_card_using_get"
      end
      # resource path
      local_var_path = '/nucleus/v1/card/{card_id}'.sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#get_card_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update an cardProgram
    # Update the information for an cardProgram.
    # @param card_program card_program
    # @param card_program_id UUID card_program_id
    # @param [Hash] opts the optional parameters
    # @return [CardProgram]
    def update_card_program_using_put(card_program, card_program_id, opts = {})
      data, _status_code, _headers = update_card_program_using_put_with_http_info(card_program, card_program_id, opts)
      data
    end

    # Update an cardProgram
    # Update the information for an cardProgram.
    # @param card_program card_program
    # @param card_program_id UUID card_program_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CardProgram, Fixnum, Hash)>] CardProgram data, response status code and response headers
    def update_card_program_using_put_with_http_info(card_program, card_program_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.update_card_program_using_put ...'
      end
      # verify the required parameter 'card_program' is set
      if @api_client.config.client_side_validation && card_program.nil?
        fail ArgumentError, "Missing the required parameter 'card_program' when calling CardApi.update_card_program_using_put"
      end
      # verify the required parameter 'card_program_id' is set
      if @api_client.config.client_side_validation && card_program_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_program_id' when calling CardApi.update_card_program_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/card_program/{card_program_id}'.sub('{' + 'card_program_id' + '}', card_program_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card_program)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CardProgram')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#update_card_program_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a card request
    # Update the information for a card request.
    # @param card card
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def update_card_using_put(card, card_id, opts = {})
      data, _status_code, _headers = update_card_using_put_with_http_info(card, card_id, opts)
      data
    end

    # Update a card request
    # Update the information for a card request.
    # @param card card
    # @param card_id UUID card_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def update_card_using_put_with_http_info(card, card_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardApi.update_card_using_put ...'
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling CardApi.update_card_using_put"
      end
      # verify the required parameter 'card_id' is set
      if @api_client.config.client_side_validation && card_id.nil?
        fail ArgumentError, "Missing the required parameter 'card_id' when calling CardApi.update_card_using_put"
      end
      # resource path
      local_var_path = '/nucleus/v1/card/{card_id}'.sub('{' + 'card_id' + '}', card_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card)
      auth_names = ['oauth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardApi#update_card_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
