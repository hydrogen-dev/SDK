/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.model.GoalAccumulationAllocationRequest;
import com.hydrogen.proton.model.GoalAccumulationRecommendationRequest;
import com.hydrogen.proton.model.GoalAccumulationStatusRequest;
import com.hydrogen.proton.model.GoalDecumulationAllocationRequest;
import com.hydrogen.proton.model.GoalDecumulationRecommendationRequest;
import com.hydrogen.proton.model.GoalDecumulationStatusRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.Map;

/**
 * API tests for GoalsApi
 */
@Ignore
public class GoalsApiTest {

    private final GoalsApi api = new GoalsApi();

    
    /**
     * Goal Accumulation Allocation
     *
     * Allocate based on an accumulation goal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void goalAccumulationAllocationTest() throws ApiException {
        GoalAccumulationAllocationRequest goalAccumulationAllocationRequest = null;
        Map<String, Object> response = api.goalAccumulationAllocation(goalAccumulationAllocationRequest);

        // TODO: test validations
    }
    
    /**
     * Goal Accumulation Recommendation
     *
     * Generate recommendations to achieve an accumulation goal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void goalAccumulationRecommendationTest() throws ApiException {
        GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest = null;
        Map<String, Object> response = api.goalAccumulationRecommendation(goalAccumulationRecommendationRequest);

        // TODO: test validations
    }
    
    /**
     * Goal Accumulation Status
     *
     * Track the status of an accumulation goal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void goalAccumulationStatusTest() throws ApiException {
        GoalAccumulationStatusRequest goalAccumulationStatusRequest = null;
        Map<String, Object> response = api.goalAccumulationStatus(goalAccumulationStatusRequest);

        // TODO: test validations
    }
    
    /**
     * Goal Decumulation Allocation
     *
     * Allocate based on a decumulation goal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void goalDecumulationAllocationTest() throws ApiException {
        GoalDecumulationAllocationRequest goalDecumulationAllocationRequest = null;
        Map<String, Object> response = api.goalDecumulationAllocation(goalDecumulationAllocationRequest);

        // TODO: test validations
    }
    
    /**
     * Goal Decumulation Recommendation
     *
     * Generate recommendations to achieve a decumulation goal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void goalDecumulationRecommendationTest() throws ApiException {
        GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest = null;
        Map<String, Object> response = api.goalDecumulationRecommendation(goalDecumulationRecommendationRequest);

        // TODO: test validations
    }
    
    /**
     * Goal Decumulation Status
     *
     * Track the status of a decumulation goal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void goalDecumulationStatusTest() throws ApiException {
        GoalDecumulationStatusRequest goalDecumulationStatusRequest = null;
        Map<String, Object> response = api.goalDecumulationStatus(goalDecumulationStatusRequest);

        // TODO: test validations
    }
    
}
