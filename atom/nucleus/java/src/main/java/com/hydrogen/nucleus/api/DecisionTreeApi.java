/*
 * Hydrogen Nucleus API
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.nucleus.api;

import com.hydrogen.nucleus.ApiCallback;
import com.hydrogen.nucleus.ApiClient;
import com.hydrogen.nucleus.ApiException;
import com.hydrogen.nucleus.ApiResponse;
import com.hydrogen.nucleus.Configuration;
import com.hydrogen.nucleus.Pair;
import com.hydrogen.nucleus.ProgressRequestBody;
import com.hydrogen.nucleus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.hydrogen.nucleus.model.DecisionTree;
import com.hydrogen.nucleus.model.DecisionTreeCO;
import com.hydrogen.nucleus.model.DecisionTreeResultVO;
import com.hydrogen.nucleus.model.Node;
import com.hydrogen.nucleus.model.NodeRelationship;
import com.hydrogen.nucleus.model.PageDecisionTree;
import com.hydrogen.nucleus.model.PageNode;
import com.hydrogen.nucleus.model.PageNodeRelationship;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DecisionTreeApi {
    private ApiClient apiClient;

    public DecisionTreeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DecisionTreeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createDecisionTreeResultUsingPost
     * @param decisionTreeCO decisionTreeCO (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDecisionTreeResultUsingPostCall(DecisionTreeCO decisionTreeCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = decisionTreeCO;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDecisionTreeResultUsingPostValidateBeforeCall(DecisionTreeCO decisionTreeCO, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTreeCO' is set
        if (decisionTreeCO == null) {
            throw new ApiException("Missing the required parameter 'decisionTreeCO' when calling createDecisionTreeResultUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createDecisionTreeResultUsingPostCall(decisionTreeCO, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Decision tree result
     * Decision tree result. 
     * @param decisionTreeCO decisionTreeCO (required)
     * @return DecisionTreeResultVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DecisionTreeResultVO createDecisionTreeResultUsingPost(DecisionTreeCO decisionTreeCO) throws ApiException {
        ApiResponse<DecisionTreeResultVO> resp = createDecisionTreeResultUsingPostWithHttpInfo(decisionTreeCO);
        return resp.getData();
    }

    /**
     * Decision tree result
     * Decision tree result. 
     * @param decisionTreeCO decisionTreeCO (required)
     * @return ApiResponse&lt;DecisionTreeResultVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DecisionTreeResultVO> createDecisionTreeResultUsingPostWithHttpInfo(DecisionTreeCO decisionTreeCO) throws ApiException {
        com.squareup.okhttp.Call call = createDecisionTreeResultUsingPostValidateBeforeCall(decisionTreeCO, null, null);
        Type localVarReturnType = new TypeToken<DecisionTreeResultVO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decision tree result (asynchronously)
     * Decision tree result. 
     * @param decisionTreeCO decisionTreeCO (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDecisionTreeResultUsingPostAsync(DecisionTreeCO decisionTreeCO, final ApiCallback<DecisionTreeResultVO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDecisionTreeResultUsingPostValidateBeforeCall(decisionTreeCO, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DecisionTreeResultVO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDecisionTreeUsingPost
     * @param decisionTree decisionTree (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDecisionTreeUsingPostCall(DecisionTree decisionTree, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = decisionTree;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDecisionTreeUsingPostValidateBeforeCall(DecisionTree decisionTree, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTree' is set
        if (decisionTree == null) {
            throw new ApiException("Missing the required parameter 'decisionTree' when calling createDecisionTreeUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createDecisionTreeUsingPostCall(decisionTree, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a decision tree
     * Create a new decision tree for your firm.
     * @param decisionTree decisionTree (required)
     * @return DecisionTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DecisionTree createDecisionTreeUsingPost(DecisionTree decisionTree) throws ApiException {
        ApiResponse<DecisionTree> resp = createDecisionTreeUsingPostWithHttpInfo(decisionTree);
        return resp.getData();
    }

    /**
     * Create a decision tree
     * Create a new decision tree for your firm.
     * @param decisionTree decisionTree (required)
     * @return ApiResponse&lt;DecisionTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DecisionTree> createDecisionTreeUsingPostWithHttpInfo(DecisionTree decisionTree) throws ApiException {
        com.squareup.okhttp.Call call = createDecisionTreeUsingPostValidateBeforeCall(decisionTree, null, null);
        Type localVarReturnType = new TypeToken<DecisionTree>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a decision tree (asynchronously)
     * Create a new decision tree for your firm.
     * @param decisionTree decisionTree (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDecisionTreeUsingPostAsync(DecisionTree decisionTree, final ApiCallback<DecisionTree> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDecisionTreeUsingPostValidateBeforeCall(decisionTree, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DecisionTree>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNodeRelationshipUsingPost
     * @param node node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNodeRelationshipUsingPostCall(NodeRelationship node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = node;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNodeRelationshipUsingPostValidateBeforeCall(NodeRelationship node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createNodeRelationshipUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createNodeRelationshipUsingPostCall(node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a node relationship
     * Create a new node relationship for your firm.
     * @param node node (required)
     * @return NodeRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRelationship createNodeRelationshipUsingPost(NodeRelationship node) throws ApiException {
        ApiResponse<NodeRelationship> resp = createNodeRelationshipUsingPostWithHttpInfo(node);
        return resp.getData();
    }

    /**
     * Create a node relationship
     * Create a new node relationship for your firm.
     * @param node node (required)
     * @return ApiResponse&lt;NodeRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRelationship> createNodeRelationshipUsingPostWithHttpInfo(NodeRelationship node) throws ApiException {
        com.squareup.okhttp.Call call = createNodeRelationshipUsingPostValidateBeforeCall(node, null, null);
        Type localVarReturnType = new TypeToken<NodeRelationship>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a node relationship (asynchronously)
     * Create a new node relationship for your firm.
     * @param node node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNodeRelationshipUsingPostAsync(NodeRelationship node, final ApiCallback<NodeRelationship> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNodeRelationshipUsingPostValidateBeforeCall(node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRelationship>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNodeUsingPost
     * @param node node (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNodeUsingPostCall(Node node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = node;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNodeUsingPostValidateBeforeCall(Node node, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling createNodeUsingPost(Async)");
        }
        

        com.squareup.okhttp.Call call = createNodeUsingPostCall(node, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a node
     * Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
     * @param node node (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node createNodeUsingPost(Node node) throws ApiException {
        ApiResponse<Node> resp = createNodeUsingPostWithHttpInfo(node);
        return resp.getData();
    }

    /**
     * Create a node
     * Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
     * @param node node (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> createNodeUsingPostWithHttpInfo(Node node) throws ApiException {
        com.squareup.okhttp.Call call = createNodeUsingPostValidateBeforeCall(node, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a node (asynchronously)
     * Create a new node for your firm that can be used in a decision tree and mapped to other nodes.
     * @param node node (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNodeUsingPostAsync(Node node, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNodeUsingPostValidateBeforeCall(node, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDecisionTreeUsingDelete
     * @param decisionTreeId UUID decision_tree_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDecisionTreeUsingDeleteCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}"
            .replaceAll("\\{" + "decision_tree_id" + "\\}", apiClient.escapeString(decisionTreeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDecisionTreeUsingDeleteValidateBeforeCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTreeId' is set
        if (decisionTreeId == null) {
            throw new ApiException("Missing the required parameter 'decisionTreeId' when calling deleteDecisionTreeUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDecisionTreeUsingDeleteCall(decisionTreeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a decision tree
     * Permanently delete a decision tree.
     * @param decisionTreeId UUID decision_tree_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDecisionTreeUsingDelete(UUID decisionTreeId) throws ApiException {
        deleteDecisionTreeUsingDeleteWithHttpInfo(decisionTreeId);
    }

    /**
     * Delete a decision tree
     * Permanently delete a decision tree.
     * @param decisionTreeId UUID decision_tree_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDecisionTreeUsingDeleteWithHttpInfo(UUID decisionTreeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDecisionTreeUsingDeleteValidateBeforeCall(decisionTreeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a decision tree (asynchronously)
     * Permanently delete a decision tree.
     * @param decisionTreeId UUID decision_tree_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDecisionTreeUsingDeleteAsync(UUID decisionTreeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDecisionTreeUsingDeleteValidateBeforeCall(decisionTreeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNodeRelationshipUsingDelete
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNodeRelationshipUsingDeleteCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}"
            .replaceAll("\\{" + "node_relationship_id" + "\\}", apiClient.escapeString(nodeRelationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNodeRelationshipUsingDeleteValidateBeforeCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeRelationshipId' is set
        if (nodeRelationshipId == null) {
            throw new ApiException("Missing the required parameter 'nodeRelationshipId' when calling deleteNodeRelationshipUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNodeRelationshipUsingDeleteCall(nodeRelationshipId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a node relationship
     * Permanently delete a node relationship.
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNodeRelationshipUsingDelete(UUID nodeRelationshipId) throws ApiException {
        deleteNodeRelationshipUsingDeleteWithHttpInfo(nodeRelationshipId);
    }

    /**
     * Delete a node relationship
     * Permanently delete a node relationship.
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNodeRelationshipUsingDeleteWithHttpInfo(UUID nodeRelationshipId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNodeRelationshipUsingDeleteValidateBeforeCall(nodeRelationshipId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a node relationship (asynchronously)
     * Permanently delete a node relationship.
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNodeRelationshipUsingDeleteAsync(UUID nodeRelationshipId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNodeRelationshipUsingDeleteValidateBeforeCall(nodeRelationshipId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNodeUsingDelete
     * @param nodeId UUID node_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNodeUsingDeleteCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node/{node_id}"
            .replaceAll("\\{" + "node_id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNodeUsingDeleteValidateBeforeCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling deleteNodeUsingDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNodeUsingDeleteCall(nodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a node
     * Permanently delete a node.
     * @param nodeId UUID node_id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNodeUsingDelete(UUID nodeId) throws ApiException {
        deleteNodeUsingDeleteWithHttpInfo(nodeId);
    }

    /**
     * Delete a node
     * Permanently delete a node.
     * @param nodeId UUID node_id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNodeUsingDeleteWithHttpInfo(UUID nodeId) throws ApiException {
        com.squareup.okhttp.Call call = deleteNodeUsingDeleteValidateBeforeCall(nodeId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a node (asynchronously)
     * Permanently delete a node.
     * @param nodeId UUID node_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNodeUsingDeleteAsync(UUID nodeId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNodeUsingDeleteValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDecisionTreeAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDecisionTreeAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDecisionTreeAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDecisionTreeAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all decision tree
     * Get the information for all decision trees defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageDecisionTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageDecisionTree getDecisionTreeAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageDecisionTree> resp = getDecisionTreeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all decision tree
     * Get the information for all decision trees defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageDecisionTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageDecisionTree> getDecisionTreeAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getDecisionTreeAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageDecisionTree>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all decision tree (asynchronously)
     * Get the information for all decision trees defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDecisionTreeAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageDecisionTree> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDecisionTreeAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageDecisionTree>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDecisionTreeUsingGet
     * @param decisionTreeId UUID decision_tree_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDecisionTreeUsingGetCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}"
            .replaceAll("\\{" + "decision_tree_id" + "\\}", apiClient.escapeString(decisionTreeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDecisionTreeUsingGetValidateBeforeCall(UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTreeId' is set
        if (decisionTreeId == null) {
            throw new ApiException("Missing the required parameter 'decisionTreeId' when calling getDecisionTreeUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getDecisionTreeUsingGetCall(decisionTreeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a decision tree
     * Retrieve the information for a decision tree.
     * @param decisionTreeId UUID decision_tree_id (required)
     * @return DecisionTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DecisionTree getDecisionTreeUsingGet(UUID decisionTreeId) throws ApiException {
        ApiResponse<DecisionTree> resp = getDecisionTreeUsingGetWithHttpInfo(decisionTreeId);
        return resp.getData();
    }

    /**
     * Retrieve a decision tree
     * Retrieve the information for a decision tree.
     * @param decisionTreeId UUID decision_tree_id (required)
     * @return ApiResponse&lt;DecisionTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DecisionTree> getDecisionTreeUsingGetWithHttpInfo(UUID decisionTreeId) throws ApiException {
        com.squareup.okhttp.Call call = getDecisionTreeUsingGetValidateBeforeCall(decisionTreeId, null, null);
        Type localVarReturnType = new TypeToken<DecisionTree>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a decision tree (asynchronously)
     * Retrieve the information for a decision tree.
     * @param decisionTreeId UUID decision_tree_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDecisionTreeUsingGetAsync(UUID decisionTreeId, final ApiCallback<DecisionTree> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDecisionTreeUsingGetValidateBeforeCall(decisionTreeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DecisionTree>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNodeAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all nodes
     * List all nodes that are defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageNode getNodeAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageNode> resp = getNodeAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all nodes
     * List all nodes that are defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageNode> getNodeAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getNodeAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageNode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all nodes (asynchronously)
     * List all nodes that are defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageNode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageNode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeRelationshipAllUsingGet
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeRelationshipAllUsingGetCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ascending != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ascending", ascending));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("order_by", orderBy));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeRelationshipAllUsingGetValidateBeforeCall(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getNodeRelationshipAllUsingGetCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all node relationships
     * Get the information for all the node relationships defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return PageNodeRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PageNodeRelationship getNodeRelationshipAllUsingGet(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        ApiResponse<PageNodeRelationship> resp = getNodeRelationshipAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
        return resp.getData();
    }

    /**
     * List all node relationships
     * Get the information for all the node relationships defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @return ApiResponse&lt;PageNodeRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PageNodeRelationship> getNodeRelationshipAllUsingGetWithHttpInfo(Boolean ascending, String filter, String orderBy, Integer page, Integer size) throws ApiException {
        com.squareup.okhttp.Call call = getNodeRelationshipAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, null, null);
        Type localVarReturnType = new TypeToken<PageNodeRelationship>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all node relationships (asynchronously)
     * Get the information for all the node relationships defined for your firm.
     * @param ascending ascending (optional, default to false)
     * @param filter filter (optional)
     * @param orderBy order_by (optional, default to update_date)
     * @param page page (optional, default to 0)
     * @param size size (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeRelationshipAllUsingGetAsync(Boolean ascending, String filter, String orderBy, Integer page, Integer size, final ApiCallback<PageNodeRelationship> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeRelationshipAllUsingGetValidateBeforeCall(ascending, filter, orderBy, page, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PageNodeRelationship>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeRelationshipUsingGet
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeRelationshipUsingGetCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}"
            .replaceAll("\\{" + "node_relationship_id" + "\\}", apiClient.escapeString(nodeRelationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeRelationshipUsingGetValidateBeforeCall(UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeRelationshipId' is set
        if (nodeRelationshipId == null) {
            throw new ApiException("Missing the required parameter 'nodeRelationshipId' when calling getNodeRelationshipUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeRelationshipUsingGetCall(nodeRelationshipId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a node relationship
     * Retrieve the information for a node relationship.
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @return NodeRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRelationship getNodeRelationshipUsingGet(UUID nodeRelationshipId) throws ApiException {
        ApiResponse<NodeRelationship> resp = getNodeRelationshipUsingGetWithHttpInfo(nodeRelationshipId);
        return resp.getData();
    }

    /**
     * Retrieve a node relationship
     * Retrieve the information for a node relationship.
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @return ApiResponse&lt;NodeRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRelationship> getNodeRelationshipUsingGetWithHttpInfo(UUID nodeRelationshipId) throws ApiException {
        com.squareup.okhttp.Call call = getNodeRelationshipUsingGetValidateBeforeCall(nodeRelationshipId, null, null);
        Type localVarReturnType = new TypeToken<NodeRelationship>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a node relationship (asynchronously)
     * Retrieve the information for a node relationship.
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeRelationshipUsingGetAsync(UUID nodeRelationshipId, final ApiCallback<NodeRelationship> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeRelationshipUsingGetValidateBeforeCall(nodeRelationshipId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRelationship>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNodeUsingGet
     * @param nodeId UUID node_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNodeUsingGetCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node/{node_id}"
            .replaceAll("\\{" + "node_id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNodeUsingGetValidateBeforeCall(UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling getNodeUsingGet(Async)");
        }
        

        com.squareup.okhttp.Call call = getNodeUsingGetCall(nodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a node
     * Retrieve the information for a node.
     * @param nodeId UUID node_id (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node getNodeUsingGet(UUID nodeId) throws ApiException {
        ApiResponse<Node> resp = getNodeUsingGetWithHttpInfo(nodeId);
        return resp.getData();
    }

    /**
     * Retrieve a node
     * Retrieve the information for a node.
     * @param nodeId UUID node_id (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> getNodeUsingGetWithHttpInfo(UUID nodeId) throws ApiException {
        com.squareup.okhttp.Call call = getNodeUsingGetValidateBeforeCall(nodeId, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a node (asynchronously)
     * Retrieve the information for a node.
     * @param nodeId UUID node_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNodeUsingGetAsync(UUID nodeId, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNodeUsingGetValidateBeforeCall(nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDecisionTreeUsingPut
     * @param decisionTree decision_tree (required)
     * @param decisionTreeId UUID decision_tree_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDecisionTreeUsingPutCall(Object decisionTree, UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = decisionTree;

        // create path and map variables
        String localVarPath = "/nucleus/v1/decision_tree/{decision_tree_id}"
            .replaceAll("\\{" + "decision_tree_id" + "\\}", apiClient.escapeString(decisionTreeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDecisionTreeUsingPutValidateBeforeCall(Object decisionTree, UUID decisionTreeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'decisionTree' is set
        if (decisionTree == null) {
            throw new ApiException("Missing the required parameter 'decisionTree' when calling updateDecisionTreeUsingPut(Async)");
        }
        
        // verify the required parameter 'decisionTreeId' is set
        if (decisionTreeId == null) {
            throw new ApiException("Missing the required parameter 'decisionTreeId' when calling updateDecisionTreeUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDecisionTreeUsingPutCall(decisionTree, decisionTreeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a decision tree
     * Updated the information for a decision tree.
     * @param decisionTree decision_tree (required)
     * @param decisionTreeId UUID decision_tree_id (required)
     * @return DecisionTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DecisionTree updateDecisionTreeUsingPut(Object decisionTree, UUID decisionTreeId) throws ApiException {
        ApiResponse<DecisionTree> resp = updateDecisionTreeUsingPutWithHttpInfo(decisionTree, decisionTreeId);
        return resp.getData();
    }

    /**
     * Update a decision tree
     * Updated the information for a decision tree.
     * @param decisionTree decision_tree (required)
     * @param decisionTreeId UUID decision_tree_id (required)
     * @return ApiResponse&lt;DecisionTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DecisionTree> updateDecisionTreeUsingPutWithHttpInfo(Object decisionTree, UUID decisionTreeId) throws ApiException {
        com.squareup.okhttp.Call call = updateDecisionTreeUsingPutValidateBeforeCall(decisionTree, decisionTreeId, null, null);
        Type localVarReturnType = new TypeToken<DecisionTree>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a decision tree (asynchronously)
     * Updated the information for a decision tree.
     * @param decisionTree decision_tree (required)
     * @param decisionTreeId UUID decision_tree_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDecisionTreeUsingPutAsync(Object decisionTree, UUID decisionTreeId, final ApiCallback<DecisionTree> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDecisionTreeUsingPutValidateBeforeCall(decisionTree, decisionTreeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DecisionTree>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNodeRelationshipUsingPut
     * @param jsonNode jsonNode (required)
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNodeRelationshipUsingPutCall(Object jsonNode, UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jsonNode;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node_relationship/{node_relationship_id}"
            .replaceAll("\\{" + "node_relationship_id" + "\\}", apiClient.escapeString(nodeRelationshipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeRelationshipUsingPutValidateBeforeCall(Object jsonNode, UUID nodeRelationshipId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jsonNode' is set
        if (jsonNode == null) {
            throw new ApiException("Missing the required parameter 'jsonNode' when calling updateNodeRelationshipUsingPut(Async)");
        }
        
        // verify the required parameter 'nodeRelationshipId' is set
        if (nodeRelationshipId == null) {
            throw new ApiException("Missing the required parameter 'nodeRelationshipId' when calling updateNodeRelationshipUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeRelationshipUsingPutCall(jsonNode, nodeRelationshipId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a node relationship
     * Update the information for a node relationship.
     * @param jsonNode jsonNode (required)
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @return NodeRelationship
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NodeRelationship updateNodeRelationshipUsingPut(Object jsonNode, UUID nodeRelationshipId) throws ApiException {
        ApiResponse<NodeRelationship> resp = updateNodeRelationshipUsingPutWithHttpInfo(jsonNode, nodeRelationshipId);
        return resp.getData();
    }

    /**
     * Update a node relationship
     * Update the information for a node relationship.
     * @param jsonNode jsonNode (required)
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @return ApiResponse&lt;NodeRelationship&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NodeRelationship> updateNodeRelationshipUsingPutWithHttpInfo(Object jsonNode, UUID nodeRelationshipId) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeRelationshipUsingPutValidateBeforeCall(jsonNode, nodeRelationshipId, null, null);
        Type localVarReturnType = new TypeToken<NodeRelationship>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a node relationship (asynchronously)
     * Update the information for a node relationship.
     * @param jsonNode jsonNode (required)
     * @param nodeRelationshipId UUID node_relationship_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNodeRelationshipUsingPutAsync(Object jsonNode, UUID nodeRelationshipId, final ApiCallback<NodeRelationship> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeRelationshipUsingPutValidateBeforeCall(jsonNode, nodeRelationshipId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NodeRelationship>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNodeUsingPut
     * @param jsonNode jsonNode (required)
     * @param nodeId UUID node_id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNodeUsingPutCall(Object jsonNode, UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jsonNode;

        // create path and map variables
        String localVarPath = "/nucleus/v1/node/{node_id}"
            .replaceAll("\\{" + "node_id" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNodeUsingPutValidateBeforeCall(Object jsonNode, UUID nodeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jsonNode' is set
        if (jsonNode == null) {
            throw new ApiException("Missing the required parameter 'jsonNode' when calling updateNodeUsingPut(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling updateNodeUsingPut(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNodeUsingPutCall(jsonNode, nodeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a node
     * Updated the information for a node.
     * @param jsonNode jsonNode (required)
     * @param nodeId UUID node_id (required)
     * @return Node
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Node updateNodeUsingPut(Object jsonNode, UUID nodeId) throws ApiException {
        ApiResponse<Node> resp = updateNodeUsingPutWithHttpInfo(jsonNode, nodeId);
        return resp.getData();
    }

    /**
     * Update a node
     * Updated the information for a node.
     * @param jsonNode jsonNode (required)
     * @param nodeId UUID node_id (required)
     * @return ApiResponse&lt;Node&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Node> updateNodeUsingPutWithHttpInfo(Object jsonNode, UUID nodeId) throws ApiException {
        com.squareup.okhttp.Call call = updateNodeUsingPutValidateBeforeCall(jsonNode, nodeId, null, null);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a node (asynchronously)
     * Updated the information for a node.
     * @param jsonNode jsonNode (required)
     * @param nodeId UUID node_id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNodeUsingPutAsync(Object jsonNode, UUID nodeId, final ApiCallback<Node> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNodeUsingPutValidateBeforeCall(jsonNode, nodeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Node>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
