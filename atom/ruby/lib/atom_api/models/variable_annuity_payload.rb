=begin
#Hydrogen Atom API

#The Hydrogen Atom API

OpenAPI spec version: 1.0.1
Contact: info@hydrogenplatform.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.2-SNAPSHOT

=end

require 'date'

module AtomApi
  class VariableAnnuityPayload
    # Portfolio tickers, referencing securities defined in the Nucleus API.
    attr_accessor :portfolio_tickers

    # Portfolio weights, corresponding to portfolio_tickers. Must sum to 1.0.
    attr_accessor :portfolio_weights

    # The number of years until the payout phase begins.
    attr_accessor :accumulation_horizon

    # The number of years in the payout or decumulation phase.
    attr_accessor :decumulation_horizon

    # The starting balance in the annuity plan, prior to any ongoing contributions. Must be greater than or equal to 0.
    attr_accessor :initial_balance

    # Unit of time associated with accumulation_horizon, decumulation_horizon, start, end, and annuity payments.
    attr_accessor :frequency_interval

    attr_accessor :deposit_schedule

    # The annualized rate of inflation. Defaults to 0.
    attr_accessor :inflation_rate

    # The tax rate applied to annuity payouts. Defaults to 0.
    attr_accessor :tax_rate

    # The discount rate used to calculate annuity payout amounts during decumulation_horizon. Defaults to 0.
    attr_accessor :annuitization_rate

    # Boundaries enforced on the plan's rate of return.
    attr_accessor :guaranteed_rate_benefit

    # A guaranteed lower bound for the plan balance at the end of accumulation_horizon.
    attr_accessor :guaranteed_accumulation_benefit

    # The number of Monte Carlo simulations to run. Defaults to 1000.
    attr_accessor :n

    # The type of Monte Carlo result to output. Must be one of mean, median, or custom. Defaults to median.
    attr_accessor :result_type

    # A result percentile to output, applicable when result_type is custom. Must be between 0 and 100 inclusive. Defaults to 50.
    attr_accessor :p

    # If true, remove outlying results. If true, outlier analysis is performed on a median absolute deviation (MAD) basis, at the 2.5 threshold. Defaults to false.
    attr_accessor :remove_outliers

    # Start date used for ticker price history. Defaults to the earliest common date among portfolio_tickers prices.
    attr_accessor :start_date

    # End date used for ticker price history. Defaults to the latest common date among portfolio_tickers prices.
    attr_accessor :end_date

    # The number of days per year for which a portfolio is subject to market fluctuation. Defaults to 252.
    attr_accessor :trading_days_per_year

    # If true, incorporate proxy price data as defined at the Security level in the Nucleus API. Proxy data is merged with base security data to form a continuous price history. Defaults to false.
    attr_accessor :use_proxy_data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'portfolio_tickers' => :'portfolio_tickers',
        :'portfolio_weights' => :'portfolio_weights',
        :'accumulation_horizon' => :'accumulation_horizon',
        :'decumulation_horizon' => :'decumulation_horizon',
        :'initial_balance' => :'initial_balance',
        :'frequency_interval' => :'frequency_interval',
        :'deposit_schedule' => :'deposit_schedule',
        :'inflation_rate' => :'inflation_rate',
        :'tax_rate' => :'tax_rate',
        :'annuitization_rate' => :'annuitization_rate',
        :'guaranteed_rate_benefit' => :'guaranteed_rate_benefit',
        :'guaranteed_accumulation_benefit' => :'guaranteed_accumulation_benefit',
        :'n' => :'n',
        :'result_type' => :'result_type',
        :'p' => :'p',
        :'remove_outliers' => :'remove_outliers',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'trading_days_per_year' => :'trading_days_per_year',
        :'use_proxy_data' => :'use_proxy_data'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'portfolio_tickers' => :'Array<String>',
        :'portfolio_weights' => :'Array<Float>',
        :'accumulation_horizon' => :'Integer',
        :'decumulation_horizon' => :'Integer',
        :'initial_balance' => :'Float',
        :'frequency_interval' => :'String',
        :'deposit_schedule' => :'AnnuityDepositSchedule',
        :'inflation_rate' => :'Float',
        :'tax_rate' => :'Float',
        :'annuitization_rate' => :'Float',
        :'guaranteed_rate_benefit' => :'Array<GuaranteedRateBenefitSubpayload>',
        :'guaranteed_accumulation_benefit' => :'Float',
        :'n' => :'Integer',
        :'result_type' => :'String',
        :'p' => :'Float',
        :'remove_outliers' => :'BOOLEAN',
        :'start_date' => :'Date',
        :'end_date' => :'Date',
        :'trading_days_per_year' => :'Integer',
        :'use_proxy_data' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'portfolio_tickers')
        if (value = attributes[:'portfolio_tickers']).is_a?(Array)
          self.portfolio_tickers = value
        end
      end

      if attributes.has_key?(:'portfolio_weights')
        if (value = attributes[:'portfolio_weights']).is_a?(Array)
          self.portfolio_weights = value
        end
      end

      if attributes.has_key?(:'accumulation_horizon')
        self.accumulation_horizon = attributes[:'accumulation_horizon']
      end

      if attributes.has_key?(:'decumulation_horizon')
        self.decumulation_horizon = attributes[:'decumulation_horizon']
      end

      if attributes.has_key?(:'initial_balance')
        self.initial_balance = attributes[:'initial_balance']
      end

      if attributes.has_key?(:'frequency_interval')
        self.frequency_interval = attributes[:'frequency_interval']
      end

      if attributes.has_key?(:'deposit_schedule')
        self.deposit_schedule = attributes[:'deposit_schedule']
      end

      if attributes.has_key?(:'inflation_rate')
        self.inflation_rate = attributes[:'inflation_rate']
      end

      if attributes.has_key?(:'tax_rate')
        self.tax_rate = attributes[:'tax_rate']
      end

      if attributes.has_key?(:'annuitization_rate')
        self.annuitization_rate = attributes[:'annuitization_rate']
      end

      if attributes.has_key?(:'guaranteed_rate_benefit')
        if (value = attributes[:'guaranteed_rate_benefit']).is_a?(Array)
          self.guaranteed_rate_benefit = value
        end
      end

      if attributes.has_key?(:'guaranteed_accumulation_benefit')
        self.guaranteed_accumulation_benefit = attributes[:'guaranteed_accumulation_benefit']
      end

      if attributes.has_key?(:'n')
        self.n = attributes[:'n']
      end

      if attributes.has_key?(:'result_type')
        self.result_type = attributes[:'result_type']
      else
        self.result_type = 'median'
      end

      if attributes.has_key?(:'p')
        self.p = attributes[:'p']
      end

      if attributes.has_key?(:'remove_outliers')
        self.remove_outliers = attributes[:'remove_outliers']
      else
        self.remove_outliers = false
      end

      if attributes.has_key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.has_key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.has_key?(:'trading_days_per_year')
        self.trading_days_per_year = attributes[:'trading_days_per_year']
      end

      if attributes.has_key?(:'use_proxy_data')
        self.use_proxy_data = attributes[:'use_proxy_data']
      else
        self.use_proxy_data = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @portfolio_tickers.nil?
        invalid_properties.push('invalid value for "portfolio_tickers", portfolio_tickers cannot be nil.')
      end

      if @portfolio_weights.nil?
        invalid_properties.push('invalid value for "portfolio_weights", portfolio_weights cannot be nil.')
      end

      if @accumulation_horizon.nil?
        invalid_properties.push('invalid value for "accumulation_horizon", accumulation_horizon cannot be nil.')
      end

      if @decumulation_horizon.nil?
        invalid_properties.push('invalid value for "decumulation_horizon", decumulation_horizon cannot be nil.')
      end

      if @initial_balance.nil?
        invalid_properties.push('invalid value for "initial_balance", initial_balance cannot be nil.')
      end

      if @initial_balance < 0
        invalid_properties.push('invalid value for "initial_balance", must be greater than or equal to 0.')
      end

      if !@inflation_rate.nil? && @inflation_rate < -1
        invalid_properties.push('invalid value for "inflation_rate", must be greater than or equal to -1.')
      end

      if !@tax_rate.nil? && @tax_rate >= 1
        invalid_properties.push('invalid value for "tax_rate", must be smaller than 1.')
      end

      if !@tax_rate.nil? && @tax_rate < 0
        invalid_properties.push('invalid value for "tax_rate", must be greater than or equal to 0.')
      end

      if !@guaranteed_accumulation_benefit.nil? && @guaranteed_accumulation_benefit < 0
        invalid_properties.push('invalid value for "guaranteed_accumulation_benefit", must be greater than or equal to 0.')
      end

      if !@p.nil? && @p > 100
        invalid_properties.push('invalid value for "p", must be smaller than or equal to 100.')
      end

      if !@p.nil? && @p < 0
        invalid_properties.push('invalid value for "p", must be greater than or equal to 0.')
      end

      if !@trading_days_per_year.nil? && @trading_days_per_year > 365
        invalid_properties.push('invalid value for "trading_days_per_year", must be smaller than or equal to 365.')
      end

      if !@trading_days_per_year.nil? && @trading_days_per_year < 1
        invalid_properties.push('invalid value for "trading_days_per_year", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @portfolio_tickers.nil?
      return false if @portfolio_weights.nil?
      return false if @accumulation_horizon.nil?
      return false if @decumulation_horizon.nil?
      return false if @initial_balance.nil?
      return false if @initial_balance < 0
      return false if !@inflation_rate.nil? && @inflation_rate < -1
      return false if !@tax_rate.nil? && @tax_rate >= 1
      return false if !@tax_rate.nil? && @tax_rate < 0
      return false if !@guaranteed_accumulation_benefit.nil? && @guaranteed_accumulation_benefit < 0
      result_type_validator = EnumAttributeValidator.new('String', ['mean', 'median', 'custom'])
      return false unless result_type_validator.valid?(@result_type)
      return false if !@p.nil? && @p > 100
      return false if !@p.nil? && @p < 0
      return false if !@trading_days_per_year.nil? && @trading_days_per_year > 365
      return false if !@trading_days_per_year.nil? && @trading_days_per_year < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] initial_balance Value to be assigned
    def initial_balance=(initial_balance)
      if initial_balance.nil?
        fail ArgumentError, 'initial_balance cannot be nil'
      end

      if initial_balance < 0
        fail ArgumentError, 'invalid value for "initial_balance", must be greater than or equal to 0.'
      end

      @initial_balance = initial_balance
    end

    # Custom attribute writer method with validation
    # @param [Object] inflation_rate Value to be assigned
    def inflation_rate=(inflation_rate)
      if !inflation_rate.nil? && inflation_rate < -1
        fail ArgumentError, 'invalid value for "inflation_rate", must be greater than or equal to -1.'
      end

      @inflation_rate = inflation_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_rate Value to be assigned
    def tax_rate=(tax_rate)
      if !tax_rate.nil? && tax_rate >= 1
        fail ArgumentError, 'invalid value for "tax_rate", must be smaller than 1.'
      end

      if !tax_rate.nil? && tax_rate < 0
        fail ArgumentError, 'invalid value for "tax_rate", must be greater than or equal to 0.'
      end

      @tax_rate = tax_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] guaranteed_accumulation_benefit Value to be assigned
    def guaranteed_accumulation_benefit=(guaranteed_accumulation_benefit)
      if !guaranteed_accumulation_benefit.nil? && guaranteed_accumulation_benefit < 0
        fail ArgumentError, 'invalid value for "guaranteed_accumulation_benefit", must be greater than or equal to 0.'
      end

      @guaranteed_accumulation_benefit = guaranteed_accumulation_benefit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_type Object to be assigned
    def result_type=(result_type)
      validator = EnumAttributeValidator.new('String', ['mean', 'median', 'custom'])
      unless validator.valid?(result_type)
        fail ArgumentError, 'invalid value for "result_type", must be one of #{validator.allowable_values}.'
      end
      @result_type = result_type
    end

    # Custom attribute writer method with validation
    # @param [Object] p Value to be assigned
    def p=(p)
      if !p.nil? && p > 100
        fail ArgumentError, 'invalid value for "p", must be smaller than or equal to 100.'
      end

      if !p.nil? && p < 0
        fail ArgumentError, 'invalid value for "p", must be greater than or equal to 0.'
      end

      @p = p
    end

    # Custom attribute writer method with validation
    # @param [Object] trading_days_per_year Value to be assigned
    def trading_days_per_year=(trading_days_per_year)
      if !trading_days_per_year.nil? && trading_days_per_year > 365
        fail ArgumentError, 'invalid value for "trading_days_per_year", must be smaller than or equal to 365.'
      end

      if !trading_days_per_year.nil? && trading_days_per_year < 1
        fail ArgumentError, 'invalid value for "trading_days_per_year", must be greater than or equal to 1.'
      end

      @trading_days_per_year = trading_days_per_year
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          portfolio_tickers == o.portfolio_tickers &&
          portfolio_weights == o.portfolio_weights &&
          accumulation_horizon == o.accumulation_horizon &&
          decumulation_horizon == o.decumulation_horizon &&
          initial_balance == o.initial_balance &&
          frequency_interval == o.frequency_interval &&
          deposit_schedule == o.deposit_schedule &&
          inflation_rate == o.inflation_rate &&
          tax_rate == o.tax_rate &&
          annuitization_rate == o.annuitization_rate &&
          guaranteed_rate_benefit == o.guaranteed_rate_benefit &&
          guaranteed_accumulation_benefit == o.guaranteed_accumulation_benefit &&
          n == o.n &&
          result_type == o.result_type &&
          p == o.p &&
          remove_outliers == o.remove_outliers &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          trading_days_per_year == o.trading_days_per_year &&
          use_proxy_data == o.use_proxy_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [portfolio_tickers, portfolio_weights, accumulation_horizon, decumulation_horizon, initial_balance, frequency_interval, deposit_schedule, inflation_rate, tax_rate, annuitization_rate, guaranteed_rate_benefit, guaranteed_accumulation_benefit, n, result_type, p, remove_outliers, start_date, end_date, trading_days_per_year, use_proxy_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AtomApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
