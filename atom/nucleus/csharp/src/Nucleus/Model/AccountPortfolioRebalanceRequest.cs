/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Nucleus.Client.SwaggerDateConverter;

namespace Nucleus.ModelEntity
{
    /// <summary>
    /// AccountPortfolioRebalanceRequest Object
    /// </summary>
    [DataContract]
    public partial class AccountPortfolioRebalanceRequest :  IEquatable<AccountPortfolioRebalanceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountPortfolioRebalanceRequest" /> class.
        /// </summary>
        /// <param name="buyThreshold">buyThreshold.</param>
        /// <param name="buyTransactionCodeId">buyTransactionCodeId.</param>
        /// <param name="cashPortfolioId">cashPortfolioId.</param>
        /// <param name="cashSecId">cashSecId.</param>
        /// <param name="clientId">clientId.</param>
        /// <param name="commitOrders">commitOrders.</param>
        /// <param name="nonFractional">nonFractional.</param>
        /// <param name="portThreshold">portThreshold.</param>
        /// <param name="restrictionsOn">restrictionsOn.</param>
        /// <param name="sellThreshold">sellThreshold.</param>
        /// <param name="sellTransactionCodeId">sellTransactionCodeId.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="useCashAvailable">useCashAvailable.</param>
        /// <param name="useStrategic">useStrategic.</param>
        public AccountPortfolioRebalanceRequest(double? buyThreshold = default(double?), Guid? buyTransactionCodeId = default(Guid?), Guid? cashPortfolioId = default(Guid?), Guid? cashSecId = default(Guid?), Guid? clientId = default(Guid?), bool? commitOrders = default(bool?), bool? nonFractional = default(bool?), double? portThreshold = default(double?), bool? restrictionsOn = default(bool?), double? sellThreshold = default(double?), Guid? sellTransactionCodeId = default(Guid?), Guid? tenantId = default(Guid?), bool? useCashAvailable = default(bool?), bool? useStrategic = default(bool?))
        {
            this.BuyThreshold = buyThreshold;
            this.BuyTransactionCodeId = buyTransactionCodeId;
            this.CashPortfolioId = cashPortfolioId;
            this.CashSecId = cashSecId;
            this.ClientId = clientId;
            this.CommitOrders = commitOrders;
            this.NonFractional = nonFractional;
            this.PortThreshold = portThreshold;
            this.RestrictionsOn = restrictionsOn;
            this.SellThreshold = sellThreshold;
            this.SellTransactionCodeId = sellTransactionCodeId;
            this.TenantId = tenantId;
            this.UseCashAvailable = useCashAvailable;
            this.UseStrategic = useStrategic;
        }
        
        /// <summary>
        /// buyThreshold
        /// </summary>
        /// <value>buyThreshold</value>
        [DataMember(Name="buy_threshold", EmitDefaultValue=false)]
        public double? BuyThreshold { get; set; }

        /// <summary>
        /// buyTransactionCodeId
        /// </summary>
        /// <value>buyTransactionCodeId</value>
        [DataMember(Name="buy_transaction_code_id", EmitDefaultValue=false)]
        public Guid? BuyTransactionCodeId { get; set; }

        /// <summary>
        /// cashPortfolioId
        /// </summary>
        /// <value>cashPortfolioId</value>
        [DataMember(Name="cash_portfolio_id", EmitDefaultValue=false)]
        public Guid? CashPortfolioId { get; set; }

        /// <summary>
        /// cashSecId
        /// </summary>
        /// <value>cashSecId</value>
        [DataMember(Name="cash_sec_id", EmitDefaultValue=false)]
        public Guid? CashSecId { get; set; }

        /// <summary>
        /// clientId
        /// </summary>
        /// <value>clientId</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }

        /// <summary>
        /// commitOrders
        /// </summary>
        /// <value>commitOrders</value>
        [DataMember(Name="commit_orders", EmitDefaultValue=false)]
        public bool? CommitOrders { get; set; }

        /// <summary>
        /// nonFractional
        /// </summary>
        /// <value>nonFractional</value>
        [DataMember(Name="non_fractional", EmitDefaultValue=false)]
        public bool? NonFractional { get; set; }

        /// <summary>
        /// portThreshold
        /// </summary>
        /// <value>portThreshold</value>
        [DataMember(Name="port_threshold", EmitDefaultValue=false)]
        public double? PortThreshold { get; set; }

        /// <summary>
        /// restrictionsOn
        /// </summary>
        /// <value>restrictionsOn</value>
        [DataMember(Name="restrictions_on", EmitDefaultValue=false)]
        public bool? RestrictionsOn { get; set; }

        /// <summary>
        /// sellThreshold
        /// </summary>
        /// <value>sellThreshold</value>
        [DataMember(Name="sell_threshold", EmitDefaultValue=false)]
        public double? SellThreshold { get; set; }

        /// <summary>
        /// sellTransactionCodeId
        /// </summary>
        /// <value>sellTransactionCodeId</value>
        [DataMember(Name="sell_transaction_code_id", EmitDefaultValue=false)]
        public Guid? SellTransactionCodeId { get; set; }

        /// <summary>
        /// tenantId
        /// </summary>
        /// <value>tenantId</value>
        [DataMember(Name="tenant_id", EmitDefaultValue=false)]
        public Guid? TenantId { get; set; }

        /// <summary>
        /// useCashAvailable
        /// </summary>
        /// <value>useCashAvailable</value>
        [DataMember(Name="use_cash_available", EmitDefaultValue=false)]
        public bool? UseCashAvailable { get; set; }

        /// <summary>
        /// useStrategic
        /// </summary>
        /// <value>useStrategic</value>
        [DataMember(Name="use_strategic", EmitDefaultValue=false)]
        public bool? UseStrategic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountPortfolioRebalanceRequest {\n");
            sb.Append("  BuyThreshold: ").Append(BuyThreshold).Append("\n");
            sb.Append("  BuyTransactionCodeId: ").Append(BuyTransactionCodeId).Append("\n");
            sb.Append("  CashPortfolioId: ").Append(CashPortfolioId).Append("\n");
            sb.Append("  CashSecId: ").Append(CashSecId).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  CommitOrders: ").Append(CommitOrders).Append("\n");
            sb.Append("  NonFractional: ").Append(NonFractional).Append("\n");
            sb.Append("  PortThreshold: ").Append(PortThreshold).Append("\n");
            sb.Append("  RestrictionsOn: ").Append(RestrictionsOn).Append("\n");
            sb.Append("  SellThreshold: ").Append(SellThreshold).Append("\n");
            sb.Append("  SellTransactionCodeId: ").Append(SellTransactionCodeId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  UseCashAvailable: ").Append(UseCashAvailable).Append("\n");
            sb.Append("  UseStrategic: ").Append(UseStrategic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountPortfolioRebalanceRequest);
        }

        /// <summary>
        /// Returns true if AccountPortfolioRebalanceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountPortfolioRebalanceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountPortfolioRebalanceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuyThreshold == input.BuyThreshold ||
                    (this.BuyThreshold != null &&
                    this.BuyThreshold.Equals(input.BuyThreshold))
                ) && 
                (
                    this.BuyTransactionCodeId == input.BuyTransactionCodeId ||
                    (this.BuyTransactionCodeId != null &&
                    this.BuyTransactionCodeId.Equals(input.BuyTransactionCodeId))
                ) && 
                (
                    this.CashPortfolioId == input.CashPortfolioId ||
                    (this.CashPortfolioId != null &&
                    this.CashPortfolioId.Equals(input.CashPortfolioId))
                ) && 
                (
                    this.CashSecId == input.CashSecId ||
                    (this.CashSecId != null &&
                    this.CashSecId.Equals(input.CashSecId))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.CommitOrders == input.CommitOrders ||
                    (this.CommitOrders != null &&
                    this.CommitOrders.Equals(input.CommitOrders))
                ) && 
                (
                    this.NonFractional == input.NonFractional ||
                    (this.NonFractional != null &&
                    this.NonFractional.Equals(input.NonFractional))
                ) && 
                (
                    this.PortThreshold == input.PortThreshold ||
                    (this.PortThreshold != null &&
                    this.PortThreshold.Equals(input.PortThreshold))
                ) && 
                (
                    this.RestrictionsOn == input.RestrictionsOn ||
                    (this.RestrictionsOn != null &&
                    this.RestrictionsOn.Equals(input.RestrictionsOn))
                ) && 
                (
                    this.SellThreshold == input.SellThreshold ||
                    (this.SellThreshold != null &&
                    this.SellThreshold.Equals(input.SellThreshold))
                ) && 
                (
                    this.SellTransactionCodeId == input.SellTransactionCodeId ||
                    (this.SellTransactionCodeId != null &&
                    this.SellTransactionCodeId.Equals(input.SellTransactionCodeId))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.UseCashAvailable == input.UseCashAvailable ||
                    (this.UseCashAvailable != null &&
                    this.UseCashAvailable.Equals(input.UseCashAvailable))
                ) && 
                (
                    this.UseStrategic == input.UseStrategic ||
                    (this.UseStrategic != null &&
                    this.UseStrategic.Equals(input.UseStrategic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyThreshold != null)
                    hashCode = hashCode * 59 + this.BuyThreshold.GetHashCode();
                if (this.BuyTransactionCodeId != null)
                    hashCode = hashCode * 59 + this.BuyTransactionCodeId.GetHashCode();
                if (this.CashPortfolioId != null)
                    hashCode = hashCode * 59 + this.CashPortfolioId.GetHashCode();
                if (this.CashSecId != null)
                    hashCode = hashCode * 59 + this.CashSecId.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.CommitOrders != null)
                    hashCode = hashCode * 59 + this.CommitOrders.GetHashCode();
                if (this.NonFractional != null)
                    hashCode = hashCode * 59 + this.NonFractional.GetHashCode();
                if (this.PortThreshold != null)
                    hashCode = hashCode * 59 + this.PortThreshold.GetHashCode();
                if (this.RestrictionsOn != null)
                    hashCode = hashCode * 59 + this.RestrictionsOn.GetHashCode();
                if (this.SellThreshold != null)
                    hashCode = hashCode * 59 + this.SellThreshold.GetHashCode();
                if (this.SellTransactionCodeId != null)
                    hashCode = hashCode * 59 + this.SellTransactionCodeId.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.UseCashAvailable != null)
                    hashCode = hashCode * 59 + this.UseCashAvailable.GetHashCode();
                if (this.UseStrategic != null)
                    hashCode = hashCode * 59 + this.UseStrategic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
