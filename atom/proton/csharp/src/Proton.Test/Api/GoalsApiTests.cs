/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Proton.Client;
using Proton.Api;

namespace Proton.Test
{
    /// <summary>
    ///  Class for testing GoalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GoalsApiTests
    {
        private GoalsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GoalsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GoalsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GoalsApi
            //Assert.IsInstanceOfType(typeof(GoalsApi), instance, "instance is a GoalsApi");
        }

        
        /// <summary>
        /// Test GoalAccumulationAllocation
        /// </summary>
        [Test]
        public void GoalAccumulationAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalAccumulationAllocationRequest goalAccumulationAllocationRequest = null;
            //var response = instance.GoalAccumulationAllocation(goalAccumulationAllocationRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GoalAccumulationRecommendation
        /// </summary>
        [Test]
        public void GoalAccumulationRecommendationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalAccumulationRecommendationRequest goalAccumulationRecommendationRequest = null;
            //var response = instance.GoalAccumulationRecommendation(goalAccumulationRecommendationRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GoalAccumulationStatus
        /// </summary>
        [Test]
        public void GoalAccumulationStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalAccumulationStatusRequest goalAccumulationStatusRequest = null;
            //var response = instance.GoalAccumulationStatus(goalAccumulationStatusRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GoalDecumulationAllocation
        /// </summary>
        [Test]
        public void GoalDecumulationAllocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalDecumulationAllocationRequest goalDecumulationAllocationRequest = null;
            //var response = instance.GoalDecumulationAllocation(goalDecumulationAllocationRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GoalDecumulationRecommendation
        /// </summary>
        [Test]
        public void GoalDecumulationRecommendationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalDecumulationRecommendationRequest goalDecumulationRecommendationRequest = null;
            //var response = instance.GoalDecumulationRecommendation(goalDecumulationRecommendationRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
        /// <summary>
        /// Test GoalDecumulationStatus
        /// </summary>
        [Test]
        public void GoalDecumulationStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GoalDecumulationStatusRequest goalDecumulationStatusRequest = null;
            //var response = instance.GoalDecumulationStatus(goalDecumulationStatusRequest);
            //Assert.IsInstanceOf<Dictionary<string, Object>> (response, "response is Dictionary<string, Object>");
        }
        
    }

}
