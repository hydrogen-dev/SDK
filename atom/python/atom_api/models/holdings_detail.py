# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HoldingsDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'tickers': 'list[str]',
        'weights': 'list[float]',
        'amount': 'list[float]'
    }

    attribute_map = {
        '_date': 'date',
        'tickers': 'tickers',
        'weights': 'weights',
        'amount': 'amount'
    }

    def __init__(self, _date=None, tickers=None, weights=None, amount=None):  # noqa: E501
        """HoldingsDetail - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._tickers = None
        self._weights = None
        self._amount = None
        self.discriminator = None

        self._date = _date
        self.tickers = tickers
        self.weights = weights
        self.amount = amount

    @property
    def _date(self):
        """Gets the _date of this HoldingsDetail.  # noqa: E501

        The date for the holding details.  # noqa: E501

        :return: The _date of this HoldingsDetail.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this HoldingsDetail.

        The date for the holding details.  # noqa: E501

        :param _date: The _date of this HoldingsDetail.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def tickers(self):
        """Gets the tickers of this HoldingsDetail.  # noqa: E501

        The tickers of the holdings.  # noqa: E501

        :return: The tickers of this HoldingsDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._tickers

    @tickers.setter
    def tickers(self, tickers):
        """Sets the tickers of this HoldingsDetail.

        The tickers of the holdings.  # noqa: E501

        :param tickers: The tickers of this HoldingsDetail.  # noqa: E501
        :type: list[str]
        """
        if tickers is None:
            raise ValueError("Invalid value for `tickers`, must not be `None`")  # noqa: E501

        self._tickers = tickers

    @property
    def weights(self):
        """Gets the weights of this HoldingsDetail.  # noqa: E501

        The weights of the holdings, represented on a percentage basis.  # noqa: E501

        :return: The weights of this HoldingsDetail.  # noqa: E501
        :rtype: list[float]
        """
        return self._weights

    @weights.setter
    def weights(self, weights):
        """Sets the weights of this HoldingsDetail.

        The weights of the holdings, represented on a percentage basis.  # noqa: E501

        :param weights: The weights of this HoldingsDetail.  # noqa: E501
        :type: list[float]
        """
        if weights is None:
            raise ValueError("Invalid value for `weights`, must not be `None`")  # noqa: E501

        self._weights = weights

    @property
    def amount(self):
        """Gets the amount of this HoldingsDetail.  # noqa: E501

        The total value for each security.  # noqa: E501

        :return: The amount of this HoldingsDetail.  # noqa: E501
        :rtype: list[float]
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this HoldingsDetail.

        The total value for each security.  # noqa: E501

        :param amount: The amount of this HoldingsDetail.  # noqa: E501
        :type: list[float]
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HoldingsDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HoldingsDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
