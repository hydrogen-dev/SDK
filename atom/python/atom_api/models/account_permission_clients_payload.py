# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountPermissionClientsPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'permission_type': 'str',
        'acl_exist': 'bool'
    }

    attribute_map = {
        'client_id': 'client_id',
        'permission_type': 'permission_type',
        'acl_exist': 'acl_exist'
    }

    def __init__(self, client_id=None, permission_type=None, acl_exist=None):  # noqa: E501
        """AccountPermissionClientsPayload - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._permission_type = None
        self._acl_exist = None
        self.discriminator = None

        self.client_id = client_id
        self.permission_type = permission_type
        if acl_exist is not None:
            self.acl_exist = acl_exist

    @property
    def client_id(self):
        """Gets the client_id of this AccountPermissionClientsPayload.  # noqa: E501

        The id of the client being granted permissions to the account. Must also be included in the clients.client_id field of the account  # noqa: E501

        :return: The client_id of this AccountPermissionClientsPayload.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AccountPermissionClientsPayload.

        The id of the client being granted permissions to the account. Must also be included in the clients.client_id field of the account  # noqa: E501

        :param client_id: The client_id of this AccountPermissionClientsPayload.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def permission_type(self):
        """Gets the permission_type of this AccountPermissionClientsPayload.  # noqa: E501

        The permission type for the client. Available values are INQUIRY_ACCESS, LIMTIED_AUTHORITY, FULL_AUTHORITY, and POWER_OF_ATTORNEY.  # noqa: E501

        :return: The permission_type of this AccountPermissionClientsPayload.  # noqa: E501
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this AccountPermissionClientsPayload.

        The permission type for the client. Available values are INQUIRY_ACCESS, LIMTIED_AUTHORITY, FULL_AUTHORITY, and POWER_OF_ATTORNEY.  # noqa: E501

        :param permission_type: The permission_type of this AccountPermissionClientsPayload.  # noqa: E501
        :type: str
        """
        if permission_type is None:
            raise ValueError("Invalid value for `permission_type`, must not be `None`")  # noqa: E501
        allowed_values = ["INQUIRY_ACCESS", "LIMTIED_AUTHORITY", "FULL_AUTHORITY", "POWER_OF_ATTORNEY"]  # noqa: E501
        if permission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_type` ({0}), must be one of {1}"  # noqa: E501
                .format(permission_type, allowed_values)
            )

        self._permission_type = permission_type

    @property
    def acl_exist(self):
        """Gets the acl_exist of this AccountPermissionClientsPayload.  # noqa: E501

        Indicator used for existing clients mapped to an account (upon implementation) in the database to indicate if permissioning has been applied for them. true indicates it has. After implementation of data access controls, this field would no longer be necessary  # noqa: E501

        :return: The acl_exist of this AccountPermissionClientsPayload.  # noqa: E501
        :rtype: bool
        """
        return self._acl_exist

    @acl_exist.setter
    def acl_exist(self, acl_exist):
        """Sets the acl_exist of this AccountPermissionClientsPayload.

        Indicator used for existing clients mapped to an account (upon implementation) in the database to indicate if permissioning has been applied for them. true indicates it has. After implementation of data access controls, this field would no longer be necessary  # noqa: E501

        :param acl_exist: The acl_exist of this AccountPermissionClientsPayload.  # noqa: E501
        :type: bool
        """

        self._acl_exist = acl_exist

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountPermissionClientsPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountPermissionClientsPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
