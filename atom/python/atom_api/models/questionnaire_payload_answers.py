# coding: utf-8

"""
    Hydrogen Atom API

    The Hydrogen Atom API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: info@hydrogenplatform.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuestionnairePayloadAnswers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'str',
        'order_index': 'str',
        'label': 'str',
        'image': 'str',
        'weight': 'float',
        'metadata': 'object'
    }

    attribute_map = {
        'value': 'value',
        'order_index': 'order_index',
        'label': 'label',
        'image': 'image',
        'weight': 'weight',
        'metadata': 'metadata'
    }

    def __init__(self, value=None, order_index=None, label=None, image=None, weight=None, metadata=None):  # noqa: E501
        """QuestionnairePayloadAnswers - a model defined in Swagger"""  # noqa: E501

        self._value = None
        self._order_index = None
        self._label = None
        self._image = None
        self._weight = None
        self._metadata = None
        self.discriminator = None

        self.value = value
        if order_index is not None:
            self.order_index = order_index
        if label is not None:
            self.label = label
        if image is not None:
            self.image = image
        if weight is not None:
            self.weight = weight
        if metadata is not None:
            self.metadata = metadata

    @property
    def value(self):
        """Gets the value of this QuestionnairePayloadAnswers.  # noqa: E501

        Value for the answer option  # noqa: E501

        :return: The value of this QuestionnairePayloadAnswers.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this QuestionnairePayloadAnswers.

        Value for the answer option  # noqa: E501

        :param value: The value of this QuestionnairePayloadAnswers.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def order_index(self):
        """Gets the order_index of this QuestionnairePayloadAnswers.  # noqa: E501

        The order of the answer option within the question or category such as “1”, “2”, “3”  # noqa: E501

        :return: The order_index of this QuestionnairePayloadAnswers.  # noqa: E501
        :rtype: str
        """
        return self._order_index

    @order_index.setter
    def order_index(self, order_index):
        """Sets the order_index of this QuestionnairePayloadAnswers.

        The order of the answer option within the question or category such as “1”, “2”, “3”  # noqa: E501

        :param order_index: The order_index of this QuestionnairePayloadAnswers.  # noqa: E501
        :type: str
        """

        self._order_index = order_index

    @property
    def label(self):
        """Gets the label of this QuestionnairePayloadAnswers.  # noqa: E501

        A label to be assigned to the answer option for data labeling purposes  # noqa: E501

        :return: The label of this QuestionnairePayloadAnswers.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this QuestionnairePayloadAnswers.

        A label to be assigned to the answer option for data labeling purposes  # noqa: E501

        :param label: The label of this QuestionnairePayloadAnswers.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def image(self):
        """Gets the image of this QuestionnairePayloadAnswers.  # noqa: E501

        A reference link to an image associated with the answer option  # noqa: E501

        :return: The image of this QuestionnairePayloadAnswers.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this QuestionnairePayloadAnswers.

        A reference link to an image associated with the answer option  # noqa: E501

        :param image: The image of this QuestionnairePayloadAnswers.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def weight(self):
        """Gets the weight of this QuestionnairePayloadAnswers.  # noqa: E501

        The weight of the answer option as a percentage of the total questionnaire score if each answer does not contribute equally when calculating the final “score”; ex. 20 representing 20%. Weights of all the answers for a question must add up to 100  # noqa: E501

        :return: The weight of this QuestionnairePayloadAnswers.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this QuestionnairePayloadAnswers.

        The weight of the answer option as a percentage of the total questionnaire score if each answer does not contribute equally when calculating the final “score”; ex. 20 representing 20%. Weights of all the answers for a question must add up to 100  # noqa: E501

        :param weight: The weight of this QuestionnairePayloadAnswers.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def metadata(self):
        """Gets the metadata of this QuestionnairePayloadAnswers.  # noqa: E501

        Custom information associated with the answer option in the format key:value  # noqa: E501

        :return: The metadata of this QuestionnairePayloadAnswers.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this QuestionnairePayloadAnswers.

        Custom information associated with the answer option in the format key:value  # noqa: E501

        :param metadata: The metadata of this QuestionnairePayloadAnswers.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionnairePayloadAnswers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionnairePayloadAnswers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
