/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a bulk fxRate
        /// </summary>
        /// <remarks>
        /// Create a bulk fxRate.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>List&lt;FxRate&gt;</returns>
        List<FxRate> CreateFxRateBulkUsingPost (List<FxRate> fxRateList);

        /// <summary>
        /// Create a bulk fxRate
        /// </summary>
        /// <remarks>
        /// Create a bulk fxRate.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>ApiResponse of List&lt;FxRate&gt;</returns>
        ApiResponse<List<FxRate>> CreateFxRateBulkUsingPostWithHttpInfo (List<FxRate> fxRateList);
        /// <summary>
        /// Create a institution
        /// </summary>
        /// <remarks>
        /// Create a new institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>Institution</returns>
        Institution CreateInstitutionUsingPost (Institution institution);

        /// <summary>
        /// Create a institution
        /// </summary>
        /// <remarks>
        /// Create a new institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>ApiResponse of Institution</returns>
        ApiResponse<Institution> CreateInstitutionUsingPostWithHttpInfo (Institution institution);
        /// <summary>
        /// Delete a institution
        /// </summary>
        /// <remarks>
        /// Delete a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns></returns>
        void DeleteInstitutionUsingDelete (Guid? institutionId);

        /// <summary>
        /// Delete a institution
        /// </summary>
        /// <remarks>
        /// Delete a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteInstitutionUsingDeleteWithHttpInfo (Guid? institutionId);
        /// <summary>
        /// Get all account category mapping
        /// </summary>
        /// <remarks>
        /// Get all account category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetAccountResultForMapping (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);

        /// <summary>
        /// Get all account category mapping
        /// </summary>
        /// <remarks>
        /// Get all account category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetAccountResultForMappingWithHttpInfo (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);
        /// <summary>
        /// Get All Countries
        /// </summary>
        /// <remarks>
        /// Get All Countries. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Country&gt;</returns>
        List<Country> GetAllCountryUsingGet ();

        /// <summary>
        /// Get All Countries
        /// </summary>
        /// <remarks>
        /// Get All Countries. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        ApiResponse<List<Country>> GetAllCountryUsingGetWithHttpInfo ();
        /// <summary>
        /// Get All Currencies
        /// </summary>
        /// <remarks>
        /// Get All Currencies. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        List<Currency> GetAllCurrencyUsingGet ();

        /// <summary>
        /// Get All Currencies
        /// </summary>
        /// <remarks>
        /// Get All Currencies. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        ApiResponse<List<Currency>> GetAllCurrencyUsingGetWithHttpInfo ();
        /// <summary>
        /// Get All Merchant Category Codes
        /// </summary>
        /// <remarks>
        /// Get All Merchant Category Codes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>List&lt;MerchantCategoryCode&gt;</returns>
        List<MerchantCategoryCode> GetAllMerchantCategoryCodeUsingGet (string filter = null);

        /// <summary>
        /// Get All Merchant Category Codes
        /// </summary>
        /// <remarks>
        /// Get All Merchant Category Codes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>ApiResponse of List&lt;MerchantCategoryCode&gt;</returns>
        ApiResponse<List<MerchantCategoryCode>> GetAllMerchantCategoryCodeUsingGetWithHttpInfo (string filter = null);
        /// <summary>
        /// List all state resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible state resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>List&lt;State&gt;</returns>
        List<State> GetAllStatesUsingGet (string countryCode = null);

        /// <summary>
        /// List all state resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible state resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>ApiResponse of List&lt;State&gt;</returns>
        ApiResponse<List<State>> GetAllStatesUsingGetWithHttpInfo (string countryCode = null);
        /// <summary>
        /// List all statistic resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible statistic resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;</returns>
        Dictionary<string, List<StatisticResourceVO>> GetAllStatisticsUsingGet ();

        /// <summary>
        /// List all statistic resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible statistic resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<StatisticResourceVO>>> GetAllStatisticsUsingGetWithHttpInfo ();
        /// <summary>
        /// List all fxRates
        /// </summary>
        /// <remarks>
        /// Get information for all fxRates defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>List&lt;FxRateView&gt;</returns>
        List<FxRateView> GetCurrencyExchangeRateAllUsingGet (string filter = null);

        /// <summary>
        /// List all fxRates
        /// </summary>
        /// <remarks>
        /// Get information for all fxRates defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FxRateView&gt;</returns>
        ApiResponse<List<FxRateView>> GetCurrencyExchangeRateAllUsingGetWithHttpInfo (string filter = null);
        /// <summary>
        /// List all institutions
        /// </summary>
        /// <remarks>
        /// List all institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageInstitution</returns>
        PageInstitution GetInstitutionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all institutions
        /// </summary>
        /// <remarks>
        /// List all institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageInstitution</returns>
        ApiResponse<PageInstitution> GetInstitutionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a institution
        /// </summary>
        /// <remarks>
        /// Retrieve a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Institution</returns>
        Institution GetInstitutionUsingGet (Guid? institutionId);

        /// <summary>
        /// Retrieve a institution
        /// </summary>
        /// <remarks>
        /// Retrieve a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>ApiResponse of Institution</returns>
        ApiResponse<Institution> GetInstitutionUsingGetWithHttpInfo (Guid? institutionId);
        /// <summary>
        /// Get all merchants
        /// </summary>
        /// <remarks>
        /// List all merchants.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>MXMerchantRes</returns>
        MXMerchantRes GetMerchantsAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// Get all merchants
        /// </summary>
        /// <remarks>
        /// List all merchants.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of MXMerchantRes</returns>
        ApiResponse<MXMerchantRes> GetMerchantsAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Get all transaction category mapping
        /// </summary>
        /// <remarks>
        /// Get all transaction category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> GetTransactionResultForMapping (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);

        /// <summary>
        /// Get all transaction category mapping
        /// </summary>
        /// <remarks>
        /// Get all transaction category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> GetTransactionResultForMappingWithHttpInfo (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);
        /// <summary>
        /// Update a institution
        /// </summary>
        /// <remarks>
        /// Update a institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Institution</returns>
        Institution UpdateInstitutionUsingPut (Object institution, Guid? institutionId);

        /// <summary>
        /// Update a institution
        /// </summary>
        /// <remarks>
        /// Update a institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>ApiResponse of Institution</returns>
        ApiResponse<Institution> UpdateInstitutionUsingPutWithHttpInfo (Object institution, Guid? institutionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a bulk fxRate
        /// </summary>
        /// <remarks>
        /// Create a bulk fxRate.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>Task of List&lt;FxRate&gt;</returns>
        System.Threading.Tasks.Task<List<FxRate>> CreateFxRateBulkUsingPostAsync (List<FxRate> fxRateList);

        /// <summary>
        /// Create a bulk fxRate
        /// </summary>
        /// <remarks>
        /// Create a bulk fxRate.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>Task of ApiResponse (List&lt;FxRate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FxRate>>> CreateFxRateBulkUsingPostAsyncWithHttpInfo (List<FxRate> fxRateList);
        /// <summary>
        /// Create a institution
        /// </summary>
        /// <remarks>
        /// Create a new institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>Task of Institution</returns>
        System.Threading.Tasks.Task<Institution> CreateInstitutionUsingPostAsync (Institution institution);

        /// <summary>
        /// Create a institution
        /// </summary>
        /// <remarks>
        /// Create a new institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        System.Threading.Tasks.Task<ApiResponse<Institution>> CreateInstitutionUsingPostAsyncWithHttpInfo (Institution institution);
        /// <summary>
        /// Delete a institution
        /// </summary>
        /// <remarks>
        /// Delete a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteInstitutionUsingDeleteAsync (Guid? institutionId);

        /// <summary>
        /// Delete a institution
        /// </summary>
        /// <remarks>
        /// Delete a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstitutionUsingDeleteAsyncWithHttpInfo (Guid? institutionId);
        /// <summary>
        /// Get all account category mapping
        /// </summary>
        /// <remarks>
        /// Get all account category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetAccountResultForMappingAsync (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);

        /// <summary>
        /// Get all account category mapping
        /// </summary>
        /// <remarks>
        /// Get all account category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetAccountResultForMappingAsyncWithHttpInfo (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);
        /// <summary>
        /// Get All Countries
        /// </summary>
        /// <remarks>
        /// Get All Countries. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Country&gt;</returns>
        System.Threading.Tasks.Task<List<Country>> GetAllCountryUsingGetAsync ();

        /// <summary>
        /// Get All Countries
        /// </summary>
        /// <remarks>
        /// Get All Countries. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Country>>> GetAllCountryUsingGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get All Currencies
        /// </summary>
        /// <remarks>
        /// Get All Currencies. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        System.Threading.Tasks.Task<List<Currency>> GetAllCurrencyUsingGetAsync ();

        /// <summary>
        /// Get All Currencies
        /// </summary>
        /// <remarks>
        /// Get All Currencies. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Currency>>> GetAllCurrencyUsingGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get All Merchant Category Codes
        /// </summary>
        /// <remarks>
        /// Get All Merchant Category Codes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of List&lt;MerchantCategoryCode&gt;</returns>
        System.Threading.Tasks.Task<List<MerchantCategoryCode>> GetAllMerchantCategoryCodeUsingGetAsync (string filter = null);

        /// <summary>
        /// Get All Merchant Category Codes
        /// </summary>
        /// <remarks>
        /// Get All Merchant Category Codes.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MerchantCategoryCode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MerchantCategoryCode>>> GetAllMerchantCategoryCodeUsingGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// List all state resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible state resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>Task of List&lt;State&gt;</returns>
        System.Threading.Tasks.Task<List<State>> GetAllStatesUsingGetAsync (string countryCode = null);

        /// <summary>
        /// List all state resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible state resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>Task of ApiResponse (List&lt;State&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<State>>> GetAllStatesUsingGetAsyncWithHttpInfo (string countryCode = null);
        /// <summary>
        /// List all statistic resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible statistic resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<StatisticResourceVO>>> GetAllStatisticsUsingGetAsync ();

        /// <summary>
        /// List all statistic resource
        /// </summary>
        /// <remarks>
        /// Get the information for all possible statistic resource.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<StatisticResourceVO>>>> GetAllStatisticsUsingGetAsyncWithHttpInfo ();
        /// <summary>
        /// List all fxRates
        /// </summary>
        /// <remarks>
        /// Get information for all fxRates defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of List&lt;FxRateView&gt;</returns>
        System.Threading.Tasks.Task<List<FxRateView>> GetCurrencyExchangeRateAllUsingGetAsync (string filter = null);

        /// <summary>
        /// List all fxRates
        /// </summary>
        /// <remarks>
        /// Get information for all fxRates defined for your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FxRateView&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FxRateView>>> GetCurrencyExchangeRateAllUsingGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// List all institutions
        /// </summary>
        /// <remarks>
        /// List all institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageInstitution</returns>
        System.Threading.Tasks.Task<PageInstitution> GetInstitutionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all institutions
        /// </summary>
        /// <remarks>
        /// List all institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageInstitution)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageInstitution>> GetInstitutionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a institution
        /// </summary>
        /// <remarks>
        /// Retrieve a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of Institution</returns>
        System.Threading.Tasks.Task<Institution> GetInstitutionUsingGetAsync (Guid? institutionId);

        /// <summary>
        /// Retrieve a institution
        /// </summary>
        /// <remarks>
        /// Retrieve a institution. 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        System.Threading.Tasks.Task<ApiResponse<Institution>> GetInstitutionUsingGetAsyncWithHttpInfo (Guid? institutionId);
        /// <summary>
        /// Get all merchants
        /// </summary>
        /// <remarks>
        /// List all merchants.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of MXMerchantRes</returns>
        System.Threading.Tasks.Task<MXMerchantRes> GetMerchantsAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// Get all merchants
        /// </summary>
        /// <remarks>
        /// List all merchants.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (MXMerchantRes)</returns>
        System.Threading.Tasks.Task<ApiResponse<MXMerchantRes>> GetMerchantsAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Get all transaction category mapping
        /// </summary>
        /// <remarks>
        /// Get all transaction category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> GetTransactionResultForMappingAsync (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);

        /// <summary>
        /// Get all transaction category mapping
        /// </summary>
        /// <remarks>
        /// Get all transaction category mapping
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetTransactionResultForMappingAsyncWithHttpInfo (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null);
        /// <summary>
        /// Update a institution
        /// </summary>
        /// <remarks>
        /// Update a institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of Institution</returns>
        System.Threading.Tasks.Task<Institution> UpdateInstitutionUsingPutAsync (Object institution, Guid? institutionId);

        /// <summary>
        /// Update a institution
        /// </summary>
        /// <remarks>
        /// Update a institution.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        System.Threading.Tasks.Task<ApiResponse<Institution>> UpdateInstitutionUsingPutAsyncWithHttpInfo (Object institution, Guid? institutionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResourceApi : IResourceApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourceApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResourceApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a bulk fxRate Create a bulk fxRate.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>List&lt;FxRate&gt;</returns>
        public List<FxRate> CreateFxRateBulkUsingPost (List<FxRate> fxRateList)
        {
             ApiResponse<List<FxRate>> localVarResponse = CreateFxRateBulkUsingPostWithHttpInfo(fxRateList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bulk fxRate Create a bulk fxRate.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>ApiResponse of List&lt;FxRate&gt;</returns>
        public ApiResponse< List<FxRate> > CreateFxRateBulkUsingPostWithHttpInfo (List<FxRate> fxRateList)
        {
            // verify the required parameter 'fxRateList' is set
            if (fxRateList == null)
                throw new ApiException(400, "Missing required parameter 'fxRateList' when calling ResourceApi->CreateFxRateBulkUsingPost");

            var localVarPath = "/nucleus/v1/resource/fx_rate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fxRateList != null && fxRateList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fxRateList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fxRateList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFxRateBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FxRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FxRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FxRate>)));
        }

        /// <summary>
        /// Create a bulk fxRate Create a bulk fxRate.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>Task of List&lt;FxRate&gt;</returns>
        public async System.Threading.Tasks.Task<List<FxRate>> CreateFxRateBulkUsingPostAsync (List<FxRate> fxRateList)
        {
             ApiResponse<List<FxRate>> localVarResponse = await CreateFxRateBulkUsingPostAsyncWithHttpInfo(fxRateList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bulk fxRate Create a bulk fxRate.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fxRateList">fxRateList</param>
        /// <returns>Task of ApiResponse (List&lt;FxRate&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FxRate>>> CreateFxRateBulkUsingPostAsyncWithHttpInfo (List<FxRate> fxRateList)
        {
            // verify the required parameter 'fxRateList' is set
            if (fxRateList == null)
                throw new ApiException(400, "Missing required parameter 'fxRateList' when calling ResourceApi->CreateFxRateBulkUsingPost");

            var localVarPath = "/nucleus/v1/resource/fx_rate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fxRateList != null && fxRateList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(fxRateList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = fxRateList; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFxRateBulkUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FxRate>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FxRate>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FxRate>)));
        }

        /// <summary>
        /// Create a institution Create a new institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>Institution</returns>
        public Institution CreateInstitutionUsingPost (Institution institution)
        {
             ApiResponse<Institution> localVarResponse = CreateInstitutionUsingPostWithHttpInfo(institution);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a institution Create a new institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>ApiResponse of Institution</returns>
        public ApiResponse< Institution > CreateInstitutionUsingPostWithHttpInfo (Institution institution)
        {
            // verify the required parameter 'institution' is set
            if (institution == null)
                throw new ApiException(400, "Missing required parameter 'institution' when calling ResourceApi->CreateInstitutionUsingPost");

            var localVarPath = "/nucleus/v1/resource/institution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institution != null && institution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(institution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = institution; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInstitutionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Institution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Institution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Institution)));
        }

        /// <summary>
        /// Create a institution Create a new institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>Task of Institution</returns>
        public async System.Threading.Tasks.Task<Institution> CreateInstitutionUsingPostAsync (Institution institution)
        {
             ApiResponse<Institution> localVarResponse = await CreateInstitutionUsingPostAsyncWithHttpInfo(institution);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a institution Create a new institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Institution>> CreateInstitutionUsingPostAsyncWithHttpInfo (Institution institution)
        {
            // verify the required parameter 'institution' is set
            if (institution == null)
                throw new ApiException(400, "Missing required parameter 'institution' when calling ResourceApi->CreateInstitutionUsingPost");

            var localVarPath = "/nucleus/v1/resource/institution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institution != null && institution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(institution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = institution; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateInstitutionUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Institution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Institution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Institution)));
        }

        /// <summary>
        /// Delete a institution Delete a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns></returns>
        public void DeleteInstitutionUsingDelete (Guid? institutionId)
        {
             DeleteInstitutionUsingDeleteWithHttpInfo(institutionId);
        }

        /// <summary>
        /// Delete a institution Delete a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteInstitutionUsingDeleteWithHttpInfo (Guid? institutionId)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400, "Missing required parameter 'institutionId' when calling ResourceApi->DeleteInstitutionUsingDelete");

            var localVarPath = "/nucleus/v1/resource/institution/{institution_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institutionId != null) localVarPathParams.Add("institution_id", this.Configuration.ApiClient.ParameterToString(institutionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstitutionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a institution Delete a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteInstitutionUsingDeleteAsync (Guid? institutionId)
        {
             await DeleteInstitutionUsingDeleteAsyncWithHttpInfo(institutionId);

        }

        /// <summary>
        /// Delete a institution Delete a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteInstitutionUsingDeleteAsyncWithHttpInfo (Guid? institutionId)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400, "Missing required parameter 'institutionId' when calling ResourceApi->DeleteInstitutionUsingDelete");

            var localVarPath = "/nucleus/v1/resource/institution/{institution_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institutionId != null) localVarPathParams.Add("institution_id", this.Configuration.ApiClient.ParameterToString(institutionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteInstitutionUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all account category mapping Get all account category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetAccountResultForMapping (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetAccountResultForMappingWithHttpInfo(filter, hydrogenAccountCategoryId, matchPrimary, tenantName, vendorName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all account category mapping Get all account category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetAccountResultForMappingWithHttpInfo (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {

            var localVarPath = "/nucleus/v1/resource/account_category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (hydrogenAccountCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hydrogen_account_category_id", hydrogenAccountCategoryId)); // query parameter
            if (matchPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_primary", matchPrimary)); // query parameter
            if (tenantName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_name", tenantName)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountResultForMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get all account category mapping Get all account category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetAccountResultForMappingAsync (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetAccountResultForMappingAsyncWithHttpInfo(filter, hydrogenAccountCategoryId, matchPrimary, tenantName, vendorName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all account category mapping Get all account category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenAccountCategoryId">hydrogen_account_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetAccountResultForMappingAsyncWithHttpInfo (string filter = null, Guid? hydrogenAccountCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {

            var localVarPath = "/nucleus/v1/resource/account_category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (hydrogenAccountCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hydrogen_account_category_id", hydrogenAccountCategoryId)); // query parameter
            if (matchPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_primary", matchPrimary)); // query parameter
            if (tenantName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_name", tenantName)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountResultForMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get All Countries Get All Countries. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Country&gt;</returns>
        public List<Country> GetAllCountryUsingGet ()
        {
             ApiResponse<List<Country>> localVarResponse = GetAllCountryUsingGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Countries Get All Countries. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Country&gt;</returns>
        public ApiResponse< List<Country> > GetAllCountryUsingGetWithHttpInfo ()
        {

            var localVarPath = "/nucleus/v1/resource/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCountryUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Country>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Country>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Country>)));
        }

        /// <summary>
        /// Get All Countries Get All Countries. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Country&gt;</returns>
        public async System.Threading.Tasks.Task<List<Country>> GetAllCountryUsingGetAsync ()
        {
             ApiResponse<List<Country>> localVarResponse = await GetAllCountryUsingGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Countries Get All Countries. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Country&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Country>>> GetAllCountryUsingGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/nucleus/v1/resource/country";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCountryUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Country>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Country>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Country>)));
        }

        /// <summary>
        /// Get All Currencies Get All Currencies. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Currency&gt;</returns>
        public List<Currency> GetAllCurrencyUsingGet ()
        {
             ApiResponse<List<Currency>> localVarResponse = GetAllCurrencyUsingGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Currencies Get All Currencies. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Currency&gt;</returns>
        public ApiResponse< List<Currency> > GetAllCurrencyUsingGetWithHttpInfo ()
        {

            var localVarPath = "/nucleus/v1/resource/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCurrencyUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        /// Get All Currencies Get All Currencies. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Currency&gt;</returns>
        public async System.Threading.Tasks.Task<List<Currency>> GetAllCurrencyUsingGetAsync ()
        {
             ApiResponse<List<Currency>> localVarResponse = await GetAllCurrencyUsingGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Currencies Get All Currencies. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Currency&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Currency>>> GetAllCurrencyUsingGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/nucleus/v1/resource/currency";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCurrencyUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Currency>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Currency>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Currency>)));
        }

        /// <summary>
        /// Get All Merchant Category Codes Get All Merchant Category Codes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>List&lt;MerchantCategoryCode&gt;</returns>
        public List<MerchantCategoryCode> GetAllMerchantCategoryCodeUsingGet (string filter = null)
        {
             ApiResponse<List<MerchantCategoryCode>> localVarResponse = GetAllMerchantCategoryCodeUsingGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Merchant Category Codes Get All Merchant Category Codes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>ApiResponse of List&lt;MerchantCategoryCode&gt;</returns>
        public ApiResponse< List<MerchantCategoryCode> > GetAllMerchantCategoryCodeUsingGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/nucleus/v1/resource/merchant_category_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMerchantCategoryCodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MerchantCategoryCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MerchantCategoryCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MerchantCategoryCode>)));
        }

        /// <summary>
        /// Get All Merchant Category Codes Get All Merchant Category Codes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of List&lt;MerchantCategoryCode&gt;</returns>
        public async System.Threading.Tasks.Task<List<MerchantCategoryCode>> GetAllMerchantCategoryCodeUsingGetAsync (string filter = null)
        {
             ApiResponse<List<MerchantCategoryCode>> localVarResponse = await GetAllMerchantCategoryCodeUsingGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Merchant Category Codes Get All Merchant Category Codes.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;MerchantCategoryCode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MerchantCategoryCode>>> GetAllMerchantCategoryCodeUsingGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/nucleus/v1/resource/merchant_category_code";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllMerchantCategoryCodeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MerchantCategoryCode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MerchantCategoryCode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MerchantCategoryCode>)));
        }

        /// <summary>
        /// List all state resource Get the information for all possible state resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>List&lt;State&gt;</returns>
        public List<State> GetAllStatesUsingGet (string countryCode = null)
        {
             ApiResponse<List<State>> localVarResponse = GetAllStatesUsingGetWithHttpInfo(countryCode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all state resource Get the information for all possible state resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>ApiResponse of List&lt;State&gt;</returns>
        public ApiResponse< List<State> > GetAllStatesUsingGetWithHttpInfo (string countryCode = null)
        {

            var localVarPath = "/nucleus/v1/resource/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country_code", countryCode)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllStatesUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<State>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<State>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<State>)));
        }

        /// <summary>
        /// List all state resource Get the information for all possible state resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>Task of List&lt;State&gt;</returns>
        public async System.Threading.Tasks.Task<List<State>> GetAllStatesUsingGetAsync (string countryCode = null)
        {
             ApiResponse<List<State>> localVarResponse = await GetAllStatesUsingGetAsyncWithHttpInfo(countryCode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all state resource Get the information for all possible state resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code (optional, default to US)</param>
        /// <returns>Task of ApiResponse (List&lt;State&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<State>>> GetAllStatesUsingGetAsyncWithHttpInfo (string countryCode = null)
        {

            var localVarPath = "/nucleus/v1/resource/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country_code", countryCode)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllStatesUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<State>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<State>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<State>)));
        }

        /// <summary>
        /// List all statistic resource Get the information for all possible statistic resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;</returns>
        public Dictionary<string, List<StatisticResourceVO>> GetAllStatisticsUsingGet ()
        {
             ApiResponse<Dictionary<string, List<StatisticResourceVO>>> localVarResponse = GetAllStatisticsUsingGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all statistic resource Get the information for all possible statistic resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;</returns>
        public ApiResponse< Dictionary<string, List<StatisticResourceVO>> > GetAllStatisticsUsingGetWithHttpInfo ()
        {

            var localVarPath = "/nucleus/v1/resource/statistic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllStatisticsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<StatisticResourceVO>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, List<StatisticResourceVO>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<StatisticResourceVO>>)));
        }

        /// <summary>
        /// List all statistic resource Get the information for all possible statistic resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<StatisticResourceVO>>> GetAllStatisticsUsingGetAsync ()
        {
             ApiResponse<Dictionary<string, List<StatisticResourceVO>>> localVarResponse = await GetAllStatisticsUsingGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all statistic resource Get the information for all possible statistic resource.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;StatisticResourceVO&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<StatisticResourceVO>>>> GetAllStatisticsUsingGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/nucleus/v1/resource/statistic";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllStatisticsUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, List<StatisticResourceVO>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, List<StatisticResourceVO>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, List<StatisticResourceVO>>)));
        }

        /// <summary>
        /// List all fxRates Get information for all fxRates defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>List&lt;FxRateView&gt;</returns>
        public List<FxRateView> GetCurrencyExchangeRateAllUsingGet (string filter = null)
        {
             ApiResponse<List<FxRateView>> localVarResponse = GetCurrencyExchangeRateAllUsingGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all fxRates Get information for all fxRates defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>ApiResponse of List&lt;FxRateView&gt;</returns>
        public ApiResponse< List<FxRateView> > GetCurrencyExchangeRateAllUsingGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "/nucleus/v1/resource/fx_rate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencyExchangeRateAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FxRateView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FxRateView>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FxRateView>)));
        }

        /// <summary>
        /// List all fxRates Get information for all fxRates defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of List&lt;FxRateView&gt;</returns>
        public async System.Threading.Tasks.Task<List<FxRateView>> GetCurrencyExchangeRateAllUsingGetAsync (string filter = null)
        {
             ApiResponse<List<FxRateView>> localVarResponse = await GetCurrencyExchangeRateAllUsingGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all fxRates Get information for all fxRates defined for your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;FxRateView&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FxRateView>>> GetCurrencyExchangeRateAllUsingGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "/nucleus/v1/resource/fx_rate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrencyExchangeRateAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FxRateView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FxRateView>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FxRateView>)));
        }

        /// <summary>
        /// List all institutions List all institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageInstitution</returns>
        public PageInstitution GetInstitutionAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageInstitution> localVarResponse = GetInstitutionAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all institutions List all institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageInstitution</returns>
        public ApiResponse< PageInstitution > GetInstitutionAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/resource/institution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstitutionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageInstitution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageInstitution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInstitution)));
        }

        /// <summary>
        /// List all institutions List all institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageInstitution</returns>
        public async System.Threading.Tasks.Task<PageInstitution> GetInstitutionAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageInstitution> localVarResponse = await GetInstitutionAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all institutions List all institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageInstitution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageInstitution>> GetInstitutionAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/resource/institution";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstitutionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageInstitution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageInstitution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInstitution)));
        }

        /// <summary>
        /// Retrieve a institution Retrieve a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Institution</returns>
        public Institution GetInstitutionUsingGet (Guid? institutionId)
        {
             ApiResponse<Institution> localVarResponse = GetInstitutionUsingGetWithHttpInfo(institutionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a institution Retrieve a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>ApiResponse of Institution</returns>
        public ApiResponse< Institution > GetInstitutionUsingGetWithHttpInfo (Guid? institutionId)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400, "Missing required parameter 'institutionId' when calling ResourceApi->GetInstitutionUsingGet");

            var localVarPath = "/nucleus/v1/resource/institution/{institution_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institutionId != null) localVarPathParams.Add("institution_id", this.Configuration.ApiClient.ParameterToString(institutionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstitutionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Institution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Institution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Institution)));
        }

        /// <summary>
        /// Retrieve a institution Retrieve a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of Institution</returns>
        public async System.Threading.Tasks.Task<Institution> GetInstitutionUsingGetAsync (Guid? institutionId)
        {
             ApiResponse<Institution> localVarResponse = await GetInstitutionUsingGetAsyncWithHttpInfo(institutionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a institution Retrieve a institution. 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Institution>> GetInstitutionUsingGetAsyncWithHttpInfo (Guid? institutionId)
        {
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400, "Missing required parameter 'institutionId' when calling ResourceApi->GetInstitutionUsingGet");

            var localVarPath = "/nucleus/v1/resource/institution/{institution_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institutionId != null) localVarPathParams.Add("institution_id", this.Configuration.ApiClient.ParameterToString(institutionId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInstitutionUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Institution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Institution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Institution)));
        }

        /// <summary>
        /// Get all merchants List all merchants.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>MXMerchantRes</returns>
        public MXMerchantRes GetMerchantsAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<MXMerchantRes> localVarResponse = GetMerchantsAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all merchants List all merchants.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of MXMerchantRes</returns>
        public ApiResponse< MXMerchantRes > GetMerchantsAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/resource/merchant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMerchantsAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MXMerchantRes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MXMerchantRes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MXMerchantRes)));
        }

        /// <summary>
        /// Get all merchants List all merchants.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of MXMerchantRes</returns>
        public async System.Threading.Tasks.Task<MXMerchantRes> GetMerchantsAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<MXMerchantRes> localVarResponse = await GetMerchantsAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all merchants List all merchants.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to id)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (MXMerchantRes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MXMerchantRes>> GetMerchantsAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/resource/merchant";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMerchantsAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MXMerchantRes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MXMerchantRes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MXMerchantRes)));
        }

        /// <summary>
        /// Get all transaction category mapping Get all transaction category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> GetTransactionResultForMapping (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {
             ApiResponse<List<Object>> localVarResponse = GetTransactionResultForMappingWithHttpInfo(filter, hydrogenTransactionCategoryId, matchPrimary, tenantName, vendorName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all transaction category mapping Get all transaction category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > GetTransactionResultForMappingWithHttpInfo (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {

            var localVarPath = "/nucleus/v1/resource/transaction_category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (hydrogenTransactionCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hydrogen_transaction_category_id", hydrogenTransactionCategoryId)); // query parameter
            if (matchPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_primary", matchPrimary)); // query parameter
            if (tenantName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_name", tenantName)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionResultForMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get all transaction category mapping Get all transaction category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> GetTransactionResultForMappingAsync (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {
             ApiResponse<List<Object>> localVarResponse = await GetTransactionResultForMappingAsyncWithHttpInfo(filter, hydrogenTransactionCategoryId, matchPrimary, tenantName, vendorName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all transaction category mapping Get all transaction category mapping
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">filter (optional)</param>
        /// <param name="hydrogenTransactionCategoryId">hydrogen_transaction_category_id (optional)</param>
        /// <param name="matchPrimary">match_primary (optional, default to false)</param>
        /// <param name="tenantName">tenant_name (optional)</param>
        /// <param name="vendorName">vendor_name (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetTransactionResultForMappingAsyncWithHttpInfo (string filter = null, Guid? hydrogenTransactionCategoryId = null, bool? matchPrimary = null, string tenantName = null, string vendorName = null)
        {

            var localVarPath = "/nucleus/v1/resource/transaction_category";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (hydrogenTransactionCategoryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hydrogen_transaction_category_id", hydrogenTransactionCategoryId)); // query parameter
            if (matchPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "match_primary", matchPrimary)); // query parameter
            if (tenantName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tenant_name", tenantName)); // query parameter
            if (vendorName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vendor_name", vendorName)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionResultForMapping", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Update a institution Update a institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Institution</returns>
        public Institution UpdateInstitutionUsingPut (Object institution, Guid? institutionId)
        {
             ApiResponse<Institution> localVarResponse = UpdateInstitutionUsingPutWithHttpInfo(institution, institutionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a institution Update a institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>ApiResponse of Institution</returns>
        public ApiResponse< Institution > UpdateInstitutionUsingPutWithHttpInfo (Object institution, Guid? institutionId)
        {
            // verify the required parameter 'institution' is set
            if (institution == null)
                throw new ApiException(400, "Missing required parameter 'institution' when calling ResourceApi->UpdateInstitutionUsingPut");
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400, "Missing required parameter 'institutionId' when calling ResourceApi->UpdateInstitutionUsingPut");

            var localVarPath = "/nucleus/v1/resource/institution/{institution_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institutionId != null) localVarPathParams.Add("institution_id", this.Configuration.ApiClient.ParameterToString(institutionId)); // path parameter
            if (institution != null && institution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(institution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = institution; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstitutionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Institution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Institution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Institution)));
        }

        /// <summary>
        /// Update a institution Update a institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of Institution</returns>
        public async System.Threading.Tasks.Task<Institution> UpdateInstitutionUsingPutAsync (Object institution, Guid? institutionId)
        {
             ApiResponse<Institution> localVarResponse = await UpdateInstitutionUsingPutAsyncWithHttpInfo(institution, institutionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a institution Update a institution.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="institution">institution</param>
        /// <param name="institutionId">UUID institution_id</param>
        /// <returns>Task of ApiResponse (Institution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Institution>> UpdateInstitutionUsingPutAsyncWithHttpInfo (Object institution, Guid? institutionId)
        {
            // verify the required parameter 'institution' is set
            if (institution == null)
                throw new ApiException(400, "Missing required parameter 'institution' when calling ResourceApi->UpdateInstitutionUsingPut");
            // verify the required parameter 'institutionId' is set
            if (institutionId == null)
                throw new ApiException(400, "Missing required parameter 'institutionId' when calling ResourceApi->UpdateInstitutionUsingPut");

            var localVarPath = "/nucleus/v1/resource/institution/{institution_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (institutionId != null) localVarPathParams.Add("institution_id", this.Configuration.ApiClient.ParameterToString(institutionId)); // path parameter
            if (institution != null && institution.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(institution); // http body (model) parameter
            }
            else
            {
                localVarPostBody = institution; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateInstitutionUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Institution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Institution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Institution)));
        }

    }
}
