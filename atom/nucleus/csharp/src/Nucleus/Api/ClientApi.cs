/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Nucleus.Client;
using Nucleus.ModelEntity;

namespace Nucleus.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a client response
        /// </summary>
        /// <remarks>
        /// Create a new client response for a question as part of a questionnaires.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>ClientResponse</returns>
        ClientResponse CreateClientResponseUsingPost (ClientResponse clientResponse);

        /// <summary>
        /// Create a client response
        /// </summary>
        /// <remarks>
        /// Create a new client response for a question as part of a questionnaires.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        ApiResponse<ClientResponse> CreateClientResponseUsingPostWithHttpInfo (ClientResponse clientResponse);
        /// <summary>
        /// Create an client status
        /// </summary>
        /// <remarks>
        /// Create an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>ClientStatus</returns>
        ClientStatus CreateClientStatusUsingPost (ClientStatus clientStatusRequest);

        /// <summary>
        /// Create an client status
        /// </summary>
        /// <remarks>
        /// Create an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>ApiResponse of ClientStatus</returns>
        ApiResponse<ClientStatus> CreateClientStatusUsingPostWithHttpInfo (ClientStatus clientStatusRequest);
        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// Create a new client, or register a new user, with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>ModelClient</returns>
        ModelClient CreateClientUsingPost (ModelClient clientRequest);

        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// Create a new client, or register a new user, with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> CreateClientUsingPostWithHttpInfo (ModelClient clientRequest);
        /// <summary>
        /// Delete a client response
        /// </summary>
        /// <remarks>
        /// Permanently delete a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns></returns>
        void DeleteClientResponseUsingDelete (Guid? clientResponseId);

        /// <summary>
        /// Delete a client response
        /// </summary>
        /// <remarks>
        /// Permanently delete a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientResponseUsingDeleteWithHttpInfo (Guid? clientResponseId);
        /// <summary>
        /// Delete an client status
        /// </summary>
        /// <remarks>
        /// Permanently delete an client status record from an client’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns></returns>
        void DeleteClientStatusUsingDelete (Guid? clientStatusId);

        /// <summary>
        /// Delete an client status
        /// </summary>
        /// <remarks>
        /// Permanently delete an client status record from an client’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientStatusUsingDeleteWithHttpInfo (Guid? clientStatusId);
        /// <summary>
        /// Delete a client
        /// </summary>
        /// <remarks>
        /// Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns></returns>
        void DeleteClientUsingDelete (Guid? clientId);

        /// <summary>
        /// Delete a client
        /// </summary>
        /// <remarks>
        /// Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientUsingDeleteWithHttpInfo (Guid? clientId);
        /// <summary>
        /// List all client Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Object</returns>
        Object GetClientAccountOverviewUsingGet (Guid? clientId, bool? ascending = null, string orderBy = null);

        /// <summary>
        /// List all client Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetClientAccountOverviewUsingGetWithHttpInfo (Guid? clientId, bool? ascending = null, string orderBy = null);
        /// <summary>
        /// Advisor overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>Object</returns>
        Object GetClientAdvisorOverviewUsingGet (Guid? clientId, bool? showClients = null);

        /// <summary>
        /// Advisor overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetClientAdvisorOverviewUsingGetWithHttpInfo (Guid? clientId, bool? showClients = null);
        /// <summary>
        /// List all clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClient</returns>
        PageClient GetClientAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClient</returns>
        ApiResponse<PageClient> GetClientAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all client asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        List<AvailableDateDoubleVO> GetClientAssetSizeUsingGet (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all client asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        ApiResponse<List<AvailableDateDoubleVO>> GetClientAssetSizeUsingGetWithHttpInfo (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve client&#39;s goal details 
        /// </summary>
        /// <remarks>
        /// Retrieve client&#39;s goal details
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>VClientGoalViewData</returns>
        VClientGoalViewData GetClientGoalOverviewUsingGet (Guid? clientId, bool? portfolioGoal = null);

        /// <summary>
        /// Retrieve client&#39;s goal details 
        /// </summary>
        /// <remarks>
        /// Retrieve client&#39;s goal details
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>ApiResponse of VClientGoalViewData</returns>
        ApiResponse<VClientGoalViewData> GetClientGoalOverviewUsingGetWithHttpInfo (Guid? clientId, bool? portfolioGoal = null);
        /// <summary>
        /// List all client holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        PagePortfolioHoldingAgg GetClientHoldingUsingGet (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all client holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        ApiResponse<PagePortfolioHoldingAgg> GetClientHoldingUsingGetWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// List all client responses
        /// </summary>
        /// <remarks>
        /// Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClientResponse</returns>
        PageClientResponse GetClientResponseAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all client responses
        /// </summary>
        /// <remarks>
        /// Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClientResponse</returns>
        ApiResponse<PageClientResponse> GetClientResponseAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a client response
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ClientResponse</returns>
        ClientResponse GetClientResponseUsingGet (Guid? clientResponseId);

        /// <summary>
        /// Retrieve a client response
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        ApiResponse<ClientResponse> GetClientResponseUsingGetWithHttpInfo (Guid? clientResponseId);
        /// <summary>
        /// List all client statuses
        /// </summary>
        /// <remarks>
        /// Get the client status history information for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClientStatus</returns>
        PageClientStatus GetClientStatusAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all client statuses
        /// </summary>
        /// <remarks>
        /// Get the client status history information for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClientStatus</returns>
        ApiResponse<PageClientStatus> GetClientStatusAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an client status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ClientStatus</returns>
        ClientStatus GetClientStatusUsingGet (Guid? clientStatusId);

        /// <summary>
        /// Retrieve an client status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ApiResponse of ClientStatus</returns>
        ApiResponse<ClientStatus> GetClientStatusUsingGetWithHttpInfo (Guid? clientStatusId);
        /// <summary>
        /// List all client transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        PagePortfolioTransaction GetClientTransactionAllUsingGet (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all client transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        ApiResponse<PagePortfolioTransaction> GetClientTransactionAllUsingGetWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// Retrieve a client
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ModelClient</returns>
        ModelClient GetClientUsingGet (Guid? clientId);

        /// <summary>
        /// Retrieve a client
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> GetClientUsingGetWithHttpInfo (Guid? clientId);
        /// <summary>
        /// Update a client response
        /// </summary>
        /// <remarks>
        /// Update a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ClientResponse</returns>
        ClientResponse UpdateClientResponseUsingPut (Object clientResponse, Guid? clientResponseId);

        /// <summary>
        /// Update a client response
        /// </summary>
        /// <remarks>
        /// Update a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        ApiResponse<ClientResponse> UpdateClientResponseUsingPutWithHttpInfo (Object clientResponse, Guid? clientResponseId);
        /// <summary>
        /// Update an client status
        /// </summary>
        /// <remarks>
        /// Update an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ClientStatus</returns>
        ClientStatus UpdateClientStatusUsingPut (Object clientStatus, Guid? clientStatusId);

        /// <summary>
        /// Update an client status
        /// </summary>
        /// <remarks>
        /// Update an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ApiResponse of ClientStatus</returns>
        ApiResponse<ClientStatus> UpdateClientStatusUsingPutWithHttpInfo (Object clientStatus, Guid? clientStatusId);
        /// <summary>
        /// Update a client
        /// </summary>
        /// <remarks>
        /// Update the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ModelClient</returns>
        ModelClient UpdateClientUsingPut (Object _client, Guid? clientId);

        /// <summary>
        /// Update a client
        /// </summary>
        /// <remarks>
        /// Update the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ApiResponse of ModelClient</returns>
        ApiResponse<ModelClient> UpdateClientUsingPutWithHttpInfo (Object _client, Guid? clientId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a client response
        /// </summary>
        /// <remarks>
        /// Create a new client response for a question as part of a questionnaires.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>Task of ClientResponse</returns>
        System.Threading.Tasks.Task<ClientResponse> CreateClientResponseUsingPostAsync (ClientResponse clientResponse);

        /// <summary>
        /// Create a client response
        /// </summary>
        /// <remarks>
        /// Create a new client response for a question as part of a questionnaires.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientResponse>> CreateClientResponseUsingPostAsyncWithHttpInfo (ClientResponse clientResponse);
        /// <summary>
        /// Create an client status
        /// </summary>
        /// <remarks>
        /// Create an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>Task of ClientStatus</returns>
        System.Threading.Tasks.Task<ClientStatus> CreateClientStatusUsingPostAsync (ClientStatus clientStatusRequest);

        /// <summary>
        /// Create an client status
        /// </summary>
        /// <remarks>
        /// Create an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>Task of ApiResponse (ClientStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientStatus>> CreateClientStatusUsingPostAsyncWithHttpInfo (ClientStatus clientStatusRequest);
        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// Create a new client, or register a new user, with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> CreateClientUsingPostAsync (ModelClient clientRequest);

        /// <summary>
        /// Create a client
        /// </summary>
        /// <remarks>
        /// Create a new client, or register a new user, with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> CreateClientUsingPostAsyncWithHttpInfo (ModelClient clientRequest);
        /// <summary>
        /// Delete a client response
        /// </summary>
        /// <remarks>
        /// Permanently delete a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientResponseUsingDeleteAsync (Guid? clientResponseId);

        /// <summary>
        /// Delete a client response
        /// </summary>
        /// <remarks>
        /// Permanently delete a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientResponseUsingDeleteAsyncWithHttpInfo (Guid? clientResponseId);
        /// <summary>
        /// Delete an client status
        /// </summary>
        /// <remarks>
        /// Permanently delete an client status record from an client’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientStatusUsingDeleteAsync (Guid? clientStatusId);

        /// <summary>
        /// Delete an client status
        /// </summary>
        /// <remarks>
        /// Permanently delete an client status record from an client’s history.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientStatusUsingDeleteAsyncWithHttpInfo (Guid? clientStatusId);
        /// <summary>
        /// Delete a client
        /// </summary>
        /// <remarks>
        /// Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientUsingDeleteAsync (Guid? clientId);

        /// <summary>
        /// Delete a client
        /// </summary>
        /// <remarks>
        /// Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientUsingDeleteAsyncWithHttpInfo (Guid? clientId);
        /// <summary>
        /// List all client Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetClientAccountOverviewUsingGetAsync (Guid? clientId, bool? ascending = null, string orderBy = null);

        /// <summary>
        /// List all client Account overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClientAccountOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, bool? ascending = null, string orderBy = null);
        /// <summary>
        /// Advisor overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetClientAdvisorOverviewUsingGetAsync (Guid? clientId, bool? showClients = null);

        /// <summary>
        /// Advisor overview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClientAdvisorOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, bool? showClients = null);
        /// <summary>
        /// List all clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClient</returns>
        System.Threading.Tasks.Task<PageClient> GetClientAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all clients
        /// </summary>
        /// <remarks>
        /// Get details for all clients registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageClient>> GetClientAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// List all client asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetClientAssetSizeUsingGetAsync (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);

        /// <summary>
        /// List all client asset sizes
        /// </summary>
        /// <remarks>
        /// Get a list of asset sizes per date for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetClientAssetSizeUsingGetAsyncWithHttpInfo (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null);
        /// <summary>
        /// Retrieve client&#39;s goal details 
        /// </summary>
        /// <remarks>
        /// Retrieve client&#39;s goal details
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>Task of VClientGoalViewData</returns>
        System.Threading.Tasks.Task<VClientGoalViewData> GetClientGoalOverviewUsingGetAsync (Guid? clientId, bool? portfolioGoal = null);

        /// <summary>
        /// Retrieve client&#39;s goal details 
        /// </summary>
        /// <remarks>
        /// Retrieve client&#39;s goal details
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VClientGoalViewData)</returns>
        System.Threading.Tasks.Task<ApiResponse<VClientGoalViewData>> GetClientGoalOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, bool? portfolioGoal = null);
        /// <summary>
        /// List all client holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetClientHoldingUsingGetAsync (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all client holdings
        /// </summary>
        /// <remarks>
        /// Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetClientHoldingUsingGetAsyncWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// List all client responses
        /// </summary>
        /// <remarks>
        /// Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClientResponse</returns>
        System.Threading.Tasks.Task<PageClientResponse> GetClientResponseAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all client responses
        /// </summary>
        /// <remarks>
        /// Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageClientResponse>> GetClientResponseAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve a client response
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ClientResponse</returns>
        System.Threading.Tasks.Task<ClientResponse> GetClientResponseUsingGetAsync (Guid? clientResponseId);

        /// <summary>
        /// Retrieve a client response
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientResponse>> GetClientResponseUsingGetAsyncWithHttpInfo (Guid? clientResponseId);
        /// <summary>
        /// List all client statuses
        /// </summary>
        /// <remarks>
        /// Get the client status history information for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClientStatus</returns>
        System.Threading.Tasks.Task<PageClientStatus> GetClientStatusAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);

        /// <summary>
        /// List all client statuses
        /// </summary>
        /// <remarks>
        /// Get the client status history information for all clients.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClientStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<PageClientStatus>> GetClientStatusAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null);
        /// <summary>
        /// Retrieve an client status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ClientStatus</returns>
        System.Threading.Tasks.Task<ClientStatus> GetClientStatusUsingGetAsync (Guid? clientStatusId);

        /// <summary>
        /// Retrieve an client status
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a specific client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ApiResponse (ClientStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientStatus>> GetClientStatusUsingGetAsyncWithHttpInfo (Guid? clientStatusId);
        /// <summary>
        /// List all client transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        System.Threading.Tasks.Task<PagePortfolioTransaction> GetClientTransactionAllUsingGetAsync (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);

        /// <summary>
        /// List all client transactions
        /// </summary>
        /// <remarks>
        /// Get the information for all transactions under a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetClientTransactionAllUsingGetAsyncWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null);
        /// <summary>
        /// Retrieve a client
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> GetClientUsingGetAsync (Guid? clientId);

        /// <summary>
        /// Retrieve a client
        /// </summary>
        /// <remarks>
        /// Retrieve the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> GetClientUsingGetAsyncWithHttpInfo (Guid? clientId);
        /// <summary>
        /// Update a client response
        /// </summary>
        /// <remarks>
        /// Update a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ClientResponse</returns>
        System.Threading.Tasks.Task<ClientResponse> UpdateClientResponseUsingPutAsync (Object clientResponse, Guid? clientResponseId);

        /// <summary>
        /// Update a client response
        /// </summary>
        /// <remarks>
        /// Update a client response for a client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientResponse>> UpdateClientResponseUsingPutAsyncWithHttpInfo (Object clientResponse, Guid? clientResponseId);
        /// <summary>
        /// Update an client status
        /// </summary>
        /// <remarks>
        /// Update an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ClientStatus</returns>
        System.Threading.Tasks.Task<ClientStatus> UpdateClientStatusUsingPutAsync (Object clientStatus, Guid? clientStatusId);

        /// <summary>
        /// Update an client status
        /// </summary>
        /// <remarks>
        /// Update an client status record for an client.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ApiResponse (ClientStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientStatus>> UpdateClientStatusUsingPutAsyncWithHttpInfo (Object clientStatus, Guid? clientStatusId);
        /// <summary>
        /// Update a client
        /// </summary>
        /// <remarks>
        /// Update the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ModelClient</returns>
        System.Threading.Tasks.Task<ModelClient> UpdateClientUsingPutAsync (Object _client, Guid? clientId);

        /// <summary>
        /// Update a client
        /// </summary>
        /// <remarks>
        /// Update the information for a client registered with your firm.
        /// </remarks>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModelClient>> UpdateClientUsingPutAsyncWithHttpInfo (Object _client, Guid? clientId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientApi : IClientApi
    {
        private Nucleus.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientApi(String basePath)
        {
            this.Configuration = new Nucleus.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientApi(Nucleus.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Nucleus.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Nucleus.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Nucleus.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Nucleus.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a client response Create a new client response for a question as part of a questionnaires.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>ClientResponse</returns>
        public ClientResponse CreateClientResponseUsingPost (ClientResponse clientResponse)
        {
             ApiResponse<ClientResponse> localVarResponse = CreateClientResponseUsingPostWithHttpInfo(clientResponse);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a client response Create a new client response for a question as part of a questionnaires.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        public ApiResponse< ClientResponse > CreateClientResponseUsingPostWithHttpInfo (ClientResponse clientResponse)
        {
            // verify the required parameter 'clientResponse' is set
            if (clientResponse == null)
                throw new ApiException(400, "Missing required parameter 'clientResponse' when calling ClientApi->CreateClientResponseUsingPost");

            var localVarPath = "/nucleus/v1/client_response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponse != null && clientResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientResponse; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientResponseUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResponse)));
        }

        /// <summary>
        /// Create a client response Create a new client response for a question as part of a questionnaires.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>Task of ClientResponse</returns>
        public async System.Threading.Tasks.Task<ClientResponse> CreateClientResponseUsingPostAsync (ClientResponse clientResponse)
        {
             ApiResponse<ClientResponse> localVarResponse = await CreateClientResponseUsingPostAsyncWithHttpInfo(clientResponse);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a client response Create a new client response for a question as part of a questionnaires.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">clientResponse</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientResponse>> CreateClientResponseUsingPostAsyncWithHttpInfo (ClientResponse clientResponse)
        {
            // verify the required parameter 'clientResponse' is set
            if (clientResponse == null)
                throw new ApiException(400, "Missing required parameter 'clientResponse' when calling ClientApi->CreateClientResponseUsingPost");

            var localVarPath = "/nucleus/v1/client_response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponse != null && clientResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientResponse; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientResponseUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResponse)));
        }

        /// <summary>
        /// Create an client status Create an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>ClientStatus</returns>
        public ClientStatus CreateClientStatusUsingPost (ClientStatus clientStatusRequest)
        {
             ApiResponse<ClientStatus> localVarResponse = CreateClientStatusUsingPostWithHttpInfo(clientStatusRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an client status Create an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>ApiResponse of ClientStatus</returns>
        public ApiResponse< ClientStatus > CreateClientStatusUsingPostWithHttpInfo (ClientStatus clientStatusRequest)
        {
            // verify the required parameter 'clientStatusRequest' is set
            if (clientStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusRequest' when calling ClientApi->CreateClientStatusUsingPost");

            var localVarPath = "/nucleus/v1/client_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusRequest != null && clientStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientStatusUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientStatus)));
        }

        /// <summary>
        /// Create an client status Create an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>Task of ClientStatus</returns>
        public async System.Threading.Tasks.Task<ClientStatus> CreateClientStatusUsingPostAsync (ClientStatus clientStatusRequest)
        {
             ApiResponse<ClientStatus> localVarResponse = await CreateClientStatusUsingPostAsyncWithHttpInfo(clientStatusRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an client status Create an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusRequest">clientStatusRequest</param>
        /// <returns>Task of ApiResponse (ClientStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientStatus>> CreateClientStatusUsingPostAsyncWithHttpInfo (ClientStatus clientStatusRequest)
        {
            // verify the required parameter 'clientStatusRequest' is set
            if (clientStatusRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusRequest' when calling ClientApi->CreateClientStatusUsingPost");

            var localVarPath = "/nucleus/v1/client_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusRequest != null && clientStatusRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientStatusRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientStatusRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientStatusUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientStatus)));
        }

        /// <summary>
        /// Create a client Create a new client, or register a new user, with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>ModelClient</returns>
        public ModelClient CreateClientUsingPost (ModelClient clientRequest)
        {
             ApiResponse<ModelClient> localVarResponse = CreateClientUsingPostWithHttpInfo(clientRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a client Create a new client, or register a new user, with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ApiResponse< ModelClient > CreateClientUsingPostWithHttpInfo (ModelClient clientRequest)
        {
            // verify the required parameter 'clientRequest' is set
            if (clientRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientRequest' when calling ClientApi->CreateClientUsingPost");

            var localVarPath = "/nucleus/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientRequest != null && clientRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Create a client Create a new client, or register a new user, with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> CreateClientUsingPostAsync (ModelClient clientRequest)
        {
             ApiResponse<ModelClient> localVarResponse = await CreateClientUsingPostAsyncWithHttpInfo(clientRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a client Create a new client, or register a new user, with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientRequest">clientRequest</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelClient>> CreateClientUsingPostAsyncWithHttpInfo (ModelClient clientRequest)
        {
            // verify the required parameter 'clientRequest' is set
            if (clientRequest == null)
                throw new ApiException(400, "Missing required parameter 'clientRequest' when calling ClientApi->CreateClientUsingPost");

            var localVarPath = "/nucleus/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientRequest != null && clientRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateClientUsingPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Delete a client response Permanently delete a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns></returns>
        public void DeleteClientResponseUsingDelete (Guid? clientResponseId)
        {
             DeleteClientResponseUsingDeleteWithHttpInfo(clientResponseId);
        }

        /// <summary>
        /// Delete a client response Permanently delete a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteClientResponseUsingDeleteWithHttpInfo (Guid? clientResponseId)
        {
            // verify the required parameter 'clientResponseId' is set
            if (clientResponseId == null)
                throw new ApiException(400, "Missing required parameter 'clientResponseId' when calling ClientApi->DeleteClientResponseUsingDelete");

            var localVarPath = "/nucleus/v1/client_response/{client_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponseId != null) localVarPathParams.Add("client_response_id", this.Configuration.ApiClient.ParameterToString(clientResponseId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientResponseUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a client response Permanently delete a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientResponseUsingDeleteAsync (Guid? clientResponseId)
        {
             await DeleteClientResponseUsingDeleteAsyncWithHttpInfo(clientResponseId);

        }

        /// <summary>
        /// Delete a client response Permanently delete a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientResponseUsingDeleteAsyncWithHttpInfo (Guid? clientResponseId)
        {
            // verify the required parameter 'clientResponseId' is set
            if (clientResponseId == null)
                throw new ApiException(400, "Missing required parameter 'clientResponseId' when calling ClientApi->DeleteClientResponseUsingDelete");

            var localVarPath = "/nucleus/v1/client_response/{client_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponseId != null) localVarPathParams.Add("client_response_id", this.Configuration.ApiClient.ParameterToString(clientResponseId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientResponseUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an client status Permanently delete an client status record from an client’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns></returns>
        public void DeleteClientStatusUsingDelete (Guid? clientStatusId)
        {
             DeleteClientStatusUsingDeleteWithHttpInfo(clientStatusId);
        }

        /// <summary>
        /// Delete an client status Permanently delete an client status record from an client’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteClientStatusUsingDeleteWithHttpInfo (Guid? clientStatusId)
        {
            // verify the required parameter 'clientStatusId' is set
            if (clientStatusId == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusId' when calling ClientApi->DeleteClientStatusUsingDelete");

            var localVarPath = "/nucleus/v1/client_status/{client_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusId != null) localVarPathParams.Add("client_status_id", this.Configuration.ApiClient.ParameterToString(clientStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientStatusUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an client status Permanently delete an client status record from an client’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientStatusUsingDeleteAsync (Guid? clientStatusId)
        {
             await DeleteClientStatusUsingDeleteAsyncWithHttpInfo(clientStatusId);

        }

        /// <summary>
        /// Delete an client status Permanently delete an client status record from an client’s history.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientStatusUsingDeleteAsyncWithHttpInfo (Guid? clientStatusId)
        {
            // verify the required parameter 'clientStatusId' is set
            if (clientStatusId == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusId' when calling ClientApi->DeleteClientStatusUsingDelete");

            var localVarPath = "/nucleus/v1/client_status/{client_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusId != null) localVarPathParams.Add("client_status_id", this.Configuration.ApiClient.ParameterToString(clientStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientStatusUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a client Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns></returns>
        public void DeleteClientUsingDelete (Guid? clientId)
        {
             DeleteClientUsingDeleteWithHttpInfo(clientId);
        }

        /// <summary>
        /// Delete a client Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteClientUsingDeleteWithHttpInfo (Guid? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->DeleteClientUsingDelete");

            var localVarPath = "/nucleus/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a client Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientUsingDeleteAsync (Guid? clientId)
        {
             await DeleteClientUsingDeleteAsyncWithHttpInfo(clientId);

        }

        /// <summary>
        /// Delete a client Permanently delete a client registered with your firm. Turns the client&#39;s is_active  &#x3D; 0
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientUsingDeleteAsyncWithHttpInfo (Guid? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->DeleteClientUsingDelete");

            var localVarPath = "/nucleus/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteClientUsingDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List all client Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Object</returns>
        public Object GetClientAccountOverviewUsingGet (Guid? clientId, bool? ascending = null, string orderBy = null)
        {
             ApiResponse<Object> localVarResponse = GetClientAccountOverviewUsingGetWithHttpInfo(clientId, ascending, orderBy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all client Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetClientAccountOverviewUsingGetWithHttpInfo (Guid? clientId, bool? ascending = null, string orderBy = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientAccountOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAccountOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List all client Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetClientAccountOverviewUsingGetAsync (Guid? clientId, bool? ascending = null, string orderBy = null)
        {
             ApiResponse<Object> localVarResponse = await GetClientAccountOverviewUsingGetAsyncWithHttpInfo(clientId, ascending, orderBy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all client Account overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetClientAccountOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, bool? ascending = null, string orderBy = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientAccountOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/account_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAccountOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Advisor overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>Object</returns>
        public Object GetClientAdvisorOverviewUsingGet (Guid? clientId, bool? showClients = null)
        {
             ApiResponse<Object> localVarResponse = GetClientAdvisorOverviewUsingGetWithHttpInfo(clientId, showClients);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advisor overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetClientAdvisorOverviewUsingGetWithHttpInfo (Guid? clientId, bool? showClients = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientAdvisorOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/advisor_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (showClients != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_clients", showClients)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAdvisorOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Advisor overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetClientAdvisorOverviewUsingGetAsync (Guid? clientId, bool? showClients = null)
        {
             ApiResponse<Object> localVarResponse = await GetClientAdvisorOverviewUsingGetAsyncWithHttpInfo(clientId, showClients);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advisor overview 
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="showClients">show_clients (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetClientAdvisorOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, bool? showClients = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientAdvisorOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/advisor_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (showClients != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show_clients", showClients)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAdvisorOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// List all clients Get details for all clients registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClient</returns>
        public PageClient GetClientAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClient> localVarResponse = GetClientAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all clients Get details for all clients registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClient</returns>
        public ApiResponse< PageClient > GetClientAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClient)));
        }

        /// <summary>
        /// List all clients Get details for all clients registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClient</returns>
        public async System.Threading.Tasks.Task<PageClient> GetClientAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClient> localVarResponse = await GetClientAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all clients Get details for all clients registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageClient>> GetClientAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/client";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClient)));
        }

        /// <summary>
        /// List all client asset sizes Get a list of asset sizes per date for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>List&lt;AvailableDateDoubleVO&gt;</returns>
        public List<AvailableDateDoubleVO> GetClientAssetSizeUsingGet (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = GetClientAssetSizeUsingGetWithHttpInfo(clientId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all client asset sizes Get a list of asset sizes per date for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>ApiResponse of List&lt;AvailableDateDoubleVO&gt;</returns>
        public ApiResponse< List<AvailableDateDoubleVO> > GetClientAssetSizeUsingGetWithHttpInfo (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (excludeSubledger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_subledger", excludeSubledger)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// List all client asset sizes Get a list of asset sizes per date for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of List&lt;AvailableDateDoubleVO&gt;</returns>
        public async System.Threading.Tasks.Task<List<AvailableDateDoubleVO>> GetClientAssetSizeUsingGetAsync (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
             ApiResponse<List<AvailableDateDoubleVO>> localVarResponse = await GetClientAssetSizeUsingGetAsyncWithHttpInfo(clientId, currencyConversion, endDate, excludeSubledger, getLatest, sortType, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all client asset sizes Get a list of asset sizes per date for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date (optional, default to null)</param>
        /// <param name="excludeSubledger">exclude_subledger (optional, default to false)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="sortType"> Quarter (Q), Monthly (M) , Annually (Y), Daily (D) - -caps matter, codes in () (optional)</param>
        /// <param name="startDate">start date (optional, default to null)</param>
        /// <returns>Task of ApiResponse (List&lt;AvailableDateDoubleVO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AvailableDateDoubleVO>>> GetClientAssetSizeUsingGetAsyncWithHttpInfo (Guid? clientId, string currencyConversion = null, DateTime? endDate = null, bool? excludeSubledger = null, bool? getLatest = null, string sortType = null, DateTime? startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientAssetSizeUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/asset_size";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (excludeSubledger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude_subledger", excludeSubledger)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (sortType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_type", sortType)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientAssetSizeUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AvailableDateDoubleVO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AvailableDateDoubleVO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AvailableDateDoubleVO>)));
        }

        /// <summary>
        /// Retrieve client&#39;s goal details  Retrieve client&#39;s goal details
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>VClientGoalViewData</returns>
        public VClientGoalViewData GetClientGoalOverviewUsingGet (Guid? clientId, bool? portfolioGoal = null)
        {
             ApiResponse<VClientGoalViewData> localVarResponse = GetClientGoalOverviewUsingGetWithHttpInfo(clientId, portfolioGoal);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve client&#39;s goal details  Retrieve client&#39;s goal details
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>ApiResponse of VClientGoalViewData</returns>
        public ApiResponse< VClientGoalViewData > GetClientGoalOverviewUsingGetWithHttpInfo (Guid? clientId, bool? portfolioGoal = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientGoalOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/goal_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientGoalOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VClientGoalViewData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VClientGoalViewData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VClientGoalViewData)));
        }

        /// <summary>
        /// Retrieve client&#39;s goal details  Retrieve client&#39;s goal details
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>Task of VClientGoalViewData</returns>
        public async System.Threading.Tasks.Task<VClientGoalViewData> GetClientGoalOverviewUsingGetAsync (Guid? clientId, bool? portfolioGoal = null)
        {
             ApiResponse<VClientGoalViewData> localVarResponse = await GetClientGoalOverviewUsingGetAsyncWithHttpInfo(clientId, portfolioGoal);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve client&#39;s goal details  Retrieve client&#39;s goal details
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="portfolioGoal">portfolio_goal (optional, default to false)</param>
        /// <returns>Task of ApiResponse (VClientGoalViewData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VClientGoalViewData>> GetClientGoalOverviewUsingGetAsyncWithHttpInfo (Guid? clientId, bool? portfolioGoal = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientGoalOverviewUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/goal_overview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (portfolioGoal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "portfolio_goal", portfolioGoal)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientGoalOverviewUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VClientGoalViewData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VClientGoalViewData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VClientGoalViewData)));
        }

        /// <summary>
        /// List all client holdings Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioHoldingAgg</returns>
        public PagePortfolioHoldingAgg GetClientHoldingUsingGet (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = GetClientHoldingUsingGetWithHttpInfo(clientId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all client holdings Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioHoldingAgg</returns>
        public ApiResponse< PagePortfolioHoldingAgg > GetClientHoldingUsingGetWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientHoldingUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// List all client holdings Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioHoldingAgg</returns>
        public async System.Threading.Tasks.Task<PagePortfolioHoldingAgg> GetClientHoldingUsingGetAsync (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioHoldingAgg> localVarResponse = await GetClientHoldingUsingGetAsyncWithHttpInfo(clientId, ascending, currencyConversion, endDate, filter, getLatest, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all client holdings Get the information for all the securities that are currently being held by a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">Currency Code (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="getLatest">true or false (optional)</param>
        /// <param name="orderBy">order_by (optional, default to date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioHoldingAgg)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioHoldingAgg>> GetClientHoldingUsingGetAsyncWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, bool? getLatest = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientHoldingUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/holding";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (getLatest != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "get_latest", getLatest)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientHoldingUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioHoldingAgg>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioHoldingAgg) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioHoldingAgg)));
        }

        /// <summary>
        /// List all client responses Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClientResponse</returns>
        public PageClientResponse GetClientResponseAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClientResponse> localVarResponse = GetClientResponseAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all client responses Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClientResponse</returns>
        public ApiResponse< PageClientResponse > GetClientResponseAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/client_response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientResponseAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClientResponse)));
        }

        /// <summary>
        /// List all client responses Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClientResponse</returns>
        public async System.Threading.Tasks.Task<PageClientResponse> GetClientResponseAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClientResponse> localVarResponse = await GetClientResponseAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all client responses Get all the client responses for questions as part of a questionnaire defined by your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageClientResponse>> GetClientResponseAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/client_response";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientResponseAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClientResponse)));
        }

        /// <summary>
        /// Retrieve a client response Retrieve the information for a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ClientResponse</returns>
        public ClientResponse GetClientResponseUsingGet (Guid? clientResponseId)
        {
             ApiResponse<ClientResponse> localVarResponse = GetClientResponseUsingGetWithHttpInfo(clientResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a client response Retrieve the information for a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        public ApiResponse< ClientResponse > GetClientResponseUsingGetWithHttpInfo (Guid? clientResponseId)
        {
            // verify the required parameter 'clientResponseId' is set
            if (clientResponseId == null)
                throw new ApiException(400, "Missing required parameter 'clientResponseId' when calling ClientApi->GetClientResponseUsingGet");

            var localVarPath = "/nucleus/v1/client_response/{client_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponseId != null) localVarPathParams.Add("client_response_id", this.Configuration.ApiClient.ParameterToString(clientResponseId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientResponseUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResponse)));
        }

        /// <summary>
        /// Retrieve a client response Retrieve the information for a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ClientResponse</returns>
        public async System.Threading.Tasks.Task<ClientResponse> GetClientResponseUsingGetAsync (Guid? clientResponseId)
        {
             ApiResponse<ClientResponse> localVarResponse = await GetClientResponseUsingGetAsyncWithHttpInfo(clientResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a client response Retrieve the information for a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientResponse>> GetClientResponseUsingGetAsyncWithHttpInfo (Guid? clientResponseId)
        {
            // verify the required parameter 'clientResponseId' is set
            if (clientResponseId == null)
                throw new ApiException(400, "Missing required parameter 'clientResponseId' when calling ClientApi->GetClientResponseUsingGet");

            var localVarPath = "/nucleus/v1/client_response/{client_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponseId != null) localVarPathParams.Add("client_response_id", this.Configuration.ApiClient.ParameterToString(clientResponseId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientResponseUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResponse)));
        }

        /// <summary>
        /// List all client statuses Get the client status history information for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>PageClientStatus</returns>
        public PageClientStatus GetClientStatusAllUsingGet (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClientStatus> localVarResponse = GetClientStatusAllUsingGetWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all client statuses Get the client status history information for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>ApiResponse of PageClientStatus</returns>
        public ApiResponse< PageClientStatus > GetClientStatusAllUsingGetWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/client_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientStatusAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClientStatus)));
        }

        /// <summary>
        /// List all client statuses Get the client status history information for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of PageClientStatus</returns>
        public async System.Threading.Tasks.Task<PageClientStatus> GetClientStatusAllUsingGetAsync (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {
             ApiResponse<PageClientStatus> localVarResponse = await GetClientStatusAllUsingGetAsyncWithHttpInfo(ascending, filter, orderBy, page, size);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all client statuses Get the client status history information for all clients.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <returns>Task of ApiResponse (PageClientStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PageClientStatus>> GetClientStatusAllUsingGetAsyncWithHttpInfo (bool? ascending = null, string filter = null, string orderBy = null, int? page = null, int? size = null)
        {

            var localVarPath = "/nucleus/v1/client_status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientStatusAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PageClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PageClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageClientStatus)));
        }

        /// <summary>
        /// Retrieve an client status Retrieve the information for a specific client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ClientStatus</returns>
        public ClientStatus GetClientStatusUsingGet (Guid? clientStatusId)
        {
             ApiResponse<ClientStatus> localVarResponse = GetClientStatusUsingGetWithHttpInfo(clientStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an client status Retrieve the information for a specific client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ApiResponse of ClientStatus</returns>
        public ApiResponse< ClientStatus > GetClientStatusUsingGetWithHttpInfo (Guid? clientStatusId)
        {
            // verify the required parameter 'clientStatusId' is set
            if (clientStatusId == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusId' when calling ClientApi->GetClientStatusUsingGet");

            var localVarPath = "/nucleus/v1/client_status/{client_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusId != null) localVarPathParams.Add("client_status_id", this.Configuration.ApiClient.ParameterToString(clientStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientStatus)));
        }

        /// <summary>
        /// Retrieve an client status Retrieve the information for a specific client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ClientStatus</returns>
        public async System.Threading.Tasks.Task<ClientStatus> GetClientStatusUsingGetAsync (Guid? clientStatusId)
        {
             ApiResponse<ClientStatus> localVarResponse = await GetClientStatusUsingGetAsyncWithHttpInfo(clientStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve an client status Retrieve the information for a specific client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ApiResponse (ClientStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientStatus>> GetClientStatusUsingGetAsyncWithHttpInfo (Guid? clientStatusId)
        {
            // verify the required parameter 'clientStatusId' is set
            if (clientStatusId == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusId' when calling ClientApi->GetClientStatusUsingGet");

            var localVarPath = "/nucleus/v1/client_status/{client_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusId != null) localVarPathParams.Add("client_status_id", this.Configuration.ApiClient.ParameterToString(clientStatusId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientStatusUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientStatus)));
        }

        /// <summary>
        /// List all client transactions Get the information for all transactions under a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>PagePortfolioTransaction</returns>
        public PagePortfolioTransaction GetClientTransactionAllUsingGet (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = GetClientTransactionAllUsingGetWithHttpInfo(clientId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all client transactions Get the information for all transactions under a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>ApiResponse of PagePortfolioTransaction</returns>
        public ApiResponse< PagePortfolioTransaction > GetClientTransactionAllUsingGetWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// List all client transactions Get the information for all transactions under a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of PagePortfolioTransaction</returns>
        public async System.Threading.Tasks.Task<PagePortfolioTransaction> GetClientTransactionAllUsingGetAsync (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
             ApiResponse<PagePortfolioTransaction> localVarResponse = await GetClientTransactionAllUsingGetAsyncWithHttpInfo(clientId, ascending, currencyConversion, endDate, filter, orderBy, page, size, startDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all client transactions Get the information for all transactions under a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <param name="ascending">ascending (optional, default to false)</param>
        /// <param name="currencyConversion">currency_conversion (optional)</param>
        /// <param name="endDate">end date - yyyy-mm-dd (optional)</param>
        /// <param name="filter">filter (optional)</param>
        /// <param name="orderBy">order_by (optional, default to update_date)</param>
        /// <param name="page">page (optional, default to 0)</param>
        /// <param name="size">size (optional, default to 25)</param>
        /// <param name="startDate">start date - yyyy-mm-dd (optional)</param>
        /// <returns>Task of ApiResponse (PagePortfolioTransaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagePortfolioTransaction>> GetClientTransactionAllUsingGetAsyncWithHttpInfo (Guid? clientId, bool? ascending = null, string currencyConversion = null, string endDate = null, string filter = null, string orderBy = null, int? page = null, int? size = null, string startDate = null)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientTransactionAllUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (ascending != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ascending", ascending)); // query parameter
            if (currencyConversion != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currency_conversion", currencyConversion)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end_date", endDate)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (orderBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_by", orderBy)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (size != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "size", size)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start_date", startDate)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientTransactionAllUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagePortfolioTransaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagePortfolioTransaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagePortfolioTransaction)));
        }

        /// <summary>
        /// Retrieve a client Retrieve the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ModelClient</returns>
        public ModelClient GetClientUsingGet (Guid? clientId)
        {
             ApiResponse<ModelClient> localVarResponse = GetClientUsingGetWithHttpInfo(clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a client Retrieve the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ApiResponse< ModelClient > GetClientUsingGetWithHttpInfo (Guid? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Retrieve a client Retrieve the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> GetClientUsingGetAsync (Guid? clientId)
        {
             ApiResponse<ModelClient> localVarResponse = await GetClientUsingGetAsyncWithHttpInfo(clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a client Retrieve the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelClient>> GetClientUsingGetAsyncWithHttpInfo (Guid? clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->GetClientUsingGet");

            var localVarPath = "/nucleus/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClientUsingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Update a client response Update a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ClientResponse</returns>
        public ClientResponse UpdateClientResponseUsingPut (Object clientResponse, Guid? clientResponseId)
        {
             ApiResponse<ClientResponse> localVarResponse = UpdateClientResponseUsingPutWithHttpInfo(clientResponse, clientResponseId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a client response Update a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>ApiResponse of ClientResponse</returns>
        public ApiResponse< ClientResponse > UpdateClientResponseUsingPutWithHttpInfo (Object clientResponse, Guid? clientResponseId)
        {
            // verify the required parameter 'clientResponse' is set
            if (clientResponse == null)
                throw new ApiException(400, "Missing required parameter 'clientResponse' when calling ClientApi->UpdateClientResponseUsingPut");
            // verify the required parameter 'clientResponseId' is set
            if (clientResponseId == null)
                throw new ApiException(400, "Missing required parameter 'clientResponseId' when calling ClientApi->UpdateClientResponseUsingPut");

            var localVarPath = "/nucleus/v1/client_response/{client_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponseId != null) localVarPathParams.Add("client_response_id", this.Configuration.ApiClient.ParameterToString(clientResponseId)); // path parameter
            if (clientResponse != null && clientResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientResponse; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientResponseUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResponse)));
        }

        /// <summary>
        /// Update a client response Update a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ClientResponse</returns>
        public async System.Threading.Tasks.Task<ClientResponse> UpdateClientResponseUsingPutAsync (Object clientResponse, Guid? clientResponseId)
        {
             ApiResponse<ClientResponse> localVarResponse = await UpdateClientResponseUsingPutAsyncWithHttpInfo(clientResponse, clientResponseId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a client response Update a client response for a client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientResponse">client_response</param>
        /// <param name="clientResponseId">UUID client_response_id</param>
        /// <returns>Task of ApiResponse (ClientResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientResponse>> UpdateClientResponseUsingPutAsyncWithHttpInfo (Object clientResponse, Guid? clientResponseId)
        {
            // verify the required parameter 'clientResponse' is set
            if (clientResponse == null)
                throw new ApiException(400, "Missing required parameter 'clientResponse' when calling ClientApi->UpdateClientResponseUsingPut");
            // verify the required parameter 'clientResponseId' is set
            if (clientResponseId == null)
                throw new ApiException(400, "Missing required parameter 'clientResponseId' when calling ClientApi->UpdateClientResponseUsingPut");

            var localVarPath = "/nucleus/v1/client_response/{client_response_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientResponseId != null) localVarPathParams.Add("client_response_id", this.Configuration.ApiClient.ParameterToString(clientResponseId)); // path parameter
            if (clientResponse != null && clientResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientResponse; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientResponseUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientResponse)));
        }

        /// <summary>
        /// Update an client status Update an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ClientStatus</returns>
        public ClientStatus UpdateClientStatusUsingPut (Object clientStatus, Guid? clientStatusId)
        {
             ApiResponse<ClientStatus> localVarResponse = UpdateClientStatusUsingPutWithHttpInfo(clientStatus, clientStatusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an client status Update an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>ApiResponse of ClientStatus</returns>
        public ApiResponse< ClientStatus > UpdateClientStatusUsingPutWithHttpInfo (Object clientStatus, Guid? clientStatusId)
        {
            // verify the required parameter 'clientStatus' is set
            if (clientStatus == null)
                throw new ApiException(400, "Missing required parameter 'clientStatus' when calling ClientApi->UpdateClientStatusUsingPut");
            // verify the required parameter 'clientStatusId' is set
            if (clientStatusId == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusId' when calling ClientApi->UpdateClientStatusUsingPut");

            var localVarPath = "/nucleus/v1/client_status/{client_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusId != null) localVarPathParams.Add("client_status_id", this.Configuration.ApiClient.ParameterToString(clientStatusId)); // path parameter
            if (clientStatus != null && clientStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientStatusUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientStatus)));
        }

        /// <summary>
        /// Update an client status Update an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ClientStatus</returns>
        public async System.Threading.Tasks.Task<ClientStatus> UpdateClientStatusUsingPutAsync (Object clientStatus, Guid? clientStatusId)
        {
             ApiResponse<ClientStatus> localVarResponse = await UpdateClientStatusUsingPutAsyncWithHttpInfo(clientStatus, clientStatusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an client status Update an client status record for an client.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientStatus">client_status</param>
        /// <param name="clientStatusId">UUID client_status_id</param>
        /// <returns>Task of ApiResponse (ClientStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClientStatus>> UpdateClientStatusUsingPutAsyncWithHttpInfo (Object clientStatus, Guid? clientStatusId)
        {
            // verify the required parameter 'clientStatus' is set
            if (clientStatus == null)
                throw new ApiException(400, "Missing required parameter 'clientStatus' when calling ClientApi->UpdateClientStatusUsingPut");
            // verify the required parameter 'clientStatusId' is set
            if (clientStatusId == null)
                throw new ApiException(400, "Missing required parameter 'clientStatusId' when calling ClientApi->UpdateClientStatusUsingPut");

            var localVarPath = "/nucleus/v1/client_status/{client_status_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientStatusId != null) localVarPathParams.Add("client_status_id", this.Configuration.ApiClient.ParameterToString(clientStatusId)); // path parameter
            if (clientStatus != null && clientStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(clientStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clientStatus; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientStatusUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClientStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClientStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClientStatus)));
        }

        /// <summary>
        /// Update a client Update the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ModelClient</returns>
        public ModelClient UpdateClientUsingPut (Object _client, Guid? clientId)
        {
             ApiResponse<ModelClient> localVarResponse = UpdateClientUsingPutWithHttpInfo(_client, clientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a client Update the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>ApiResponse of ModelClient</returns>
        public ApiResponse< ModelClient > UpdateClientUsingPutWithHttpInfo (Object _client, Guid? clientId)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling ClientApi->UpdateClientUsingPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->UpdateClientUsingPut");

            var localVarPath = "/nucleus/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (_client != null && _client.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_client); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _client; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

        /// <summary>
        /// Update a client Update the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ModelClient</returns>
        public async System.Threading.Tasks.Task<ModelClient> UpdateClientUsingPutAsync (Object _client, Guid? clientId)
        {
             ApiResponse<ModelClient> localVarResponse = await UpdateClientUsingPutAsyncWithHttpInfo(_client, clientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a client Update the information for a client registered with your firm.
        /// </summary>
        /// <exception cref="Nucleus.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_client">client</param>
        /// <param name="clientId">UUID client_id</param>
        /// <returns>Task of ApiResponse (ModelClient)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ModelClient>> UpdateClientUsingPutAsyncWithHttpInfo (Object _client, Guid? clientId)
        {
            // verify the required parameter '_client' is set
            if (_client == null)
                throw new ApiException(400, "Missing required parameter '_client' when calling ClientApi->UpdateClientUsingPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling ClientApi->UpdateClientUsingPut");

            var localVarPath = "/nucleus/v1/client/{client_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarPathParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // path parameter
            if (_client != null && _client.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(_client); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _client; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClientUsingPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ModelClient>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ModelClient) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ModelClient)));
        }

    }
}
