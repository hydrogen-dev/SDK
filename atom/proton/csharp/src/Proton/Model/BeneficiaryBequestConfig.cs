/* 
 * Hydrogen Proton API
 *
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Proton.Client.SwaggerDateConverter;

namespace Proton.ModelEntity
{
    /// <summary>
    /// BeneficiaryBequestConfig
    /// </summary>
    [DataContract]
    public partial class BeneficiaryBequestConfig :  IEquatable<BeneficiaryBequestConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BeneficiaryBequestConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BeneficiaryBequestConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BeneficiaryBequestConfig" /> class.
        /// </summary>
        /// <param name="bequestAmount">bequestAmount (required).</param>
        /// <param name="bequestDuration">bequestDuration (default to 10).</param>
        /// <param name="yearsUntilBequest">yearsUntilBequest (default to 0).</param>
        public BeneficiaryBequestConfig(decimal? bequestAmount = default(decimal?), int? bequestDuration = 10, int? yearsUntilBequest = 0)
        {
            // to ensure "bequestAmount" is required (not null)
            if (bequestAmount == null)
            {
                throw new InvalidDataException("bequestAmount is a required property for BeneficiaryBequestConfig and cannot be null");
            }
            else
            {
                this.BequestAmount = bequestAmount;
            }
            // use default value if no "bequestDuration" provided
            if (bequestDuration == null)
            {
                this.BequestDuration = 10;
            }
            else
            {
                this.BequestDuration = bequestDuration;
            }
            // use default value if no "yearsUntilBequest" provided
            if (yearsUntilBequest == null)
            {
                this.YearsUntilBequest = 0;
            }
            else
            {
                this.YearsUntilBequest = yearsUntilBequest;
            }
        }
        
        /// <summary>
        /// Gets or Sets BequestAmount
        /// </summary>
        [DataMember(Name="bequest_amount", EmitDefaultValue=false)]
        public decimal? BequestAmount { get; set; }

        /// <summary>
        /// Gets or Sets BequestDuration
        /// </summary>
        [DataMember(Name="bequest_duration", EmitDefaultValue=false)]
        public int? BequestDuration { get; set; }

        /// <summary>
        /// Gets or Sets YearsUntilBequest
        /// </summary>
        [DataMember(Name="years_until_bequest", EmitDefaultValue=false)]
        public int? YearsUntilBequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeneficiaryBequestConfig {\n");
            sb.Append("  BequestAmount: ").Append(BequestAmount).Append("\n");
            sb.Append("  BequestDuration: ").Append(BequestDuration).Append("\n");
            sb.Append("  YearsUntilBequest: ").Append(YearsUntilBequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BeneficiaryBequestConfig);
        }

        /// <summary>
        /// Returns true if BeneficiaryBequestConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of BeneficiaryBequestConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeneficiaryBequestConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BequestAmount == input.BequestAmount ||
                    (this.BequestAmount != null &&
                    this.BequestAmount.Equals(input.BequestAmount))
                ) && 
                (
                    this.BequestDuration == input.BequestDuration ||
                    (this.BequestDuration != null &&
                    this.BequestDuration.Equals(input.BequestDuration))
                ) && 
                (
                    this.YearsUntilBequest == input.YearsUntilBequest ||
                    (this.YearsUntilBequest != null &&
                    this.YearsUntilBequest.Equals(input.YearsUntilBequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BequestAmount != null)
                    hashCode = hashCode * 59 + this.BequestAmount.GetHashCode();
                if (this.BequestDuration != null)
                    hashCode = hashCode * 59 + this.BequestDuration.GetHashCode();
                if (this.YearsUntilBequest != null)
                    hashCode = hashCode * 59 + this.YearsUntilBequest.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BequestAmount (decimal?) minimum
            if(this.BequestAmount < (decimal?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BequestAmount, must be a value greater than or equal to 0.", new [] { "BequestAmount" });
            }

            // BequestDuration (int?) minimum
            if(this.BequestDuration < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BequestDuration, must be a value greater than or equal to 1.", new [] { "BequestDuration" });
            }

            // YearsUntilBequest (int?) minimum
            if(this.YearsUntilBequest < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for YearsUntilBequest, must be a value greater than or equal to 0.", new [] { "YearsUntilBequest" });
            }

            yield break;
        }
    }

}
