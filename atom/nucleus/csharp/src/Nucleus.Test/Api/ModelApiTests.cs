/* 
 * Hydrogen Nucleus API
 *
 * The Hydrogen Nucleus API
 *
 * OpenAPI spec version: 1.9.5
 * Contact: info@hydrogenplatform.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Nucleus.Client;
using Nucleus.Api;
using Nucleus.ModelEntity;

namespace Nucleus.Test
{
    /// <summary>
    ///  Class for testing ModelApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ModelApiTests
    {
        private ModelApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ModelApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ModelApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ModelApi
            //Assert.IsInstanceOfType(typeof(ModelApi), instance, "instance is a ModelApi");
        }

        
        /// <summary>
        /// Test CreateModelAssetSizeUsingPost
        /// </summary>
        [Test]
        public void CreateModelAssetSizeUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelAssetSize req = null;
            //var response = instance.CreateModelAssetSizeUsingPost(req);
            //Assert.IsInstanceOf<ModelAssetSize> (response, "response is ModelAssetSize");
        }
        
        /// <summary>
        /// Test CreateModelChangeUsingPost
        /// </summary>
        [Test]
        public void CreateModelChangeUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderReconcileRequest changeRequest = null;
            //Guid? modelId = null;
            //var response = instance.CreateModelChangeUsingPost(changeRequest, modelId);
            //Assert.IsInstanceOf<List<ModelTransaction>> (response, "response is List<ModelTransaction>");
        }
        
        /// <summary>
        /// Test CreateModelCommentUsingPost
        /// </summary>
        [Test]
        public void CreateModelCommentUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelComment modelCommentRequest = null;
            //var response = instance.CreateModelCommentUsingPost(modelCommentRequest);
            //Assert.IsInstanceOf<ModelComment> (response, "response is ModelComment");
        }
        
        /// <summary>
        /// Test CreateModelHoldingUsingPost
        /// </summary>
        [Test]
        public void CreateModelHoldingUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelHolding modelHoldingRequest = null;
            //var response = instance.CreateModelHoldingUsingPost(modelHoldingRequest);
            //Assert.IsInstanceOf<ModelHolding> (response, "response is ModelHolding");
        }
        
        /// <summary>
        /// Test CreateModelTransactionUsingPost
        /// </summary>
        [Test]
        public void CreateModelTransactionUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelTransaction modelTransactionRequest = null;
            //var response = instance.CreateModelTransactionUsingPost(modelTransactionRequest);
            //Assert.IsInstanceOf<ModelTransaction> (response, "response is ModelTransaction");
        }
        
        /// <summary>
        /// Test CreateModelUsingPost
        /// </summary>
        [Test]
        public void CreateModelUsingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Model modelInfoRequest = null;
            //var response = instance.CreateModelUsingPost(modelInfoRequest);
            //Assert.IsInstanceOf<Model> (response, "response is Model");
        }
        
        /// <summary>
        /// Test DeleteModelAssetSizeUsingDelete
        /// </summary>
        [Test]
        public void DeleteModelAssetSizeUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelAssetSizeId = null;
            //instance.DeleteModelAssetSizeUsingDelete(modelAssetSizeId);
            
        }
        
        /// <summary>
        /// Test DeleteModelCommentUsingDelete
        /// </summary>
        [Test]
        public void DeleteModelCommentUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelCommentId = null;
            //instance.DeleteModelCommentUsingDelete(modelCommentId);
            
        }
        
        /// <summary>
        /// Test DeleteModelHoldingUsingDelete
        /// </summary>
        [Test]
        public void DeleteModelHoldingUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelHoldingId = null;
            //instance.DeleteModelHoldingUsingDelete(modelHoldingId);
            
        }
        
        /// <summary>
        /// Test DeleteModelTransactionUsingDelete
        /// </summary>
        [Test]
        public void DeleteModelTransactionUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelTransactionId = null;
            //instance.DeleteModelTransactionUsingDelete(modelTransactionId);
            
        }
        
        /// <summary>
        /// Test DeleteModelUsingDelete
        /// </summary>
        [Test]
        public void DeleteModelUsingDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelId = null;
            //instance.DeleteModelUsingDelete(modelId);
            
        }
        
        /// <summary>
        /// Test GetModelAllUsingGet
        /// </summary>
        [Test]
        public void GetModelAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetModelAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageModel> (response, "response is PageModel");
        }
        
        /// <summary>
        /// Test GetModelAssetSizeAllUsingGet
        /// </summary>
        [Test]
        public void GetModelAssetSizeAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string currencyConversion = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetModelAssetSizeAllUsingGet(ascending, currencyConversion, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageModelAssetSize> (response, "response is PageModelAssetSize");
        }
        
        /// <summary>
        /// Test GetModelAssetSizeUsingGet
        /// </summary>
        [Test]
        public void GetModelAssetSizeUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelAssetSizeId = null;
            //string currencyConversion = null;
            //var response = instance.GetModelAssetSizeUsingGet(modelAssetSizeId, currencyConversion);
            //Assert.IsInstanceOf<ModelAssetSize> (response, "response is ModelAssetSize");
        }
        
        /// <summary>
        /// Test GetModelCommentAllUsingGet
        /// </summary>
        [Test]
        public void GetModelCommentAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetModelCommentAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageModelComment> (response, "response is PageModelComment");
        }
        
        /// <summary>
        /// Test GetModelCommentUsingGet
        /// </summary>
        [Test]
        public void GetModelCommentUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelCommentId = null;
            //var response = instance.GetModelCommentUsingGet(modelCommentId);
            //Assert.IsInstanceOf<ModelComment> (response, "response is ModelComment");
        }
        
        /// <summary>
        /// Test GetModelHoldingAllUsingGet
        /// </summary>
        [Test]
        public void GetModelHoldingAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetModelHoldingAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageModelHolding> (response, "response is PageModelHolding");
        }
        
        /// <summary>
        /// Test GetModelHoldingUsingGet
        /// </summary>
        [Test]
        public void GetModelHoldingUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelHoldingId = null;
            //var response = instance.GetModelHoldingUsingGet(modelHoldingId);
            //Assert.IsInstanceOf<ModelHolding> (response, "response is ModelHolding");
        }
        
        /// <summary>
        /// Test GetModelTransactionAllUsingGet
        /// </summary>
        [Test]
        public void GetModelTransactionAllUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? ascending = null;
            //string filter = null;
            //string orderBy = null;
            //int? page = null;
            //int? size = null;
            //var response = instance.GetModelTransactionAllUsingGet(ascending, filter, orderBy, page, size);
            //Assert.IsInstanceOf<PageModelTransaction> (response, "response is PageModelTransaction");
        }
        
        /// <summary>
        /// Test GetModelTransactionUsingGet
        /// </summary>
        [Test]
        public void GetModelTransactionUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelTransactionId = null;
            //var response = instance.GetModelTransactionUsingGet(modelTransactionId);
            //Assert.IsInstanceOf<ModelTransaction> (response, "response is ModelTransaction");
        }
        
        /// <summary>
        /// Test GetModelUsingGet
        /// </summary>
        [Test]
        public void GetModelUsingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? modelId = null;
            //var response = instance.GetModelUsingGet(modelId);
            //Assert.IsInstanceOf<Model> (response, "response is Model");
        }
        
        /// <summary>
        /// Test UpdateModelAssetSizeUsingPut
        /// </summary>
        [Test]
        public void UpdateModelAssetSizeUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object modelAssetSize = null;
            //Guid? modelAssetSizeId = null;
            //var response = instance.UpdateModelAssetSizeUsingPut(modelAssetSize, modelAssetSizeId);
            //Assert.IsInstanceOf<ModelAssetSize> (response, "response is ModelAssetSize");
        }
        
        /// <summary>
        /// Test UpdateModelCommentUsingPut
        /// </summary>
        [Test]
        public void UpdateModelCommentUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object modelComment = null;
            //Guid? modelCommentId = null;
            //var response = instance.UpdateModelCommentUsingPut(modelComment, modelCommentId);
            //Assert.IsInstanceOf<ModelComment> (response, "response is ModelComment");
        }
        
        /// <summary>
        /// Test UpdateModelHoldingUsingPut
        /// </summary>
        [Test]
        public void UpdateModelHoldingUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object modelHolding = null;
            //Guid? modelHoldingId = null;
            //var response = instance.UpdateModelHoldingUsingPut(modelHolding, modelHoldingId);
            //Assert.IsInstanceOf<ModelHolding> (response, "response is ModelHolding");
        }
        
        /// <summary>
        /// Test UpdateModelTransactionUsingPut
        /// </summary>
        [Test]
        public void UpdateModelTransactionUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object modelTransaction = null;
            //Guid? modelTransactionId = null;
            //var response = instance.UpdateModelTransactionUsingPut(modelTransaction, modelTransactionId);
            //Assert.IsInstanceOf<ModelTransaction> (response, "response is ModelTransaction");
        }
        
        /// <summary>
        /// Test UpdateModelUsingPut
        /// </summary>
        [Test]
        public void UpdateModelUsingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object model = null;
            //Guid? modelId = null;
            //var response = instance.UpdateModelUsingPut(model, modelId);
            //Assert.IsInstanceOf<Model> (response, "response is Model");
        }
        
    }

}
