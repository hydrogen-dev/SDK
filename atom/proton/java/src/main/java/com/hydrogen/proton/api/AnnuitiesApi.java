/*
 * Hydrogen Proton API
 * Financial engineering module of Hydrogen Atom
 *
 * OpenAPI spec version: 1.9.2
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.hydrogen.proton.api;

import com.hydrogen.proton.ApiCallback;
import com.hydrogen.proton.ApiResponse;
import com.hydrogen.proton.Configuration;
import com.hydrogen.proton.model.AnnuityCalculatorAccumulationHorizonRequest;
import com.hydrogen.proton.model.AnnuityCalculatorAnnuityAmountRequest;
import com.hydrogen.proton.model.AnnuityCalculatorDecumulationHorizonRequest;
import com.hydrogen.proton.model.AnnuityCalculatorDepositAmountRequest;
import com.hydrogen.proton.model.AnnuityCalculatorInitialBalanceRequest;
import com.hydrogen.proton.model.VariableAnnuityRequest;
import com.hydrogen.proton.ApiClient;
import com.hydrogen.proton.ApiException;
import com.hydrogen.proton.Pair;
import com.hydrogen.proton.ProgressRequestBody;
import com.hydrogen.proton.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnuitiesApi {
    private ApiClient apiClient;

    public AnnuitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnuitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for annuityCalculatorAccumulationHorizon
     * @param annuityCalculatorAccumulationHorizonRequest Request payload for Annuity Calculator - Accumulation Horizon (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorAccumulationHorizonCall(AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annuityCalculatorAccumulationHorizonRequest;

        // create path and map variables
        String localVarPath = "/annuity_calculator/accumulation_horizon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorAccumulationHorizonValidateBeforeCall(AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'annuityCalculatorAccumulationHorizonRequest' is set
        if (annuityCalculatorAccumulationHorizonRequest == null) {
            throw new ApiException("Missing the required parameter 'annuityCalculatorAccumulationHorizonRequest' when calling annuityCalculatorAccumulationHorizon(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorAccumulationHorizonCall(annuityCalculatorAccumulationHorizonRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity Calculator - Accumulation Horizon
     * Calculate the necessary fixed annuity contribution period
     * @param annuityCalculatorAccumulationHorizonRequest Request payload for Annuity Calculator - Accumulation Horizon (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> annuityCalculatorAccumulationHorizon(AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = annuityCalculatorAccumulationHorizonWithHttpInfo(annuityCalculatorAccumulationHorizonRequest);
        return resp.getData();
    }

    /**
     * Annuity Calculator - Accumulation Horizon
     * Calculate the necessary fixed annuity contribution period
     * @param annuityCalculatorAccumulationHorizonRequest Request payload for Annuity Calculator - Accumulation Horizon (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> annuityCalculatorAccumulationHorizonWithHttpInfo(AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorAccumulationHorizonValidateBeforeCall(annuityCalculatorAccumulationHorizonRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity Calculator - Accumulation Horizon (asynchronously)
     * Calculate the necessary fixed annuity contribution period
     * @param annuityCalculatorAccumulationHorizonRequest Request payload for Annuity Calculator - Accumulation Horizon (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorAccumulationHorizonAsync(AnnuityCalculatorAccumulationHorizonRequest annuityCalculatorAccumulationHorizonRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorAccumulationHorizonValidateBeforeCall(annuityCalculatorAccumulationHorizonRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorAnnuityAmount
     * @param annuityCalculatorAnnuityAmountRequest Request payload for Annuity Calculator - Annuity Amount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorAnnuityAmountCall(AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annuityCalculatorAnnuityAmountRequest;

        // create path and map variables
        String localVarPath = "/annuity_calculator/annuity_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorAnnuityAmountValidateBeforeCall(AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'annuityCalculatorAnnuityAmountRequest' is set
        if (annuityCalculatorAnnuityAmountRequest == null) {
            throw new ApiException("Missing the required parameter 'annuityCalculatorAnnuityAmountRequest' when calling annuityCalculatorAnnuityAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorAnnuityAmountCall(annuityCalculatorAnnuityAmountRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity Calculator - Annuity Amount
     * Calculate the achievable fixed annuity amount
     * @param annuityCalculatorAnnuityAmountRequest Request payload for Annuity Calculator - Annuity Amount (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> annuityCalculatorAnnuityAmount(AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = annuityCalculatorAnnuityAmountWithHttpInfo(annuityCalculatorAnnuityAmountRequest);
        return resp.getData();
    }

    /**
     * Annuity Calculator - Annuity Amount
     * Calculate the achievable fixed annuity amount
     * @param annuityCalculatorAnnuityAmountRequest Request payload for Annuity Calculator - Annuity Amount (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> annuityCalculatorAnnuityAmountWithHttpInfo(AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorAnnuityAmountValidateBeforeCall(annuityCalculatorAnnuityAmountRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity Calculator - Annuity Amount (asynchronously)
     * Calculate the achievable fixed annuity amount
     * @param annuityCalculatorAnnuityAmountRequest Request payload for Annuity Calculator - Annuity Amount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorAnnuityAmountAsync(AnnuityCalculatorAnnuityAmountRequest annuityCalculatorAnnuityAmountRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorAnnuityAmountValidateBeforeCall(annuityCalculatorAnnuityAmountRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorDecumulationHorizon
     * @param annuityCalculatorDecumulationHorizonRequest Request payload for Annuity Calculator - Decumulation Horizon (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorDecumulationHorizonCall(AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annuityCalculatorDecumulationHorizonRequest;

        // create path and map variables
        String localVarPath = "/annuity_calculator/decumulation_horizon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorDecumulationHorizonValidateBeforeCall(AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'annuityCalculatorDecumulationHorizonRequest' is set
        if (annuityCalculatorDecumulationHorizonRequest == null) {
            throw new ApiException("Missing the required parameter 'annuityCalculatorDecumulationHorizonRequest' when calling annuityCalculatorDecumulationHorizon(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorDecumulationHorizonCall(annuityCalculatorDecumulationHorizonRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity Calculator - Decumulation Horizon
     * Calculate the achievable fixed annuity payout period
     * @param annuityCalculatorDecumulationHorizonRequest Request payload for Annuity Calculator - Decumulation Horizon (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> annuityCalculatorDecumulationHorizon(AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = annuityCalculatorDecumulationHorizonWithHttpInfo(annuityCalculatorDecumulationHorizonRequest);
        return resp.getData();
    }

    /**
     * Annuity Calculator - Decumulation Horizon
     * Calculate the achievable fixed annuity payout period
     * @param annuityCalculatorDecumulationHorizonRequest Request payload for Annuity Calculator - Decumulation Horizon (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> annuityCalculatorDecumulationHorizonWithHttpInfo(AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorDecumulationHorizonValidateBeforeCall(annuityCalculatorDecumulationHorizonRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity Calculator - Decumulation Horizon (asynchronously)
     * Calculate the achievable fixed annuity payout period
     * @param annuityCalculatorDecumulationHorizonRequest Request payload for Annuity Calculator - Decumulation Horizon (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorDecumulationHorizonAsync(AnnuityCalculatorDecumulationHorizonRequest annuityCalculatorDecumulationHorizonRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorDecumulationHorizonValidateBeforeCall(annuityCalculatorDecumulationHorizonRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorDepositAmount
     * @param annuityCalculatorDepositAmountRequest Request payload for Annuity Calculator - Deposit Amount (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorDepositAmountCall(AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annuityCalculatorDepositAmountRequest;

        // create path and map variables
        String localVarPath = "/annuity_calculator/deposit_amount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorDepositAmountValidateBeforeCall(AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'annuityCalculatorDepositAmountRequest' is set
        if (annuityCalculatorDepositAmountRequest == null) {
            throw new ApiException("Missing the required parameter 'annuityCalculatorDepositAmountRequest' when calling annuityCalculatorDepositAmount(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorDepositAmountCall(annuityCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount for a fixed annuity
     * @param annuityCalculatorDepositAmountRequest Request payload for Annuity Calculator - Deposit Amount (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> annuityCalculatorDepositAmount(AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = annuityCalculatorDepositAmountWithHttpInfo(annuityCalculatorDepositAmountRequest);
        return resp.getData();
    }

    /**
     * Annuity Calculator - Deposit Amount
     * Calculate the necessary periodic deposit amount for a fixed annuity
     * @param annuityCalculatorDepositAmountRequest Request payload for Annuity Calculator - Deposit Amount (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> annuityCalculatorDepositAmountWithHttpInfo(AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorDepositAmountValidateBeforeCall(annuityCalculatorDepositAmountRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity Calculator - Deposit Amount (asynchronously)
     * Calculate the necessary periodic deposit amount for a fixed annuity
     * @param annuityCalculatorDepositAmountRequest Request payload for Annuity Calculator - Deposit Amount (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorDepositAmountAsync(AnnuityCalculatorDepositAmountRequest annuityCalculatorDepositAmountRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorDepositAmountValidateBeforeCall(annuityCalculatorDepositAmountRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for annuityCalculatorInitialBalance
     * @param annuityCalculatorInitialBalanceRequest Request payload for Annuity Calculator - Initial Balance (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorInitialBalanceCall(AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = annuityCalculatorInitialBalanceRequest;

        // create path and map variables
        String localVarPath = "/annuity_calculator/initial_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call annuityCalculatorInitialBalanceValidateBeforeCall(AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'annuityCalculatorInitialBalanceRequest' is set
        if (annuityCalculatorInitialBalanceRequest == null) {
            throw new ApiException("Missing the required parameter 'annuityCalculatorInitialBalanceRequest' when calling annuityCalculatorInitialBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = annuityCalculatorInitialBalanceCall(annuityCalculatorInitialBalanceRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Annuity Calculator - Initial Balance
     * Calculate the necessary initial balance for a fixed annuity
     * @param annuityCalculatorInitialBalanceRequest Request payload for Annuity Calculator - Initial Balance (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> annuityCalculatorInitialBalance(AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = annuityCalculatorInitialBalanceWithHttpInfo(annuityCalculatorInitialBalanceRequest);
        return resp.getData();
    }

    /**
     * Annuity Calculator - Initial Balance
     * Calculate the necessary initial balance for a fixed annuity
     * @param annuityCalculatorInitialBalanceRequest Request payload for Annuity Calculator - Initial Balance (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> annuityCalculatorInitialBalanceWithHttpInfo(AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest) throws ApiException {
        com.squareup.okhttp.Call call = annuityCalculatorInitialBalanceValidateBeforeCall(annuityCalculatorInitialBalanceRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Annuity Calculator - Initial Balance (asynchronously)
     * Calculate the necessary initial balance for a fixed annuity
     * @param annuityCalculatorInitialBalanceRequest Request payload for Annuity Calculator - Initial Balance (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call annuityCalculatorInitialBalanceAsync(AnnuityCalculatorInitialBalanceRequest annuityCalculatorInitialBalanceRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = annuityCalculatorInitialBalanceValidateBeforeCall(annuityCalculatorInitialBalanceRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variableAnnuity
     * @param variableAnnuityRequest Request payload for Variable Annuity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call variableAnnuityCall(VariableAnnuityRequest variableAnnuityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = variableAnnuityRequest;

        // create path and map variables
        String localVarPath = "/variable_annuity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call variableAnnuityValidateBeforeCall(VariableAnnuityRequest variableAnnuityRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'variableAnnuityRequest' is set
        if (variableAnnuityRequest == null) {
            throw new ApiException("Missing the required parameter 'variableAnnuityRequest' when calling variableAnnuity(Async)");
        }
        

        com.squareup.okhttp.Call call = variableAnnuityCall(variableAnnuityRequest, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Variable Annuity
     * Project the behavior of a variable annuity over time
     * @param variableAnnuityRequest Request payload for Variable Annuity (required)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, Object> variableAnnuity(VariableAnnuityRequest variableAnnuityRequest) throws ApiException {
        ApiResponse<Map<String, Object>> resp = variableAnnuityWithHttpInfo(variableAnnuityRequest);
        return resp.getData();
    }

    /**
     * Variable Annuity
     * Project the behavior of a variable annuity over time
     * @param variableAnnuityRequest Request payload for Variable Annuity (required)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, Object>> variableAnnuityWithHttpInfo(VariableAnnuityRequest variableAnnuityRequest) throws ApiException {
        com.squareup.okhttp.Call call = variableAnnuityValidateBeforeCall(variableAnnuityRequest, null, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Variable Annuity (asynchronously)
     * Project the behavior of a variable annuity over time
     * @param variableAnnuityRequest Request payload for Variable Annuity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call variableAnnuityAsync(VariableAnnuityRequest variableAnnuityRequest, final ApiCallback<Map<String, Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = variableAnnuityValidateBeforeCall(variableAnnuityRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
