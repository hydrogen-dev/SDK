/*
 * Hydrogen Atom API
 * The Hydrogen Atom API
 *
 * OpenAPI spec version: 1.0.1
 * Contact: info@hydrogenplatform.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * RebalanceSignal
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-09-16T14:10:50.140-04:00")
public class RebalanceSignal {
  @SerializedName("date")
  private String date = null;

  @SerializedName("ticker")
  private String ticker = null;

  /**
   * The trade action, either BUY or SELL.
   */
  @JsonAdapter(SignalEnum.Adapter.class)
  public enum SignalEnum {
    SELL("SELL"),
    
    BUY("BUY");

    private String value;

    SignalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignalEnum fromValue(String text) {
      for (SignalEnum b : SignalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignalEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignalEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signal")
  private SignalEnum signal = null;

  @SerializedName("amount")
  private BigDecimal amount = null;

  @SerializedName("type")
  private Integer type = null;

  public RebalanceSignal date(String date) {
    this.date = date;
    return this;
  }

   /**
   * The date of the given rebalancing signal.
   * @return date
  **/
  @ApiModelProperty(required = true, value = "The date of the given rebalancing signal.")
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }

  public RebalanceSignal ticker(String ticker) {
    this.ticker = ticker;
    return this;
  }

   /**
   * The unique identifier of a given security.
   * @return ticker
  **/
  @ApiModelProperty(required = true, value = "The unique identifier of a given security.")
  public String getTicker() {
    return ticker;
  }

  public void setTicker(String ticker) {
    this.ticker = ticker;
  }

  public RebalanceSignal signal(SignalEnum signal) {
    this.signal = signal;
    return this;
  }

   /**
   * The trade action, either BUY or SELL.
   * @return signal
  **/
  @ApiModelProperty(required = true, value = "The trade action, either BUY or SELL.")
  public SignalEnum getSignal() {
    return signal;
  }

  public void setSignal(SignalEnum signal) {
    this.signal = signal;
  }

  public RebalanceSignal amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * The amount of the trade as a percentage. For example, amount &#x3D; 0.02 translates to selling 2% of a given ticker.
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "The amount of the trade as a percentage. For example, amount = 0.02 translates to selling 2% of a given ticker.")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public RebalanceSignal type(Integer type) {
    this.type = type;
    return this;
  }

   /**
   * The type of trade signal. 1 &#x3D; period-based, 2 &#x3D; drift-based, and 4 &#x3D; downside protection.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of trade signal. 1 = period-based, 2 = drift-based, and 4 = downside protection.")
  public Integer getType() {
    return type;
  }

  public void setType(Integer type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RebalanceSignal rebalanceSignal = (RebalanceSignal) o;
    return Objects.equals(this.date, rebalanceSignal.date) &&
        Objects.equals(this.ticker, rebalanceSignal.ticker) &&
        Objects.equals(this.signal, rebalanceSignal.signal) &&
        Objects.equals(this.amount, rebalanceSignal.amount) &&
        Objects.equals(this.type, rebalanceSignal.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, ticker, signal, amount, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RebalanceSignal {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    signal: ").append(toIndentedString(signal)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

